{"ast":null,"code":"/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nexport function isEmpty() {\n  return function (source) {\n    return source.lift(new IsEmptyOperator());\n  };\n}\n\nvar IsEmptyOperator = /*@__PURE__*/function () {\n  function IsEmptyOperator() {}\n\n  IsEmptyOperator.prototype.call = function (observer, source) {\n    return source.subscribe(new IsEmptySubscriber(observer));\n  };\n\n  return IsEmptyOperator;\n}();\n\nvar IsEmptySubscriber = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(IsEmptySubscriber, _super);\n\n  function IsEmptySubscriber(destination) {\n    return _super.call(this, destination) || this;\n  }\n\n  IsEmptySubscriber.prototype.notifyComplete = function (isEmpty) {\n    var destination = this.destination;\n    destination.next(isEmpty);\n    destination.complete();\n  };\n\n  IsEmptySubscriber.prototype._next = function (value) {\n    this.notifyComplete(false);\n  };\n\n  IsEmptySubscriber.prototype._complete = function () {\n    this.notifyComplete(true);\n  };\n\n  return IsEmptySubscriber;\n}(Subscriber);","map":{"version":3,"mappings":";AACA,OAAO,KAAEA,OAAT,MAAqB,OAArB;AAgEA,SAAMC,UAAN,QAAuB,eAAvB;OACE,SAAOC,OAAP,GAAQ;AACT;AAAA;AAAA;AAED;;IAAAC;AAIA,WAACA,eAAD,GAAC,CAHC;;iBACS,WAAOC,OAAc,oBAAkBC,MAAlB,EAA6B;AAC1D;AACH;;AAJA,SAICF,eAJD;AAWA,CAXA;;IAWgCG,2CAAeC,MAAf,EAAe;AAC7CP,uCAAYO,MAAZ;;6BACEC,aAAiB;AAClB;AAEO;;mBACA,WAAmBC,iBAAY;AAErC,mBAAY,GAAK,gBAAjB;AACAD,eAAW,CAACE,IAAZ,CAAYR,OAAZ;AACDM;AAES;;mBACH,WAAeG,QAAO;AAC5B;AAES;;mBACH,WAAmBC,YAAE;AAC3B;AACH;;AAnBgC;CAAA","names":["tslib_1","Subscriber","isEmpty","IsEmptyOperator","call","source","IsEmptySubscriber","_super","destination","notifyComplete","next","_next","_complete"],"sources":["D:\\Documents\\EMA\\Mines A3\\NoSQL\\ReseauAchats\\reseau_achats\\node_modules\\rxjs\\src\\internal\\operators\\isEmpty.ts"],"sourcesContent":["import { Operator } from '../Operator';\r\nimport { Subscriber } from '../Subscriber';\r\nimport { Observable } from '../Observable';\r\nimport { OperatorFunction } from '../types';\r\n\r\n/**\r\n * Emits false if the input observable emits any values, or emits true if the\r\n * input observable completes without emitting any values.\r\n *\r\n * <span class=\"informal\">Tells whether any values are emitted by an observable</span>\r\n *\r\n * ![](isEmpty.png)\r\n *\r\n * `isEmpty` transforms an Observable that emits values into an Observable that\r\n * emits a single boolean value representing whether or not any values were\r\n * emitted by the source Observable. As soon as the source Observable emits a\r\n * value, `isEmpty` will emit a `false` and complete.  If the source Observable\r\n * completes having not emitted anything, `isEmpty` will emit a `true` and\r\n * complete.\r\n *\r\n * A similar effect could be achieved with {@link count}, but `isEmpty` can emit\r\n * a `false` value sooner.\r\n *\r\n * ## Examples\r\n *\r\n * Emit `false` for a non-empty Observable\r\n * ```javascript\r\n * import { Subject } from 'rxjs';\r\n * import { isEmpty } from 'rxjs/operators';\r\n *\r\n * const source = new Subject<string>();\r\n * const result = source.pipe(isEmpty());\r\n * source.subscribe(x => console.log(x));\r\n * result.subscribe(x => console.log(x));\r\n * source.next('a');\r\n * source.next('b');\r\n * source.next('c');\r\n * source.complete();\r\n *\r\n * // Results in:\r\n * // a\r\n * // false\r\n * // b\r\n * // c\r\n * ```\r\n *\r\n * Emit `true` for an empty Observable\r\n * ```javascript\r\n * import { EMPTY } from 'rxjs';\r\n * import { isEmpty } from 'rxjs/operators';\r\n *\r\n * const result = EMPTY.pipe(isEmpty());\r\n * result.subscribe(x => console.log(x));\r\n * // Results in:\r\n * // true\r\n * ```\r\n *\r\n * @see {@link count}\r\n * @see {@link EMPTY}\r\n *\r\n * @return {OperatorFunction<T, boolean>} An Observable of a boolean value indicating whether observable was empty or not\r\n * @method isEmpty\r\n * @owner Observable\r\n */\r\n\r\nexport function isEmpty<T>(): OperatorFunction<T, boolean> {\r\n  return (source: Observable<T>) => source.lift(new IsEmptyOperator());\r\n}\r\n\r\nclass IsEmptyOperator implements Operator<any, boolean> {\r\n  call (observer: Subscriber<boolean>, source: any): any {\r\n    return source.subscribe(new IsEmptySubscriber(observer));\r\n  }\r\n}\r\n\r\n/**\r\n * We need this JSDoc comment for affecting ESDoc.\r\n * @ignore\r\n * @extends {Ignored}\r\n */\r\nclass IsEmptySubscriber extends Subscriber<any> {\r\n  constructor(destination: Subscriber<boolean>) {\r\n    super(destination);\r\n  }\r\n\r\n  private notifyComplete(isEmpty: boolean): void {\r\n    const destination = this.destination;\r\n\r\n    destination.next(isEmpty);\r\n    destination.complete();\r\n  }\r\n\r\n  protected _next(value: boolean) {\r\n    this.notifyComplete(false);\r\n  }\r\n\r\n  protected _complete() {\r\n    this.notifyComplete(true);\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}