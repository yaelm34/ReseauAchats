{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.driver = driver;\nObject.defineProperty(exports, \"Neo4jError\", {\n  enumerable: true,\n  get: function get() {\n    return _neo4jDriverCore.Neo4jError;\n  }\n});\nObject.defineProperty(exports, \"error\", {\n  enumerable: true,\n  get: function get() {\n    return _neo4jDriverCore.error;\n  }\n});\nObject.defineProperty(exports, \"int\", {\n  enumerable: true,\n  get: function get() {\n    return _neo4jDriverCore[\"int\"];\n  }\n});\nObject.defineProperty(exports, \"isInt\", {\n  enumerable: true,\n  get: function get() {\n    return _neo4jDriverCore.isInt;\n  }\n});\nObject.defineProperty(exports, \"isPoint\", {\n  enumerable: true,\n  get: function get() {\n    return _neo4jDriverCore.isPoint;\n  }\n});\nObject.defineProperty(exports, \"isDate\", {\n  enumerable: true,\n  get: function get() {\n    return _neo4jDriverCore.isDate;\n  }\n});\nObject.defineProperty(exports, \"isDateTime\", {\n  enumerable: true,\n  get: function get() {\n    return _neo4jDriverCore.isDateTime;\n  }\n});\nObject.defineProperty(exports, \"isDuration\", {\n  enumerable: true,\n  get: function get() {\n    return _neo4jDriverCore.isDuration;\n  }\n});\nObject.defineProperty(exports, \"isLocalDateTime\", {\n  enumerable: true,\n  get: function get() {\n    return _neo4jDriverCore.isLocalDateTime;\n  }\n});\nObject.defineProperty(exports, \"isLocalTime\", {\n  enumerable: true,\n  get: function get() {\n    return _neo4jDriverCore.isLocalTime;\n  }\n});\nObject.defineProperty(exports, \"isTime\", {\n  enumerable: true,\n  get: function get() {\n    return _neo4jDriverCore.isTime;\n  }\n});\nObject.defineProperty(exports, \"auth\", {\n  enumerable: true,\n  get: function get() {\n    return _neo4jDriverCore.auth;\n  }\n});\nexports[\"default\"] = exports.temporal = exports.spatial = exports.session = exports.types = exports.logging = exports.integer = void 0;\n\nvar _driver = require(\"./driver\");\n\nvar _version = _interopRequireDefault(require(\"./version\"));\n\nvar _neo4jDriverCore = require(\"neo4j-driver-core\");\n\nvar _neo4jDriverBoltConnection = require(\"neo4j-driver-bolt-connection\");\n/**\n * Copyright (c) \"Neo4j\"\n * Neo4j Sweden AB [http://neo4j.com]\n *\n * This file is part of Neo4j.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nvar _internal$util = _neo4jDriverCore.internal.util,\n    ENCRYPTION_ON = _internal$util.ENCRYPTION_ON,\n    ENCRYPTION_OFF = _internal$util.ENCRYPTION_OFF,\n    assertString = _internal$util.assertString,\n    isEmptyObjectOrNull = _internal$util.isEmptyObjectOrNull,\n    ServerAddress = _neo4jDriverCore.internal.serverAddress.ServerAddress,\n    urlUtil = _neo4jDriverCore.internal.urlUtil;\n/**\n * Construct a new Neo4j Driver. This is your main entry point for this\n * library.\n *\n * ## Configuration\n *\n * This function optionally takes a configuration argument. Available configuration\n * options are as follows:\n *\n *     {\n *       // Encryption level: ENCRYPTION_ON or ENCRYPTION_OFF.\n *       encrypted: ENCRYPTION_ON|ENCRYPTION_OFF\n *\n *       // Trust strategy to use if encryption is enabled. There is no mode to disable\n *       // trust other than disabling encryption altogether. The reason for\n *       // this is that if you don't know who you are talking to, it is easy for an\n *       // attacker to hijack your encrypted connection, rendering encryption pointless.\n *       //\n *       // TRUST_SYSTEM_CA_SIGNED_CERTIFICATES is the default choice. For NodeJS environments, this\n *       // means that you trust whatever certificates are in the default trusted certificate\n *       // store of the underlying system. For Browser environments, the trusted certificate\n *       // store is usually managed by the browser. Refer to your system or browser documentation\n *       // if you want to explicitly add a certificate as trusted.\n *       //\n *       // TRUST_CUSTOM_CA_SIGNED_CERTIFICATES is another option for trust verification -\n *       // whenever we establish an encrypted connection, we ensure the host is using\n *       // an encryption certificate that is in, or is signed by, a certificate given\n *       // as trusted through configuration. This option is only available for NodeJS environments.\n *       //\n *       // TRUST_ALL_CERTIFICATES means that you trust everything without any verifications\n *       // steps carried out.  This option is only available for NodeJS environments and should not\n *       // be used on production systems.\n *       trust: \"TRUST_SYSTEM_CA_SIGNED_CERTIFICATES\" | \"TRUST_CUSTOM_CA_SIGNED_CERTIFICATES\" |\n *       \"TRUST_ALL_CERTIFICATES\",\n *\n *       // List of one or more paths to trusted encryption certificates. This only\n *       // works in the NodeJS bundle, and only matters if you use \"TRUST_CUSTOM_CA_SIGNED_CERTIFICATES\".\n *       // The certificate files should be in regular X.509 PEM format.\n *       // For instance, ['./trusted.pem']\n *       trustedCertificates: [],\n *\n *       // The maximum total number of connections allowed to be managed by the connection pool, per host.\n *       // This includes both in-use and idle connections. No maximum connection pool size is imposed\n *       // by default.\n *       maxConnectionPoolSize: 100,\n *\n *       // The maximum allowed lifetime for a pooled connection in milliseconds. Pooled connections older than this\n *       // threshold will be closed and removed from the pool. Such discarding happens during connection acquisition\n *       // so that new session is never backed by an old connection. Setting this option to a low value will cause\n *       // a high connection churn and might result in a performance hit. It is recommended to set maximum lifetime\n *       // to a slightly smaller value than the one configured in network equipment (load balancer, proxy, firewall,\n *       // etc. can also limit maximum connection lifetime). No maximum lifetime limit is imposed by default. Zero\n *       // and negative values result in lifetime not being checked.\n *       maxConnectionLifetime: 60 * 60 * 1000, // 1 hour\n *\n *       // The maximum amount of time to wait to acquire a connection from the pool (to either create a new\n *       // connection or borrow an existing one.\n *       connectionAcquisitionTimeout: 60000, // 1 minute\n *\n *       // Specify the maximum time in milliseconds transactions are allowed to retry via\n *       // `Session#readTransaction()` and `Session#writeTransaction()` functions.\n *       // These functions will retry the given unit of work on `ServiceUnavailable`, `SessionExpired` and transient\n *       // errors with exponential backoff using initial delay of 1 second.\n *       // Default value is 30000 which is 30 seconds.\n *       maxTransactionRetryTime: 30000, // 30 seconds\n *\n *       // Specify socket connection timeout in milliseconds. Numeric values are expected. Negative and zero values\n *       // result in no timeout being applied. Connection establishment will be then bound by the timeout configured\n *       // on the operating system level. Default value is 30000, which is 30 seconds.\n *       connectionTimeout: 30000, // 30 seconds\n *\n *       // Make this driver always return native JavaScript numbers for integer values, instead of the\n *       // dedicated {@link Integer} class. Values that do not fit in native number bit range will be represented as\n *       // `Number.NEGATIVE_INFINITY` or `Number.POSITIVE_INFINITY`.\n *       // **Warning:** ResultSummary It is not always safe to enable this setting when JavaScript applications are not the only ones\n *       // interacting with the database. Stored numbers might in such case be not representable by native\n *       // {@link Number} type and thus driver will return lossy values. This might also happen when data was\n *       // initially imported using neo4j import tool and contained numbers larger than\n *       // `Number.MAX_SAFE_INTEGER`. Driver will then return positive infinity, which is lossy.\n *       // Default value for this option is `false` because native JavaScript numbers might result\n *       // in loss of precision in the general case.\n *       disableLosslessIntegers: false,\n *\n *       // Make this driver always return native Javascript {@link BigInt} for integer values, instead of the dedicated {@link Integer} class or {@link Number}.\n *       //\n *       // Default value for this option is `false` for backwards compatibility.\n *       //\n *       // **Warning:** `BigInt` doesn't implement the method `toJSON`. In maner of serialize it as `json`, It's needed to add a custom implementation of the `toJSON` on the\n *       // `BigInt.prototype` {@see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt#use_within_json}\n *       useBigInt: false,\n *\n *       // Specify the logging configuration for the driver. Object should have two properties `level` and `logger`.\n *       //\n *       // Property `level` represents the logging level which should be one of: 'error', 'warn', 'info' or 'debug'. This property is optional and\n *       // its default value is 'info'. Levels have priorities: 'error': 0, 'warn': 1, 'info': 2, 'debug': 3. Enabling a certain level also enables all\n *       // levels with lower priority. For example: 'error', 'warn' and 'info' will be logged when 'info' level is configured.\n *       //\n *       // Property `logger` represents the logging function which will be invoked for every log call with an acceptable level. The function should\n *       // take two string arguments `level` and `message`. The function should not execute any blocking or long-running operations\n *       // because it is often executed on a hot path.\n *       //\n *       // No logging is done by default. See `neo4j.logging` object that contains predefined logging implementations.\n *       logging: {\n *         level: 'info',\n *         logger: (level, message) => console.log(level + ' ' + message)\n *       },\n *\n *       // Specify a custom server address resolver function used by the routing driver to resolve the initial address used to create the driver.\n *       // Such resolution happens:\n *       //  * during the very first rediscovery when driver is created\n *       //  * when all the known routers from the current routing table have failed and driver needs to fallback to the initial address\n *       //\n *       // In NodeJS environment driver defaults to performing a DNS resolution of the initial address using 'dns' module.\n *       // In browser environment driver uses the initial address as-is.\n *       // Value should be a function that takes a single string argument - the initial address. It should return an array of new addresses.\n *       // Address is a string of shape '<host>:<port>'. Provided function can return either a Promise resolved with an array of addresses\n *       // or array of addresses directly.\n *       resolver: function(address) {\n *         return ['127.0.0.1:8888', 'fallback.db.com:7687'];\n *       },\n *\n *      // Optionally override the default user agent name.\n *       userAgent: USER_AGENT\n *     }\n *\n * @param {string} url The URL for the Neo4j database, for instance \"neo4j://localhost\" and/or \"bolt://localhost\"\n * @param {Map<string,string>} authToken Authentication credentials. See {@link auth} for helpers.\n * @param {Object} config Configuration object. See the configuration section above for details.\n * @returns {Driver}\n */\n\nfunction driver(url, authToken) {\n  var config = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  assertString(url, 'Bolt URL');\n  var parsedUrl = urlUtil.parseDatabaseUrl(url); // Determine entryption/trust options from the URL.\n\n  var routing = false;\n  var encrypted = false;\n  var trust;\n\n  switch (parsedUrl.scheme) {\n    case 'bolt':\n      break;\n\n    case 'bolt+s':\n      encrypted = true;\n      trust = 'TRUST_SYSTEM_CA_SIGNED_CERTIFICATES';\n      break;\n\n    case 'bolt+ssc':\n      encrypted = true;\n      trust = 'TRUST_ALL_CERTIFICATES';\n      break;\n\n    case 'neo4j':\n      routing = true;\n      break;\n\n    case 'neo4j+s':\n      encrypted = true;\n      trust = 'TRUST_SYSTEM_CA_SIGNED_CERTIFICATES';\n      routing = true;\n      break;\n\n    case 'neo4j+ssc':\n      encrypted = true;\n      trust = 'TRUST_ALL_CERTIFICATES';\n      routing = true;\n      break;\n\n    default:\n      throw new Error(\"Unknown scheme: \".concat(parsedUrl.scheme));\n  } // Encryption enabled on URL, propagate trust to the config.\n\n\n  if (encrypted) {\n    // Check for configuration conflict between URL and config.\n    if ('encrypted' in config || 'trust' in config) {\n      throw new Error('Encryption/trust can only be configured either through URL or config, not both');\n    }\n\n    config.encrypted = ENCRYPTION_ON;\n    config.trust = trust;\n  } // Sanitize authority token. Nicer error from server when a scheme is set.\n\n\n  authToken = authToken || {};\n  authToken.scheme = authToken.scheme || 'none'; // Use default user agent or user agent specified by user.\n\n  config.userAgent = config.userAgent || USER_AGENT;\n  var address = ServerAddress.fromUrl(parsedUrl.hostAndPort);\n  var meta = {\n    address: address,\n    typename: routing ? 'Routing' : 'Direct',\n    routing: routing\n  };\n  return new _driver.Driver(meta, config, createConnectionProviderFunction());\n\n  function createConnectionProviderFunction() {\n    if (routing) {\n      return function (id, config, log, hostNameResolver) {\n        return new _neo4jDriverBoltConnection.RoutingConnectionProvider({\n          id: id,\n          config: config,\n          log: log,\n          hostNameResolver: hostNameResolver,\n          authToken: authToken,\n          address: address,\n          userAgent: config.userAgent,\n          routingContext: parsedUrl.query\n        });\n      };\n    } else {\n      if (!isEmptyObjectOrNull(parsedUrl.query)) {\n        throw new Error(\"Parameters are not supported with none routed scheme. Given URL: '\".concat(url, \"'\"));\n      }\n\n      return function (id, config, log) {\n        return new _neo4jDriverBoltConnection.DirectConnectionProvider({\n          id: id,\n          config: config,\n          log: log,\n          authToken: authToken,\n          address: address,\n          userAgent: config.userAgent\n        });\n      };\n    }\n  }\n}\n\nvar USER_AGENT = 'neo4j-javascript/' + _version[\"default\"];\n/**\n * Object containing predefined logging configurations. These are expected to be used as values of the driver config's `logging` property.\n * @property {function(level: ?string): object} console the function to create a logging config that prints all messages to `console.log` with\n * timestamp, level and message. It takes an optional `level` parameter which represents the maximum log level to be logged. Default value is 'info'.\n */\n\nvar logging = {\n  console: function (_console) {\n    function console(_x) {\n      return _console.apply(this, arguments);\n    }\n\n    console.toString = function () {\n      return _console.toString();\n    };\n\n    return console;\n  }(function (level) {\n    return {\n      level: level,\n      logger: function logger(level, message) {\n        return console.log(\"\".concat(global.Date.now(), \" \").concat(level.toUpperCase(), \" \").concat(message));\n      }\n    };\n  })\n};\n/**\n * Object containing constructors for all neo4j types.\n */\n\nexports.logging = logging;\nvar types = {\n  Node: _neo4jDriverCore.Node,\n  Relationship: _neo4jDriverCore.Relationship,\n  UnboundRelationship: _neo4jDriverCore.UnboundRelationship,\n  PathSegment: _neo4jDriverCore.PathSegment,\n  Path: _neo4jDriverCore.Path,\n  Result: _neo4jDriverCore.Result,\n  ResultSummary: _neo4jDriverCore.ResultSummary,\n  Record: _neo4jDriverCore.Record,\n  Point: _neo4jDriverCore.Point,\n  Date: _neo4jDriverCore.Date,\n  DateTime: _neo4jDriverCore.DateTime,\n  Duration: _neo4jDriverCore.Duration,\n  LocalDateTime: _neo4jDriverCore.LocalDateTime,\n  LocalTime: _neo4jDriverCore.LocalTime,\n  Time: _neo4jDriverCore.Time,\n  Integer: _neo4jDriverCore.Integer\n};\n/**\n * Object containing string constants representing session access modes.\n */\n\nexports.types = types;\nvar session = {\n  READ: _driver.READ,\n  WRITE: _driver.WRITE\n};\n/**\n * Object containing functions to work with {@link Integer} objects.\n */\n\nexports.session = session;\nvar integer = {\n  toNumber: _neo4jDriverCore.toNumber,\n  toString: _neo4jDriverCore.toString,\n  inSafeRange: _neo4jDriverCore.inSafeRange\n};\n/**\n * Object containing functions to work with spatial types, like {@link Point}.\n */\n\nexports.integer = integer;\nvar spatial = {\n  isPoint: _neo4jDriverCore.isPoint\n};\n/**\n * Object containing functions to work with temporal types, like {@link Time} or {@link Duration}.\n */\n\nexports.spatial = spatial;\nvar temporal = {\n  isDuration: _neo4jDriverCore.isDuration,\n  isLocalTime: _neo4jDriverCore.isLocalTime,\n  isTime: _neo4jDriverCore.isTime,\n  isDate: _neo4jDriverCore.isDate,\n  isLocalDateTime: _neo4jDriverCore.isLocalDateTime,\n  isDateTime: _neo4jDriverCore.isDateTime\n};\n/**\n * @private\n */\n\nexports.temporal = temporal;\nvar forExport = {\n  driver: driver,\n  \"int\": _neo4jDriverCore[\"int\"],\n  isInt: _neo4jDriverCore.isInt,\n  isPoint: _neo4jDriverCore.isPoint,\n  isDuration: _neo4jDriverCore.isDuration,\n  isLocalTime: _neo4jDriverCore.isLocalTime,\n  isTime: _neo4jDriverCore.isTime,\n  isDate: _neo4jDriverCore.isDate,\n  isLocalDateTime: _neo4jDriverCore.isLocalDateTime,\n  isDateTime: _neo4jDriverCore.isDateTime,\n  integer: integer,\n  Neo4jError: _neo4jDriverCore.Neo4jError,\n  auth: _neo4jDriverCore.auth,\n  logging: logging,\n  types: types,\n  session: session,\n  error: _neo4jDriverCore.error,\n  spatial: spatial,\n  temporal: temporal\n};\nvar _default = forExport;\nexports[\"default\"] = _default;","map":{"version":3,"sources":["D:/Documents/EMA/Mines A3/NoSQL/ReseauAchats/reseau_achats/node_modules/neo4j-driver/lib/index.js"],"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","driver","enumerable","get","_neo4jDriverCore","Neo4jError","error","isInt","isPoint","isDate","isDateTime","isDuration","isLocalDateTime","isLocalTime","isTime","auth","temporal","spatial","session","types","logging","integer","_driver","_version","_neo4jDriverBoltConnection","_internal$util","internal","util","ENCRYPTION_ON","ENCRYPTION_OFF","assertString","isEmptyObjectOrNull","ServerAddress","serverAddress","urlUtil","url","authToken","config","arguments","length","undefined","parsedUrl","parseDatabaseUrl","routing","encrypted","trust","scheme","Error","concat","userAgent","USER_AGENT","address","fromUrl","hostAndPort","meta","typename","Driver","createConnectionProviderFunction","id","log","hostNameResolver","RoutingConnectionProvider","routingContext","query","DirectConnectionProvider","console","_console","_x","apply","toString","level","logger","message","global","Date","now","toUpperCase","Node","Relationship","UnboundRelationship","PathSegment","Path","Result","ResultSummary","Record","Point","DateTime","Duration","LocalDateTime","LocalTime","Time","Integer","READ","WRITE","toNumber","inSafeRange","forExport","_default"],"mappings":"AAAA;;AAEA,IAAIA,sBAAsB,GAAGC,OAAO,CAAC,8CAAD,CAApC;;AAEAC,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,MAAR,GAAiBA,MAAjB;AACAJ,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CG,EAAAA,UAAU,EAAE,IAD+B;AAE3CC,EAAAA,GAAG,EAAE,SAASA,GAAT,GAAe;AAClB,WAAOC,gBAAgB,CAACC,UAAxB;AACD;AAJ0C,CAA7C;AAMAR,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,OAA/B,EAAwC;AACtCG,EAAAA,UAAU,EAAE,IAD0B;AAEtCC,EAAAA,GAAG,EAAE,SAASA,GAAT,GAAe;AAClB,WAAOC,gBAAgB,CAACE,KAAxB;AACD;AAJqC,CAAxC;AAMAT,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,KAA/B,EAAsC;AACpCG,EAAAA,UAAU,EAAE,IADwB;AAEpCC,EAAAA,GAAG,EAAE,SAASA,GAAT,GAAe;AAClB,WAAOC,gBAAgB,CAAC,KAAD,CAAvB;AACD;AAJmC,CAAtC;AAMAP,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,OAA/B,EAAwC;AACtCG,EAAAA,UAAU,EAAE,IAD0B;AAEtCC,EAAAA,GAAG,EAAE,SAASA,GAAT,GAAe;AAClB,WAAOC,gBAAgB,CAACG,KAAxB;AACD;AAJqC,CAAxC;AAMAV,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,SAA/B,EAA0C;AACxCG,EAAAA,UAAU,EAAE,IAD4B;AAExCC,EAAAA,GAAG,EAAE,SAASA,GAAT,GAAe;AAClB,WAAOC,gBAAgB,CAACI,OAAxB;AACD;AAJuC,CAA1C;AAMAX,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,QAA/B,EAAyC;AACvCG,EAAAA,UAAU,EAAE,IAD2B;AAEvCC,EAAAA,GAAG,EAAE,SAASA,GAAT,GAAe;AAClB,WAAOC,gBAAgB,CAACK,MAAxB;AACD;AAJsC,CAAzC;AAMAZ,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CG,EAAAA,UAAU,EAAE,IAD+B;AAE3CC,EAAAA,GAAG,EAAE,SAASA,GAAT,GAAe;AAClB,WAAOC,gBAAgB,CAACM,UAAxB;AACD;AAJ0C,CAA7C;AAMAb,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CG,EAAAA,UAAU,EAAE,IAD+B;AAE3CC,EAAAA,GAAG,EAAE,SAASA,GAAT,GAAe;AAClB,WAAOC,gBAAgB,CAACO,UAAxB;AACD;AAJ0C,CAA7C;AAMAd,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,iBAA/B,EAAkD;AAChDG,EAAAA,UAAU,EAAE,IADoC;AAEhDC,EAAAA,GAAG,EAAE,SAASA,GAAT,GAAe;AAClB,WAAOC,gBAAgB,CAACQ,eAAxB;AACD;AAJ+C,CAAlD;AAMAf,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,aAA/B,EAA8C;AAC5CG,EAAAA,UAAU,EAAE,IADgC;AAE5CC,EAAAA,GAAG,EAAE,SAASA,GAAT,GAAe;AAClB,WAAOC,gBAAgB,CAACS,WAAxB;AACD;AAJ2C,CAA9C;AAMAhB,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,QAA/B,EAAyC;AACvCG,EAAAA,UAAU,EAAE,IAD2B;AAEvCC,EAAAA,GAAG,EAAE,SAASA,GAAT,GAAe;AAClB,WAAOC,gBAAgB,CAACU,MAAxB;AACD;AAJsC,CAAzC;AAMAjB,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,MAA/B,EAAuC;AACrCG,EAAAA,UAAU,EAAE,IADyB;AAErCC,EAAAA,GAAG,EAAE,SAASA,GAAT,GAAe;AAClB,WAAOC,gBAAgB,CAACW,IAAxB;AACD;AAJoC,CAAvC;AAMAhB,OAAO,CAAC,SAAD,CAAP,GAAqBA,OAAO,CAACiB,QAAR,GAAmBjB,OAAO,CAACkB,OAAR,GAAkBlB,OAAO,CAACmB,OAAR,GAAkBnB,OAAO,CAACoB,KAAR,GAAgBpB,OAAO,CAACqB,OAAR,GAAkBrB,OAAO,CAACsB,OAAR,GAAkB,KAAK,CAArI;;AAEA,IAAIC,OAAO,GAAG1B,OAAO,CAAC,UAAD,CAArB;;AAEA,IAAI2B,QAAQ,GAAG5B,sBAAsB,CAACC,OAAO,CAAC,WAAD,CAAR,CAArC;;AAEA,IAAIQ,gBAAgB,GAAGR,OAAO,CAAC,mBAAD,CAA9B;;AAEA,IAAI4B,0BAA0B,GAAG5B,OAAO,CAAC,8BAAD,CAAxC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,IAAI6B,cAAc,GAAGrB,gBAAgB,CAACsB,QAAjB,CAA0BC,IAA/C;AAAA,IACIC,aAAa,GAAGH,cAAc,CAACG,aADnC;AAAA,IAEIC,cAAc,GAAGJ,cAAc,CAACI,cAFpC;AAAA,IAGIC,YAAY,GAAGL,cAAc,CAACK,YAHlC;AAAA,IAIIC,mBAAmB,GAAGN,cAAc,CAACM,mBAJzC;AAAA,IAKIC,aAAa,GAAG5B,gBAAgB,CAACsB,QAAjB,CAA0BO,aAA1B,CAAwCD,aAL5D;AAAA,IAMIE,OAAO,GAAG9B,gBAAgB,CAACsB,QAAjB,CAA0BQ,OANxjC,MAAT,CAAgBkC,GAAhB,EAAqBC,SAArB,EAAgC;AAC9B,MAAIC,MAAM,GAAGC,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBE,SAAzC,GAAqDF,SAAS,CAAC,CAAD,CAA9D,GAAoE,EAAjF;AACAR,EAAAA,YAAY,CAACK,GAAD,EAAM,UAAN,CAAZ;AACA,MAAIM,SAAS,GAAGP,OAAO,CAACQ,gBAAR,CAAyBP,GAAzB,CAAhB,CAH8B,CAGiB;;AAE/C,MAAIQ,OAAO,GAAG,KAAd;AACA,MAAIC,SAAS,GAAG,KAAhB;AACA,MAAIC,KAAJ;;AAEA,UAAQJ,SAAS,CAACK,MAAlB;AACE,SAAK,MAAL;AACE;;AAEF,SAAK,QAAL;AACEF,MAAAA,SAAS,GAAG,IAAZ;AACAC,MAAAA,KAAK,GAAG,qCAAR;AACA;;AAEF,SAAK,UAAL;AACED,MAAAA,SAAS,GAAG,IAAZ;AACAC,MAAAA,KAAK,GAAG,wBAAR;AACA;;AAEF,SAAK,OAAL;AACEF,MAAAA,OAAO,GAAG,IAAV;AACA;;AAEF,SAAK,SAAL;AACEC,MAAAA,SAAS,GAAG,IAAZ;AACAC,MAAAA,KAAK,GAAG,qCAAR;AACAF,MAAAA,OAAO,GAAG,IAAV;AACA;;AAEF,SAAK,WAAL;AACEC,MAAAA,SAAS,GAAG,IAAZ;AACAC,MAAAA,KAAK,GAAG,wBAAR;AACAF,MAAAA,OAAO,GAAG,IAAV;AACA;;AAEF;AACE,YAAM,IAAII,KAAJ,CAAU,mBAAmBC,MAAnB,CAA0BP,SAAS,CAACK,MAApC,CAAV,CAAN;AA/BJ,GAT8B,CAyC5B;;;AAGF,MAAIF,SAAJ,EAAe;AACb;AACA,QAAI,eAAeP,MAAf,IAAyB,WAAWA,MAAxC,EAAgD;AAC9C,YAAM,IAAIU,KAAJ,CAAU,gFAAV,CAAN;AACD;;AAEDV,IAAAA,MAAM,CAACO,SAAP,GAAmBhB,aAAnB;AACAS,IAAAA,MAAM,CAACQ,KAAP,GAAeA,KAAf;AACD,GApD6B,CAoD5B;;;AAGFT,EAAAA,SAAS,GAAGA,SAAS,IAAI,EAAzB;AACAA,EAAAA,SAAS,CAACU,MAAV,GAAmBV,SAAS,CAACU,MAAV,IAAoB,MAAvC,CAxD8B,CAwDiB;;AAE/CT,EAAAA,MAAM,CAACY,SAAP,GAAmBZ,MAAM,CAACY,SAAP,IAAoBC,UAAvC;AACA,MAAIC,OAAO,GAAGnB,aAAa,CAACoB,OAAd,CAAsBX,SAAS,CAACY,WAAhC,CAAd;AACA,MAAIC,IAAI,GAAG;AACTH,IAAAA,OAAO,EAAEA,OADA;AAETI,IAAAA,QAAQ,EAAEZ,OAAO,GAAG,SAAH,GAAe,QAFvB;AAGTA,IAAAA,OAAO,EAAEA;AAHA,GAAX;AAKA,SAAO,IAAIrB,OAAO,CAACkC,MAAZ,CAAmBF,IAAnB,EAAyBjB,MAAzB,EAAiCoB,gCAAgC,EAAjE,CAAP;;AAEA,WAASA,gCAAT,GAA4C;AAC1C,QAAId,OAAJ,EAAa;AACX,aAAO,UAAUe,EAAV,EAAcrB,MAAd,EAAsBsB,GAAtB,EAA2BC,gBAA3B,EAA6C;AAClD,eAAO,IAAIpC,0BAA0B,CAACqC,yBAA/B,CAAyD;AAC9DH,UAAAA,EAAE,EAAEA,EAD0D;AAE9DrB,UAAAA,MAAM,EAAEA,MAFsD;AAG9DsB,UAAAA,GAAG,EAAEA,GAHyD;AAI9DC,UAAAA,gBAAgB,EAAEA,gBAJ4C;AAK9DxB,UAAAA,SAAS,EAAEA,SALmD;AAM9De,UAAAA,OAAO,EAAEA,OANqD;AAO9DF,UAAAA,SAAS,EAAEZ,MAAM,CAACY,SAP4C;AAQ9Da,UAAAA,cAAc,EAAErB,SAAS,CAACsB;AARoC,SAAzD,CAAP;AAUD,OAXD;AAYD,KAbD,MAaO;AACL,UAAI,CAAChC,mBAAmB,CAACU,SAAS,CAACsB,KAAX,CAAxB,EAA2C;AACzC,cAAM,IAAIhB,KAAJ,CAAU,qEAAqEC,MAArE,CAA4Eb,GAA5E,EAAiF,GAAjF,CAAV,CAAN;AACD;;AAED,aAAO,UAAUuB,EAAV,EAAcrB,MAAd,EAAsBsB,GAAtB,EAA2B;AAChC,eAAO,IAAInC,0BAA0B,CAACwC,wBAA/B,CAAwD;AAC7DN,UAAAA,EAAE,EAAEA,EADyD;AAE7DrB,UAAAA,MAAM,EAAEA,MAFqD;AAG7DsB,UAAAA,GAAG,EAAEA,GAHwD;AAI7DvB,UAAAA,SAAS,EAAEA,SAJkD;AAK7De,UAAAA,OAAO,EAAEA,OALoD;AAM7DF,UAAAA,SAAS,EAAEZ,MAAM,CAACY;AAN2C,SAAxD,CAAP;AAQD,OATD;AAUD;AACF;AACF;;AAED,IAAIC,UAAU,GAAG,sBAAsB3B,QAAQ,CAAC,SAAD,CAA/C;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIH,OAAO,GAAG;AACZ6C,EAAAA,OAAO,EAAE,UAAUC,QAAV,EAAoB;AAC3B,aAASD,OAAT,CAAiBE,EAAjB,EAAqB;AACnB,aAAOD,QAAQ,CAACE,KAAT,CAAe,IAAf,EAAqB9B,SAArB,CAAP;AACD;;AAED2B,IAAAA,OAAO,CAACI,QAAR,GAAmB,YAAY;AAC7B,aAAOH,QAAQ,CAACG,QAAT,EAAP;AACD,KAFD;;AAIA,WAAOJ,OAAP;AACD,GAVQ,CAUP,UAAUK,KAAV,EAAiB;AACjB,WAAO;AACLA,MAAAA,KAAK,EAAEA,KADF;AAELC,MAAAA,MAAM,EAAE,SAASA,MAAT,CAAgBD,KAAhB,EAAuBE,OAAvB,EAAgC;AACtC,eAAOP,OAAO,CAACN,GAAR,CAAY,GAAGX,MAAH,CAAUyB,MAAM,CAACC,IAAP,CAAYC,GAAZ,EAAV,EAA6B,GAA7B,EAAkC3B,MAAlC,CAAyCsB,KAAK,CAACM,WAAN,EAAzC,EAA8D,GAA9D,EAAmE5B,MAAnE,CAA0EwB,OAA1E,CAAZ,CAAP;AACD;AAJI,KAAP;AAMD,GAjBQ;AADG,CAAd;AAoBA;AACA;AACA;;AAEAzE,OAAO,CAACqB,OAAR,GAAkBA,OAAlB;AACA,IAAID,KAAK,GAAG;AACV0D,EAAAA,IAAI,EAAEzE,gBAAgB,CAACyE,IADb;AAEVC,EAAAA,YAAY,EAAE1E,gBAAgB,CAAC0E,YAFrB;AAGVC,EAAAA,mBAAmB,EAAE3E,gBAAgB,CAAC2E,mBAH5B;AAIVC,EAAAA,WAAW,EAAE5E,gBAAgB,CAAC4E,WAJpB;AAKVC,EAAAA,IAAI,EAAE7E,gBAAgB,CAAC6E,IALb;AAMVC,EAAAA,MAAM,EAAE9E,gBAAgB,CAAC8E,MANf;AAOVC,EAAAA,aAAa,EAAE/E,gBAAgB,CAAC+E,aAPtB;AAQVC,EAAAA,MAAM,EAAEhF,gBAAgB,CAACgF,MARf;AASVC,EAAAA,KAAK,EAAEjF,gBAAgB,CAACiF,KATd;AAUVX,EAAAA,IAAI,EAAEtE,gBAAgB,CAACsE,IAVb;AAWVY,EAAAA,QAAQ,EAAElF,gBAAgB,CAACkF,QAXjB;AAYVC,EAAAA,QAAQ,EAAEnF,gBAAgB,CAACmF,QAZjB;AAaVC,EAAAA,aAAa,EAAEpF,gBAAgB,CAACoF,aAbtB;AAcVC,EAAAA,SAAS,EAAErF,gBAAgB,CAACqF,SAdlB;AAeVC,EAAAA,IAAI,EAAEtF,gBAAgB,CAACsF,IAfb;AAgBVC,EAAAA,OAAO,EAAEvF,gBAAgB,CAACuF;AAhBhB,CAAZ;AAkBA;AACA;AACA;;AAEA5F,OAAO,CAACoB,KAAR,GAAgBA,KAAhB;AACA,IAAID,OAAO,GAAG;AACZ0E,EAAAA,IAAI,EAAEtE,OAAO,CAACsE,IADF;AAEZC,EAAAA,KAAK,EAAEvE,OAAO,CAACuE;AAFH,CAAd;AAIA;AACA;AACA;;AAEA9F,OAAO,CAACmB,OAAR,GAAkBA,OAAlB;AACA,IAAIG,OAAO,GAAG;AACZyE,EAAAA,QAAQ,EAAE1F,gBAAgB,CAAC0F,QADf;AAEZzB,EAAAA,QAAQ,EAAEjE,gBAAgB,CAACiE,QAFf;AAGZ0B,EAAAA,WAAW,EAAE3F,gBAAgB,CAAC2F;AAHlB,CAAd;AAKA;AACA;AACA;;AAEAhG,OAAO,CAACsB,OAAR,GAAkBA,OAAlB;AACA,IAAIJ,OAAO,GAAG;AACZT,EAAAA,OAAO,EAAEJ,gBAAgB,CAACI;AADd,CAAd;AAGA;AACA;AACA;;AAEAT,OAAO,CAACkB,OAAR,GAAkBA,OAAlB;AACA,IAAID,QAAQ,GAAG;AACbL,EAAAA,UAAU,EAAEP,gBAAgB,CAACO,UADhB;AAEbE,EAAAA,WAAW,EAAET,gBAAgB,CAACS,WAFjB;AAGbC,EAAAA,MAAM,EAAEV,gBAAgB,CAACU,MAHZ;AAIbL,EAAAA,MAAM,EAAEL,gBAAgB,CAACK,MAJZ;AAKbG,EAAAA,eAAe,EAAER,gBAAgB,CAACQ,eALrB;AAMbF,EAAAA,UAAU,EAAEN,gBAAgB,CAACM;AANhB,CAAf;AAQA;AACA;AACA;;AAEAX,OAAO,CAACiB,QAAR,GAAmBA,QAAnB;AACA,IAAIgF,SAAS,GAAG;AACd/F,EAAAA,MAAM,EAAEA,MADM;AAEd,SAAOG,gBAAgB,CAAC,KAAD,CAFT;AAGdG,EAAAA,KAAK,EAAEH,gBAAgB,CAACG,KAHV;AAIdC,EAAAA,OAAO,EAAEJ,gBAAgB,CAACI,OAJZ;AAKdG,EAAAA,UAAU,EAAEP,gBAAgB,CAACO,UALf;AAMdE,EAAAA,WAAW,EAAET,gBAAgB,CAACS,WANhB;AAOdC,EAAAA,MAAM,EAAEV,gBAAgB,CAACU,MAPX;AAQdL,EAAAA,MAAM,EAAEL,gBAAgB,CAACK,MARX;AASdG,EAAAA,eAAe,EAAER,gBAAgB,CAACQ,eATpB;AAUdF,EAAAA,UAAU,EAAEN,gBAAgB,CAACM,UAVf;AAWdW,EAAAA,OAAO,EAAEA,OAXK;AAYdhB,EAAAA,UAAU,EAAED,gBAAgB,CAACC,UAZf;AAadU,EAAAA,IAAI,EAAEX,gBAAgB,CAACW,IAbT;AAcdK,EAAAA,OAAO,EAAEA,OAdK;AAedD,EAAAA,KAAK,EAAEA,KAfO;AAgBdD,EAAAA,OAAO,EAAEA,OAhBK;AAiBdZ,EAAAA,KAAK,EAAEF,gBAAgB,CAACE,KAjBV;AAkBdW,EAAAA,OAAO,EAAEA,OAlBK;AAmBdD,EAAAA,QAAQ,EAAEA;AAnBI,CAAhB;AAqBA,IAAIiF,QAAQ,GAAGD,SAAf;AACAjG,OAAO,CAAC,SAAD,CAAP,GAAqBkG,QAArB","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.driver = driver;\nObject.defineProperty(exports, \"Neo4jError\", {\n  enumerable: true,\n  get: function get() {\n    return _neo4jDriverCore.Neo4jError;\n  }\n});\nObject.defineProperty(exports, \"error\", {\n  enumerable: true,\n  get: function get() {\n    return _neo4jDriverCore.error;\n  }\n});\nObject.defineProperty(exports, \"int\", {\n  enumerable: true,\n  get: function get() {\n    return _neo4jDriverCore[\"int\"];\n  }\n});\nObject.defineProperty(exports, \"isInt\", {\n  enumerable: true,\n  get: function get() {\n    return _neo4jDriverCore.isInt;\n  }\n});\nObject.defineProperty(exports, \"isPoint\", {\n  enumerable: true,\n  get: function get() {\n    return _neo4jDriverCore.isPoint;\n  }\n});\nObject.defineProperty(exports, \"isDate\", {\n  enumerable: true,\n  get: function get() {\n    return _neo4jDriverCore.isDate;\n  }\n});\nObject.defineProperty(exports, \"isDateTime\", {\n  enumerable: true,\n  get: function get() {\n    return _neo4jDriverCore.isDateTime;\n  }\n});\nObject.defineProperty(exports, \"isDuration\", {\n  enumerable: true,\n  get: function get() {\n    return _neo4jDriverCore.isDuration;\n  }\n});\nObject.defineProperty(exports, \"isLocalDateTime\", {\n  enumerable: true,\n  get: function get() {\n    return _neo4jDriverCore.isLocalDateTime;\n  }\n});\nObject.defineProperty(exports, \"isLocalTime\", {\n  enumerable: true,\n  get: function get() {\n    return _neo4jDriverCore.isLocalTime;\n  }\n});\nObject.defineProperty(exports, \"isTime\", {\n  enumerable: true,\n  get: function get() {\n    return _neo4jDriverCore.isTime;\n  }\n});\nObject.defineProperty(exports, \"auth\", {\n  enumerable: true,\n  get: function get() {\n    return _neo4jDriverCore.auth;\n  }\n});\nexports[\"default\"] = exports.temporal = exports.spatial = exports.session = exports.types = exports.logging = exports.integer = void 0;\n\nvar _driver = require(\"./driver\");\n\nvar _version = _interopRequireDefault(require(\"./version\"));\n\nvar _neo4jDriverCore = require(\"neo4j-driver-core\");\n\nvar _neo4jDriverBoltConnection = require(\"neo4j-driver-bolt-connection\");\n\n/**\n * Copyright (c) \"Neo4j\"\n * Neo4j Sweden AB [http://neo4j.com]\n *\n * This file is part of Neo4j.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar _internal$util = _neo4jDriverCore.internal.util,\n    ENCRYPTION_ON = _internal$util.ENCRYPTION_ON,\n    ENCRYPTION_OFF = _internal$util.ENCRYPTION_OFF,\n    assertString = _internal$util.assertString,\n    isEmptyObjectOrNull = _internal$util.isEmptyObjectOrNull,\n    ServerAddress = _neo4jDriverCore.internal.serverAddress.ServerAddress,\n    urlUtil = _neo4jDriverCore.internal.urlUtil;\n/**\n * Construct a new Neo4j Driver. This is your main entry point for this\n * library.\n *\n * ## Configuration\n *\n * This function optionally takes a configuration argument. Available configuration\n * options are as follows:\n *\n *     {\n *       // Encryption level: ENCRYPTION_ON or ENCRYPTION_OFF.\n *       encrypted: ENCRYPTION_ON|ENCRYPTION_OFF\n *\n *       // Trust strategy to use if encryption is enabled. There is no mode to disable\n *       // trust other than disabling encryption altogether. The reason for\n *       // this is that if you don't know who you are talking to, it is easy for an\n *       // attacker to hijack your encrypted connection, rendering encryption pointless.\n *       //\n *       // TRUST_SYSTEM_CA_SIGNED_CERTIFICATES is the default choice. For NodeJS environments, this\n *       // means that you trust whatever certificates are in the default trusted certificate\n *       // store of the underlying system. For Browser environments, the trusted certificate\n *       // store is usually managed by the browser. Refer to your system or browser documentation\n *       // if you want to explicitly add a certificate as trusted.\n *       //\n *       // TRUST_CUSTOM_CA_SIGNED_CERTIFICATES is another option for trust verification -\n *       // whenever we establish an encrypted connection, we ensure the host is using\n *       // an encryption certificate that is in, or is signed by, a certificate given\n *       // as trusted through configuration. This option is only available for NodeJS environments.\n *       //\n *       // TRUST_ALL_CERTIFICATES means that you trust everything without any verifications\n *       // steps carried out.  This option is only available for NodeJS environments and should not\n *       // be used on production systems.\n *       trust: \"TRUST_SYSTEM_CA_SIGNED_CERTIFICATES\" | \"TRUST_CUSTOM_CA_SIGNED_CERTIFICATES\" |\n *       \"TRUST_ALL_CERTIFICATES\",\n *\n *       // List of one or more paths to trusted encryption certificates. This only\n *       // works in the NodeJS bundle, and only matters if you use \"TRUST_CUSTOM_CA_SIGNED_CERTIFICATES\".\n *       // The certificate files should be in regular X.509 PEM format.\n *       // For instance, ['./trusted.pem']\n *       trustedCertificates: [],\n *\n *       // The maximum total number of connections allowed to be managed by the connection pool, per host.\n *       // This includes both in-use and idle connections. No maximum connection pool size is imposed\n *       // by default.\n *       maxConnectionPoolSize: 100,\n *\n *       // The maximum allowed lifetime for a pooled connection in milliseconds. Pooled connections older than this\n *       // threshold will be closed and removed from the pool. Such discarding happens during connection acquisition\n *       // so that new session is never backed by an old connection. Setting this option to a low value will cause\n *       // a high connection churn and might result in a performance hit. It is recommended to set maximum lifetime\n *       // to a slightly smaller value than the one configured in network equipment (load balancer, proxy, firewall,\n *       // etc. can also limit maximum connection lifetime). No maximum lifetime limit is imposed by default. Zero\n *       // and negative values result in lifetime not being checked.\n *       maxConnectionLifetime: 60 * 60 * 1000, // 1 hour\n *\n *       // The maximum amount of time to wait to acquire a connection from the pool (to either create a new\n *       // connection or borrow an existing one.\n *       connectionAcquisitionTimeout: 60000, // 1 minute\n *\n *       // Specify the maximum time in milliseconds transactions are allowed to retry via\n *       // `Session#readTransaction()` and `Session#writeTransaction()` functions.\n *       // These functions will retry the given unit of work on `ServiceUnavailable`, `SessionExpired` and transient\n *       // errors with exponential backoff using initial delay of 1 second.\n *       // Default value is 30000 which is 30 seconds.\n *       maxTransactionRetryTime: 30000, // 30 seconds\n *\n *       // Specify socket connection timeout in milliseconds. Numeric values are expected. Negative and zero values\n *       // result in no timeout being applied. Connection establishment will be then bound by the timeout configured\n *       // on the operating system level. Default value is 30000, which is 30 seconds.\n *       connectionTimeout: 30000, // 30 seconds\n *\n *       // Make this driver always return native JavaScript numbers for integer values, instead of the\n *       // dedicated {@link Integer} class. Values that do not fit in native number bit range will be represented as\n *       // `Number.NEGATIVE_INFINITY` or `Number.POSITIVE_INFINITY`.\n *       // **Warning:** ResultSummary It is not always safe to enable this setting when JavaScript applications are not the only ones\n *       // interacting with the database. Stored numbers might in such case be not representable by native\n *       // {@link Number} type and thus driver will return lossy values. This might also happen when data was\n *       // initially imported using neo4j import tool and contained numbers larger than\n *       // `Number.MAX_SAFE_INTEGER`. Driver will then return positive infinity, which is lossy.\n *       // Default value for this option is `false` because native JavaScript numbers might result\n *       // in loss of precision in the general case.\n *       disableLosslessIntegers: false,\n *\n *       // Make this driver always return native Javascript {@link BigInt} for integer values, instead of the dedicated {@link Integer} class or {@link Number}.\n *       //\n *       // Default value for this option is `false` for backwards compatibility.\n *       //\n *       // **Warning:** `BigInt` doesn't implement the method `toJSON`. In maner of serialize it as `json`, It's needed to add a custom implementation of the `toJSON` on the\n *       // `BigInt.prototype` {@see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt#use_within_json}\n *       useBigInt: false,\n *\n *       // Specify the logging configuration for the driver. Object should have two properties `level` and `logger`.\n *       //\n *       // Property `level` represents the logging level which should be one of: 'error', 'warn', 'info' or 'debug'. This property is optional and\n *       // its default value is 'info'. Levels have priorities: 'error': 0, 'warn': 1, 'info': 2, 'debug': 3. Enabling a certain level also enables all\n *       // levels with lower priority. For example: 'error', 'warn' and 'info' will be logged when 'info' level is configured.\n *       //\n *       // Property `logger` represents the logging function which will be invoked for every log call with an acceptable level. The function should\n *       // take two string arguments `level` and `message`. The function should not execute any blocking or long-running operations\n *       // because it is often executed on a hot path.\n *       //\n *       // No logging is done by default. See `neo4j.logging` object that contains predefined logging implementations.\n *       logging: {\n *         level: 'info',\n *         logger: (level, message) => console.log(level + ' ' + message)\n *       },\n *\n *       // Specify a custom server address resolver function used by the routing driver to resolve the initial address used to create the driver.\n *       // Such resolution happens:\n *       //  * during the very first rediscovery when driver is created\n *       //  * when all the known routers from the current routing table have failed and driver needs to fallback to the initial address\n *       //\n *       // In NodeJS environment driver defaults to performing a DNS resolution of the initial address using 'dns' module.\n *       // In browser environment driver uses the initial address as-is.\n *       // Value should be a function that takes a single string argument - the initial address. It should return an array of new addresses.\n *       // Address is a string of shape '<host>:<port>'. Provided function can return either a Promise resolved with an array of addresses\n *       // or array of addresses directly.\n *       resolver: function(address) {\n *         return ['127.0.0.1:8888', 'fallback.db.com:7687'];\n *       },\n *\n *      // Optionally override the default user agent name.\n *       userAgent: USER_AGENT\n *     }\n *\n * @param {string} url The URL for the Neo4j database, for instance \"neo4j://localhost\" and/or \"bolt://localhost\"\n * @param {Map<string,string>} authToken Authentication credentials. See {@link auth} for helpers.\n * @param {Object} config Configuration object. See the configuration section above for details.\n * @returns {Driver}\n */\n\nfunction driver(url, authToken) {\n  var config = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  assertString(url, 'Bolt URL');\n  var parsedUrl = urlUtil.parseDatabaseUrl(url); // Determine entryption/trust options from the URL.\n\n  var routing = false;\n  var encrypted = false;\n  var trust;\n\n  switch (parsedUrl.scheme) {\n    case 'bolt':\n      break;\n\n    case 'bolt+s':\n      encrypted = true;\n      trust = 'TRUST_SYSTEM_CA_SIGNED_CERTIFICATES';\n      break;\n\n    case 'bolt+ssc':\n      encrypted = true;\n      trust = 'TRUST_ALL_CERTIFICATES';\n      break;\n\n    case 'neo4j':\n      routing = true;\n      break;\n\n    case 'neo4j+s':\n      encrypted = true;\n      trust = 'TRUST_SYSTEM_CA_SIGNED_CERTIFICATES';\n      routing = true;\n      break;\n\n    case 'neo4j+ssc':\n      encrypted = true;\n      trust = 'TRUST_ALL_CERTIFICATES';\n      routing = true;\n      break;\n\n    default:\n      throw new Error(\"Unknown scheme: \".concat(parsedUrl.scheme));\n  } // Encryption enabled on URL, propagate trust to the config.\n\n\n  if (encrypted) {\n    // Check for configuration conflict between URL and config.\n    if ('encrypted' in config || 'trust' in config) {\n      throw new Error('Encryption/trust can only be configured either through URL or config, not both');\n    }\n\n    config.encrypted = ENCRYPTION_ON;\n    config.trust = trust;\n  } // Sanitize authority token. Nicer error from server when a scheme is set.\n\n\n  authToken = authToken || {};\n  authToken.scheme = authToken.scheme || 'none'; // Use default user agent or user agent specified by user.\n\n  config.userAgent = config.userAgent || USER_AGENT;\n  var address = ServerAddress.fromUrl(parsedUrl.hostAndPort);\n  var meta = {\n    address: address,\n    typename: routing ? 'Routing' : 'Direct',\n    routing: routing\n  };\n  return new _driver.Driver(meta, config, createConnectionProviderFunction());\n\n  function createConnectionProviderFunction() {\n    if (routing) {\n      return function (id, config, log, hostNameResolver) {\n        return new _neo4jDriverBoltConnection.RoutingConnectionProvider({\n          id: id,\n          config: config,\n          log: log,\n          hostNameResolver: hostNameResolver,\n          authToken: authToken,\n          address: address,\n          userAgent: config.userAgent,\n          routingContext: parsedUrl.query\n        });\n      };\n    } else {\n      if (!isEmptyObjectOrNull(parsedUrl.query)) {\n        throw new Error(\"Parameters are not supported with none routed scheme. Given URL: '\".concat(url, \"'\"));\n      }\n\n      return function (id, config, log) {\n        return new _neo4jDriverBoltConnection.DirectConnectionProvider({\n          id: id,\n          config: config,\n          log: log,\n          authToken: authToken,\n          address: address,\n          userAgent: config.userAgent\n        });\n      };\n    }\n  }\n}\n\nvar USER_AGENT = 'neo4j-javascript/' + _version[\"default\"];\n/**\n * Object containing predefined logging configurations. These are expected to be used as values of the driver config's `logging` property.\n * @property {function(level: ?string): object} console the function to create a logging config that prints all messages to `console.log` with\n * timestamp, level and message. It takes an optional `level` parameter which represents the maximum log level to be logged. Default value is 'info'.\n */\n\nvar logging = {\n  console: function (_console) {\n    function console(_x) {\n      return _console.apply(this, arguments);\n    }\n\n    console.toString = function () {\n      return _console.toString();\n    };\n\n    return console;\n  }(function (level) {\n    return {\n      level: level,\n      logger: function logger(level, message) {\n        return console.log(\"\".concat(global.Date.now(), \" \").concat(level.toUpperCase(), \" \").concat(message));\n      }\n    };\n  })\n};\n/**\n * Object containing constructors for all neo4j types.\n */\n\nexports.logging = logging;\nvar types = {\n  Node: _neo4jDriverCore.Node,\n  Relationship: _neo4jDriverCore.Relationship,\n  UnboundRelationship: _neo4jDriverCore.UnboundRelationship,\n  PathSegment: _neo4jDriverCore.PathSegment,\n  Path: _neo4jDriverCore.Path,\n  Result: _neo4jDriverCore.Result,\n  ResultSummary: _neo4jDriverCore.ResultSummary,\n  Record: _neo4jDriverCore.Record,\n  Point: _neo4jDriverCore.Point,\n  Date: _neo4jDriverCore.Date,\n  DateTime: _neo4jDriverCore.DateTime,\n  Duration: _neo4jDriverCore.Duration,\n  LocalDateTime: _neo4jDriverCore.LocalDateTime,\n  LocalTime: _neo4jDriverCore.LocalTime,\n  Time: _neo4jDriverCore.Time,\n  Integer: _neo4jDriverCore.Integer\n};\n/**\n * Object containing string constants representing session access modes.\n */\n\nexports.types = types;\nvar session = {\n  READ: _driver.READ,\n  WRITE: _driver.WRITE\n};\n/**\n * Object containing functions to work with {@link Integer} objects.\n */\n\nexports.session = session;\nvar integer = {\n  toNumber: _neo4jDriverCore.toNumber,\n  toString: _neo4jDriverCore.toString,\n  inSafeRange: _neo4jDriverCore.inSafeRange\n};\n/**\n * Object containing functions to work with spatial types, like {@link Point}.\n */\n\nexports.integer = integer;\nvar spatial = {\n  isPoint: _neo4jDriverCore.isPoint\n};\n/**\n * Object containing functions to work with temporal types, like {@link Time} or {@link Duration}.\n */\n\nexports.spatial = spatial;\nvar temporal = {\n  isDuration: _neo4jDriverCore.isDuration,\n  isLocalTime: _neo4jDriverCore.isLocalTime,\n  isTime: _neo4jDriverCore.isTime,\n  isDate: _neo4jDriverCore.isDate,\n  isLocalDateTime: _neo4jDriverCore.isLocalDateTime,\n  isDateTime: _neo4jDriverCore.isDateTime\n};\n/**\n * @private\n */\n\nexports.temporal = temporal;\nvar forExport = {\n  driver: driver,\n  \"int\": _neo4jDriverCore[\"int\"],\n  isInt: _neo4jDriverCore.isInt,\n  isPoint: _neo4jDriverCore.isPoint,\n  isDuration: _neo4jDriverCore.isDuration,\n  isLocalTime: _neo4jDriverCore.isLocalTime,\n  isTime: _neo4jDriverCore.isTime,\n  isDate: _neo4jDriverCore.isDate,\n  isLocalDateTime: _neo4jDriverCore.isLocalDateTime,\n  isDateTime: _neo4jDriverCore.isDateTime,\n  integer: integer,\n  Neo4jError: _neo4jDriverCore.Neo4jError,\n  auth: _neo4jDriverCore.auth,\n  logging: logging,\n  types: types,\n  session: session,\n  error: _neo4jDriverCore.error,\n  spatial: spatial,\n  temporal: temporal\n};\nvar _default = forExport;\nexports[\"default\"] = _default;"]},"metadata":{},"sourceType":"script"}