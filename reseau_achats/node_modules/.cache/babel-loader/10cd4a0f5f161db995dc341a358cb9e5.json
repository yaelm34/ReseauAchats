{"ast":null,"code":"/** PURE_IMPORTS_START tslib,_Subject,_innerSubscribe PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subject } from '../Subject';\nimport { SimpleOuterSubscriber, innerSubscribe, SimpleInnerSubscriber } from '../innerSubscribe';\nexport function window(windowBoundaries) {\n  return function windowOperatorFunction(source) {\n    return source.lift(new WindowOperator(windowBoundaries));\n  };\n}\n\nvar WindowOperator = /*@__PURE__*/function () {\n  function WindowOperator(windowBoundaries) {\n    this.windowBoundaries = windowBoundaries;\n  }\n\n  WindowOperator.prototype.call = function (subscriber, source) {\n    var windowSubscriber = new WindowSubscriber(subscriber);\n    var sourceSubscription = source.subscribe(windowSubscriber);\n\n    if (!sourceSubscription.closed) {\n      windowSubscriber.add(innerSubscribe(this.windowBoundaries, new SimpleInnerSubscriber(windowSubscriber)));\n    }\n\n    return sourceSubscription;\n  };\n\n  return WindowOperator;\n}();\n\nvar WindowSubscriber = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(WindowSubscriber, _super);\n\n  function WindowSubscriber(destination) {\n    var _this = _super.call(this, destination) || this;\n\n    _this.window = new Subject();\n    destination.next(_this.window);\n    return _this;\n  }\n\n  WindowSubscriber.prototype.notifyNext = function () {\n    this.openWindow();\n  };\n\n  WindowSubscriber.prototype.notifyError = function (error) {\n    this._error(error);\n  };\n\n  WindowSubscriber.prototype.notifyComplete = function () {\n    this._complete();\n  };\n\n  WindowSubscriber.prototype._next = function (value) {\n    this.window.next(value);\n  };\n\n  WindowSubscriber.prototype._error = function (err) {\n    this.window.error(err);\n    this.destination.error(err);\n  };\n\n  WindowSubscriber.prototype._complete = function () {\n    this.window.complete();\n    this.destination.complete();\n  };\n\n  WindowSubscriber.prototype._unsubscribe = function () {\n    this.window = null;\n  };\n\n  WindowSubscriber.prototype.openWindow = function () {\n    var prevWindow = this.window;\n\n    if (prevWindow) {\n      prevWindow.complete();\n    }\n\n    var destination = this.destination;\n    var newWindow = this.window = new Subject();\n    destination.next(newWindow);\n  };\n\n  return WindowSubscriber;\n}(SimpleOuterSubscriber);","map":{"version":3,"mappings":";AAEA,OAAO,KAAEA,OAAT,MAAwB,OAAxB;AAGA,SAASC,OAAT,QAAS,YAAT;AA6CA,SAAMC,qBAAN,EAA0BC,cAA1B,EAA2DC,qBAA3D,QAA2D,mBAA3D;OACE,SAAOC,MAAP,CAAgBC,gBAAhB,EAAgB;SACd,SAAOC,sBAAP,CAAuBC,MAAvB,EAAsC;AACtC;AACH;AAED;;IAEEC,8BAAoB,YAAiC;WAAjCA;AACnB;AAED;;gBACQ,WAAgBC,OAAO,sBAAiBF,MAAjB,EAA6B;AAC1D,QAAMG,mBAAkB,IAAGC,gBAAH,CAAoBC,UAApB,CAAxB;AACA,QAAIC,kBAAC,GAAmBN,MAAM,CAAEO,SAAR,CAAQJ,gBAAR,CAAxB;;QACE,mBAAiB,CAAGK,QAAC;AACtBL;AACD;;AACD;AACH;;AAbA,SAaCF,cAbD;AAoBA,CAlBsB;;IAkBYG,0CAA6BK,MAA7B,EAA6B;AAI7DjB,sCAAYiB,MAAZ;;WAAAL,iBACEM,aAAM;AAHA,gBAAMD,MAAe,CAAIP,IAAnB,CAAmB,IAAnB,EAAgCQ,WAAhC,KAAgC,IAAtC;;AAINC,mBAAY,IAAKlB,OAAL,EAAZ;;AACD;AAED;;kBACO,WAAamB;AACnB;AAED;;kBACc,WAAOC;AACpB;AAED;;kBACO,WAAYC;AAClB;AAES;;kBACI,WAAWC,QAAC;AACzB;AAES;;kBACI,WAAWC;AACvB,SAAKnB,MAAL,CAAKoB,KAAL,CAAiBC,GAAjB;AACD;AAES;;kBACI,WAAWC;AACvB,SAAKtB,MAAL,CAAKuB,QAAL;AACD;AAGD;;kBACa,WAASC;AACrB;AAEO;;kBACA,WAAkBC,aAAO;AAC/B,QAAIC,UAAU,GAAE,WAAhB;;QACEA,YAAW;AACZA;AACD;;AACA,QAAMb,WAAS,GAAG,KAAKA,WAAvB;AACA,iBAAY,GAAK,KAACb,MAAD,GAAY,aAA7B;AACDa;AACH;;AAjDkC;CAAA","names":["tslib_1","Subject","SimpleOuterSubscriber","innerSubscribe","SimpleInnerSubscriber","window","windowBoundaries","windowOperatorFunction","source","WindowOperator","call","windowSubscriber","WindowSubscriber","subscriber","sourceSubscription","subscribe","closed","_super","destination","_this","notifyNext","notifyError","notifyComplete","_next","_error","error","err","_complete","complete","_unsubscribe","openWindow","prevWindow"],"sources":["D:\\Documents\\EMA\\Mines A3\\NoSQL\\ReseauAchats\\reseau_achats\\node_modules\\rxjs\\src\\internal\\operators\\window.ts"],"sourcesContent":["import { Observable } from '../Observable';\r\nimport { OperatorFunction } from '../types';\r\nimport { Subject } from '../Subject';\r\nimport { Subscriber } from '../Subscriber';\r\nimport { Operator } from '../Operator';\r\nimport { SimpleOuterSubscriber, innerSubscribe, SimpleInnerSubscriber } from '../innerSubscribe';\r\n\r\n/**\r\n * Branch out the source Observable values as a nested Observable whenever\r\n * `windowBoundaries` emits.\r\n *\r\n * <span class=\"informal\">It's like {@link buffer}, but emits a nested Observable\r\n * instead of an array.</span>\r\n *\r\n * ![](window.png)\r\n *\r\n * Returns an Observable that emits windows of items it collects from the source\r\n * Observable. The output Observable emits connected, non-overlapping\r\n * windows. It emits the current window and opens a new one whenever the\r\n * Observable `windowBoundaries` emits an item. Because each window is an\r\n * Observable, the output is a higher-order Observable.\r\n *\r\n * ## Example\r\n * In every window of 1 second each, emit at most 2 click events\r\n * ```ts\r\n * import { fromEvent, interval } from 'rxjs';\r\n * import { window, mergeAll, map, take } from 'rxjs/operators';\r\n *\r\n *  const clicks = fromEvent(document, 'click');\r\n *  const sec = interval(1000);\r\n *  const result = clicks.pipe(\r\n *      window(sec),\r\n *      map(win => win.pipe(take(2))), // each window has at most 2 emissions\r\n *      mergeAll(),              // flatten the Observable-of-Observables\r\n *  );\r\n *  result.subscribe(x => console.log(x));\r\n * ```\r\n * @see {@link windowCount}\r\n * @see {@link windowTime}\r\n * @see {@link windowToggle}\r\n * @see {@link windowWhen}\r\n * @see {@link buffer}\r\n *\r\n * @param {Observable<any>} windowBoundaries An Observable that completes the\r\n * previous window and starts a new window.\r\n * @return {Observable<Observable<T>>} An Observable of windows, which are\r\n * Observables emitting values of the source Observable.\r\n * @method window\r\n * @owner Observable\r\n */\r\nexport function window<T>(windowBoundaries: Observable<any>): OperatorFunction<T, Observable<T>> {\r\n  return function windowOperatorFunction(source: Observable<T>) {\r\n    return source.lift(new WindowOperator(windowBoundaries));\r\n  };\r\n}\r\n\r\nclass WindowOperator<T> implements Operator<T, Observable<T>> {\r\n\r\n  constructor(private windowBoundaries: Observable<any>) {\r\n  }\r\n\r\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\r\n    const windowSubscriber = new WindowSubscriber(subscriber);\r\n    const sourceSubscription = source.subscribe(windowSubscriber);\r\n    if (!sourceSubscription.closed) {\r\n      windowSubscriber.add(innerSubscribe(this.windowBoundaries, new SimpleInnerSubscriber(windowSubscriber)));\r\n    }\r\n    return sourceSubscription;\r\n  }\r\n}\r\n\r\n/**\r\n * We need this JSDoc comment for affecting ESDoc.\r\n * @ignore\r\n * @extends {Ignored}\r\n */\r\nclass WindowSubscriber<T> extends SimpleOuterSubscriber<T, any> {\r\n\r\n  private window: Subject<T> = new Subject<T>();\r\n\r\n  constructor(destination: Subscriber<Observable<T>>) {\r\n    super(destination);\r\n    destination.next(this.window);\r\n  }\r\n\r\n  notifyNext(): void {\r\n    this.openWindow();\r\n  }\r\n\r\n  notifyError(error: any): void {\r\n    this._error(error);\r\n  }\r\n\r\n  notifyComplete(): void {\r\n    this._complete();\r\n  }\r\n\r\n  protected _next(value: T): void {\r\n    this.window.next(value);\r\n  }\r\n\r\n  protected _error(err: any): void {\r\n    this.window.error(err);\r\n    this.destination.error!(err);\r\n  }\r\n\r\n  protected _complete(): void {\r\n    this.window.complete();\r\n    this.destination.complete!();\r\n  }\r\n\r\n  /** @deprecated This is an internal implementation detail, do not use. */\r\n  _unsubscribe() {\r\n    this.window = null!;\r\n  }\r\n\r\n  private openWindow(): void  {\r\n    const prevWindow = this.window;\r\n    if (prevWindow) {\r\n      prevWindow.complete();\r\n    }\r\n    const destination = this.destination;\r\n    const newWindow = this.window = new Subject<T>();\r\n    destination.next!(newWindow);\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}