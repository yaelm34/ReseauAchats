{"ast":null,"code":"\"use strict\";\n/**\n * Copyright (c) \"Neo4j\"\n * Neo4j Sweden AB [http://neo4j.com]\n *\n * This file is part of Neo4j.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nvar __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n      m = s && o[s],\n      i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar neo4j_driver_core_1 = require(\"neo4j-driver-core\");\n\nvar rediscovery_1 = __importStar(require(\"../rediscovery\"));\n\nvar channel_1 = require(\"../channel\");\n\nvar connection_provider_single_1 = __importDefault(require(\"./connection-provider-single\"));\n\nvar connection_provider_pooled_1 = __importDefault(require(\"./connection-provider-pooled\"));\n\nvar load_balancing_1 = require(\"../load-balancing\");\n\nvar connection_1 = require(\"../connection\");\n\nvar SERVICE_UNAVAILABLE = neo4j_driver_core_1.error.SERVICE_UNAVAILABLE,\n    SESSION_EXPIRED = neo4j_driver_core_1.error.SESSION_EXPIRED;\nvar Bookmark = neo4j_driver_core_1.internal.bookmark.Bookmark,\n    _a = neo4j_driver_core_1.internal.constants,\n    READ = _a.ACCESS_MODE_READ,\n    WRITE = _a.ACCESS_MODE_WRITE,\n    BOLT_PROTOCOL_V3 = _a.BOLT_PROTOCOL_V3,\n    BOLT_PROTOCOL_V4_0 = _a.BOLT_PROTOCOL_V4_0,\n    BOLT_PROTOCOL_V4_4 = _a.BOLT_PROTOCOL_V4_4;\nvar UNAUTHORIZED_ERROR_CODE = 'Neo.ClientError.Security.Unauthorized';\nvar DATABASE_NOT_FOUND_ERROR_CODE = 'Neo.ClientError.Database.DatabaseNotFound';\nvar SYSTEM_DB_NAME = 'system';\nvar DEFAULT_DB_NAME = null;\nvar DEFAULT_ROUTING_TABLE_PURGE_DELAY = (0, neo4j_driver_core_1.int)(30000);\n\nvar RoutingConnectionProvider =\n/** @class */\nfunction (_super) {\n  __extends(RoutingConnectionProvider, _super);\n\n  function RoutingConnectionProvider(_a) {\n    var id = _a.id,\n        address = _a.address,\n        routingContext = _a.routingContext,\n        hostNameResolver = _a.hostNameResolver,\n        config = _a.config,\n        log = _a.log,\n        userAgent = _a.userAgent,\n        authToken = _a.authToken,\n        routingTablePurgeDelay = _a.routingTablePurgeDelay;\n\n    var _this = _super.call(this, {\n      id: id,\n      config: config,\n      log: log,\n      userAgent: userAgent,\n      authToken: authToken\n    }, function (address) {\n      return (0, connection_1.createChannelConnection)(address, _this._config, _this._createConnectionErrorHandler(), _this._log, _this._routingContext);\n    }) || this;\n\n    _this._routingContext = __assign(__assign({}, routingContext), {\n      address: address.toString()\n    });\n    _this._seedRouter = address;\n    _this._rediscovery = new rediscovery_1.default(_this._routingContext);\n    _this._loadBalancingStrategy = new load_balancing_1.LeastConnectedLoadBalancingStrategy(_this._connectionPool);\n    _this._hostNameResolver = hostNameResolver;\n    _this._dnsResolver = new channel_1.HostNameResolver();\n    _this._log = log;\n    _this._useSeedRouter = true;\n    _this._routingTableRegistry = new RoutingTableRegistry(routingTablePurgeDelay ? (0, neo4j_driver_core_1.int)(routingTablePurgeDelay) : DEFAULT_ROUTING_TABLE_PURGE_DELAY);\n    return _this;\n  }\n\n  RoutingConnectionProvider.prototype._createConnectionErrorHandler = function () {\n    // connection errors mean SERVICE_UNAVAILABLE for direct driver but for routing driver they should only\n    // result in SESSION_EXPIRED because there might still exist other servers capable of serving the request\n    return new connection_1.ConnectionErrorHandler(SESSION_EXPIRED);\n  };\n\n  RoutingConnectionProvider.prototype._handleUnavailability = function (error, address, database) {\n    this._log.warn(\"Routing driver \" + this._id + \" will forget \" + address + \" for database '\" + database + \"' because of an error \" + error.code + \" '\" + error.message + \"'\");\n\n    this.forget(address, database || DEFAULT_DB_NAME);\n    return error;\n  };\n\n  RoutingConnectionProvider.prototype._handleAuthorizationExpired = function (error, address, database) {\n    this._log.warn(\"Routing driver \" + this._id + \" will close connections to \" + address + \" for database '\" + database + \"' because of an error \" + error.code + \" '\" + error.message + \"'\");\n\n    this._connectionPool.purge(address).catch(function () {});\n\n    return error;\n  };\n\n  RoutingConnectionProvider.prototype._handleWriteFailure = function (error, address, database) {\n    this._log.warn(\"Routing driver \" + this._id + \" will forget writer \" + address + \" for database '\" + database + \"' because of an error \" + error.code + \" '\" + error.message + \"'\");\n\n    this.forgetWriter(address, database || DEFAULT_DB_NAME);\n    return (0, neo4j_driver_core_1.newError)('No longer possible to write to server at ' + address, SESSION_EXPIRED);\n  };\n  /**\n   * See {@link ConnectionProvider} for more information about this method and\n   * its arguments.\n   */\n\n\n  RoutingConnectionProvider.prototype.acquireConnection = function (_a) {\n    var _b = _a === void 0 ? {} : _a,\n        accessMode = _b.accessMode,\n        database = _b.database,\n        bookmarks = _b.bookmarks,\n        impersonatedUser = _b.impersonatedUser,\n        onDatabaseNameResolved = _b.onDatabaseNameResolved;\n\n    return __awaiter(this, void 0, void 0, function () {\n      var name, address, context, databaseSpecificErrorHandler, routingTable, connection, error_1, transformed;\n\n      var _this = this;\n\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            context = {\n              database: database || DEFAULT_DB_NAME\n            };\n            databaseSpecificErrorHandler = new connection_1.ConnectionErrorHandler(SESSION_EXPIRED, function (error, address) {\n              return _this._handleUnavailability(error, address, context.database);\n            }, function (error, address) {\n              return _this._handleWriteFailure(error, address, context.database);\n            }, function (error, address) {\n              return _this._handleAuthorizationExpired(error, address, context.database);\n            });\n            return [4\n            /*yield*/\n            , this._freshRoutingTable({\n              accessMode: accessMode,\n              database: context.database,\n              bookmark: bookmarks,\n              impersonatedUser: impersonatedUser,\n              onDatabaseNameResolved: function (databaseName) {\n                context.database = context.database || databaseName;\n\n                if (onDatabaseNameResolved) {\n                  onDatabaseNameResolved(databaseName);\n                }\n              }\n            }) // select a target server based on specified access mode\n            ];\n\n          case 1:\n            routingTable = _c.sent(); // select a target server based on specified access mode\n\n            if (accessMode === READ) {\n              address = this._loadBalancingStrategy.selectReader(routingTable.readers);\n              name = 'read';\n            } else if (accessMode === WRITE) {\n              address = this._loadBalancingStrategy.selectWriter(routingTable.writers);\n              name = 'write';\n            } else {\n              throw (0, neo4j_driver_core_1.newError)('Illegal mode ' + accessMode);\n            } // we couldn't select a target server\n\n\n            if (!address) {\n              throw (0, neo4j_driver_core_1.newError)(\"Failed to obtain connection towards \" + name + \" server. Known routing table is: \" + routingTable, SESSION_EXPIRED);\n            }\n\n            _c.label = 2;\n\n          case 2:\n            _c.trys.push([2, 4,, 5]);\n\n            return [4\n            /*yield*/\n            , this._acquireConnectionToServer(address, name, routingTable)];\n\n          case 3:\n            connection = _c.sent();\n            return [2\n            /*return*/\n            , new connection_1.DelegateConnection(connection, databaseSpecificErrorHandler)];\n\n          case 4:\n            error_1 = _c.sent();\n            transformed = databaseSpecificErrorHandler.handleAndTransformError(error_1, address);\n            throw transformed;\n\n          case 5:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  RoutingConnectionProvider.prototype._hasProtocolVersion = function (versionPredicate) {\n    return __awaiter(this, void 0, void 0, function () {\n      var addresses, lastError, i, connection, protocolVersion, error_2;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this._resolveSeedRouter(this._seedRouter)];\n\n          case 1:\n            addresses = _a.sent();\n            i = 0;\n            _a.label = 2;\n\n          case 2:\n            if (!(i < addresses.length)) return [3\n            /*break*/\n            , 8];\n            _a.label = 3;\n\n          case 3:\n            _a.trys.push([3, 6,, 7]);\n\n            return [4\n            /*yield*/\n            , (0, connection_1.createChannelConnection)(addresses[i], this._config, this._createConnectionErrorHandler(), this._log)];\n\n          case 4:\n            connection = _a.sent();\n            protocolVersion = connection.protocol() ? connection.protocol().version : null;\n            return [4\n            /*yield*/\n            , connection.close()];\n\n          case 5:\n            _a.sent();\n\n            if (protocolVersion) {\n              return [2\n              /*return*/\n              , versionPredicate(protocolVersion)];\n            }\n\n            return [2\n            /*return*/\n            , false];\n\n          case 6:\n            error_2 = _a.sent();\n            lastError = error_2;\n            return [3\n            /*break*/\n            , 7];\n\n          case 7:\n            i++;\n            return [3\n            /*break*/\n            , 2];\n\n          case 8:\n            if (lastError) {\n              throw lastError;\n            }\n\n            return [2\n            /*return*/\n            , false];\n        }\n      });\n    });\n  };\n\n  RoutingConnectionProvider.prototype.supportsMultiDb = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this._hasProtocolVersion(function (version) {\n              return version >= BOLT_PROTOCOL_V4_0;\n            })];\n\n          case 1:\n            return [2\n            /*return*/\n            , _a.sent()];\n        }\n      });\n    });\n  };\n\n  RoutingConnectionProvider.prototype.supportsTransactionConfig = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this._hasProtocolVersion(function (version) {\n              return version >= BOLT_PROTOCOL_V3;\n            })];\n\n          case 1:\n            return [2\n            /*return*/\n            , _a.sent()];\n        }\n      });\n    });\n  };\n\n  RoutingConnectionProvider.prototype.supportsUserImpersonation = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this._hasProtocolVersion(function (version) {\n              return version >= BOLT_PROTOCOL_V4_4;\n            })];\n\n          case 1:\n            return [2\n            /*return*/\n            , _a.sent()];\n        }\n      });\n    });\n  };\n\n  RoutingConnectionProvider.prototype.forget = function (address, database) {\n    this._routingTableRegistry.apply(database, {\n      applyWhenExists: function (routingTable) {\n        return routingTable.forget(address);\n      }\n    }); // We're firing and forgetting this operation explicitly and listening for any\n    // errors to avoid unhandled promise rejection\n\n\n    this._connectionPool.purge(address).catch(function () {});\n  };\n\n  RoutingConnectionProvider.prototype.forgetWriter = function (address, database) {\n    this._routingTableRegistry.apply(database, {\n      applyWhenExists: function (routingTable) {\n        return routingTable.forgetWriter(address);\n      }\n    });\n  };\n\n  RoutingConnectionProvider.prototype._acquireConnectionToServer = function (address, serverName, routingTable) {\n    return this._connectionPool.acquire(address);\n  };\n\n  RoutingConnectionProvider.prototype._freshRoutingTable = function (_a) {\n    var _b = _a === void 0 ? {} : _a,\n        accessMode = _b.accessMode,\n        database = _b.database,\n        bookmark = _b.bookmark,\n        impersonatedUser = _b.impersonatedUser,\n        onDatabaseNameResolved = _b.onDatabaseNameResolved;\n\n    var currentRoutingTable = this._routingTableRegistry.get(database, function () {\n      return new rediscovery_1.RoutingTable({\n        database: database\n      });\n    });\n\n    if (!currentRoutingTable.isStaleFor(accessMode)) {\n      return currentRoutingTable;\n    }\n\n    this._log.info(\"Routing table is stale for database: \\\"\" + database + \"\\\" and access mode: \\\"\" + accessMode + \"\\\": \" + currentRoutingTable);\n\n    return this._refreshRoutingTable(currentRoutingTable, bookmark, impersonatedUser, onDatabaseNameResolved);\n  };\n\n  RoutingConnectionProvider.prototype._refreshRoutingTable = function (currentRoutingTable, bookmark, impersonatedUser, onDatabaseNameResolved) {\n    var knownRouters = currentRoutingTable.routers;\n\n    if (this._useSeedRouter) {\n      return this._fetchRoutingTableFromSeedRouterFallbackToKnownRouters(knownRouters, currentRoutingTable, bookmark, impersonatedUser, onDatabaseNameResolved);\n    }\n\n    return this._fetchRoutingTableFromKnownRoutersFallbackToSeedRouter(knownRouters, currentRoutingTable, bookmark, impersonatedUser, onDatabaseNameResolved);\n  };\n\n  RoutingConnectionProvider.prototype._fetchRoutingTableFromSeedRouterFallbackToKnownRouters = function (knownRouters, currentRoutingTable, bookmark, impersonatedUser, onDatabaseNameResolved) {\n    return __awaiter(this, void 0, void 0, function () {\n      var seenRouters, newRoutingTable;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            seenRouters = [];\n            return [4\n            /*yield*/\n            , this._fetchRoutingTableUsingSeedRouter(seenRouters, this._seedRouter, currentRoutingTable, bookmark, impersonatedUser)];\n\n          case 1:\n            newRoutingTable = _a.sent();\n            if (!newRoutingTable) return [3\n            /*break*/\n            , 2];\n            this._useSeedRouter = false;\n            return [3\n            /*break*/\n            , 4];\n\n          case 2:\n            return [4\n            /*yield*/\n            , this._fetchRoutingTableUsingKnownRouters(knownRouters, currentRoutingTable, bookmark, impersonatedUser)];\n\n          case 3:\n            // seed router did not return a valid routing table - try to use other known routers\n            newRoutingTable = _a.sent();\n            _a.label = 4;\n\n          case 4:\n            return [4\n            /*yield*/\n            , this._applyRoutingTableIfPossible(currentRoutingTable, newRoutingTable, onDatabaseNameResolved)];\n\n          case 5:\n            return [2\n            /*return*/\n            , _a.sent()];\n        }\n      });\n    });\n  };\n\n  RoutingConnectionProvider.prototype._fetchRoutingTableFromKnownRoutersFallbackToSeedRouter = function (knownRouters, currentRoutingTable, bookmark, impersonatedUser, onDatabaseNameResolved) {\n    return __awaiter(this, void 0, void 0, function () {\n      var newRoutingTable;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this._fetchRoutingTableUsingKnownRouters(knownRouters, currentRoutingTable, bookmark, impersonatedUser)];\n\n          case 1:\n            newRoutingTable = _a.sent();\n            if (!!newRoutingTable) return [3\n            /*break*/\n            , 3];\n            return [4\n            /*yield*/\n            , this._fetchRoutingTableUsingSeedRouter(knownRouters, this._seedRouter, currentRoutingTable, bookmark, impersonatedUser)];\n\n          case 2:\n            // none of the known routers returned a valid routing table - try to use seed router address for rediscovery\n            newRoutingTable = _a.sent();\n            _a.label = 3;\n\n          case 3:\n            return [4\n            /*yield*/\n            , this._applyRoutingTableIfPossible(currentRoutingTable, newRoutingTable, onDatabaseNameResolved)];\n\n          case 4:\n            return [2\n            /*return*/\n            , _a.sent()];\n        }\n      });\n    });\n  };\n\n  RoutingConnectionProvider.prototype._fetchRoutingTableUsingKnownRouters = function (knownRouters, currentRoutingTable, bookmark, impersonatedUser) {\n    return __awaiter(this, void 0, void 0, function () {\n      var newRoutingTable, lastRouterIndex;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this._fetchRoutingTable(knownRouters, currentRoutingTable, bookmark, impersonatedUser)];\n\n          case 1:\n            newRoutingTable = _a.sent();\n\n            if (newRoutingTable) {\n              // one of the known routers returned a valid routing table - use it\n              return [2\n              /*return*/\n              , newRoutingTable];\n            }\n\n            lastRouterIndex = knownRouters.length - 1;\n\n            RoutingConnectionProvider._forgetRouter(currentRoutingTable, knownRouters, lastRouterIndex);\n\n            return [2\n            /*return*/\n            , null];\n        }\n      });\n    });\n  };\n\n  RoutingConnectionProvider.prototype._fetchRoutingTableUsingSeedRouter = function (seenRouters, seedRouter, routingTable, bookmark, impersonatedUser) {\n    return __awaiter(this, void 0, void 0, function () {\n      var resolvedAddresses, newAddresses;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this._resolveSeedRouter(seedRouter) // filter out all addresses that we've already tried\n            ];\n\n          case 1:\n            resolvedAddresses = _a.sent();\n            newAddresses = resolvedAddresses.filter(function (address) {\n              return seenRouters.indexOf(address) < 0;\n            });\n            return [4\n            /*yield*/\n            , this._fetchRoutingTable(newAddresses, routingTable, bookmark, impersonatedUser)];\n\n          case 2:\n            return [2\n            /*return*/\n            , _a.sent()];\n        }\n      });\n    });\n  };\n\n  RoutingConnectionProvider.prototype._resolveSeedRouter = function (seedRouter) {\n    return __awaiter(this, void 0, void 0, function () {\n      var resolvedAddresses, dnsResolvedAddresses;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this._hostNameResolver.resolve(seedRouter)];\n\n          case 1:\n            resolvedAddresses = _a.sent();\n            return [4\n            /*yield*/\n            , Promise.all(resolvedAddresses.map(function (address) {\n              return _this._dnsResolver.resolve(address);\n            }))];\n\n          case 2:\n            dnsResolvedAddresses = _a.sent();\n            return [2\n            /*return*/\n            , [].concat.apply([], dnsResolvedAddresses)];\n        }\n      });\n    });\n  };\n\n  RoutingConnectionProvider.prototype._fetchRoutingTable = function (routerAddresses, routingTable, bookmark, impersonatedUser) {\n    var _this = this;\n\n    return routerAddresses.reduce(function (refreshedTablePromise, currentRouter, currentIndex) {\n      return __awaiter(_this, void 0, void 0, function () {\n        var newRoutingTable, previousRouterIndex, session, error_3;\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              return [4\n              /*yield*/\n              , refreshedTablePromise];\n\n            case 1:\n              newRoutingTable = _a.sent();\n\n              if (newRoutingTable) {\n                // valid routing table was fetched - just return it, try next router otherwise\n                return [2\n                /*return*/\n                , newRoutingTable];\n              } else {\n                previousRouterIndex = currentIndex - 1;\n\n                RoutingConnectionProvider._forgetRouter(routingTable, routerAddresses, previousRouterIndex);\n              }\n\n              return [4\n              /*yield*/\n              , this._createSessionForRediscovery(currentRouter, bookmark, impersonatedUser)];\n\n            case 2:\n              session = _a.sent();\n              if (!session) return [3\n              /*break*/\n              , 8];\n              _a.label = 3;\n\n            case 3:\n              _a.trys.push([3, 5, 6, 7]);\n\n              return [4\n              /*yield*/\n              , this._rediscovery.lookupRoutingTableOnRouter(session, routingTable.database, currentRouter, impersonatedUser)];\n\n            case 4:\n              return [2\n              /*return*/\n              , _a.sent()];\n\n            case 5:\n              error_3 = _a.sent();\n\n              if (error_3 && error_3.code === DATABASE_NOT_FOUND_ERROR_CODE) {\n                // not finding the target database is a sign of a configuration issue\n                throw error_3;\n              }\n\n              this._log.warn(\"unable to fetch routing table because of an error \" + error_3);\n\n              return [2\n              /*return*/\n              , null];\n\n            case 6:\n              session.close();\n              return [7\n              /*endfinally*/\n              ];\n\n            case 7:\n              return [3\n              /*break*/\n              , 9];\n\n            case 8:\n              // unable to acquire connection and create session towards the current router\n              // return null to signal that the next router should be tried\n              return [2\n              /*return*/\n              , null];\n\n            case 9:\n              return [2\n              /*return*/\n              ];\n          }\n        });\n      });\n    }, Promise.resolve(null));\n  };\n\n  RoutingConnectionProvider.prototype._createSessionForRediscovery = function (routerAddress, bookmark, impersonatedUser) {\n    return __awaiter(this, void 0, void 0, function () {\n      var connection, databaseSpecificErrorHandler, connectionProvider, protocolVersion, error_4;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            _a.trys.push([0, 2,, 3]);\n\n            return [4\n            /*yield*/\n            , this._connectionPool.acquire(routerAddress)];\n\n          case 1:\n            connection = _a.sent();\n            databaseSpecificErrorHandler = connection_1.ConnectionErrorHandler.create({\n              errorCode: SESSION_EXPIRED,\n              handleAuthorizationExpired: function (error, address) {\n                return _this._handleAuthorizationExpired(error, address);\n              }\n            });\n            connectionProvider = new connection_provider_single_1.default(new connection_1.DelegateConnection(connection, databaseSpecificErrorHandler));\n            protocolVersion = connection.protocol().version;\n\n            if (protocolVersion < 4.0) {\n              return [2\n              /*return*/\n              , new neo4j_driver_core_1.Session({\n                mode: WRITE,\n                bookmark: Bookmark.empty(),\n                connectionProvider: connectionProvider\n              })];\n            }\n\n            return [2\n            /*return*/\n            , new neo4j_driver_core_1.Session({\n              mode: READ,\n              database: SYSTEM_DB_NAME,\n              bookmark: bookmark,\n              connectionProvider: connectionProvider,\n              impersonatedUser: impersonatedUser\n            })];\n\n          case 2:\n            error_4 = _a.sent(); // unable to acquire connection towards the given router\n\n            if (error_4 && error_4.code === UNAUTHORIZED_ERROR_CODE) {\n              // auth error and not finding system database is a sign of a configuration issue\n              // discovery should not proceed\n              throw error_4;\n            }\n\n            return [2\n            /*return*/\n            , null];\n\n          case 3:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  RoutingConnectionProvider.prototype._applyRoutingTableIfPossible = function (currentRoutingTable, newRoutingTable, onDatabaseNameResolved) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!newRoutingTable) {\n              // none of routing servers returned valid routing table, throw exception\n              throw (0, neo4j_driver_core_1.newError)(\"Could not perform discovery. No routing servers available. Known routing table: \" + currentRoutingTable, SERVICE_UNAVAILABLE);\n            }\n\n            if (newRoutingTable.writers.length === 0) {\n              // use seed router next time. this is important when cluster is partitioned. it tries to make sure driver\n              // does not always get routing table without writers because it talks exclusively to a minority partition\n              this._useSeedRouter = true;\n            }\n\n            return [4\n            /*yield*/\n            , this._updateRoutingTable(newRoutingTable, onDatabaseNameResolved)];\n\n          case 1:\n            _a.sent();\n\n            return [2\n            /*return*/\n            , newRoutingTable];\n        }\n      });\n    });\n  };\n\n  RoutingConnectionProvider.prototype._updateRoutingTable = function (newRoutingTable, onDatabaseNameResolved) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            // close old connections to servers not present in the new routing table\n            return [4\n            /*yield*/\n            , this._connectionPool.keepAll(newRoutingTable.allServers())];\n\n          case 1:\n            // close old connections to servers not present in the new routing table\n            _a.sent();\n\n            this._routingTableRegistry.removeExpired();\n\n            this._routingTableRegistry.register(newRoutingTable);\n\n            onDatabaseNameResolved(newRoutingTable.database);\n\n            this._log.info(\"Updated routing table \" + newRoutingTable);\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  RoutingConnectionProvider._forgetRouter = function (routingTable, routersArray, routerIndex) {\n    var address = routersArray[routerIndex];\n\n    if (routingTable && address) {\n      routingTable.forgetRouter(address);\n    }\n  };\n\n  return RoutingConnectionProvider;\n}(connection_provider_pooled_1.default);\n\nexports.default = RoutingConnectionProvider;\n/**\n * Responsible for keeping track of the existing routing tables\n */\n\nvar RoutingTableRegistry =\n/** @class */\nfunction () {\n  /**\n   * Constructor\n   * @param {int} routingTablePurgeDelay The routing table purge delay\n   */\n  function RoutingTableRegistry(routingTablePurgeDelay) {\n    this._tables = new Map();\n    this._routingTablePurgeDelay = routingTablePurgeDelay;\n  }\n  /**\n   * Put a routing table in the registry\n   *\n   * @param {RoutingTable} table The routing table\n   * @returns {RoutingTableRegistry} this\n   */\n\n\n  RoutingTableRegistry.prototype.register = function (table) {\n    this._tables.set(table.database, table);\n\n    return this;\n  };\n  /**\n   * Apply function in the routing table for an specific database. If the database name is not defined, the function will\n   * be applied for each element\n   *\n   * @param {string} database The database name\n   * @param {object} callbacks The actions\n   * @param {function (RoutingTable)} callbacks.applyWhenExists Call when the db exists or when the database property is not informed\n   * @param {function ()} callbacks.applyWhenDontExists Call when the database doesn't have the routing table registred\n   * @returns {RoutingTableRegistry} this\n   */\n\n\n  RoutingTableRegistry.prototype.apply = function (database, _a) {\n    var _b = _a === void 0 ? {} : _a,\n        applyWhenExists = _b.applyWhenExists,\n        _c = _b.applyWhenDontExists,\n        applyWhenDontExists = _c === void 0 ? function () {} : _c;\n\n    if (this._tables.has(database)) {\n      applyWhenExists(this._tables.get(database));\n    } else if (typeof database === 'string' || database === null) {\n      applyWhenDontExists();\n    } else {\n      this._forEach(applyWhenExists);\n    }\n\n    return this;\n  };\n  /**\n   * Retrieves a routing table from a given database name\n   *\n   * @param {string|impersonatedUser} impersonatedUser The impersonated User\n   * @param {string} database The database name\n   * @param {function()|RoutingTable} defaultSupplier The routing table supplier, if it's not a function or not exists, it will return itself as default value\n   * @returns {RoutingTable} The routing table for the respective database\n   */\n\n\n  RoutingTableRegistry.prototype.get = function (database, defaultSupplier) {\n    if (this._tables.has(database)) {\n      return this._tables.get(database);\n    }\n\n    return typeof defaultSupplier === 'function' ? defaultSupplier() : defaultSupplier;\n  };\n  /**\n   * Remove the routing table which is already expired\n   * @returns {RoutingTableRegistry} this\n   */\n\n\n  RoutingTableRegistry.prototype.removeExpired = function () {\n    var _this = this;\n\n    return this._removeIf(function (value) {\n      return value.isExpiredFor(_this._routingTablePurgeDelay);\n    });\n  };\n\n  RoutingTableRegistry.prototype._forEach = function (apply) {\n    var e_1, _a;\n\n    try {\n      for (var _b = __values(this._tables), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var _d = __read(_c.value, 2),\n            value = _d[1];\n\n        apply(value);\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n\n    return this;\n  };\n\n  RoutingTableRegistry.prototype._remove = function (key) {\n    this._tables.delete(key);\n\n    return this;\n  };\n\n  RoutingTableRegistry.prototype._removeIf = function (predicate) {\n    var e_2, _a;\n\n    try {\n      for (var _b = __values(this._tables), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var _d = __read(_c.value, 2),\n            key = _d[0],\n            value = _d[1];\n\n        if (predicate(value)) {\n          this._remove(key);\n        }\n      }\n    } catch (e_2_1) {\n      e_2 = {\n        error: e_2_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_2) throw e_2.error;\n      }\n    }\n\n    return this;\n  };\n\n  return RoutingTableRegistry;\n}();","map":{"version":3,"sources":["D:/Documents/EMA/Mines A3/NoSQL/ReseauAchats/reseau_achats/node_modules/neo4j-driver-bolt-connection/lib/connection-provider/connection-provider-routing.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","prototype","hasOwnProperty","call","TypeError","String","__","constructor","create","__assign","assign","t","s","i","n","arguments","length","apply","__createBinding","o","m","k","k2","undefined","defineProperty","enumerable","get","__setModuleDefault","v","value","__importStar","mod","__esModule","result","__awaiter","thisArg","_arguments","P","generator","adopt","resolve","Promise","reject","fulfilled","step","next","e","rejected","done","then","__generator","body","_","label","sent","trys","ops","f","y","g","verb","Symbol","iterator","op","pop","push","__values","__read","r","ar","error","__importDefault","exports","neo4j_driver_core_1","require","rediscovery_1","channel_1","connection_provider_single_1","connection_provider_pooled_1","load_balancing_1","connection_1","SERVICE_UNAVAILABLE","SESSION_EXPIRED","Bookmark","internal","bookmark","_a","constants","READ","ACCESS_MODE_READ","WRITE","ACCESS_MODE_WRITE","BOLT_PROTOCOL_V3","BOLT_PROTOCOL_V4_0","BOLT_PROTOCOL_V4_4","UNAUTHORIZED_ERROR_CODE","DATABASE_NOT_FOUND_ERROR_CODE","SYSTEM_DB_NAME","DEFAULT_DB_NAME","DEFAULT_ROUTING_TABLE_PURGE_DELAY","int","RoutingConnectionProvider","_super","id","address","routingContext","hostNameResolver","config","log","userAgent","authToken","routingTablePurgeDelay","_this","createChannelConnection","_config","_createConnectionErrorHandler","_log","_routingContext","toString","_seedRouter","_rediscovery","default","_loadBalancingStrategy","LeastConnectedLoadBalancingStrategy","_connectionPool","_hostNameResolver","_dnsResolver","HostNameResolver","_useSeedRouter","_routingTableRegistry","RoutingTableRegistry","ConnectionErrorHandler","_handleUnavailability","database","warn","_id","code","message","forget","_handleAuthorizationExpired","purge","catch","_handleWriteFailure","forgetWriter","newError","acquireConnection","_b","accessMode","bookmarks","impersonatedUser","onDatabaseNameResolved","name","context","databaseSpecificErrorHandler","routingTable","connection","error_1","transformed","_c","_freshRoutingTable","databaseName","selectReader","readers","selectWriter","writers","_acquireConnectionToServer","DelegateConnection","handleAndTransformError","_hasProtocolVersion","versionPredicate","addresses","lastError","protocolVersion","error_2","_resolveSeedRouter","protocol","version","close","supportsMultiDb","supportsTransactionConfig","supportsUserImpersonation","applyWhenExists","serverName","acquire","currentRoutingTable","RoutingTable","isStaleFor","info","_refreshRoutingTable","knownRouters","routers","_fetchRoutingTableFromSeedRouterFallbackToKnownRouters","_fetchRoutingTableFromKnownRoutersFallbackToSeedRouter","seenRouters","newRoutingTable","_fetchRoutingTableUsingSeedRouter","_fetchRoutingTableUsingKnownRouters","_applyRoutingTableIfPossible","lastRouterIndex","_fetchRoutingTable","_forgetRouter","seedRouter","resolvedAddresses","newAddresses","filter","indexOf","dnsResolvedAddresses","all","map","concat","routerAddresses","reduce","refreshedTablePromise","currentRouter","currentIndex","previousRouterIndex","session","error_3","_createSessionForRediscovery","lookupRoutingTableOnRouter","routerAddress","connectionProvider","error_4","errorCode","handleAuthorizationExpired","Session","mode","empty","_updateRoutingTable","keepAll","allServers","removeExpired","register","routersArray","routerIndex","forgetRouter","_tables","Map","_routingTablePurgeDelay","table","set","applyWhenDontExists","has","_forEach","defaultSupplier","_removeIf","isExpiredFor","e_1","_d","e_1_1","return","_remove","key","delete","predicate","e_2","e_2_1"],"mappings":"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","sourcesContent":["\"use strict\";\n/**\n * Copyright (c) \"Neo4j\"\n * Neo4j Sweden AB [http://neo4j.com]\n *\n * This file is part of Neo4j.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nvar __values = (this && this.__values) || function(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar neo4j_driver_core_1 = require(\"neo4j-driver-core\");\nvar rediscovery_1 = __importStar(require(\"../rediscovery\"));\nvar channel_1 = require(\"../channel\");\nvar connection_provider_single_1 = __importDefault(require(\"./connection-provider-single\"));\nvar connection_provider_pooled_1 = __importDefault(require(\"./connection-provider-pooled\"));\nvar load_balancing_1 = require(\"../load-balancing\");\nvar connection_1 = require(\"../connection\");\nvar SERVICE_UNAVAILABLE = neo4j_driver_core_1.error.SERVICE_UNAVAILABLE, SESSION_EXPIRED = neo4j_driver_core_1.error.SESSION_EXPIRED;\nvar Bookmark = neo4j_driver_core_1.internal.bookmark.Bookmark, _a = neo4j_driver_core_1.internal.constants, READ = _a.ACCESS_MODE_READ, WRITE = _a.ACCESS_MODE_WRITE, BOLT_PROTOCOL_V3 = _a.BOLT_PROTOCOL_V3, BOLT_PROTOCOL_V4_0 = _a.BOLT_PROTOCOL_V4_0, BOLT_PROTOCOL_V4_4 = _a.BOLT_PROTOCOL_V4_4;\nvar UNAUTHORIZED_ERROR_CODE = 'Neo.ClientError.Security.Unauthorized';\nvar DATABASE_NOT_FOUND_ERROR_CODE = 'Neo.ClientError.Database.DatabaseNotFound';\nvar SYSTEM_DB_NAME = 'system';\nvar DEFAULT_DB_NAME = null;\nvar DEFAULT_ROUTING_TABLE_PURGE_DELAY = (0, neo4j_driver_core_1.int)(30000);\nvar RoutingConnectionProvider = /** @class */ (function (_super) {\n    __extends(RoutingConnectionProvider, _super);\n    function RoutingConnectionProvider(_a) {\n        var id = _a.id, address = _a.address, routingContext = _a.routingContext, hostNameResolver = _a.hostNameResolver, config = _a.config, log = _a.log, userAgent = _a.userAgent, authToken = _a.authToken, routingTablePurgeDelay = _a.routingTablePurgeDelay;\n        var _this = _super.call(this, { id: id, config: config, log: log, userAgent: userAgent, authToken: authToken }, function (address) {\n            return (0, connection_1.createChannelConnection)(address, _this._config, _this._createConnectionErrorHandler(), _this._log, _this._routingContext);\n        }) || this;\n        _this._routingContext = __assign(__assign({}, routingContext), { address: address.toString() });\n        _this._seedRouter = address;\n        _this._rediscovery = new rediscovery_1.default(_this._routingContext);\n        _this._loadBalancingStrategy = new load_balancing_1.LeastConnectedLoadBalancingStrategy(_this._connectionPool);\n        _this._hostNameResolver = hostNameResolver;\n        _this._dnsResolver = new channel_1.HostNameResolver();\n        _this._log = log;\n        _this._useSeedRouter = true;\n        _this._routingTableRegistry = new RoutingTableRegistry(routingTablePurgeDelay\n            ? (0, neo4j_driver_core_1.int)(routingTablePurgeDelay)\n            : DEFAULT_ROUTING_TABLE_PURGE_DELAY);\n        return _this;\n    }\n    RoutingConnectionProvider.prototype._createConnectionErrorHandler = function () {\n        // connection errors mean SERVICE_UNAVAILABLE for direct driver but for routing driver they should only\n        // result in SESSION_EXPIRED because there might still exist other servers capable of serving the request\n        return new connection_1.ConnectionErrorHandler(SESSION_EXPIRED);\n    };\n    RoutingConnectionProvider.prototype._handleUnavailability = function (error, address, database) {\n        this._log.warn(\"Routing driver \" + this._id + \" will forget \" + address + \" for database '\" + database + \"' because of an error \" + error.code + \" '\" + error.message + \"'\");\n        this.forget(address, database || DEFAULT_DB_NAME);\n        return error;\n    };\n    RoutingConnectionProvider.prototype._handleAuthorizationExpired = function (error, address, database) {\n        this._log.warn(\"Routing driver \" + this._id + \" will close connections to \" + address + \" for database '\" + database + \"' because of an error \" + error.code + \" '\" + error.message + \"'\");\n        this._connectionPool.purge(address).catch(function () { });\n        return error;\n    };\n    RoutingConnectionProvider.prototype._handleWriteFailure = function (error, address, database) {\n        this._log.warn(\"Routing driver \" + this._id + \" will forget writer \" + address + \" for database '\" + database + \"' because of an error \" + error.code + \" '\" + error.message + \"'\");\n        this.forgetWriter(address, database || DEFAULT_DB_NAME);\n        return (0, neo4j_driver_core_1.newError)('No longer possible to write to server at ' + address, SESSION_EXPIRED);\n    };\n    /**\n     * See {@link ConnectionProvider} for more information about this method and\n     * its arguments.\n     */\n    RoutingConnectionProvider.prototype.acquireConnection = function (_a) {\n        var _b = _a === void 0 ? {} : _a, accessMode = _b.accessMode, database = _b.database, bookmarks = _b.bookmarks, impersonatedUser = _b.impersonatedUser, onDatabaseNameResolved = _b.onDatabaseNameResolved;\n        return __awaiter(this, void 0, void 0, function () {\n            var name, address, context, databaseSpecificErrorHandler, routingTable, connection, error_1, transformed;\n            var _this = this;\n            return __generator(this, function (_c) {\n                switch (_c.label) {\n                    case 0:\n                        context = { database: database || DEFAULT_DB_NAME };\n                        databaseSpecificErrorHandler = new connection_1.ConnectionErrorHandler(SESSION_EXPIRED, function (error, address) { return _this._handleUnavailability(error, address, context.database); }, function (error, address) { return _this._handleWriteFailure(error, address, context.database); }, function (error, address) {\n                            return _this._handleAuthorizationExpired(error, address, context.database);\n                        });\n                        return [4 /*yield*/, this._freshRoutingTable({\n                                accessMode: accessMode,\n                                database: context.database,\n                                bookmark: bookmarks,\n                                impersonatedUser: impersonatedUser,\n                                onDatabaseNameResolved: function (databaseName) {\n                                    context.database = context.database || databaseName;\n                                    if (onDatabaseNameResolved) {\n                                        onDatabaseNameResolved(databaseName);\n                                    }\n                                }\n                            })\n                            // select a target server based on specified access mode\n                        ];\n                    case 1:\n                        routingTable = _c.sent();\n                        // select a target server based on specified access mode\n                        if (accessMode === READ) {\n                            address = this._loadBalancingStrategy.selectReader(routingTable.readers);\n                            name = 'read';\n                        }\n                        else if (accessMode === WRITE) {\n                            address = this._loadBalancingStrategy.selectWriter(routingTable.writers);\n                            name = 'write';\n                        }\n                        else {\n                            throw (0, neo4j_driver_core_1.newError)('Illegal mode ' + accessMode);\n                        }\n                        // we couldn't select a target server\n                        if (!address) {\n                            throw (0, neo4j_driver_core_1.newError)(\"Failed to obtain connection towards \" + name + \" server. Known routing table is: \" + routingTable, SESSION_EXPIRED);\n                        }\n                        _c.label = 2;\n                    case 2:\n                        _c.trys.push([2, 4, , 5]);\n                        return [4 /*yield*/, this._acquireConnectionToServer(address, name, routingTable)];\n                    case 3:\n                        connection = _c.sent();\n                        return [2 /*return*/, new connection_1.DelegateConnection(connection, databaseSpecificErrorHandler)];\n                    case 4:\n                        error_1 = _c.sent();\n                        transformed = databaseSpecificErrorHandler.handleAndTransformError(error_1, address);\n                        throw transformed;\n                    case 5: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    RoutingConnectionProvider.prototype._hasProtocolVersion = function (versionPredicate) {\n        return __awaiter(this, void 0, void 0, function () {\n            var addresses, lastError, i, connection, protocolVersion, error_2;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this._resolveSeedRouter(this._seedRouter)];\n                    case 1:\n                        addresses = _a.sent();\n                        i = 0;\n                        _a.label = 2;\n                    case 2:\n                        if (!(i < addresses.length)) return [3 /*break*/, 8];\n                        _a.label = 3;\n                    case 3:\n                        _a.trys.push([3, 6, , 7]);\n                        return [4 /*yield*/, (0, connection_1.createChannelConnection)(addresses[i], this._config, this._createConnectionErrorHandler(), this._log)];\n                    case 4:\n                        connection = _a.sent();\n                        protocolVersion = connection.protocol()\n                            ? connection.protocol().version\n                            : null;\n                        return [4 /*yield*/, connection.close()];\n                    case 5:\n                        _a.sent();\n                        if (protocolVersion) {\n                            return [2 /*return*/, versionPredicate(protocolVersion)];\n                        }\n                        return [2 /*return*/, false];\n                    case 6:\n                        error_2 = _a.sent();\n                        lastError = error_2;\n                        return [3 /*break*/, 7];\n                    case 7:\n                        i++;\n                        return [3 /*break*/, 2];\n                    case 8:\n                        if (lastError) {\n                            throw lastError;\n                        }\n                        return [2 /*return*/, false];\n                }\n            });\n        });\n    };\n    RoutingConnectionProvider.prototype.supportsMultiDb = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this._hasProtocolVersion(function (version) { return version >= BOLT_PROTOCOL_V4_0; })];\n                    case 1: return [2 /*return*/, _a.sent()];\n                }\n            });\n        });\n    };\n    RoutingConnectionProvider.prototype.supportsTransactionConfig = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this._hasProtocolVersion(function (version) { return version >= BOLT_PROTOCOL_V3; })];\n                    case 1: return [2 /*return*/, _a.sent()];\n                }\n            });\n        });\n    };\n    RoutingConnectionProvider.prototype.supportsUserImpersonation = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this._hasProtocolVersion(function (version) { return version >= BOLT_PROTOCOL_V4_4; })];\n                    case 1: return [2 /*return*/, _a.sent()];\n                }\n            });\n        });\n    };\n    RoutingConnectionProvider.prototype.forget = function (address, database) {\n        this._routingTableRegistry.apply(database, {\n            applyWhenExists: function (routingTable) { return routingTable.forget(address); }\n        });\n        // We're firing and forgetting this operation explicitly and listening for any\n        // errors to avoid unhandled promise rejection\n        this._connectionPool.purge(address).catch(function () { });\n    };\n    RoutingConnectionProvider.prototype.forgetWriter = function (address, database) {\n        this._routingTableRegistry.apply(database, {\n            applyWhenExists: function (routingTable) { return routingTable.forgetWriter(address); }\n        });\n    };\n    RoutingConnectionProvider.prototype._acquireConnectionToServer = function (address, serverName, routingTable) {\n        return this._connectionPool.acquire(address);\n    };\n    RoutingConnectionProvider.prototype._freshRoutingTable = function (_a) {\n        var _b = _a === void 0 ? {} : _a, accessMode = _b.accessMode, database = _b.database, bookmark = _b.bookmark, impersonatedUser = _b.impersonatedUser, onDatabaseNameResolved = _b.onDatabaseNameResolved;\n        var currentRoutingTable = this._routingTableRegistry.get(database, function () { return new rediscovery_1.RoutingTable({ database: database }); });\n        if (!currentRoutingTable.isStaleFor(accessMode)) {\n            return currentRoutingTable;\n        }\n        this._log.info(\"Routing table is stale for database: \\\"\" + database + \"\\\" and access mode: \\\"\" + accessMode + \"\\\": \" + currentRoutingTable);\n        return this._refreshRoutingTable(currentRoutingTable, bookmark, impersonatedUser, onDatabaseNameResolved);\n    };\n    RoutingConnectionProvider.prototype._refreshRoutingTable = function (currentRoutingTable, bookmark, impersonatedUser, onDatabaseNameResolved) {\n        var knownRouters = currentRoutingTable.routers;\n        if (this._useSeedRouter) {\n            return this._fetchRoutingTableFromSeedRouterFallbackToKnownRouters(knownRouters, currentRoutingTable, bookmark, impersonatedUser, onDatabaseNameResolved);\n        }\n        return this._fetchRoutingTableFromKnownRoutersFallbackToSeedRouter(knownRouters, currentRoutingTable, bookmark, impersonatedUser, onDatabaseNameResolved);\n    };\n    RoutingConnectionProvider.prototype._fetchRoutingTableFromSeedRouterFallbackToKnownRouters = function (knownRouters, currentRoutingTable, bookmark, impersonatedUser, onDatabaseNameResolved) {\n        return __awaiter(this, void 0, void 0, function () {\n            var seenRouters, newRoutingTable;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        seenRouters = [];\n                        return [4 /*yield*/, this._fetchRoutingTableUsingSeedRouter(seenRouters, this._seedRouter, currentRoutingTable, bookmark, impersonatedUser)];\n                    case 1:\n                        newRoutingTable = _a.sent();\n                        if (!newRoutingTable) return [3 /*break*/, 2];\n                        this._useSeedRouter = false;\n                        return [3 /*break*/, 4];\n                    case 2: return [4 /*yield*/, this._fetchRoutingTableUsingKnownRouters(knownRouters, currentRoutingTable, bookmark, impersonatedUser)];\n                    case 3:\n                        // seed router did not return a valid routing table - try to use other known routers\n                        newRoutingTable = _a.sent();\n                        _a.label = 4;\n                    case 4: return [4 /*yield*/, this._applyRoutingTableIfPossible(currentRoutingTable, newRoutingTable, onDatabaseNameResolved)];\n                    case 5: return [2 /*return*/, _a.sent()];\n                }\n            });\n        });\n    };\n    RoutingConnectionProvider.prototype._fetchRoutingTableFromKnownRoutersFallbackToSeedRouter = function (knownRouters, currentRoutingTable, bookmark, impersonatedUser, onDatabaseNameResolved) {\n        return __awaiter(this, void 0, void 0, function () {\n            var newRoutingTable;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this._fetchRoutingTableUsingKnownRouters(knownRouters, currentRoutingTable, bookmark, impersonatedUser)];\n                    case 1:\n                        newRoutingTable = _a.sent();\n                        if (!!newRoutingTable) return [3 /*break*/, 3];\n                        return [4 /*yield*/, this._fetchRoutingTableUsingSeedRouter(knownRouters, this._seedRouter, currentRoutingTable, bookmark, impersonatedUser)];\n                    case 2:\n                        // none of the known routers returned a valid routing table - try to use seed router address for rediscovery\n                        newRoutingTable = _a.sent();\n                        _a.label = 3;\n                    case 3: return [4 /*yield*/, this._applyRoutingTableIfPossible(currentRoutingTable, newRoutingTable, onDatabaseNameResolved)];\n                    case 4: return [2 /*return*/, _a.sent()];\n                }\n            });\n        });\n    };\n    RoutingConnectionProvider.prototype._fetchRoutingTableUsingKnownRouters = function (knownRouters, currentRoutingTable, bookmark, impersonatedUser) {\n        return __awaiter(this, void 0, void 0, function () {\n            var newRoutingTable, lastRouterIndex;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this._fetchRoutingTable(knownRouters, currentRoutingTable, bookmark, impersonatedUser)];\n                    case 1:\n                        newRoutingTable = _a.sent();\n                        if (newRoutingTable) {\n                            // one of the known routers returned a valid routing table - use it\n                            return [2 /*return*/, newRoutingTable];\n                        }\n                        lastRouterIndex = knownRouters.length - 1;\n                        RoutingConnectionProvider._forgetRouter(currentRoutingTable, knownRouters, lastRouterIndex);\n                        return [2 /*return*/, null];\n                }\n            });\n        });\n    };\n    RoutingConnectionProvider.prototype._fetchRoutingTableUsingSeedRouter = function (seenRouters, seedRouter, routingTable, bookmark, impersonatedUser) {\n        return __awaiter(this, void 0, void 0, function () {\n            var resolvedAddresses, newAddresses;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this._resolveSeedRouter(seedRouter)\n                        // filter out all addresses that we've already tried\n                    ];\n                    case 1:\n                        resolvedAddresses = _a.sent();\n                        newAddresses = resolvedAddresses.filter(function (address) { return seenRouters.indexOf(address) < 0; });\n                        return [4 /*yield*/, this._fetchRoutingTable(newAddresses, routingTable, bookmark, impersonatedUser)];\n                    case 2: return [2 /*return*/, _a.sent()];\n                }\n            });\n        });\n    };\n    RoutingConnectionProvider.prototype._resolveSeedRouter = function (seedRouter) {\n        return __awaiter(this, void 0, void 0, function () {\n            var resolvedAddresses, dnsResolvedAddresses;\n            var _this = this;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this._hostNameResolver.resolve(seedRouter)];\n                    case 1:\n                        resolvedAddresses = _a.sent();\n                        return [4 /*yield*/, Promise.all(resolvedAddresses.map(function (address) { return _this._dnsResolver.resolve(address); }))];\n                    case 2:\n                        dnsResolvedAddresses = _a.sent();\n                        return [2 /*return*/, [].concat.apply([], dnsResolvedAddresses)];\n                }\n            });\n        });\n    };\n    RoutingConnectionProvider.prototype._fetchRoutingTable = function (routerAddresses, routingTable, bookmark, impersonatedUser) {\n        var _this = this;\n        return routerAddresses.reduce(function (refreshedTablePromise, currentRouter, currentIndex) { return __awaiter(_this, void 0, void 0, function () {\n            var newRoutingTable, previousRouterIndex, session, error_3;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, refreshedTablePromise];\n                    case 1:\n                        newRoutingTable = _a.sent();\n                        if (newRoutingTable) {\n                            // valid routing table was fetched - just return it, try next router otherwise\n                            return [2 /*return*/, newRoutingTable];\n                        }\n                        else {\n                            previousRouterIndex = currentIndex - 1;\n                            RoutingConnectionProvider._forgetRouter(routingTable, routerAddresses, previousRouterIndex);\n                        }\n                        return [4 /*yield*/, this._createSessionForRediscovery(currentRouter, bookmark, impersonatedUser)];\n                    case 2:\n                        session = _a.sent();\n                        if (!session) return [3 /*break*/, 8];\n                        _a.label = 3;\n                    case 3:\n                        _a.trys.push([3, 5, 6, 7]);\n                        return [4 /*yield*/, this._rediscovery.lookupRoutingTableOnRouter(session, routingTable.database, currentRouter, impersonatedUser)];\n                    case 4: return [2 /*return*/, _a.sent()];\n                    case 5:\n                        error_3 = _a.sent();\n                        if (error_3 && error_3.code === DATABASE_NOT_FOUND_ERROR_CODE) {\n                            // not finding the target database is a sign of a configuration issue\n                            throw error_3;\n                        }\n                        this._log.warn(\"unable to fetch routing table because of an error \" + error_3);\n                        return [2 /*return*/, null];\n                    case 6:\n                        session.close();\n                        return [7 /*endfinally*/];\n                    case 7: return [3 /*break*/, 9];\n                    case 8: \n                    // unable to acquire connection and create session towards the current router\n                    // return null to signal that the next router should be tried\n                    return [2 /*return*/, null];\n                    case 9: return [2 /*return*/];\n                }\n            });\n        }); }, Promise.resolve(null));\n    };\n    RoutingConnectionProvider.prototype._createSessionForRediscovery = function (routerAddress, bookmark, impersonatedUser) {\n        return __awaiter(this, void 0, void 0, function () {\n            var connection, databaseSpecificErrorHandler, connectionProvider, protocolVersion, error_4;\n            var _this = this;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        _a.trys.push([0, 2, , 3]);\n                        return [4 /*yield*/, this._connectionPool.acquire(routerAddress)];\n                    case 1:\n                        connection = _a.sent();\n                        databaseSpecificErrorHandler = connection_1.ConnectionErrorHandler.create({\n                            errorCode: SESSION_EXPIRED,\n                            handleAuthorizationExpired: function (error, address) { return _this._handleAuthorizationExpired(error, address); }\n                        });\n                        connectionProvider = new connection_provider_single_1.default(new connection_1.DelegateConnection(connection, databaseSpecificErrorHandler));\n                        protocolVersion = connection.protocol().version;\n                        if (protocolVersion < 4.0) {\n                            return [2 /*return*/, new neo4j_driver_core_1.Session({\n                                    mode: WRITE,\n                                    bookmark: Bookmark.empty(),\n                                    connectionProvider: connectionProvider\n                                })];\n                        }\n                        return [2 /*return*/, new neo4j_driver_core_1.Session({\n                                mode: READ,\n                                database: SYSTEM_DB_NAME,\n                                bookmark: bookmark,\n                                connectionProvider: connectionProvider,\n                                impersonatedUser: impersonatedUser\n                            })];\n                    case 2:\n                        error_4 = _a.sent();\n                        // unable to acquire connection towards the given router\n                        if (error_4 && error_4.code === UNAUTHORIZED_ERROR_CODE) {\n                            // auth error and not finding system database is a sign of a configuration issue\n                            // discovery should not proceed\n                            throw error_4;\n                        }\n                        return [2 /*return*/, null];\n                    case 3: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    RoutingConnectionProvider.prototype._applyRoutingTableIfPossible = function (currentRoutingTable, newRoutingTable, onDatabaseNameResolved) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!newRoutingTable) {\n                            // none of routing servers returned valid routing table, throw exception\n                            throw (0, neo4j_driver_core_1.newError)(\"Could not perform discovery. No routing servers available. Known routing table: \" + currentRoutingTable, SERVICE_UNAVAILABLE);\n                        }\n                        if (newRoutingTable.writers.length === 0) {\n                            // use seed router next time. this is important when cluster is partitioned. it tries to make sure driver\n                            // does not always get routing table without writers because it talks exclusively to a minority partition\n                            this._useSeedRouter = true;\n                        }\n                        return [4 /*yield*/, this._updateRoutingTable(newRoutingTable, onDatabaseNameResolved)];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/, newRoutingTable];\n                }\n            });\n        });\n    };\n    RoutingConnectionProvider.prototype._updateRoutingTable = function (newRoutingTable, onDatabaseNameResolved) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: \n                    // close old connections to servers not present in the new routing table\n                    return [4 /*yield*/, this._connectionPool.keepAll(newRoutingTable.allServers())];\n                    case 1:\n                        // close old connections to servers not present in the new routing table\n                        _a.sent();\n                        this._routingTableRegistry.removeExpired();\n                        this._routingTableRegistry.register(newRoutingTable);\n                        onDatabaseNameResolved(newRoutingTable.database);\n                        this._log.info(\"Updated routing table \" + newRoutingTable);\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    RoutingConnectionProvider._forgetRouter = function (routingTable, routersArray, routerIndex) {\n        var address = routersArray[routerIndex];\n        if (routingTable && address) {\n            routingTable.forgetRouter(address);\n        }\n    };\n    return RoutingConnectionProvider;\n}(connection_provider_pooled_1.default));\nexports.default = RoutingConnectionProvider;\n/**\n * Responsible for keeping track of the existing routing tables\n */\nvar RoutingTableRegistry = /** @class */ (function () {\n    /**\n     * Constructor\n     * @param {int} routingTablePurgeDelay The routing table purge delay\n     */\n    function RoutingTableRegistry(routingTablePurgeDelay) {\n        this._tables = new Map();\n        this._routingTablePurgeDelay = routingTablePurgeDelay;\n    }\n    /**\n     * Put a routing table in the registry\n     *\n     * @param {RoutingTable} table The routing table\n     * @returns {RoutingTableRegistry} this\n     */\n    RoutingTableRegistry.prototype.register = function (table) {\n        this._tables.set(table.database, table);\n        return this;\n    };\n    /**\n     * Apply function in the routing table for an specific database. If the database name is not defined, the function will\n     * be applied for each element\n     *\n     * @param {string} database The database name\n     * @param {object} callbacks The actions\n     * @param {function (RoutingTable)} callbacks.applyWhenExists Call when the db exists or when the database property is not informed\n     * @param {function ()} callbacks.applyWhenDontExists Call when the database doesn't have the routing table registred\n     * @returns {RoutingTableRegistry} this\n     */\n    RoutingTableRegistry.prototype.apply = function (database, _a) {\n        var _b = _a === void 0 ? {} : _a, applyWhenExists = _b.applyWhenExists, _c = _b.applyWhenDontExists, applyWhenDontExists = _c === void 0 ? function () { } : _c;\n        if (this._tables.has(database)) {\n            applyWhenExists(this._tables.get(database));\n        }\n        else if (typeof database === 'string' || database === null) {\n            applyWhenDontExists();\n        }\n        else {\n            this._forEach(applyWhenExists);\n        }\n        return this;\n    };\n    /**\n     * Retrieves a routing table from a given database name\n     *\n     * @param {string|impersonatedUser} impersonatedUser The impersonated User\n     * @param {string} database The database name\n     * @param {function()|RoutingTable} defaultSupplier The routing table supplier, if it's not a function or not exists, it will return itself as default value\n     * @returns {RoutingTable} The routing table for the respective database\n     */\n    RoutingTableRegistry.prototype.get = function (database, defaultSupplier) {\n        if (this._tables.has(database)) {\n            return this._tables.get(database);\n        }\n        return typeof defaultSupplier === 'function'\n            ? defaultSupplier()\n            : defaultSupplier;\n    };\n    /**\n     * Remove the routing table which is already expired\n     * @returns {RoutingTableRegistry} this\n     */\n    RoutingTableRegistry.prototype.removeExpired = function () {\n        var _this = this;\n        return this._removeIf(function (value) {\n            return value.isExpiredFor(_this._routingTablePurgeDelay);\n        });\n    };\n    RoutingTableRegistry.prototype._forEach = function (apply) {\n        var e_1, _a;\n        try {\n            for (var _b = __values(this._tables), _c = _b.next(); !_c.done; _c = _b.next()) {\n                var _d = __read(_c.value, 2), value = _d[1];\n                apply(value);\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n        return this;\n    };\n    RoutingTableRegistry.prototype._remove = function (key) {\n        this._tables.delete(key);\n        return this;\n    };\n    RoutingTableRegistry.prototype._removeIf = function (predicate) {\n        var e_2, _a;\n        try {\n            for (var _b = __values(this._tables), _c = _b.next(); !_c.done; _c = _b.next()) {\n                var _d = __read(_c.value, 2), key = _d[0], value = _d[1];\n                if (predicate(value)) {\n                    this._remove(key);\n                }\n            }\n        }\n        catch (e_2_1) { e_2 = { error: e_2_1 }; }\n        finally {\n            try {\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n            }\n            finally { if (e_2) throw e_2.error; }\n        }\n        return this;\n    };\n    return RoutingTableRegistry;\n}());\n"]},"metadata":{},"sourceType":"script"}