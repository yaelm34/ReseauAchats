{"ast":null,"code":"/** PURE_IMPORTS_START _Observable,_scheduler_async,_util_isNumeric,_util_isScheduler PURE_IMPORTS_END */\nimport { Observable } from '../Observable';\nimport { async } from '../scheduler/async';\nimport { isNumeric } from '../util/isNumeric';\nimport { isScheduler } from '../util/isScheduler';\nexport function timer(dueTime, periodOrScheduler, scheduler) {\n  if (dueTime === void 0) {\n    dueTime = 0;\n  }\n\n  var period = -1;\n\n  if (isNumeric(periodOrScheduler)) {\n    period = Number(periodOrScheduler) < 1 && 1 || Number(periodOrScheduler);\n  } else if (isScheduler(periodOrScheduler)) {\n    scheduler = periodOrScheduler;\n  }\n\n  if (!isScheduler(scheduler)) {\n    scheduler = async;\n  }\n\n  return new Observable(function (subscriber) {\n    var due = isNumeric(dueTime) ? dueTime : +dueTime - scheduler.now();\n    return scheduler.schedule(dispatch, due, {\n      index: 0,\n      period: period,\n      subscriber: subscriber\n    });\n  });\n}\n\nfunction dispatch(state) {\n  var index = state.index,\n      period = state.period,\n      subscriber = state.subscriber;\n  subscriber.next(index);\n\n  if (subscriber.closed) {\n    return;\n  } else if (period === -1) {\n    return subscriber.complete();\n  }\n\n  state.index = index + 1;\n  this.schedule(state, period);\n}","map":{"version":3,"mappings":"AAAA;AAEA,SAASA,UAAT,QAAsB,eAAtB;AACA,SAASC,KAAT,QAAoB,oBAApB;AACA,SAASC,SAAT,QAAsB,mBAAtB;AAqDA,SAAMC,WAAN,QAAsB,qBAAtB;OAAsB,2CAA0BC,SAA1B,EAA0B;AAG9C,MAAIC,OAAM,KAAM,MAAhB,EAAgB;AACZA,cAAU,CAAV;;;MAEHC;;eAAU,qBAAY;AACrBA,aAASC,MAAG,mBAAH,GAA4B,CAA5B,IAA4B,CAA5B,IAA4BA,yBAArC;AACD,SAEI,eAAY,mBAAZ,EAAwB;AAC3BH,aAAS,GAAGI,iBAAZ;AACD;;AAED,kBAAW,WAAX,EAAsB;AACpBJ,aAAS,GAAGH,KAAZ;;;aAEKD,WAAW,UAAUS,UAAV,EAAiB;AAEjC,WAAO,YAAU,SAAV,GACLJ,OADK,GAEJ,0BAFH;AAGC;AACJK,cADI;AACJJ,oBADI;AACJG;AADI;AAUK;;;SAGJE,SAAUC,OAAO;MACnBF,QAAOE;MAAAN;MAAAG;YACR;;gBAAU,CAAMI,QAAO;AACtB;AACD,SAEI,IAACP,MAAQ,KAAK,EAAd,EAAmB;AACpB,WAACG,UAAgB,SAAhB,EAAD;AACL","names":["Observable","async","isNumeric","isScheduler","scheduler","dueTime","period","Number","periodOrScheduler","subscriber","index","dispatch","state","closed"],"sources":["D:\\Documents\\EMA\\Mines A3\\NoSQL\\ReseauAchats\\reseau_achats\\node_modules\\rxjs\\src\\internal\\observable\\timer.ts"],"sourcesContent":["import { Observable } from '../Observable';\r\nimport { SchedulerAction, SchedulerLike } from '../types';\r\nimport { async } from '../scheduler/async';\r\nimport { isNumeric } from '../util/isNumeric';\r\nimport { isScheduler } from '../util/isScheduler';\r\nimport { Subscriber } from '../Subscriber';\r\n\r\n/**\r\n * Creates an Observable that starts emitting after an `dueTime` and\r\n * emits ever increasing numbers after each `period` of time thereafter.\r\n *\r\n * <span class=\"informal\">Its like {@link index/interval}, but you can specify when\r\n * should the emissions start.</span>\r\n *\r\n * ![](timer.png)\r\n *\r\n * `timer` returns an Observable that emits an infinite sequence of ascending\r\n * integers, with a constant interval of time, `period` of your choosing\r\n * between those emissions. The first emission happens after the specified\r\n * `dueTime`. The initial delay may be a `Date`. By default, this\r\n * operator uses the {@link asyncScheduler} {@link SchedulerLike} to provide a notion of time, but you\r\n * may pass any {@link SchedulerLike} to it. If `period` is not specified, the output\r\n * Observable emits only one value, `0`. Otherwise, it emits an infinite\r\n * sequence.\r\n *\r\n * ## Examples\r\n * ### Emits ascending numbers, one every second (1000ms), starting after 3 seconds\r\n * ```ts\r\n * import { timer } from 'rxjs';\r\n *\r\n * const numbers = timer(3000, 1000);\r\n * numbers.subscribe(x => console.log(x));\r\n * ```\r\n *\r\n * ### Emits one number after five seconds\r\n * ```ts\r\n * import { timer } from 'rxjs';\r\n *\r\n * const numbers = timer(5000);\r\n * numbers.subscribe(x => console.log(x));\r\n * ```\r\n * @see {@link index/interval}\r\n * @see {@link delay}\r\n *\r\n * @param {number|Date} [dueTime] The initial delay time specified as a Date object or as an integer denoting\r\n * milliseconds to wait before emitting the first value of 0`.\r\n * @param {number|SchedulerLike} [periodOrScheduler] The period of time between emissions of the\r\n * subsequent numbers.\r\n * @param {SchedulerLike} [scheduler=async] The {@link SchedulerLike} to use for scheduling\r\n * the emission of values, and providing a notion of \"time\".\r\n * @return {Observable} An Observable that emits a `0` after the\r\n * `dueTime` and ever increasing numbers after each `period` of time\r\n * thereafter.\r\n * @static true\r\n * @name timer\r\n * @owner Observable\r\n */\r\nexport function timer(dueTime: number | Date = 0,\r\n                      periodOrScheduler?: number | SchedulerLike,\r\n                      scheduler?: SchedulerLike): Observable<number> {\r\n  let period = -1;\r\n  if (isNumeric(periodOrScheduler)) {\r\n    period = Number(periodOrScheduler) < 1 && 1 || Number(periodOrScheduler);\r\n  } else if (isScheduler(periodOrScheduler)) {\r\n    scheduler = periodOrScheduler as any;\r\n  }\r\n\r\n  if (!isScheduler(scheduler)) {\r\n    scheduler = async;\r\n  }\r\n\r\n  return new Observable(subscriber => {\r\n    const due = isNumeric(dueTime)\r\n      ? (dueTime as number)\r\n      : (+dueTime - scheduler.now());\r\n\r\n    return scheduler.schedule(dispatch, due, {\r\n      index: 0, period, subscriber\r\n    });\r\n  });\r\n}\r\n\r\ninterface TimerState {\r\n  index: number;\r\n  period: number;\r\n  subscriber: Subscriber<number>;\r\n}\r\n\r\nfunction dispatch(this: SchedulerAction<TimerState>, state: TimerState) {\r\n  const { index, period, subscriber } = state;\r\n  subscriber.next(index);\r\n\r\n  if (subscriber.closed) {\r\n    return;\r\n  } else if (period === -1) {\r\n    return subscriber.complete();\r\n  }\r\n\r\n  state.index = index + 1;\r\n  this.schedule(state, period);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}