{"ast":null,"code":"/** PURE_IMPORTS_START tslib,_innerSubscribe PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { SimpleOuterSubscriber, innerSubscribe, SimpleInnerSubscriber } from '../innerSubscribe';\nexport function expand(project, concurrent, scheduler) {\n  if (concurrent === void 0) {\n    concurrent = Number.POSITIVE_INFINITY;\n  }\n\n  concurrent = (concurrent || 0) < 1 ? Number.POSITIVE_INFINITY : concurrent;\n  return function (source) {\n    return source.lift(new ExpandOperator(project, concurrent, scheduler));\n  };\n}\n\nvar ExpandOperator = /*@__PURE__*/function () {\n  function ExpandOperator(project, concurrent, scheduler) {\n    this.project = project;\n    this.concurrent = concurrent;\n    this.scheduler = scheduler;\n  }\n\n  ExpandOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new ExpandSubscriber(subscriber, this.project, this.concurrent, this.scheduler));\n  };\n\n  return ExpandOperator;\n}();\n\nexport { ExpandOperator };\n\nvar ExpandSubscriber = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(ExpandSubscriber, _super);\n\n  function ExpandSubscriber(destination, project, concurrent, scheduler) {\n    var _this = _super.call(this, destination) || this;\n\n    _this.project = project;\n    _this.concurrent = concurrent;\n    _this.scheduler = scheduler;\n    _this.index = 0;\n    _this.active = 0;\n    _this.hasCompleted = false;\n\n    if (concurrent < Number.POSITIVE_INFINITY) {\n      _this.buffer = [];\n    }\n\n    return _this;\n  }\n\n  ExpandSubscriber.dispatch = function (arg) {\n    var subscriber = arg.subscriber,\n        result = arg.result,\n        value = arg.value,\n        index = arg.index;\n    subscriber.subscribeToProjection(result, value, index);\n  };\n\n  ExpandSubscriber.prototype._next = function (value) {\n    var destination = this.destination;\n\n    if (destination.closed) {\n      this._complete();\n\n      return;\n    }\n\n    var index = this.index++;\n\n    if (this.active < this.concurrent) {\n      destination.next(value);\n\n      try {\n        var project = this.project;\n        var result = project(value, index);\n\n        if (!this.scheduler) {\n          this.subscribeToProjection(result, value, index);\n        } else {\n          var state = {\n            subscriber: this,\n            result: result,\n            value: value,\n            index: index\n          };\n          var destination_1 = this.destination;\n          destination_1.add(this.scheduler.schedule(ExpandSubscriber.dispatch, 0, state));\n        }\n      } catch (e) {\n        destination.error(e);\n      }\n    } else {\n      this.buffer.push(value);\n    }\n  };\n\n  ExpandSubscriber.prototype.subscribeToProjection = function (result, value, index) {\n    this.active++;\n    var destination = this.destination;\n    destination.add(innerSubscribe(result, new SimpleInnerSubscriber(this)));\n  };\n\n  ExpandSubscriber.prototype._complete = function () {\n    this.hasCompleted = true;\n\n    if (this.hasCompleted && this.active === 0) {\n      this.destination.complete();\n    }\n\n    this.unsubscribe();\n  };\n\n  ExpandSubscriber.prototype.notifyNext = function (innerValue) {\n    this._next(innerValue);\n  };\n\n  ExpandSubscriber.prototype.notifyComplete = function () {\n    var buffer = this.buffer;\n    this.active--;\n\n    if (buffer && buffer.length > 0) {\n      this._next(buffer.shift());\n    }\n\n    if (this.hasCompleted && this.active === 0) {\n      this.destination.complete();\n    }\n  };\n\n  return ExpandSubscriber;\n}(SimpleOuterSubscriber);\n\nexport { ExpandSubscriber };","map":{"version":3,"mappings":";AAKA,OAAO,KAAEA,OAAT,MAAS,OAAT;AA2DA,SAAMC,qBAAN,EAC6BC,cAD7B,EAE6BC,qBAF7B,QAEsD,mBAFtD;OAC6B,gDAA4B;AAEvD,gBAAc,UAAU,CAAxB,EAAwB;AAExBC,cAAO,GAACC,MAAqB,kBAA7B;AACD;;AAEDD;AACE,2BAAoB;AAAA,WACAE,YACA,mBAAyBC,OAAzB,EAAyBH,UAAzB,EAAyBI,SAAzB,CADA,CADA;AAEyB,GAF7C;;;kBACoB,gBAAU,YAAQ;WAClBC,wBAAyBL;AAC5C;AAED;AACE,qBAAcI,SAAd;AACD;;AACHC,2BAACC,IAAD,GAAC;AAAA;GAAD;;AAcA;CArBgC;;SA2B9BD;;oBAIE,gBAAM,kBAAY;SAHA,WAAOE,kBAAiDC;;WACxDD,8BAAkBJ;AAClB,kCAAyBM,WAAzB,KAAyB,IAAzB;;AARZC,oBAAkBP,OAAlB;AACAO,uBAAmBV,UAAnB;AACAU,sBAAYN,SAAZ;AAQNM,SAAI,MAAJ,GAAc,CAAd;SACE,UAAK;SACN;;;AACFA;AAEc;;AACN;;;AAETH,kBAAC,SAAD,GAAC;AAES;AAAA,QAAVI,SAAgBC,IAAUD,MAAhB;AAAA,QAAgBE,iBAAhB;AAAA,QAAgBC,iBAAhB;AACRC,cAAM,sBAAN,CAAyBJ,MAAzB,EAAqCE,KAArC,EAAqCC,KAArC;GAHF;;kBAMS,WAAYE;QACjBP,WAAO;;QACRA;AAEK,WAAKQ,SAAL;;AACF;;;QAEFH,KAAI;;aACMI,0BAAiB;iBACnB,MAASL;;UACf;YACEV,OAAK;YACNQ;;aAAM;AACL,eAAMQ,qBAAN,CAA+CR,MAA/C,EAAqDE,KAArD,EAA2DC,KAA3D;eAEA;AACD;AAAAC;AAAAJ;AAAAE;AAAAC;AAAA;AACF;AAASM,uBAAE,IAAF,CAAE,4DAAF;AACR;AACD,QACF;AAAMX;AACL;AACD,WACF;AAEO;AACN;;;kBAEY,WAAIU,wBAA2B,kBAAsBN,KAAtB,EAA6BC,KAA7B,EAA8B;AAC1E;AAES;AACRL,eAAK,IAAL,CAAKX,cAAoB,yCAAzB;;;kBAEO,WAAYmB,YAAY;SAC9BI;;AACD,QAAI,KAACA,YAAD,IAAe,iBAAnB,EAAmB;AACpB;AAED;;AACE,SAAKC,WAAL;AACD;;AAEDf;AACE,SAAMS,KAAN,CAAYO,UAAZ;GADF;;kBAGY,WAAWC,iBAAY;QAC/BC,MAAK,QAAMA;SACZP;;AACD,QAAIO,MAAK,WAAYC,MAAZ,GAAqB,CAA9B,EAA8B;AAC5B,WAAKV,KAAL,CAAKS,MAAY,MAAZ,EAAL;AACD;;AACF;AACH,uBAACE,QAAD;AA9E4C;;;;CAUlC","names":["tslib_1","SimpleOuterSubscriber","innerSubscribe","SimpleInnerSubscriber","concurrent","Number","source","project","scheduler","ExpandOperator","call","ExpandSubscriber","_super","destination","_this","result","arg","value","index","subscriber","_next","_complete","active","subscribeToProjection","destination_1","hasCompleted","unsubscribe","innerValue","notifyComplete","buffer","length","complete"],"sources":["D:\\Documents\\EMA\\Mines A3\\NoSQL\\ReseauAchats\\reseau_achats\\node_modules\\rxjs\\src\\internal\\operators\\expand.ts"],"sourcesContent":["import { Observable } from '../Observable';\r\nimport { Operator } from '../Operator';\r\nimport { Subscriber } from '../Subscriber';\r\nimport { Subscription } from '../Subscription';\r\nimport { MonoTypeOperatorFunction, OperatorFunction, ObservableInput, SchedulerLike } from '../types';\r\nimport { SimpleOuterSubscriber, innerSubscribe, SimpleInnerSubscriber } from '../innerSubscribe';\r\n\r\n/* tslint:disable:max-line-length */\r\nexport function expand<T, R>(project: (value: T, index: number) => ObservableInput<R>, concurrent?: number, scheduler?: SchedulerLike): OperatorFunction<T, R>;\r\nexport function expand<T>(project: (value: T, index: number) => ObservableInput<T>, concurrent?: number, scheduler?: SchedulerLike): MonoTypeOperatorFunction<T>;\r\n/* tslint:enable:max-line-length */\r\n\r\n/**\r\n * Recursively projects each source value to an Observable which is merged in\r\n * the output Observable.\r\n *\r\n * <span class=\"informal\">It's similar to {@link mergeMap}, but applies the\r\n * projection function to every source value as well as every output value.\r\n * It's recursive.</span>\r\n *\r\n * ![](expand.png)\r\n *\r\n * Returns an Observable that emits items based on applying a function that you\r\n * supply to each item emitted by the source Observable, where that function\r\n * returns an Observable, and then merging those resulting Observables and\r\n * emitting the results of this merger. *Expand* will re-emit on the output\r\n * Observable every source value. Then, each output value is given to the\r\n * `project` function which returns an inner Observable to be merged on the\r\n * output Observable. Those output values resulting from the projection are also\r\n * given to the `project` function to produce new output values. This is how\r\n * *expand* behaves recursively.\r\n *\r\n * ## Example\r\n * Start emitting the powers of two on every click, at most 10 of them\r\n * ```ts\r\n * import { fromEvent, of } from 'rxjs';\r\n * import { expand, mapTo, delay, take } from 'rxjs/operators';\r\n *\r\n * const clicks = fromEvent(document, 'click');\r\n * const powersOfTwo = clicks.pipe(\r\n *   mapTo(1),\r\n *   expand(x => of(2 * x).pipe(delay(1000))),\r\n *   take(10),\r\n * );\r\n * powersOfTwo.subscribe(x => console.log(x));\r\n * ```\r\n *\r\n * @see {@link mergeMap}\r\n * @see {@link mergeScan}\r\n *\r\n * @param {function(value: T, index: number) => Observable} project A function\r\n * that, when applied to an item emitted by the source or the output Observable,\r\n * returns an Observable.\r\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\r\n * Observables being subscribed to concurrently.\r\n * @param {SchedulerLike} [scheduler=null] The {@link SchedulerLike} to use for subscribing to\r\n * each projected inner Observable.\r\n * @return {Observable} An Observable that emits the source values and also\r\n * result of applying the projection function to each value emitted on the\r\n * output Observable and and merging the results of the Observables obtained\r\n * from this transformation.\r\n * @method expand\r\n * @owner Observable\r\n */\r\nexport function expand<T, R>(project: (value: T, index: number) => ObservableInput<R>,\r\n                             concurrent: number = Number.POSITIVE_INFINITY,\r\n                             scheduler?: SchedulerLike): OperatorFunction<T, R> {\r\n  concurrent = (concurrent || 0) < 1 ? Number.POSITIVE_INFINITY : concurrent;\r\n\r\n  return (source: Observable<T>) => source.lift(new ExpandOperator(project, concurrent, scheduler));\r\n}\r\n\r\nexport class ExpandOperator<T, R> implements Operator<T, R> {\r\n  constructor(private project: (value: T, index: number) => ObservableInput<R>,\r\n              private concurrent: number,\r\n              private scheduler?: SchedulerLike) {\r\n  }\r\n\r\n  call(subscriber: Subscriber<R>, source: any): any {\r\n    return source.subscribe(new ExpandSubscriber(subscriber, this.project, this.concurrent, this.scheduler));\r\n  }\r\n}\r\n\r\ninterface DispatchArg<T, R> {\r\n  subscriber: ExpandSubscriber<T, R>;\r\n  result: ObservableInput<R>;\r\n  value: any;\r\n  index: number;\r\n}\r\n\r\n/**\r\n * We need this JSDoc comment for affecting ESDoc.\r\n * @ignore\r\n * @extends {Ignored}\r\n */\r\nexport class ExpandSubscriber<T, R> extends SimpleOuterSubscriber<T, R> {\r\n  private index: number = 0;\r\n  private active: number = 0;\r\n  private hasCompleted: boolean = false;\r\n  private buffer?: any[];\r\n\r\n  constructor(destination: Subscriber<R>,\r\n              private project: (value: T, index: number) => ObservableInput<R>,\r\n              private concurrent: number,\r\n              private scheduler?: SchedulerLike) {\r\n    super(destination);\r\n    if (concurrent < Number.POSITIVE_INFINITY) {\r\n      this.buffer = [];\r\n    }\r\n  }\r\n\r\n  private static dispatch<T, R>(arg: DispatchArg<T, R>): void {\r\n    const {subscriber, result, value, index} = arg;\r\n    subscriber.subscribeToProjection(result, value, index);\r\n  }\r\n\r\n  protected _next(value: any): void {\r\n    const destination = this.destination;\r\n\r\n    if (destination.closed) {\r\n      this._complete();\r\n      return;\r\n    }\r\n\r\n    const index = this.index++;\r\n    if (this.active < this.concurrent) {\r\n      destination.next!(value);\r\n      try {\r\n        const { project } = this;\r\n        const result = project(value, index);\r\n        if (!this.scheduler) {\r\n          this.subscribeToProjection(result, value, index);\r\n        } else {\r\n          const state: DispatchArg<T, R> = { subscriber: this, result, value, index };\r\n          const destination = this.destination as Subscription;\r\n          destination.add(this.scheduler.schedule<DispatchArg<T, R>>(ExpandSubscriber.dispatch as any, 0, state));\r\n        }\r\n      } catch (e) {\r\n        destination.error!(e);\r\n      }\r\n    } else {\r\n      this.buffer!.push(value);\r\n    }\r\n  }\r\n\r\n  private subscribeToProjection(result: any, value: T, index: number): void {\r\n    this.active++;\r\n    const destination = this.destination as Subscription;\r\n    destination.add(innerSubscribe(result, new SimpleInnerSubscriber(this)));\r\n  }\r\n\r\n  protected _complete(): void {\r\n    this.hasCompleted = true;\r\n    if (this.hasCompleted && this.active === 0) {\r\n      this.destination.complete!();\r\n    }\r\n    this.unsubscribe();\r\n  }\r\n\r\n  notifyNext(innerValue: R): void {\r\n    this._next(innerValue);\r\n  }\r\n\r\n  notifyComplete(): void {\r\n    const buffer = this.buffer;\r\n    this.active--;\r\n    if (buffer && buffer.length > 0) {\r\n      this._next(buffer.shift());\r\n    }\r\n    if (this.hasCompleted && this.active === 0) {\r\n      this.destination.complete!();\r\n    }\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}