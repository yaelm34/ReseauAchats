{"ast":null,"code":"/** PURE_IMPORTS_START tslib,_Subscriber,_Observable,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nexport function delayWhen(delayDurationSelector, subscriptionDelay) {\n  if (subscriptionDelay) {\n    return function (source) {\n      return new SubscriptionDelayObservable(source, subscriptionDelay).lift(new DelayWhenOperator(delayDurationSelector));\n    };\n  }\n\n  return function (source) {\n    return source.lift(new DelayWhenOperator(delayDurationSelector));\n  };\n}\n\nvar DelayWhenOperator = /*@__PURE__*/function () {\n  function DelayWhenOperator(delayDurationSelector) {\n    this.delayDurationSelector = delayDurationSelector;\n  }\n\n  DelayWhenOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new DelayWhenSubscriber(subscriber, this.delayDurationSelector));\n  };\n\n  return DelayWhenOperator;\n}();\n\nvar DelayWhenSubscriber = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(DelayWhenSubscriber, _super);\n\n  function DelayWhenSubscriber(destination, delayDurationSelector) {\n    var _this = _super.call(this, destination) || this;\n\n    _this.delayDurationSelector = delayDurationSelector;\n    _this.completed = false;\n    _this.delayNotifierSubscriptions = [];\n    _this.index = 0;\n    return _this;\n  }\n\n  DelayWhenSubscriber.prototype.notifyNext = function (outerValue, _innerValue, _outerIndex, _innerIndex, innerSub) {\n    this.destination.next(outerValue);\n    this.removeSubscription(innerSub);\n    this.tryComplete();\n  };\n\n  DelayWhenSubscriber.prototype.notifyError = function (error, innerSub) {\n    this._error(error);\n  };\n\n  DelayWhenSubscriber.prototype.notifyComplete = function (innerSub) {\n    var value = this.removeSubscription(innerSub);\n\n    if (value) {\n      this.destination.next(value);\n    }\n\n    this.tryComplete();\n  };\n\n  DelayWhenSubscriber.prototype._next = function (value) {\n    var index = this.index++;\n\n    try {\n      var delayNotifier = this.delayDurationSelector(value, index);\n\n      if (delayNotifier) {\n        this.tryDelay(delayNotifier, value);\n      }\n    } catch (err) {\n      this.destination.error(err);\n    }\n  };\n\n  DelayWhenSubscriber.prototype._complete = function () {\n    this.completed = true;\n    this.tryComplete();\n    this.unsubscribe();\n  };\n\n  DelayWhenSubscriber.prototype.removeSubscription = function (subscription) {\n    subscription.unsubscribe();\n    var subscriptionIdx = this.delayNotifierSubscriptions.indexOf(subscription);\n\n    if (subscriptionIdx !== -1) {\n      this.delayNotifierSubscriptions.splice(subscriptionIdx, 1);\n    }\n\n    return subscription.outerValue;\n  };\n\n  DelayWhenSubscriber.prototype.tryDelay = function (delayNotifier, value) {\n    var notifierSubscription = subscribeToResult(this, delayNotifier, value);\n\n    if (notifierSubscription && !notifierSubscription.closed) {\n      var destination = this.destination;\n      destination.add(notifierSubscription);\n      this.delayNotifierSubscriptions.push(notifierSubscription);\n    }\n  };\n\n  DelayWhenSubscriber.prototype.tryComplete = function () {\n    if (this.completed && this.delayNotifierSubscriptions.length === 0) {\n      this.destination.complete();\n    }\n  };\n\n  return DelayWhenSubscriber;\n}(OuterSubscriber);\n\nvar SubscriptionDelayObservable = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(SubscriptionDelayObservable, _super);\n\n  function SubscriptionDelayObservable(source, subscriptionDelay) {\n    var _this = _super.call(this) || this;\n\n    _this.source = source;\n    _this.subscriptionDelay = subscriptionDelay;\n    return _this;\n  }\n\n  SubscriptionDelayObservable.prototype._subscribe = function (subscriber) {\n    this.subscriptionDelay.subscribe(new SubscriptionDelaySubscriber(subscriber, this.source));\n  };\n\n  return SubscriptionDelayObservable;\n}(Observable);\n\nvar SubscriptionDelaySubscriber = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(SubscriptionDelaySubscriber, _super);\n\n  function SubscriptionDelaySubscriber(parent, source) {\n    var _this = _super.call(this) || this;\n\n    _this.parent = parent;\n    _this.source = source;\n    _this.sourceSubscribed = false;\n    return _this;\n  }\n\n  SubscriptionDelaySubscriber.prototype._next = function (unused) {\n    this.subscribeToSource();\n  };\n\n  SubscriptionDelaySubscriber.prototype._error = function (err) {\n    this.unsubscribe();\n    this.parent.error(err);\n  };\n\n  SubscriptionDelaySubscriber.prototype._complete = function () {\n    this.unsubscribe();\n    this.subscribeToSource();\n  };\n\n  SubscriptionDelaySubscriber.prototype.subscribeToSource = function () {\n    if (!this.sourceSubscribed) {\n      this.sourceSubscribed = true;\n      this.unsubscribe();\n      this.source.subscribe(this.parent);\n    }\n  };\n\n  return SubscriptionDelaySubscriber;\n}(Subscriber);","map":{"version":3,"mappings":";AACA,OAAO,KAAEA,OAAT,MAAqB,OAArB;AACA,SAASC,UAAT,QAA2B,eAA3B;AAEA,SAASC,UAAT,QAA0B,eAA1B;AAEA,SAASC,eAAT,QAA4B,oBAA5B;AAqEA,SAAMC,iBAAN,QAA6B,2BAA7B;OAEE,SAAIC,SAAJ,CAAqBC,qBAArB,EAAuBC,iBAAvB,EAAuB;MACrBA,mBAAQ;WACN,UAAIC,MAAJ,EAAI;aACD,IAAKC,2BAAL,CAA2BD,MAA3B,EAA2BD,iBAA3B,EAAmDG,IAAnD,CAAmD,4CAAnD;AACN;AACD;;AACD;AAAA;AAAA;AAED;;IACEC,iCAAoB;WAAAA;AACnB;AAED;;mBACe,CAACC,UAAUC,OAAI,sBAAoBL,MAApB,EAAgC;AAC7D;AACH;;AAPA,SAOCG,iBAPD;AAcA,CAbsB;;IAakBG,6CAAqBC,MAArB,EAAqB;AAK3Df,yCAAYe,MAAZ;;WAAAD,oBAEEE,aAAMV,uBACP;AAFmB;;AALZW,kCAA2BX,qBAA3B;AACAW;AACAA,uCAAkB,EAAlB;;AAKP;AAED;;qBAGO,CAAWL,UAAOM,aAAY;AACnC,SAAKF,WAAL,CAAKG,IAAL,CAAKC,UAAL;AACA,SAAKC,kBAAL,CAAmBC,QAAnB;AACD;AAED;;qBACc,WAAOC;AACpB;AAED;;qBACgB,CAAIX,UAACY,iBAAmB,UAAUF,QAAV,EAAU;AAChD,QAAIG,KAAK,GAAE,iCAAX;;QACEA,OAAK;AACN;AACD;;AACD;AAES;;qBACM,CAAIb,UAASc;AAC3B,QAAIC,oBAAJ;;QACE;AACA,UAAIC,aAAa,GAAE,wCAAnB;;UACEA,eAAc;AACf;AACF;AAAC,aACAC,KAAK;AACN;AACF;AAES;;qBACM,WAAQC;AACtB,SAAKC,SAAL,GAAgB,IAAhB;AACA,SAAKC,WAAL;AACD;AAEO;;qBACO,WAAaX,qBAAC;AAE3BY,gBAAM,YAAN;AACA,QAAIC,eAAe,QAAOC,0BAAP,CAASC,OAAT,CAASH,YAAT,CAAnB;;QACEC,eAAK;AACN;AAED;;AACD;AAEO;;qBACA,WAAoBG,WAAG,UAAkBT,aAAlB,EAAwBH,KAAxB,EAAuC;AAEpE,QAAIa,oBAAoB,oBAAK,OAAqBV,aAArB,EAA6BH,KAA7B,CAA7B;;QACEa,oBAAoB,IAAK,qBAA4B;AACrD,qBAAe,GAAC,gBAAhB;AACAtB,iBAAK,IAAL,CAAKsB,oBAAL;AACD;AACF;AAEO;;qBACG,WAAiBN,cAAC;QACzB,KAAKD,SAAL,IAAiB,gCAAYQ,MAAZ,KAAY;AAC9B;AACF;AACH;;AA1EwC;AAiFxC,CAjFwC,CAiFxCpC,eAjFwC;;IAiFKM,qDAAaM,MAAb,EAAa;AACxDf,iDAAkDe,MAAlD;;WAAAN,4BACSD,QACRD;AAFkB,gBAAMQ,MAAN,KAAM,CAAe,IAAf,KAAe,IAArB;;AAA+BE;;AAEjD;AAGD;;6BACyB,WAAUuB,aAAI,sBAA4B;AAClE;AACH;;AAT6C;AAgB7C,CAhB6C,CAgB7CtC,UAhB6C;;IAgBAuC,qDAAa1B,MAAb,EAAa;AAGxDf,iDAAmDe,MAAnD;;WAAA0B,4BACSC,QACRlC;AAFmB,gBAAMO,MAAN,KAAM,CAAe,IAAf,KAAe,IAArB;;AAA+BE;AAF3CA;;AAIP;AAES;;6BACc,CAAEL,UAACc;AAC1B;AAES;;6BACW;AACnB,SAAKiB,WAAL;AACD;AAES;;6BACW;AACnB,SAAKA,WAAL;AACD;AAEO;;6BACI,WAAkBC;QAC1B,MAAKC,kBAAmB;AACxB,WAAKA,gBAAL,GAAmB,IAAnB;AACA,WAAKF,WAAL;AACD;AACF;AACH;;AA5B6C;CAAA","names":["tslib_1","Subscriber","Observable","OuterSubscriber","subscribeToResult","delayWhen","delayDurationSelector","subscriptionDelay","source","SubscriptionDelayObservable","lift","DelayWhenOperator","prototype","call","DelayWhenSubscriber","_super","destination","_this","notifyNext","next","outerValue","removeSubscription","innerSub","notifyError","notifyComplete","value","_next","index","delayNotifier","err","_complete","completed","tryComplete","subscription","subscriptionIdx","delayNotifierSubscriptions","indexOf","tryDelay","notifierSubscription","length","_subscribe","SubscriptionDelaySubscriber","parent","unsubscribe","subscribeToSource","sourceSubscribed"],"sources":["D:\\Documents\\EMA\\Mines A3\\NoSQL\\ReseauAchats\\reseau_achats\\node_modules\\rxjs\\src\\internal\\operators\\delayWhen.ts"],"sourcesContent":["import { Operator } from '../Operator';\r\nimport { Subscriber } from '../Subscriber';\r\nimport { Observable } from '../Observable';\r\nimport { Subscription } from '../Subscription';\r\nimport { OuterSubscriber } from '../OuterSubscriber';\r\nimport { InnerSubscriber } from '../InnerSubscriber';\r\nimport { subscribeToResult } from '../util/subscribeToResult';\r\nimport { MonoTypeOperatorFunction, TeardownLogic } from '../types';\r\n\r\n/* tslint:disable:max-line-length */\r\n/** @deprecated In future versions, empty notifiers will no longer re-emit the source value on the output observable. */\r\nexport function delayWhen<T>(delayDurationSelector: (value: T, index: number) => Observable<never>, subscriptionDelay?: Observable<any>): MonoTypeOperatorFunction<T>;\r\nexport function delayWhen<T>(delayDurationSelector: (value: T, index: number) => Observable<any>, subscriptionDelay?: Observable<any>): MonoTypeOperatorFunction<T>;\r\n/* tslint:disable:max-line-length */\r\n\r\n/**\r\n * Delays the emission of items from the source Observable by a given time span\r\n * determined by the emissions of another Observable.\r\n *\r\n * <span class=\"informal\">It's like {@link delay}, but the time span of the\r\n * delay duration is determined by a second Observable.</span>\r\n *\r\n * ![](delayWhen.png)\r\n *\r\n * `delayWhen` time shifts each emitted value from the source Observable by a\r\n * time span determined by another Observable. When the source emits a value,\r\n * the `delayDurationSelector` function is called with the source value as\r\n * argument, and should return an Observable, called the \"duration\" Observable.\r\n * The source value is emitted on the output Observable only when the duration\r\n * Observable emits a value or completes.\r\n * The completion of the notifier triggering the emission of the source value\r\n * is deprecated behavior and will be removed in future versions.\r\n *\r\n * Optionally, `delayWhen` takes a second argument, `subscriptionDelay`, which\r\n * is an Observable. When `subscriptionDelay` emits its first value or\r\n * completes, the source Observable is subscribed to and starts behaving like\r\n * described in the previous paragraph. If `subscriptionDelay` is not provided,\r\n * `delayWhen` will subscribe to the source Observable as soon as the output\r\n * Observable is subscribed.\r\n *\r\n * ## Example\r\n * Delay each click by a random amount of time, between 0 and 5 seconds\r\n * ```ts\r\n * import { fromEvent, interval } from 'rxjs';\r\n * import { delayWhen } from 'rxjs/operators';\r\n *\r\n * const clicks = fromEvent(document, 'click');\r\n * const delayedClicks = clicks.pipe(\r\n *   delayWhen(event => interval(Math.random() * 5000)),\r\n * );\r\n * delayedClicks.subscribe(x => console.log(x));\r\n * ```\r\n *\r\n * @see {@link delay}\r\n * @see {@link throttle}\r\n * @see {@link throttleTime}\r\n * @see {@link debounce}\r\n * @see {@link debounceTime}\r\n * @see {@link sample}\r\n * @see {@link sampleTime}\r\n * @see {@link audit}\r\n * @see {@link auditTime}\r\n *\r\n * @param {function(value: T, index: number): Observable} delayDurationSelector A function that\r\n * returns an Observable for each value emitted by the source Observable, which\r\n * is then used to delay the emission of that item on the output Observable\r\n * until the Observable returned from this function emits a value.\r\n * @param {Observable} subscriptionDelay An Observable that triggers the\r\n * subscription to the source Observable once it emits any value.\r\n * @return {Observable} An Observable that delays the emissions of the source\r\n * Observable by an amount of time specified by the Observable returned by\r\n * `delayDurationSelector`.\r\n * @method delayWhen\r\n * @owner Observable\r\n */\r\nexport function delayWhen<T>(delayDurationSelector: (value: T, index: number) => Observable<any>,\r\n                             subscriptionDelay?: Observable<any>): MonoTypeOperatorFunction<T> {\r\n  if (subscriptionDelay) {\r\n    return (source: Observable<T>) =>\r\n      new SubscriptionDelayObservable(source, subscriptionDelay)\r\n        .lift(new DelayWhenOperator(delayDurationSelector));\r\n  }\r\n  return (source: Observable<T>) => source.lift(new DelayWhenOperator(delayDurationSelector));\r\n}\r\n\r\nclass DelayWhenOperator<T> implements Operator<T, T> {\r\n  constructor(private delayDurationSelector: (value: T, index: number) => Observable<any>) {\r\n  }\r\n\r\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\r\n    return source.subscribe(new DelayWhenSubscriber(subscriber, this.delayDurationSelector));\r\n  }\r\n}\r\n\r\n/**\r\n * We need this JSDoc comment for affecting ESDoc.\r\n * @ignore\r\n * @extends {Ignored}\r\n */\r\nclass DelayWhenSubscriber<T, R> extends OuterSubscriber<T, R> {\r\n  private completed: boolean = false;\r\n  private delayNotifierSubscriptions: Array<Subscription> = [];\r\n  private index: number = 0;\r\n\r\n  constructor(destination: Subscriber<T>,\r\n              private delayDurationSelector: (value: T, index: number) => Observable<any>) {\r\n    super(destination);\r\n  }\r\n\r\n  notifyNext(outerValue: T, _innerValue: any,\r\n             _outerIndex: number, _innerIndex: number,\r\n             innerSub: InnerSubscriber<T, R>): void {\r\n    this.destination.next!(outerValue);\r\n    this.removeSubscription(innerSub);\r\n    this.tryComplete();\r\n  }\r\n\r\n  notifyError(error: any, innerSub: InnerSubscriber<T, R>): void {\r\n    this._error(error);\r\n  }\r\n\r\n  notifyComplete(innerSub: InnerSubscriber<T, R>): void {\r\n    const value = this.removeSubscription(innerSub);\r\n    if (value) {\r\n      this.destination.next!(value);\r\n    }\r\n    this.tryComplete();\r\n  }\r\n\r\n  protected _next(value: T): void {\r\n    const index = this.index++;\r\n    try {\r\n      const delayNotifier = this.delayDurationSelector(value, index);\r\n      if (delayNotifier) {\r\n        this.tryDelay(delayNotifier, value);\r\n      }\r\n    } catch (err) {\r\n      this.destination.error!(err);\r\n    }\r\n  }\r\n\r\n  protected _complete(): void {\r\n    this.completed = true;\r\n    this.tryComplete();\r\n    this.unsubscribe();\r\n  }\r\n\r\n  private removeSubscription(subscription: InnerSubscriber<T, R>): T {\r\n    subscription.unsubscribe();\r\n\r\n    const subscriptionIdx = this.delayNotifierSubscriptions.indexOf(subscription);\r\n    if (subscriptionIdx !== -1) {\r\n      this.delayNotifierSubscriptions.splice(subscriptionIdx, 1);\r\n    }\r\n\r\n    return subscription.outerValue;\r\n  }\r\n\r\n  private tryDelay(delayNotifier: Observable<any>, value: T): void {\r\n    const notifierSubscription = subscribeToResult(this, delayNotifier, value);\r\n\r\n    if (notifierSubscription && !notifierSubscription.closed) {\r\n      const destination = this.destination as Subscription;\r\n      destination.add(notifierSubscription);\r\n      this.delayNotifierSubscriptions.push(notifierSubscription);\r\n    }\r\n  }\r\n\r\n  private tryComplete(): void {\r\n    if (this.completed && this.delayNotifierSubscriptions.length === 0) {\r\n      this.destination.complete!();\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * We need this JSDoc comment for affecting ESDoc.\r\n * @ignore\r\n * @extends {Ignored}\r\n */\r\nclass SubscriptionDelayObservable<T> extends Observable<T> {\r\n  constructor(public source: Observable<T>, private subscriptionDelay: Observable<any>) {\r\n    super();\r\n  }\r\n\r\n  /** @deprecated This is an internal implementation detail, do not use. */\r\n  _subscribe(subscriber: Subscriber<T>) {\r\n    this.subscriptionDelay.subscribe(new SubscriptionDelaySubscriber(subscriber, this.source));\r\n  }\r\n}\r\n\r\n/**\r\n * We need this JSDoc comment for affecting ESDoc.\r\n * @ignore\r\n * @extends {Ignored}\r\n */\r\nclass SubscriptionDelaySubscriber<T> extends Subscriber<T> {\r\n  private sourceSubscribed: boolean = false;\r\n\r\n  constructor(private parent: Subscriber<T>, private source: Observable<T>) {\r\n    super();\r\n  }\r\n\r\n  protected _next(unused: any) {\r\n    this.subscribeToSource();\r\n  }\r\n\r\n  protected _error(err: any) {\r\n    this.unsubscribe();\r\n    this.parent.error(err);\r\n  }\r\n\r\n  protected _complete() {\r\n    this.unsubscribe();\r\n    this.subscribeToSource();\r\n  }\r\n\r\n  private subscribeToSource(): void {\r\n    if (!this.sourceSubscribed) {\r\n      this.sourceSubscribed = true;\r\n      this.unsubscribe();\r\n      this.source.subscribe(this.parent);\r\n    }\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}