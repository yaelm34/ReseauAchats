{"ast":null,"code":"/** PURE_IMPORTS_START _distinctUntilChanged PURE_IMPORTS_END */\nimport { distinctUntilChanged } from './distinctUntilChanged';\nexport function distinctUntilKeyChanged(key, compare) {\n  return distinctUntilChanged(function (x, y) {\n    return compare ? compare(x[key], y[key]) : x[key] === y[key];\n  });\n}","map":{"version":3,"mappings":"AAAA;AA8EA,SAAMA,oBAAN,QAAgB,wBAAhB;OACE,SAAOC,uBAAP,CAA4BC,GAA5B,EAAmCC,OAAnC,EAA4C;AAC7C;AAAA;AAAA","names":["distinctUntilChanged","distinctUntilKeyChanged","key","compare"],"sources":["D:\\Documents\\EMA\\Mines A3\\NoSQL\\ReseauAchats\\reseau_achats\\node_modules\\rxjs\\src\\internal\\operators\\distinctUntilKeyChanged.ts"],"sourcesContent":["import { distinctUntilChanged } from './distinctUntilChanged';\r\nimport { MonoTypeOperatorFunction } from '../types';\r\n\r\n/* tslint:disable:max-line-length */\r\nexport function distinctUntilKeyChanged<T>(key: keyof T): MonoTypeOperatorFunction<T>;\r\nexport function distinctUntilKeyChanged<T, K extends keyof T>(key: K, compare: (x: T[K], y: T[K]) => boolean): MonoTypeOperatorFunction<T>;\r\n/* tslint:enable:max-line-length */\r\n\r\n/**\r\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from the previous item,\r\n * using a property accessed by using the key provided to check if the two items are distinct.\r\n *\r\n * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.\r\n *\r\n * If a comparator function is not provided, an equality check is used by default.\r\n *\r\n * ## Examples\r\n * An example comparing the name of persons\r\n * ```typescript\r\n * import { of } from 'rxjs';\r\n * import { distinctUntilKeyChanged } from 'rxjs/operators';\r\n *\r\n *  interface Person {\r\n *     age: number,\r\n *     name: string\r\n *  }\r\n *\r\n * of<Person>(\r\n *     { age: 4, name: 'Foo'},\r\n *     { age: 7, name: 'Bar'},\r\n *     { age: 5, name: 'Foo'},\r\n *     { age: 6, name: 'Foo'},\r\n *   ).pipe(\r\n *     distinctUntilKeyChanged('name'),\r\n *   )\r\n *   .subscribe(x => console.log(x));\r\n *\r\n * // displays:\r\n * // { age: 4, name: 'Foo' }\r\n * // { age: 7, name: 'Bar' }\r\n * // { age: 5, name: 'Foo' }\r\n * ```\r\n *\r\n * An example comparing the first letters of the name\r\n * ```typescript\r\n * import { of } from 'rxjs';\r\n * import { distinctUntilKeyChanged } from 'rxjs/operators';\r\n *\r\n * interface Person {\r\n *     age: number,\r\n *     name: string\r\n *  }\r\n *\r\n * of<Person>(\r\n *     { age: 4, name: 'Foo1'},\r\n *     { age: 7, name: 'Bar'},\r\n *     { age: 5, name: 'Foo2'},\r\n *     { age: 6, name: 'Foo3'},\r\n *   ).pipe(\r\n *     distinctUntilKeyChanged('name', (x: string, y: string) => x.substring(0, 3) === y.substring(0, 3)),\r\n *   )\r\n *   .subscribe(x => console.log(x));\r\n *\r\n * // displays:\r\n * // { age: 4, name: 'Foo1' }\r\n * // { age: 7, name: 'Bar' }\r\n * // { age: 5, name: 'Foo2' }\r\n * ```\r\n *\r\n * @see {@link distinct}\r\n * @see {@link distinctUntilChanged}\r\n *\r\n * @param {string} key String key for object property lookup on each item.\r\n * @param {function} [compare] Optional comparison function called to test if an item is distinct from the previous item in the source.\r\n * @return {Observable} An Observable that emits items from the source Observable with distinct values based on the key specified.\r\n * @method distinctUntilKeyChanged\r\n * @owner Observable\r\n */\r\nexport function distinctUntilKeyChanged<T, K extends keyof T>(key: K, compare?: (x: T[K], y: T[K]) => boolean): MonoTypeOperatorFunction<T> {\r\n  return distinctUntilChanged((x: T, y: T) => compare ? compare(x[key], y[key]) : x[key] === y[key]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}