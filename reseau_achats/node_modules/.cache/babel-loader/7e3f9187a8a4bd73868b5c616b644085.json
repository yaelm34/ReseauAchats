{"ast":null,"code":"/** PURE_IMPORTS_START _Observable PURE_IMPORTS_END */\nimport { Observable } from '../Observable';\nexport var EMPTY = /*@__PURE__*/new Observable(function (subscriber) {\n  return subscriber.complete();\n});\nexport function empty(scheduler) {\n  return scheduler ? emptyScheduled(scheduler) : EMPTY;\n}\n\nfunction emptyScheduled(scheduler) {\n  return new Observable(function (subscriber) {\n    return scheduler.schedule(function () {\n      return subscriber.complete();\n    });\n  });\n}","map":{"version":3,"mappings":"AAAA;AAOA,SAAOA,UAAP,QAAyB,eAAzB;AAsDA,OAAM,SAAU,gBAA+B;AAAA;AAAA,EAAzC;OACJ,SAAOC,KAAP,CAAkBC,SAAlB,EAAmB;AACpB;AAED;;SACEC,eAAWD,WAAkB;AAC9B;AAAA;AAAA;AAAA;AAAA","names":["Observable","empty","scheduler","emptyScheduled"],"sources":["D:\\Documents\\EMA\\Mines A3\\NoSQL\\ReseauAchats\\reseau_achats\\node_modules\\rxjs\\src\\internal\\observable\\empty.ts"],"sourcesContent":["import { Observable } from '../Observable';\r\nimport { SchedulerLike } from '../types';\r\n\r\n/**\r\n * The same Observable instance returned by any call to {@link empty} without a\r\n * `scheduler`. It is preferrable to use this over `empty()`.\r\n */\r\nexport const EMPTY = new Observable<never>(subscriber => subscriber.complete());\r\n\r\n/**\r\n * Creates an Observable that emits no items to the Observer and immediately\r\n * emits a complete notification.\r\n *\r\n * <span class=\"informal\">Just emits 'complete', and nothing else.\r\n * </span>\r\n *\r\n * ![](empty.png)\r\n *\r\n * This static operator is useful for creating a simple Observable that only\r\n * emits the complete notification. It can be used for composing with other\r\n * Observables, such as in a {@link mergeMap}.\r\n *\r\n * ## Examples\r\n * ### Emit the number 7, then complete\r\n * ```ts\r\n * import { empty } from 'rxjs';\r\n * import { startWith } from 'rxjs/operators';\r\n *\r\n * const result = empty().pipe(startWith(7));\r\n * result.subscribe(x => console.log(x));\r\n * ```\r\n *\r\n * ### Map and flatten only odd numbers to the sequence 'a', 'b', 'c'\r\n * ```ts\r\n * import { empty, interval, of } from 'rxjs';\r\n * import { mergeMap } from 'rxjs/operators';\r\n *\r\n * const interval$ = interval(1000);\r\n * const result = interval$.pipe(\r\n *   mergeMap(x => x % 2 === 1 ? of('a', 'b', 'c') : empty()),\r\n * );\r\n * result.subscribe(x => console.log(x));\r\n *\r\n * // Results in the following to the console:\r\n * // x is equal to the count on the interval eg(0,1,2,3,...)\r\n * // x will occur every 1000ms\r\n * // if x % 2 is equal to 1 print abc\r\n * // if x % 2 is not equal to 1 nothing will be output\r\n * ```\r\n *\r\n * @see {@link Observable}\r\n * @see {@link never}\r\n * @see {@link of}\r\n * @see {@link throwError}\r\n *\r\n * @param scheduler A {@link SchedulerLike} to use for scheduling\r\n * the emission of the complete notification.\r\n * @return An \"empty\" Observable: emits only the complete\r\n * notification.\r\n * @deprecated Deprecated in favor of using {@link EMPTY} constant, or {@link scheduled} (e.g. `scheduled([], scheduler)`)\r\n */\r\nexport function empty(scheduler?: SchedulerLike) {\r\n  return scheduler ? emptyScheduled(scheduler) : EMPTY;\r\n}\r\n\r\nfunction emptyScheduled(scheduler: SchedulerLike) {\r\n  return new Observable<never>(subscriber => scheduler.schedule(() => subscriber.complete()));\r\n}\r\n"]},"metadata":{},"sourceType":"module"}