{"ast":null,"code":"/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nexport function scan(accumulator, seed) {\n  var hasSeed = false;\n\n  if (arguments.length >= 2) {\n    hasSeed = true;\n  }\n\n  return function scanOperatorFunction(source) {\n    return source.lift(new ScanOperator(accumulator, seed, hasSeed));\n  };\n}\n\nvar ScanOperator = /*@__PURE__*/function () {\n  function ScanOperator(accumulator, seed, hasSeed) {\n    if (hasSeed === void 0) {\n      hasSeed = false;\n    }\n\n    this.accumulator = accumulator;\n    this.seed = seed;\n    this.hasSeed = hasSeed;\n  }\n\n  ScanOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new ScanSubscriber(subscriber, this.accumulator, this.seed, this.hasSeed));\n  };\n\n  return ScanOperator;\n}();\n\nvar ScanSubscriber = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(ScanSubscriber, _super);\n\n  function ScanSubscriber(destination, accumulator, _seed, hasSeed) {\n    var _this = _super.call(this, destination) || this;\n\n    _this.accumulator = accumulator;\n    _this._seed = _seed;\n    _this.hasSeed = hasSeed;\n    _this.index = 0;\n    return _this;\n  }\n\n  Object.defineProperty(ScanSubscriber.prototype, \"seed\", {\n    get: function () {\n      return this._seed;\n    },\n    set: function (value) {\n      this.hasSeed = true;\n      this._seed = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  ScanSubscriber.prototype._next = function (value) {\n    if (!this.hasSeed) {\n      this.seed = value;\n      this.destination.next(value);\n    } else {\n      return this._tryNext(value);\n    }\n  };\n\n  ScanSubscriber.prototype._tryNext = function (value) {\n    var index = this.index++;\n    var result;\n\n    try {\n      result = this.accumulator(this.seed, value, index);\n    } catch (err) {\n      this.destination.error(err);\n    }\n\n    this.seed = result;\n    this.destination.next(result);\n  };\n\n  return ScanSubscriber;\n}(Subscriber);","map":{"version":3,"mappings":";AAEA,OAAO,KAAEA,OAAT,MAAqB,OAArB;AAoDA,SAAMC,UAAN,QAA2B,eAA3B;OACE,SAAWC,IAAX,CAAcC,WAAd,EAAoBC,IAApB,EAAoB;AAMpB,MAAIC,UAAU,KAAd;;MACEC,SAAO,CAAGC,MAAV,IAAe;AAChBF;AAED;;SACE,SAAOG,oBAAP,CAAuBC,MAAvB,EAAoC;AACpC;AACH;AAED;;IACEC,4BAAoB,YAAmF;WAAAA,yCAAwB;AAA3G,oBAAW,KAAX;AAA6DL,aAAI,GAAJ;AAAsB;;AAA4B;AAEnI;AACE,mBAAcA,OAAd;AACD;;AACHK,yBAACC,IAAD,GAAC;AAAA;AAOD,GAPA;;AAOmC;CAZb;;kBAwBpB,GAEE,uBAAMC,MAAN,EAAkB;SAF4B;;WAA6DC,eAAYC;AACrG,4BAAgB,IAAhB,EAAgBA,WAAhB,KAAgB,IAAhB;;AAZZC,wBAAkBZ,WAAlB;;AAcPY;AAZDA;WAAAA;;;QAEC;SAED,YAAS;AACP,aAAK,KAAOC,KAAZ;KAHD;AAKDC,OAAC;;;AALA;AAYSC,oBAZT;AAaCC,gBAAU;AAbX;;gBAeQ,WAAYC,QAAK,UAAOC,KAAP,EAAO;QAC9B;WAAMjB;AACL,uBAAYkB,IAAZ,CAAqBD,KAArB;AACD,WACF;AAEO;AACN;;;gBAEI;QACFE,QAAM,KAAOA,KAAP;QACPC;;AAAC;AACAA,YAAK,oBAAqB,KAAEpB,IAAvB,EAAuBiB,KAAvB,EAAuBE,KAAvB,CAAL;AACD,KAFC,CAGF,OAAKE,GAAL,EAAY;AACR,WAACX,WAAD,CAAiBY,KAAjB,CAAkBD,GAAlB;AACL;;AACH;AArCmC,SAAUX,WAAV,CAqClCQ,IArCkC,CAqClCE,MArCkC;;;;CAc/B","names":["tslib_1","Subscriber","scan","accumulator","seed","hasSeed","arguments","length","scanOperatorFunction","source","ScanOperator","call","_super","ScanSubscriber","destination","_this","_seed","set","enumerable","configurable","_next","value","next","index","result","err","error"],"sources":["D:\\Documents\\EMA\\Mines A3\\NoSQL\\ReseauAchats\\reseau_achats\\node_modules\\rxjs\\src\\internal\\operators\\scan.ts"],"sourcesContent":["import { Operator } from '../Operator';\r\nimport { Observable } from '../Observable';\r\nimport { Subscriber } from '../Subscriber';\r\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../types';\r\n\r\n/* tslint:disable:max-line-length */\r\nexport function scan<T, R>(accumulator: (acc: R, value: T, index: number) => R, seed: R): OperatorFunction<T, R>;\r\nexport function scan<T>(accumulator: (acc: T, value: T, index: number) => T, seed?: T): MonoTypeOperatorFunction<T>;\r\nexport function scan<T, R>(accumulator: (acc: R, value: T, index: number) => R): OperatorFunction<T, R>;\r\n/* tslint:enable:max-line-length */\r\n\r\n/**\r\n * Applies an accumulator function over the source Observable, and returns each\r\n * intermediate result, with an optional seed value.\r\n *\r\n * <span class=\"informal\">It's like {@link reduce}, but emits the current\r\n * accumulation whenever the source emits a value.</span>\r\n *\r\n * ![](scan.png)\r\n *\r\n * Combines together all values emitted on the source, using an accumulator\r\n * function that knows how to join a new source value into the accumulation from\r\n * the past. Is similar to {@link reduce}, but emits the intermediate\r\n * accumulations.\r\n *\r\n * Returns an Observable that applies a specified `accumulator` function to each\r\n * item emitted by the source Observable. If a `seed` value is specified, then\r\n * that value will be used as the initial value for the accumulator. If no seed\r\n * value is specified, the first item of the source is used as the seed.\r\n *\r\n * ## Example\r\n * Count the number of click events\r\n * ```ts\r\n * import { fromEvent } from 'rxjs';\r\n * import { scan, mapTo } from 'rxjs/operators';\r\n *\r\n * const clicks = fromEvent(document, 'click');\r\n * const ones = clicks.pipe(mapTo(1));\r\n * const seed = 0;\r\n * const count = ones.pipe(scan((acc, one) => acc + one, seed));\r\n * count.subscribe(x => console.log(x));\r\n * ```\r\n *\r\n * @see {@link expand}\r\n * @see {@link mergeScan}\r\n * @see {@link reduce}\r\n *\r\n * @param {function(acc: R, value: T, index: number): R} accumulator\r\n * The accumulator function called on each source value.\r\n * @param {T|R} [seed] The initial accumulation value.\r\n * @return {Observable<R>} An observable of the accumulated values.\r\n * @method scan\r\n * @owner Observable\r\n */\r\nexport function scan<T, R>(accumulator: (acc: R, value: T, index: number) => R, seed?: T | R): OperatorFunction<T, R> {\r\n  let hasSeed = false;\r\n  // providing a seed of `undefined` *should* be valid and trigger\r\n  // hasSeed! so don't use `seed !== undefined` checks!\r\n  // For this reason, we have to check it here at the original call site\r\n  // otherwise inside Operator/Subscriber we won't know if `undefined`\r\n  // means they didn't provide anything or if they literally provided `undefined`\r\n  if (arguments.length >= 2) {\r\n    hasSeed = true;\r\n  }\r\n\r\n  return function scanOperatorFunction(source: Observable<T>): Observable<R> {\r\n    return source.lift(new ScanOperator(accumulator, seed, hasSeed));\r\n  };\r\n}\r\n\r\nclass ScanOperator<T, R> implements Operator<T, R> {\r\n  constructor(private accumulator: (acc: R, value: T, index: number) => R, private seed?: T | R, private hasSeed: boolean = false) {}\r\n\r\n  call(subscriber: Subscriber<R>, source: any): any {\r\n    return source.subscribe(new ScanSubscriber(subscriber, this.accumulator, this.seed, this.hasSeed));\r\n  }\r\n}\r\n\r\n/**\r\n * We need this JSDoc comment for affecting ESDoc.\r\n * @ignore\r\n * @extends {Ignored}\r\n */\r\nclass ScanSubscriber<T, R> extends Subscriber<T> {\r\n  private index: number = 0;\r\n\r\n  get seed(): T | R {\r\n    return this._seed;\r\n  }\r\n\r\n  set seed(value: T | R) {\r\n    this.hasSeed = true;\r\n    this._seed = value;\r\n  }\r\n\r\n  constructor(destination: Subscriber<R>, private accumulator: (acc: R, value: T, index: number) => R, private _seed: T | R,\r\n              private hasSeed: boolean) {\r\n    super(destination);\r\n  }\r\n\r\n  protected _next(value: T): void {\r\n    if (!this.hasSeed) {\r\n      this.seed = value;\r\n      this.destination.next(value);\r\n    } else {\r\n      return this._tryNext(value);\r\n    }\r\n  }\r\n\r\n  private _tryNext(value: T): void {\r\n    const index = this.index++;\r\n    let result: any;\r\n    try {\r\n      result = this.accumulator(<R>this.seed, value, index);\r\n    } catch (err) {\r\n      this.destination.error(err);\r\n    }\r\n    this.seed = result;\r\n    this.destination.next(result);\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}