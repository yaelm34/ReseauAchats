{"ast":null,"code":"/** PURE_IMPORTS_START _multicast,_refCount,_Subject PURE_IMPORTS_END */\nimport { multicast } from './multicast';\nimport { refCount } from './refCount';\nimport { Subject } from '../Subject';\n\nfunction shareSubjectFactory() {\n  return new Subject();\n}\n\nexport function share() {\n  return function (source) {\n    return refCount()(multicast(shareSubjectFactory)(source));\n  };\n}","map":{"version":3,"mappings":"AACA;AACA,SAASA,SAAT,QAAyB,aAAzB;AACA,SAASC,QAAT,QAAwB,YAAxB;AAIA,SAASC,OAAT,QAAS,YAAT;;SACEC,sBAAqB;AACtB;AAcD;;OACE,SAAOC,KAAP,GAAQ;AACT;AAAA;AAAA","names":["multicast","refCount","Subject","shareSubjectFactory","share"],"sources":["D:\\Documents\\EMA\\Mines A3\\NoSQL\\ReseauAchats\\reseau_achats\\node_modules\\rxjs\\src\\internal\\operators\\share.ts"],"sourcesContent":["import { Observable } from '../Observable';\r\nimport { multicast } from './multicast';\r\nimport { refCount } from './refCount';\r\nimport { Subject } from '../Subject';\r\n\r\nimport { MonoTypeOperatorFunction } from '../types';\r\n\r\nfunction shareSubjectFactory() {\r\n  return new Subject();\r\n}\r\n\r\n/**\r\n * Returns a new Observable that multicasts (shares) the original Observable. As long as there is at least one\r\n * Subscriber this Observable will be subscribed and emitting data. When all subscribers have unsubscribed it will\r\n * unsubscribe from the source Observable. Because the Observable is multicasting it makes the stream `hot`.\r\n * This is an alias for `multicast(() => new Subject()), refCount()`.\r\n *\r\n * ![](share.png)\r\n *\r\n * @return {Observable<T>} An Observable that upon connection causes the source Observable to emit items to its Observers.\r\n * @method share\r\n * @owner Observable\r\n */\r\nexport function share<T>(): MonoTypeOperatorFunction<T> {\r\n  return (source: Observable<T>) => refCount()(multicast(shareSubjectFactory)(source)) as Observable<T>;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}