{"ast":null,"code":"/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nexport function skipWhile(predicate) {\n  return function (source) {\n    return source.lift(new SkipWhileOperator(predicate));\n  };\n}\n\nvar SkipWhileOperator = /*@__PURE__*/function () {\n  function SkipWhileOperator(predicate) {\n    this.predicate = predicate;\n  }\n\n  SkipWhileOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new SkipWhileSubscriber(subscriber, this.predicate));\n  };\n\n  return SkipWhileOperator;\n}();\n\nvar SkipWhileSubscriber = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(SkipWhileSubscriber, _super);\n\n  function SkipWhileSubscriber(destination, predicate) {\n    var _this = _super.call(this, destination) || this;\n\n    _this.predicate = predicate;\n    _this.skipping = true;\n    _this.index = 0;\n    return _this;\n  }\n\n  SkipWhileSubscriber.prototype._next = function (value) {\n    var destination = this.destination;\n\n    if (this.skipping) {\n      this.tryCallPredicate(value);\n    }\n\n    if (!this.skipping) {\n      destination.next(value);\n    }\n  };\n\n  SkipWhileSubscriber.prototype.tryCallPredicate = function (value) {\n    try {\n      var result = this.predicate(value, this.index++);\n      this.skipping = Boolean(result);\n    } catch (err) {\n      this.destination.error(err);\n    }\n  };\n\n  return SkipWhileSubscriber;\n}(Subscriber);","map":{"version":3,"mappings":";AAEA,OAAO,KAAEA,OAAT,MAAqB,OAArB;AAeA,SAAMC,UAAN,QAA6B,eAA7B;OACE,SAAOC,SAAP,CAAQC,SAAR,EAAkC;AACnC;AAAA;AAAA;AAED;;IACEC,iCAAoB,YAA+C;WAA/CA,6BAA+C;AAClE;AAED;;mBACe,CAACC,UAAUC,OAAI,sBAAoBC,MAApB,EAAgC;AAC7D;AACH;;AAPA,SAOCH,iBAPD;AAcA,CAbsB;;IAaeI,6CAAaC,MAAb,EAAa;AAIhDT,yCAAYS,MAAZ;;WAAAD,oBAEEE,aAAMP,WAAY;AADA,kCAA+CO,WAA/C,KAA+C,IAA/C;;AAJZC,sBAAoBR,SAApB;AACAQ,qBAAkB,IAAlB;;AAKP;AAES;;qBACS,WAAQC,QAAW,UAACC,KAAD,EAAC;AACrC,QAAIH,WAAK,GAAQ,KAAEA,WAAnB;;QACE,KAAKI;AACN;AAED;;QACE,gBAAgB;AACjBJ;AACF;AAEO;;qBACF;QACF;AACA,UAAIK,MAAC,GAAQ,KAAGZ,SAAH,CAAWU,KAAX,EAAmB,YAAnB,CAAb;AACD;AAAC,aACAG,KAAK;AACN;AACF;AACH;;AA5BqC;CAAA","names":["tslib_1","Subscriber","skipWhile","predicate","SkipWhileOperator","prototype","call","source","SkipWhileSubscriber","_super","destination","_this","_next","value","skipping","result","err"],"sources":["D:\\Documents\\EMA\\Mines A3\\NoSQL\\ReseauAchats\\reseau_achats\\node_modules\\rxjs\\src\\internal\\operators\\skipWhile.ts"],"sourcesContent":["import { Observable } from '../Observable';\r\nimport { Operator } from '../Operator';\r\nimport { Subscriber } from '../Subscriber';\r\nimport { MonoTypeOperatorFunction, TeardownLogic } from '../types';\r\n\r\n/**\r\n * Returns an Observable that skips all items emitted by the source Observable as long as a specified condition holds\r\n * true, but emits all further source items as soon as the condition becomes false.\r\n *\r\n * ![](skipWhile.png)\r\n *\r\n * @param {Function} predicate - A function to test each item emitted from the source Observable.\r\n * @return {Observable<T>} An Observable that begins emitting items emitted by the source Observable when the\r\n * specified predicate becomes false.\r\n * @method skipWhile\r\n * @owner Observable\r\n */\r\nexport function skipWhile<T>(predicate: (value: T, index: number) => boolean): MonoTypeOperatorFunction<T> {\r\n  return (source: Observable<T>) => source.lift(new SkipWhileOperator(predicate));\r\n}\r\n\r\nclass SkipWhileOperator<T> implements Operator<T, T> {\r\n  constructor(private predicate: (value: T, index: number) => boolean) {\r\n  }\r\n\r\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\r\n    return source.subscribe(new SkipWhileSubscriber(subscriber, this.predicate));\r\n  }\r\n}\r\n\r\n/**\r\n * We need this JSDoc comment for affecting ESDoc.\r\n * @ignore\r\n * @extends {Ignored}\r\n */\r\nclass SkipWhileSubscriber<T> extends Subscriber<T> {\r\n  private skipping: boolean = true;\r\n  private index: number = 0;\r\n\r\n  constructor(destination: Subscriber<T>,\r\n              private predicate: (value: T, index: number) => boolean) {\r\n    super(destination);\r\n  }\r\n\r\n  protected _next(value: T): void {\r\n    const destination = this.destination;\r\n    if (this.skipping) {\r\n      this.tryCallPredicate(value);\r\n    }\r\n\r\n    if (!this.skipping) {\r\n      destination.next(value);\r\n    }\r\n  }\r\n\r\n  private tryCallPredicate(value: T): void {\r\n    try {\r\n      const result = this.predicate(value, this.index++);\r\n      this.skipping = Boolean(result);\r\n    } catch (err) {\r\n      this.destination.error(err);\r\n    }\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}