{"ast":null,"code":"/** PURE_IMPORTS_START _Observable,_from,_util_isArray,_empty PURE_IMPORTS_END */\nimport { Observable } from '../Observable';\nimport { from } from './from';\nimport { isArray } from '../util/isArray';\nimport { EMPTY } from './empty';\nexport function onErrorResumeNext() {\n  var sources = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    sources[_i] = arguments[_i];\n  }\n\n  if (sources.length === 0) {\n    return EMPTY;\n  }\n\n  var first = sources[0],\n      remainder = sources.slice(1);\n\n  if (sources.length === 1 && isArray(first)) {\n    return onErrorResumeNext.apply(void 0, first);\n  }\n\n  return new Observable(function (subscriber) {\n    var subNext = function () {\n      return subscriber.add(onErrorResumeNext.apply(void 0, remainder).subscribe(subscriber));\n    };\n\n    return from(first).subscribe({\n      next: function (value) {\n        subscriber.next(value);\n      },\n      error: subNext,\n      complete: subNext\n    });\n  });\n}","map":{"version":3,"mappings":"AAAA;AAEA,SAASA,UAAT,QAAqB,eAArB;AACA,SAASC,IAAT,QAAkB,QAAlB;AACA,SAASC,OAAT,QAAsB,iBAAtB;AAwEA,SAAMC,KAAN,QAAgB,SAAhB;OAAwC,6BAEqD;aAFrD;;OAAA,2BAEqDC;;AAE3F;;MACEC,OAAO,OAAP,KAAa;AACd;AAEO;;AAER,MAAIC,QAAQD,OAAM,GAAlB;AAAA,MAAwBE,SAAI,GAAQF,OAAM,CAAEG,KAAR,CAAQ,CAAR,CAApC;;MACEH,OAAO,OAAP,KAAO,CAAP,IAAwBH,gBAAI;AAC7B;AAED;;SACE,IAAMF,UAAN,CAAgB,UAAMS,UAAN,EAAM;AAItB,eAAW,GAAC,YAAO;AAAS,aAACA,gFAAD;AAAC,KAA7B;;WACER,IAAI,OAAJ,CAAIS,SAAJ,CAAc;AACdC,YAAK,UAASC,KAAT,EAAS;AAAAH;AAAA,OADA;AAEdI,oBAFc;AAGbC;AAHa,KAAd;AAKL,GAVG","names":["Observable","from","isArray","EMPTY","length","sources","first","remainder","slice","subscriber","subscribe","next","value","error","complete"],"sources":["D:\\Documents\\EMA\\Mines A3\\NoSQL\\ReseauAchats\\reseau_achats\\node_modules\\rxjs\\src\\internal\\observable\\onErrorResumeNext.ts"],"sourcesContent":["import { Observable } from '../Observable';\r\nimport { ObservableInput } from '../types';\r\nimport { from } from './from';\r\nimport { isArray } from '../util/isArray';\r\nimport { EMPTY } from './empty';\r\n\r\n/* tslint:disable:max-line-length */\r\nexport function onErrorResumeNext<R>(v: ObservableInput<R>): Observable<R>;\r\nexport function onErrorResumeNext<T2, T3, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<R>;\r\nexport function onErrorResumeNext<T2, T3, T4, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<R>;\r\nexport function onErrorResumeNext<T2, T3, T4, T5, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<R>;\r\nexport function onErrorResumeNext<T2, T3, T4, T5, T6, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<R>;\r\n\r\nexport function onErrorResumeNext<R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R>;\r\nexport function onErrorResumeNext<R>(array: ObservableInput<any>[]): Observable<R>;\r\n/* tslint:enable:max-line-length */\r\n\r\n/**\r\n * When any of the provided Observable emits an complete or error notification, it immediately subscribes to the next one\r\n * that was passed.\r\n *\r\n * <span class=\"informal\">Execute series of Observables no matter what, even if it means swallowing errors.</span>\r\n *\r\n * ![](onErrorResumeNext.png)\r\n *\r\n * `onErrorResumeNext` Will subscribe to each observable source it is provided, in order.\r\n * If the source it's subscribed to emits an error or completes, it will move to the next source\r\n * without error.\r\n *\r\n * If `onErrorResumeNext` is provided no arguments, or a single, empty array, it will return {@link index/EMPTY}.\r\n *\r\n * `onErrorResumeNext` is basically {@link concat}, only it will continue, even if one of its\r\n * sources emits an error.\r\n *\r\n * Note that there is no way to handle any errors thrown by sources via the result of\r\n * `onErrorResumeNext`. If you want to handle errors thrown in any given source, you can\r\n * always use the {@link catchError} operator on them before passing them into `onErrorResumeNext`.\r\n *\r\n * ## Example\r\n * Subscribe to the next Observable after map fails</caption>\r\n * ```ts\r\n * import { onErrorResumeNext, of } from 'rxjs';\r\n * import { map } from 'rxjs/operators';\r\n *\r\n * onErrorResumeNext(\r\n *  of(1, 2, 3, 0).pipe(\r\n *    map(x => {\r\n *      if (x === 0) throw Error();\r\n *      return 10 / x;\r\n *    })\r\n *  ),\r\n *  of(1, 2, 3),\r\n * )\r\n * .subscribe(\r\n *   val => console.log(val),\r\n *   err => console.log(err),          // Will never be called.\r\n *   () => console.log('done'),\r\n * );\r\n *\r\n * // Logs:\r\n * // 10\r\n * // 5\r\n * // 3.3333333333333335\r\n * // 1\r\n * // 2\r\n * // 3\r\n * // \"done\"\r\n * ```\r\n *\r\n * @see {@link concat}\r\n * @see {@link catchError}\r\n *\r\n * @param {...ObservableInput} sources Observables (or anything that *is* observable) passed either directly or as an array.\r\n * @return {Observable} An Observable that concatenates all sources, one after the other,\r\n * ignoring all errors, such that any error causes it to move on to the next source.\r\n */\r\nexport function onErrorResumeNext<T, R>(...sources: Array<ObservableInput<any> |\r\n                                                              Array<ObservableInput<any>> |\r\n                                                              ((...values: Array<any>) => R)>): Observable<R> {\r\n\r\n  if (sources.length === 0) {\r\n    return EMPTY;\r\n  }\r\n\r\n  const [ first, ...remainder ] = sources;\r\n\r\n  if (sources.length === 1 && isArray(first)) {\r\n    return onErrorResumeNext(...first);\r\n  }\r\n\r\n  return new Observable(subscriber => {\r\n    const subNext = () => subscriber.add(\r\n      onErrorResumeNext(...remainder).subscribe(subscriber)\r\n    );\r\n\r\n    return from(first).subscribe({\r\n      next(value) { subscriber.next(value); },\r\n      error: subNext,\r\n      complete: subNext,\r\n    });\r\n  });\r\n}\r\n"]},"metadata":{},"sourceType":"module"}