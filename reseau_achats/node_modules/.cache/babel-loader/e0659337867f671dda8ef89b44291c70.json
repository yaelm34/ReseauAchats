{"ast":null,"code":"/** PURE_IMPORTS_START _observable_concat,_util_isScheduler PURE_IMPORTS_END */\nimport { concat } from '../observable/concat';\nimport { isScheduler } from '../util/isScheduler';\nexport function startWith() {\n  var array = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    array[_i] = arguments[_i];\n  }\n\n  var scheduler = array[array.length - 1];\n\n  if (isScheduler(scheduler)) {\n    array.pop();\n    return function (source) {\n      return concat(array, source, scheduler);\n    };\n  } else {\n    return function (source) {\n      return concat(array, source);\n    };\n  }\n}","map":{"version":3,"mappings":"AACA;AACA,SAASA,MAAT,QAAsB,sBAAtB;AAiEA,SAAMC,WAAN,QAAyB,qBAAzB;OAAgC,qBAAkC;WAAlC;;OAAA,0BAAkC;;AAChE;;AACA,MAAIC,YAAYC,WAAU,CAAEC,MAAZ,GAAY,CAAZ,CAAhB;;MAEEH,WAAW,CAACC,SAAD,GAAC;AACZC;AACD;AAAA;AAAA;SACC;AACD;AAAA;AAAA;AACF","names":["concat","isScheduler","scheduler","array","length"],"sources":["D:\\Documents\\EMA\\Mines A3\\NoSQL\\ReseauAchats\\reseau_achats\\node_modules\\rxjs\\src\\internal\\operators\\startWith.ts"],"sourcesContent":["import { Observable } from '../Observable';\r\nimport { concat } from '../observable/concat';\r\nimport { isScheduler } from '../util/isScheduler';\r\nimport { MonoTypeOperatorFunction, OperatorFunction, SchedulerLike } from '../types';\r\n\r\n/* tslint:disable:max-line-length */\r\n/** @deprecated use {@link scheduled} and {@link concatAll} (e.g. `scheduled([[a, b, c], source], scheduler).pipe(concatAll())`) */\r\nexport function startWith<T>(scheduler: SchedulerLike): MonoTypeOperatorFunction<T>;\r\n/** @deprecated use {@link scheduled} and {@link concatAll} (e.g. `scheduled([[a, b, c], source], scheduler).pipe(concatAll())`) */\r\nexport function startWith<T, D>(v1: D, scheduler: SchedulerLike): OperatorFunction<T, T | D>;\r\n/** @deprecated use {@link scheduled} and {@link concatAll} (e.g. `scheduled([[a, b, c], source], scheduler).pipe(concatAll())`) */\r\nexport function startWith<T, D, E>(v1: D, v2: E, scheduler: SchedulerLike): OperatorFunction<T, T | D | E>;\r\n/** @deprecated use {@link scheduled} and {@link concatAll} (e.g. `scheduled([[a, b, c], source], scheduler).pipe(concatAll())`) */\r\nexport function startWith<T, D, E, F>(v1: D, v2: E, v3: F, scheduler: SchedulerLike): OperatorFunction<T, T | D | E | F>;\r\n/** @deprecated use {@link scheduled} and {@link concatAll} (e.g. `scheduled([[a, b, c], source], scheduler).pipe(concatAll())`) */\r\nexport function startWith<T, D, E, F, G>(v1: D, v2:  E, v3: F, v4: G, scheduler: SchedulerLike): OperatorFunction<T, T | D | E | F | G>;\r\n/** @deprecated use {@link scheduled} and {@link concatAll} (e.g. `scheduled([[a, b, c], source], scheduler).pipe(concatAll())`) */\r\nexport function startWith<T, D, E, F, G, H>(v1: D, v2: E, v3: F, v4: G, v5: H, scheduler: SchedulerLike): OperatorFunction<T, T | D | E | F | G | H>;\r\n/** @deprecated use {@link scheduled} and {@link concatAll} (e.g. `scheduled([[a, b, c], source], scheduler).pipe(concatAll())`) */\r\nexport function startWith<T, D, E, F, G, H, I>(v1: D, v2: E, v3: F, v4: G, v5: H, v6: I, scheduler: SchedulerLike): OperatorFunction<T, T | D | E | F | G | H | I>;\r\n\r\nexport function startWith<T, D>(v1: D): OperatorFunction<T, T | D>;\r\nexport function startWith<T, D, E>(v1: D, v2: E): OperatorFunction<T, T | D | E>;\r\nexport function startWith<T, D, E, F>(v1: D, v2: E, v3: F): OperatorFunction<T, T | D | E | F>;\r\nexport function startWith<T, D, E, F, G>(v1: D, v2:  E, v3: F, v4: G): OperatorFunction<T, T | D | E | F | G>;\r\nexport function startWith<T, D, E, F, G, H>(v1: D, v2: E, v3: F, v4: G, v5: H): OperatorFunction<T, T | D | E | F | G | H>;\r\nexport function startWith<T, D, E, F, G, H, I>(v1: D, v2: E, v3: F, v4: G, v5: H, v6: I): OperatorFunction<T, T | D | E | F | G | H | I>;\r\nexport function startWith<T, D = T>(...array: D[]): OperatorFunction<T, T | D>;\r\n/** @deprecated use {@link scheduled} and {@link concatAll} (e.g. `scheduled([[a, b, c], source], scheduler).pipe(concatAll())`) */\r\nexport function startWith<T, D = T>(...array: Array<D | SchedulerLike>): OperatorFunction<T, T | D>;\r\n/* tslint:enable:max-line-length */\r\n\r\n/**\r\n * Returns an Observable that emits the items you specify as arguments before it begins to emit\r\n * items emitted by the source Observable.\r\n *\r\n * <span class=\"informal\">First emits its arguments in order, and then any\r\n * emissions from the source.</span>\r\n *\r\n * ![](startWith.png)\r\n *\r\n * ## Examples\r\n *\r\n * Start the chain of emissions with `\"first\"`, `\"second\"`\r\n *\r\n * ```ts\r\n * import { of } from 'rxjs';\r\n * import { startWith } from 'rxjs/operators';\r\n *\r\n * of(\"from source\")\r\n *   .pipe(startWith(\"first\", \"second\"))\r\n *   .subscribe(x => console.log(x));\r\n *\r\n * // results:\r\n * //   \"first\"\r\n * //   \"second\"\r\n * //   \"from source\"\r\n * ```\r\n *\r\n * @param {...T} values - Items you want the modified Observable to emit first.\r\n * @param {SchedulerLike} [scheduler] - A {@link SchedulerLike} to use for scheduling\r\n * the emissions of the `next` notifications.\r\n * @return {Observable} An Observable that emits the items in the specified Iterable and then emits the items\r\n * emitted by the source Observable.\r\n * @method startWith\r\n * @owner Observable\r\n */\r\nexport function startWith<T, D>(...array: Array<T | SchedulerLike>): OperatorFunction<T, T | D> {\r\n  const scheduler = array[array.length - 1] as SchedulerLike;\r\n  if (isScheduler(scheduler)) {\r\n    // deprecated path\r\n    array.pop();\r\n    return (source: Observable<T>) => concat(array as T[], source, scheduler);\r\n  } else {\r\n    return (source: Observable<T>) => concat(array as T[], source);\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}