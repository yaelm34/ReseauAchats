{"ast":null,"code":"/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nexport function pairwise() {\n  return function (source) {\n    return source.lift(new PairwiseOperator());\n  };\n}\n\nvar PairwiseOperator = /*@__PURE__*/function () {\n  function PairwiseOperator() {}\n\n  PairwiseOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new PairwiseSubscriber(subscriber));\n  };\n\n  return PairwiseOperator;\n}();\n\nvar PairwiseSubscriber = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(PairwiseSubscriber, _super);\n\n  function PairwiseSubscriber(destination) {\n    var _this = _super.call(this, destination) || this;\n\n    _this.hasPrev = false;\n    return _this;\n  }\n\n  PairwiseSubscriber.prototype._next = function (value) {\n    var pair;\n\n    if (this.hasPrev) {\n      pair = [this.prev, value];\n    } else {\n      this.hasPrev = true;\n    }\n\n    this.prev = value;\n\n    if (pair) {\n      this.destination.next(pair);\n    }\n  };\n\n  return PairwiseSubscriber;\n}(Subscriber);","map":{"version":3,"mappings":";AAEA,OAAO,KAAEA,OAAT,MAAqB,OAArB;AA8CA,SAAMC,UAAN,QAAwB,eAAxB;OACE,SAAOC,QAAP,GAA6B;AAC9B;AAAA;AAAA;AAED;;IAAAC;AAIA,WAACA,gBAAD,GAAC,CAHC;;kBACS,CAAMC,UAAUC,OAAK,sBAAmBC,MAAnB,EAAgC;AAC7D;AACH;;AAJA,SAICH,gBAJD;AAWA,CAXA;;IAWoCI,4CAAaC,MAAb,EAAa;AAI/CR,wCAAYQ,MAAZ;;WAAAD,mBACEE,aAAM;AAHA,sBAAmB,KAAnB,CAAyB,IAAzB,EAAyBA,WAAzB,KAAyB,IAAzB;;;AAIP;AAED;;oBAC+B;AAE7B,QAAIC,IAAJ;;QACE,KAAIC,SAAS;AACdD;WACC;AACD;AAED;;AAEA,SAAIE,IAAJ,GAAUC,KAAV;;QACEH,MAAK;AACN;AACF;AACH;;AAvBoC;CAAA","names":["tslib_1","Subscriber","pairwise","PairwiseOperator","prototype","call","source","PairwiseSubscriber","_super","destination","pair","hasPrev","prev","value"],"sources":["D:\\Documents\\EMA\\Mines A3\\NoSQL\\ReseauAchats\\reseau_achats\\node_modules\\rxjs\\src\\internal\\operators\\pairwise.ts"],"sourcesContent":["import { Operator } from '../Operator';\r\nimport { Observable } from '../Observable';\r\nimport { Subscriber } from '../Subscriber';\r\nimport { OperatorFunction } from '../types';\r\n\r\n/**\r\n * Groups pairs of consecutive emissions together and emits them as an array of\r\n * two values.\r\n *\r\n * <span class=\"informal\">Puts the current value and previous value together as\r\n * an array, and emits that.</span>\r\n *\r\n * ![](pairwise.png)\r\n *\r\n * The Nth emission from the source Observable will cause the output Observable\r\n * to emit an array [(N-1)th, Nth] of the previous and the current value, as a\r\n * pair. For this reason, `pairwise` emits on the second and subsequent\r\n * emissions from the source Observable, but not on the first emission, because\r\n * there is no previous value in that case.\r\n *\r\n * ## Example\r\n * On every click (starting from the second), emit the relative distance to the previous click\r\n * ```ts\r\n * import { fromEvent } from 'rxjs';\r\n * import { pairwise, map } from 'rxjs/operators';\r\n *\r\n * const clicks = fromEvent(document, 'click');\r\n * const pairs = clicks.pipe(pairwise());\r\n * const distance = pairs.pipe(\r\n *   map(pair => {\r\n *     const x0 = pair[0].clientX;\r\n *     const y0 = pair[0].clientY;\r\n *     const x1 = pair[1].clientX;\r\n *     const y1 = pair[1].clientY;\r\n *     return Math.sqrt(Math.pow(x0 - x1, 2) + Math.pow(y0 - y1, 2));\r\n *   }),\r\n * );\r\n * distance.subscribe(x => console.log(x));\r\n * ```\r\n *\r\n * @see {@link buffer}\r\n * @see {@link bufferCount}\r\n *\r\n * @return {Observable<Array<T>>} An Observable of pairs (as arrays) of\r\n * consecutive values from the source Observable.\r\n * @method pairwise\r\n * @owner Observable\r\n */\r\nexport function pairwise<T>(): OperatorFunction<T, [T, T]> {\r\n  return (source: Observable<T>) => source.lift(new PairwiseOperator());\r\n}\r\n\r\nclass PairwiseOperator<T> implements Operator<T, [T, T]> {\r\n  call(subscriber: Subscriber<[T, T]>, source: any): any {\r\n    return source.subscribe(new PairwiseSubscriber(subscriber));\r\n  }\r\n}\r\n\r\n/**\r\n * We need this JSDoc comment for affecting ESDoc.\r\n * @ignore\r\n * @extends {Ignored}\r\n */\r\nclass PairwiseSubscriber<T> extends Subscriber<T> {\r\n  private prev: T;\r\n  private hasPrev: boolean = false;\r\n\r\n  constructor(destination: Subscriber<[T, T]>) {\r\n    super(destination);\r\n  }\r\n\r\n  _next(value: T): void {\r\n    let pair: [T, T] | undefined;\r\n\r\n    if (this.hasPrev) {\r\n      pair = [this.prev, value];\r\n    } else {\r\n      this.hasPrev = true;\r\n    }\r\n\r\n    this.prev = value;\r\n\r\n    if (pair) {\r\n      this.destination.next(pair);\r\n    }\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}