{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _neo4jDriverCore = require(\"neo4j-driver-core\");\n\nvar _rxjs = require(\"rxjs\");\n\nvar _operators = require(\"rxjs/operators\");\n/**\n * Copyright (c) \"Neo4j\"\n * Neo4j Sweden AB [http://neo4j.com]\n *\n * This file is part of Neo4j.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nvar Logger = _neo4jDriverCore.internal.logger.Logger,\n    canRetryOn = _neo4jDriverCore.internal.retryStrategy.canRetryOn;\nvar SERVICE_UNAVAILABLE = _neo4jDriverCore.error.SERVICE_UNAVAILABLE,\n    SESSION_EXPIRED = _neo4jDriverCore.error.SESSION_EXPIRED;\nvar DEFAULT_MAX_RETRY_TIME_MS = 30 * 1000; // 30 seconds\n\nvar DEFAULT_INITIAL_RETRY_DELAY_MS = 1000; // 1 seconds\n\nvar DEFAULT_RETRY_DELAY_MULTIPLIER = 2.0;\nvar DEFAULT_RETRY_DELAY_JITTER_FACTOR = 0.2;\n\nvar RxRetryLogic = /*#__PURE__*/function () {\n  /**\n   *\n   * @param {Object} args\n   * @param {Logger} args.logger\n   */\n  function RxRetryLogic() {\n    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        _ref$maxRetryTimeout = _ref.maxRetryTimeout,\n        maxRetryTimeout = _ref$maxRetryTimeout === void 0 ? DEFAULT_MAX_RETRY_TIME_MS : _ref$maxRetryTimeout,\n        _ref$initialDelay = _ref.initialDelay,\n        initialDelay = _ref$initialDelay === void 0 ? DEFAULT_INITIAL_RETRY_DELAY_MS : _ref$initialDelay,\n        _ref$delayMultiplier = _ref.delayMultiplier,\n        delayMultiplier = _ref$delayMultiplier === void 0 ? DEFAULT_RETRY_DELAY_MULTIPLIER : _ref$delayMultiplier,\n        _ref$delayJitter = _ref.delayJitter,\n        delayJitter = _ref$delayJitter === void 0 ? DEFAULT_RETRY_DELAY_JITTER_FACTOR : _ref$delayJitter,\n        _ref$logger = _ref.logger,\n        logger = _ref$logger === void 0 ? null : _ref$logger;\n\n    (0, _classCallCheck2[\"default\"])(this, RxRetryLogic);\n    this._maxRetryTimeout = valueOrDefault(maxRetryTimeout, DEFAULT_MAX_RETRY_TIME_MS);\n    this._initialDelay = valueOrDefault(initialDelay, DEFAULT_INITIAL_RETRY_DELAY_MS);\n    this._delayMultiplier = valueOrDefault(delayMultiplier, DEFAULT_RETRY_DELAY_MULTIPLIER);\n    this._delayJitter = valueOrDefault(delayJitter, DEFAULT_RETRY_DELAY_JITTER_FACTOR);\n    this._logger = logger;\n  }\n  /**\n   *\n   * @param {Observable<Any>} work\n   */\n\n\n  (0, _createClass2[\"default\"])(RxRetryLogic, [{\n    key: \"retry\",\n    value: function retry(work) {\n      var _this = this;\n\n      return work.pipe((0, _operators.retryWhen)(function (failedWork) {\n        var handledExceptions = [];\n        var startTime = Date.now();\n        var retryCount = 1;\n        var delayDuration = _this._initialDelay;\n        return failedWork.pipe((0, _operators.flatMap)(function (err) {\n          if (!canRetryOn(err)) {\n            return (0, _rxjs.throwError)(err);\n          }\n\n          handledExceptions.push(err);\n\n          if (retryCount >= 2 && Date.now() - startTime >= _this._maxRetryTimeout) {\n            var _error = (0, _neo4jDriverCore.newError)(\"Failed after retried for \".concat(retryCount, \" times in \").concat(_this._maxRetryTimeout, \" ms. Make sure that your database is online and retry again.\"), SERVICE_UNAVAILABLE);\n\n            _error.seenErrors = handledExceptions;\n            return (0, _rxjs.throwError)(_error);\n          }\n\n          var nextDelayDuration = _this._computeNextDelay(delayDuration);\n\n          delayDuration = delayDuration * _this._delayMultiplier;\n          retryCount++;\n\n          if (_this._logger) {\n            _this._logger.warn(\"Transaction failed and will be retried in \".concat(nextDelayDuration));\n          }\n\n          return (0, _rxjs.of)(1).pipe((0, _operators.delay)(nextDelayDuration));\n        }));\n      }));\n    }\n  }, {\n    key: \"_computeNextDelay\",\n    value: function _computeNextDelay(delay) {\n      var jitter = delay * this._delayJitter;\n      return delay - jitter + 2 * jitter * Math.random();\n    }\n  }]);\n  return RxRetryLogic;\n}();\n\nexports[\"default\"] = RxRetryLogic;\n\nfunction valueOrDefault(value, defaultValue) {\n  if (value || value === 0) {\n    return value;\n  }\n\n  return defaultValue;\n}","map":{"version":3,"sources":["D:/Documents/EMA/Mines A3/NoSQL/ReseauAchats/reseau_achats/node_modules/neo4j-driver/lib/internal/retry-logic-rx.js"],"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","_classCallCheck2","_createClass2","_neo4jDriverCore","_rxjs","_operators","Logger","internal","logger","canRetryOn","retryStrategy","SERVICE_UNAVAILABLE","error","SESSION_EXPIRED","DEFAULT_MAX_RETRY_TIME_MS","DEFAULT_INITIAL_RETRY_DELAY_MS","DEFAULT_RETRY_DELAY_MULTIPLIER","DEFAULT_RETRY_DELAY_JITTER_FACTOR","RxRetryLogic","_ref","arguments","length","undefined","_ref$maxRetryTimeout","maxRetryTimeout","_ref$initialDelay","initialDelay","_ref$delayMultiplier","delayMultiplier","_ref$delayJitter","delayJitter","_ref$logger","_maxRetryTimeout","valueOrDefault","_initialDelay","_delayMultiplier","_delayJitter","_logger","key","retry","work","_this","pipe","retryWhen","failedWork","handledExceptions","startTime","Date","now","retryCount","delayDuration","flatMap","err","throwError","push","_error","newError","concat","seenErrors","nextDelayDuration","_computeNextDelay","warn","of","delay","jitter","Math","random","defaultValue"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _neo4jDriverCore = require(\"neo4j-driver-core\");\n\nvar _rxjs = require(\"rxjs\");\n\nvar _operators = require(\"rxjs/operators\");\n\n/**\n * Copyright (c) \"Neo4j\"\n * Neo4j Sweden AB [http://neo4j.com]\n *\n * This file is part of Neo4j.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar Logger = _neo4jDriverCore.internal.logger.Logger,\n    canRetryOn = _neo4jDriverCore.internal.retryStrategy.canRetryOn;\nvar SERVICE_UNAVAILABLE = _neo4jDriverCore.error.SERVICE_UNAVAILABLE,\n    SESSION_EXPIRED = _neo4jDriverCore.error.SESSION_EXPIRED;\nvar DEFAULT_MAX_RETRY_TIME_MS = 30 * 1000; // 30 seconds\n\nvar DEFAULT_INITIAL_RETRY_DELAY_MS = 1000; // 1 seconds\n\nvar DEFAULT_RETRY_DELAY_MULTIPLIER = 2.0;\nvar DEFAULT_RETRY_DELAY_JITTER_FACTOR = 0.2;\n\nvar RxRetryLogic = /*#__PURE__*/function () {\n  /**\n   *\n   * @param {Object} args\n   * @param {Logger} args.logger\n   */\n  function RxRetryLogic() {\n    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        _ref$maxRetryTimeout = _ref.maxRetryTimeout,\n        maxRetryTimeout = _ref$maxRetryTimeout === void 0 ? DEFAULT_MAX_RETRY_TIME_MS : _ref$maxRetryTimeout,\n        _ref$initialDelay = _ref.initialDelay,\n        initialDelay = _ref$initialDelay === void 0 ? DEFAULT_INITIAL_RETRY_DELAY_MS : _ref$initialDelay,\n        _ref$delayMultiplier = _ref.delayMultiplier,\n        delayMultiplier = _ref$delayMultiplier === void 0 ? DEFAULT_RETRY_DELAY_MULTIPLIER : _ref$delayMultiplier,\n        _ref$delayJitter = _ref.delayJitter,\n        delayJitter = _ref$delayJitter === void 0 ? DEFAULT_RETRY_DELAY_JITTER_FACTOR : _ref$delayJitter,\n        _ref$logger = _ref.logger,\n        logger = _ref$logger === void 0 ? null : _ref$logger;\n\n    (0, _classCallCheck2[\"default\"])(this, RxRetryLogic);\n    this._maxRetryTimeout = valueOrDefault(maxRetryTimeout, DEFAULT_MAX_RETRY_TIME_MS);\n    this._initialDelay = valueOrDefault(initialDelay, DEFAULT_INITIAL_RETRY_DELAY_MS);\n    this._delayMultiplier = valueOrDefault(delayMultiplier, DEFAULT_RETRY_DELAY_MULTIPLIER);\n    this._delayJitter = valueOrDefault(delayJitter, DEFAULT_RETRY_DELAY_JITTER_FACTOR);\n    this._logger = logger;\n  }\n  /**\n   *\n   * @param {Observable<Any>} work\n   */\n\n\n  (0, _createClass2[\"default\"])(RxRetryLogic, [{\n    key: \"retry\",\n    value: function retry(work) {\n      var _this = this;\n\n      return work.pipe((0, _operators.retryWhen)(function (failedWork) {\n        var handledExceptions = [];\n        var startTime = Date.now();\n        var retryCount = 1;\n        var delayDuration = _this._initialDelay;\n        return failedWork.pipe((0, _operators.flatMap)(function (err) {\n          if (!canRetryOn(err)) {\n            return (0, _rxjs.throwError)(err);\n          }\n\n          handledExceptions.push(err);\n\n          if (retryCount >= 2 && Date.now() - startTime >= _this._maxRetryTimeout) {\n            var _error = (0, _neo4jDriverCore.newError)(\"Failed after retried for \".concat(retryCount, \" times in \").concat(_this._maxRetryTimeout, \" ms. Make sure that your database is online and retry again.\"), SERVICE_UNAVAILABLE);\n\n            _error.seenErrors = handledExceptions;\n            return (0, _rxjs.throwError)(_error);\n          }\n\n          var nextDelayDuration = _this._computeNextDelay(delayDuration);\n\n          delayDuration = delayDuration * _this._delayMultiplier;\n          retryCount++;\n\n          if (_this._logger) {\n            _this._logger.warn(\"Transaction failed and will be retried in \".concat(nextDelayDuration));\n          }\n\n          return (0, _rxjs.of)(1).pipe((0, _operators.delay)(nextDelayDuration));\n        }));\n      }));\n    }\n  }, {\n    key: \"_computeNextDelay\",\n    value: function _computeNextDelay(delay) {\n      var jitter = delay * this._delayJitter;\n      return delay - jitter + 2 * jitter * Math.random();\n    }\n  }]);\n  return RxRetryLogic;\n}();\n\nexports[\"default\"] = RxRetryLogic;\n\nfunction valueOrDefault(value, defaultValue) {\n  if (value || value === 0) {\n    return value;\n  }\n\n  return defaultValue;\n}"]},"metadata":{},"sourceType":"script"}