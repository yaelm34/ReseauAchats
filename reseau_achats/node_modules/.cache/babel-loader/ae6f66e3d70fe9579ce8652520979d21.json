{"ast":null,"code":"/** PURE_IMPORTS_START tslib,_Scheduler PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Scheduler } from '../Scheduler';\n\nvar AsyncScheduler = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(AsyncScheduler, _super);\n\n  function AsyncScheduler(SchedulerAction, now) {\n    if (now === void 0) {\n      now = Scheduler.now;\n    }\n\n    var _this = _super.call(this, SchedulerAction, function () {\n      if (AsyncScheduler.delegate && AsyncScheduler.delegate !== _this) {\n        return AsyncScheduler.delegate.now();\n      } else {\n        return now();\n      }\n    }) || this;\n\n    _this.actions = [];\n    _this.active = false;\n    _this.scheduled = undefined;\n    return _this;\n  }\n\n  AsyncScheduler.prototype.schedule = function (work, delay, state) {\n    if (delay === void 0) {\n      delay = 0;\n    }\n\n    if (AsyncScheduler.delegate && AsyncScheduler.delegate !== this) {\n      return AsyncScheduler.delegate.schedule(work, delay, state);\n    } else {\n      return _super.prototype.schedule.call(this, work, delay, state);\n    }\n  };\n\n  AsyncScheduler.prototype.flush = function (action) {\n    var actions = this.actions;\n\n    if (this.active) {\n      actions.push(action);\n      return;\n    }\n\n    var error;\n    this.active = true;\n\n    do {\n      if (error = action.execute(action.state, action.delay)) {\n        break;\n      }\n    } while (action = actions.shift());\n\n    this.active = false;\n\n    if (error) {\n      while (action = actions.shift()) {\n        action.unsubscribe();\n      }\n\n      throw error;\n    }\n  };\n\n  return AsyncScheduler;\n}(Scheduler);\n\nexport { AsyncScheduler };","map":{"version":3,"mappings":";AAAA,OAAO,KAAEA,OAAT,MAAoB,OAApB;AAMA;;IAAoCC,wCAASC,MAAT,EAAS;AAmB3CF,oCAAYE,MAAZ;;WACYD,gCAA6BE,KAAI;AAD7C,gBAEE,MAFF,EAEE;AACEA,YAAIC,aAAJ;;;aAEC;wBAAM;AACL,eAAOH,cAAM,SAAN,CAAME,GAAN,EAAP;AACD,aACD;AAzBG,eAAOA,GAA8B,EAArC;AAOA;AAQA,KAOF,KAPE;;;AAWNE;AAEMA;AAAiE;;;gBAEpE,CAAOC,qBAAe,UAASC,IAAT,EAAsBC,KAAtB,EAA6BC,KAA7B,EAAoC;QAC3DD;WAAM;;;QAENP;AACF;AAEM,WAEE;AAEH,aAAKC,MAAQ,UAAR,CAAQQ,QAAR,CAAQC,IAAR,CAAQ,IAAR,EAAQJ,IAAR,EAAQC,KAAR,EAAQC,KAAR,CAAL;;;;gBAGH;AAED,QAAIG,OAAW,eAAf;;AACA,QAAI,KAACC,MAAL,EAAc;AAEXD;AACD;;;;SAGDC,SAAQ;;AAET;AAEI,eAAO,6CAAP,EAAO;AACT;;KAHF,QAKGC,wBALH;;SAMED,SAAM;;QACPE;AACF;AACHD;AAjE6C;;;;;;;CAAT","names":["tslib_1","AsyncScheduler","_super","now","Scheduler","_this","prototype","work","delay","state","schedule","call","actions","active","action","error"],"sources":["D:\\Documents\\EMA\\Mines A3\\NoSQL\\ReseauAchats\\reseau_achats\\node_modules\\rxjs\\src\\internal\\scheduler\\AsyncScheduler.ts"],"sourcesContent":["import { Scheduler } from '../Scheduler';\r\nimport { Action } from './Action';\r\nimport { AsyncAction } from './AsyncAction';\r\nimport { SchedulerAction } from '../types';\r\nimport { Subscription } from '../Subscription';\r\n\r\nexport class AsyncScheduler extends Scheduler {\r\n  public static delegate?: Scheduler;\r\n  public actions: Array<AsyncAction<any>> = [];\r\n  /**\r\n   * A flag to indicate whether the Scheduler is currently executing a batch of\r\n   * queued actions.\r\n   * @type {boolean}\r\n   * @deprecated internal use only\r\n   */\r\n  public active: boolean = false;\r\n  /**\r\n   * An internal ID used to track the latest asynchronous task such as those\r\n   * coming from `setTimeout`, `setInterval`, `requestAnimationFrame`, and\r\n   * others.\r\n   * @type {any}\r\n   * @deprecated internal use only\r\n   */\r\n  public scheduled: any = undefined;\r\n\r\n  constructor(SchedulerAction: typeof Action,\r\n              now: () => number = Scheduler.now) {\r\n    super(SchedulerAction, () => {\r\n      if (AsyncScheduler.delegate && AsyncScheduler.delegate !== this) {\r\n        return AsyncScheduler.delegate.now();\r\n      } else {\r\n        return now();\r\n      }\r\n    });\r\n  }\r\n\r\n  public schedule<T>(work: (this: SchedulerAction<T>, state?: T) => void, delay: number = 0, state?: T): Subscription {\r\n    if (AsyncScheduler.delegate && AsyncScheduler.delegate !== this) {\r\n      return AsyncScheduler.delegate.schedule(work, delay, state);\r\n    } else {\r\n      return super.schedule(work, delay, state);\r\n    }\r\n  }\r\n\r\n  public flush(action: AsyncAction<any>): void {\r\n\r\n    const {actions} = this;\r\n\r\n    if (this.active) {\r\n      actions.push(action);\r\n      return;\r\n    }\r\n\r\n    let error: any;\r\n    this.active = true;\r\n\r\n    do {\r\n      if (error = action.execute(action.state, action.delay)) {\r\n        break;\r\n      }\r\n    } while (action = actions.shift()); // exhaust the scheduler queue\r\n\r\n    this.active = false;\r\n\r\n    if (error) {\r\n      while (action = actions.shift()) {\r\n        action.unsubscribe();\r\n      }\r\n      throw error;\r\n    }\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}