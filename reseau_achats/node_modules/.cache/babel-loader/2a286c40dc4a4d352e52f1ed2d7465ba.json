{"ast":null,"code":"/** PURE_IMPORTS_START _Observable,_from,_empty PURE_IMPORTS_END */\nimport { Observable } from '../Observable';\nimport { from } from './from';\nimport { EMPTY } from './empty';\nexport function using(resourceFactory, observableFactory) {\n  return new Observable(function (subscriber) {\n    var resource;\n\n    try {\n      resource = resourceFactory();\n    } catch (err) {\n      subscriber.error(err);\n      return undefined;\n    }\n\n    var result;\n\n    try {\n      result = observableFactory(resource);\n    } catch (err) {\n      subscriber.error(err);\n      return undefined;\n    }\n\n    var source = result ? from(result) : EMPTY;\n    var subscription = source.subscribe(subscriber);\n    return function () {\n      subscription.unsubscribe();\n\n      if (resource) {\n        resource.unsubscribe();\n      }\n    };\n  });\n}","map":{"version":3,"mappings":"AAAA;AAEA,SAASA,UAAT,QAAqB,eAArB;AACA,SAASC,IAAT,QAAgB,QAAhB;AA8BA,SAAMC,KAAN,QAAyB,SAAzB;OAEE,SAAWC,KAAX,CAAWC,eAAX,EAAyBC,iBAAzB,EAAmC;SACjC,IAAIL,UAAJ,CAAoC;AAEpC,QAAIM,QAAJ;;QACE;AACDA;AAAC,aACAC;AACAC,gBAAO,MAAP,CAAiBD,GAAjB;AACD;AAED;;AACA,QAAIE,MAAJ;;QACE;AACDA;AAAC,aACAF;AACAC,gBAAO,MAAP,CAAiBD,GAAjB;AACD;AAED;;AACA,QAAMG,eAAe,OAAO,QAAP,GAAiBR,KAAtC;AACA,oBAAO,+BAAP;WACE,YAAa;AACbS,kBAAY,YAAZ;;UACEL,UAAS;AACVA;AACD;AACD;AACJ,GA1BG","names":["Observable","from","EMPTY","using","resourceFactory","observableFactory","resource","err","subscriber","result","source","subscription"],"sources":["D:\\Documents\\EMA\\Mines A3\\NoSQL\\ReseauAchats\\reseau_achats\\node_modules\\rxjs\\src\\internal\\observable\\using.ts"],"sourcesContent":["import { Observable } from '../Observable';\r\nimport { Unsubscribable, ObservableInput } from '../types';\r\nimport { from } from './from'; // from from from! LAWL\r\nimport { EMPTY } from './empty';\r\n\r\n/**\r\n * Creates an Observable that uses a resource which will be disposed at the same time as the Observable.\r\n *\r\n * <span class=\"informal\">Use it when you catch yourself cleaning up after an Observable.</span>\r\n *\r\n * `using` is a factory operator, which accepts two functions. First function returns a disposable resource.\r\n * It can be an arbitrary object that implements `unsubscribe` method. Second function will be injected with\r\n * that object and should return an Observable. That Observable can use resource object during its execution.\r\n * Both functions passed to `using` will be called every time someone subscribes - neither an Observable nor\r\n * resource object will be shared in any way between subscriptions.\r\n *\r\n * When Observable returned by `using` is subscribed, Observable returned from the second function will be subscribed\r\n * as well. All its notifications (nexted values, completion and error events) will be emitted unchanged by the output\r\n * Observable. If however someone unsubscribes from the Observable or source Observable completes or errors by itself,\r\n * the `unsubscribe` method on resource object will be called. This can be used to do any necessary clean up, which\r\n * otherwise would have to be handled by hand. Note that complete or error notifications are not emitted when someone\r\n * cancels subscription to an Observable via `unsubscribe`, so `using` can be used as a hook, allowing you to make\r\n * sure that all resources which need to exist during an Observable execution will be disposed at appropriate time.\r\n *\r\n * @see {@link defer}\r\n *\r\n * @param {function(): ISubscription} resourceFactory A function which creates any resource object\r\n * that implements `unsubscribe` method.\r\n * @param {function(resource: ISubscription): Observable<T>} observableFactory A function which\r\n * creates an Observable, that can use injected resource object.\r\n * @return {Observable<T>} An Observable that behaves the same as Observable returned by `observableFactory`, but\r\n * which - when completed, errored or unsubscribed - will also call `unsubscribe` on created resource object.\r\n */\r\nexport function using<T>(resourceFactory: () => Unsubscribable | void,\r\n                         observableFactory: (resource: Unsubscribable | void) => ObservableInput<T> | void): Observable<T> {\r\n  return new Observable<T>(subscriber => {\r\n    let resource: Unsubscribable | void;\r\n\r\n    try {\r\n      resource = resourceFactory();\r\n    } catch (err) {\r\n      subscriber.error(err);\r\n      return undefined;\r\n    }\r\n\r\n    let result: ObservableInput<T> | void;\r\n    try {\r\n      result = observableFactory(resource);\r\n    } catch (err) {\r\n      subscriber.error(err);\r\n      return undefined;\r\n    }\r\n\r\n    const source = result ? from(result) : EMPTY;\r\n    const subscription = source.subscribe(subscriber);\r\n    return () => {\r\n      subscription.unsubscribe();\r\n      if (resource) {\r\n        resource.unsubscribe();\r\n      }\r\n    };\r\n  });\r\n}\r\n"]},"metadata":{},"sourceType":"module"}