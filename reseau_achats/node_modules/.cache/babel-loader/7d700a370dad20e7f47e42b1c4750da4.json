{"ast":null,"code":"/** PURE_IMPORTS_START _AsyncSubject,_multicast PURE_IMPORTS_END */\nimport { AsyncSubject } from '../AsyncSubject';\nimport { multicast } from './multicast';\nexport function publishLast() {\n  return function (source) {\n    return multicast(new AsyncSubject())(source);\n  };\n}","map":{"version":3,"mappings":"AACA;AACA,SAASA,YAAT,QAA0B,iBAA1B;AA8DA,SAAMC,SAAN,QAAgB,aAAhB;OACE,SAAOC,WAAP,GAA6B;AAC9B;AAAA;AAAA","names":["AsyncSubject","multicast","publishLast"],"sources":["D:\\Documents\\EMA\\Mines A3\\NoSQL\\ReseauAchats\\reseau_achats\\node_modules\\rxjs\\src\\internal\\operators\\publishLast.ts"],"sourcesContent":["import { Observable } from '../Observable';\r\nimport { AsyncSubject } from '../AsyncSubject';\r\nimport { multicast } from './multicast';\r\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\r\nimport { UnaryFunction } from '../types';\r\n\r\n/**\r\n * Returns a connectable observable sequence that shares a single subscription to the\r\n * underlying sequence containing only the last notification.\r\n *\r\n * ![](publishLast.png)\r\n *\r\n * Similar to {@link publish}, but it waits until the source observable completes and stores\r\n * the last emitted value.\r\n * Similarly to {@link publishReplay} and {@link publishBehavior}, this keeps storing the last\r\n * value even if it has no more subscribers. If subsequent subscriptions happen, they will\r\n * immediately get that last stored value and complete.\r\n *\r\n * ## Example\r\n *\r\n * ```ts\r\n * import { interval } from 'rxjs';\r\n * import { publishLast, tap, take } from 'rxjs/operators';\r\n *\r\n * const connectable =\r\n *   interval(1000)\r\n *     .pipe(\r\n *       tap(x => console.log(\"side effect\", x)),\r\n *       take(3),\r\n *       publishLast());\r\n *\r\n * connectable.subscribe(\r\n *   x => console.log(  \"Sub. A\", x),\r\n *   err => console.log(\"Sub. A Error\", err),\r\n *   () => console.log( \"Sub. A Complete\"));\r\n *\r\n * connectable.subscribe(\r\n *   x => console.log(  \"Sub. B\", x),\r\n *   err => console.log(\"Sub. B Error\", err),\r\n *   () => console.log( \"Sub. B Complete\"));\r\n *\r\n * connectable.connect();\r\n *\r\n * // Results:\r\n * //    \"side effect 0\"\r\n * //    \"side effect 1\"\r\n * //    \"side effect 2\"\r\n * //    \"Sub. A 2\"\r\n * //    \"Sub. B 2\"\r\n * //    \"Sub. A Complete\"\r\n * //    \"Sub. B Complete\"\r\n * ```\r\n *\r\n * @see {@link ConnectableObservable}\r\n * @see {@link publish}\r\n * @see {@link publishReplay}\r\n * @see {@link publishBehavior}\r\n *\r\n * @return {ConnectableObservable} An observable sequence that contains the elements of a\r\n * sequence produced by multicasting the source sequence.\r\n * @method publishLast\r\n * @owner Observable\r\n */\r\n\r\nexport function publishLast<T>(): UnaryFunction<Observable<T>, ConnectableObservable<T>> {\r\n  return (source: Observable<T>) => multicast(new AsyncSubject<T>())(source);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}