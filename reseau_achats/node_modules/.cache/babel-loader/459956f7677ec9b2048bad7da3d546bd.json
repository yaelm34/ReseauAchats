{"ast":null,"code":"/** PURE_IMPORTS_START tslib,_util_EmptyError,_Subscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { EmptyError } from '../util/EmptyError';\nimport { Subscriber } from '../Subscriber';\nexport function throwIfEmpty(errorFactory) {\n  if (errorFactory === void 0) {\n    errorFactory = defaultErrorFactory;\n  }\n\n  return function (source) {\n    return source.lift(new ThrowIfEmptyOperator(errorFactory));\n  };\n}\n\nvar ThrowIfEmptyOperator = /*@__PURE__*/function () {\n  function ThrowIfEmptyOperator(errorFactory) {\n    this.errorFactory = errorFactory;\n  }\n\n  ThrowIfEmptyOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new ThrowIfEmptySubscriber(subscriber, this.errorFactory));\n  };\n\n  return ThrowIfEmptyOperator;\n}();\n\nvar ThrowIfEmptySubscriber = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(ThrowIfEmptySubscriber, _super);\n\n  function ThrowIfEmptySubscriber(destination, errorFactory) {\n    var _this = _super.call(this, destination) || this;\n\n    _this.errorFactory = errorFactory;\n    _this.hasValue = false;\n    return _this;\n  }\n\n  ThrowIfEmptySubscriber.prototype._next = function (value) {\n    this.hasValue = true;\n    this.destination.next(value);\n  };\n\n  ThrowIfEmptySubscriber.prototype._complete = function () {\n    if (!this.hasValue) {\n      var err = void 0;\n\n      try {\n        err = this.errorFactory();\n      } catch (e) {\n        err = e;\n      }\n\n      this.destination.error(err);\n    } else {\n      return this.destination.complete();\n    }\n  };\n\n  return ThrowIfEmptySubscriber;\n}(Subscriber);\n\nfunction defaultErrorFactory() {\n  return new EmptyError();\n}","map":{"version":3,"mappings":";AAAA,OAAO,KAAEA,OAAT,MAAqB,OAArB;AAGA,SAASC,UAAT,QAA2B,oBAA3B;AAiCA,SAAMC,UAAN,QAAgB,eAAhB;OAAiC;AAC/B,kBAAO,KAAC,KAAqB,CAA7B,EAA6B;AAC3BC,gBAAO,GAAOC,mBAAd;AACD;;AACF;AAED;AACE,GAHD;;;IAICC,oBAAC;AAED;AACE,wBAAcF,YAAd;AACD;;AACHE,iCAACC,IAAD,GAAC;AAAA;AAED,GAFA;;AAEwC;CAPrC;;0BAWC,gBAAM,UAAYC,MAAZ,EACP;SAF+C,mCAAuBA;;WAF/DC,uBAA0BC;;;AAIjCC;AAESA;AACR,WAAKA,KAAL;;;AAEFF,wBAAC,UAAD,CAACG,KAAD,GAAC;AAES;AACR,SAAKF,WAAL,CAAUG,IAAV,CAAoBC,KAApB;GAHF;;wBAKQ;cACFC,UAAW;UACZC;;AAAC;AACAA,WAAG,GAAG,KAAEZ,YAAF,EAAN;AACD,OAFC,CAGF,OAAKa,CAAL,EAAK;AACND;AAAM;;AACH,uBAAYE,KAAZ,CAAuBF,GAAvB;AACH,WACF;AACH,8BAACG,QAAD;AAzBwC;AA2BxC;;AACE,SAAOV,sBAAP;AACD,CAzBS,CAyBTN,UAzBS","names":["tslib_1","EmptyError","Subscriber","errorFactory","defaultErrorFactory","ThrowIfEmptyOperator","call","_super","ThrowIfEmptySubscriber","destination","_this","_next","next","value","hasValue","err","e","error","complete"],"sources":["D:\\Documents\\EMA\\Mines A3\\NoSQL\\ReseauAchats\\reseau_achats\\node_modules\\rxjs\\src\\internal\\operators\\throwIfEmpty.ts"],"sourcesContent":["import { EmptyError } from '../util/EmptyError';\r\nimport { Observable } from '../Observable';\r\nimport { Operator } from '../Operator';\r\nimport { Subscriber } from '../Subscriber';\r\nimport { TeardownLogic, MonoTypeOperatorFunction } from '../types';\r\n\r\n/**\r\n * If the source observable completes without emitting a value, it will emit\r\n * an error. The error will be created at that time by the optional\r\n * `errorFactory` argument, otherwise, the error will be {@link EmptyError}.\r\n *\r\n * ![](throwIfEmpty.png)\r\n *\r\n * ## Example\r\n * ```ts\r\n * import { fromEvent, timer } from 'rxjs';\r\n * import { throwIfEmpty, takeUntil } from 'rxjs/operators';\r\n *\r\n * const click$ = fromEvent(document, 'click');\r\n *\r\n * click$.pipe(\r\n *   takeUntil(timer(1000)),\r\n *   throwIfEmpty(\r\n *     () => new Error('the document was not clicked within 1 second')\r\n *   ),\r\n * )\r\n * .subscribe({\r\n *   next() { console.log('The button was clicked'); },\r\n *   error(err) { console.error(err); }\r\n * });\r\n * ```\r\n *\r\n * @param errorFactory A factory function called to produce the\r\n * error to be thrown when the source observable completes without emitting a\r\n * value.\r\n */\r\nexport function throwIfEmpty <T>(errorFactory: (() => any) = defaultErrorFactory): MonoTypeOperatorFunction<T> {\r\n  return (source: Observable<T>) => {\r\n    return source.lift(new ThrowIfEmptyOperator(errorFactory));\r\n  };\r\n}\r\n\r\nclass ThrowIfEmptyOperator<T> implements Operator<T, T> {\r\n  constructor(private errorFactory: () => any) {\r\n  }\r\n\r\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\r\n    return source.subscribe(new ThrowIfEmptySubscriber(subscriber, this.errorFactory));\r\n  }\r\n}\r\n\r\nclass ThrowIfEmptySubscriber<T> extends Subscriber<T> {\r\n  private hasValue: boolean = false;\r\n\r\n  constructor(destination: Subscriber<T>, private errorFactory: () => any) {\r\n    super(destination);\r\n  }\r\n\r\n  protected _next(value: T): void {\r\n    this.hasValue = true;\r\n    this.destination.next(value);\r\n  }\r\n\r\n  protected _complete() {\r\n    if (!this.hasValue) {\r\n      let err: any;\r\n      try {\r\n        err = this.errorFactory();\r\n      } catch (e) {\r\n        err = e;\r\n      }\r\n      this.destination.error(err);\r\n    } else {\r\n        return this.destination.complete();\r\n    }\r\n  }\r\n}\r\n\r\nfunction defaultErrorFactory() {\r\n  return new EmptyError();\r\n}\r\n"]},"metadata":{},"sourceType":"module"}