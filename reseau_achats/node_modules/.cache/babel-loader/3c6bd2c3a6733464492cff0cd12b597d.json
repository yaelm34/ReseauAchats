{"ast":null,"code":"/** PURE_IMPORTS_START tslib,_innerSubscribe PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { innerSubscribe, SimpleInnerSubscriber, SimpleOuterSubscriber } from '../innerSubscribe';\nexport function takeUntil(notifier) {\n  return function (source) {\n    return source.lift(new TakeUntilOperator(notifier));\n  };\n}\n\nvar TakeUntilOperator = /*@__PURE__*/function () {\n  function TakeUntilOperator(notifier) {\n    this.notifier = notifier;\n  }\n\n  TakeUntilOperator.prototype.call = function (subscriber, source) {\n    var takeUntilSubscriber = new TakeUntilSubscriber(subscriber);\n    var notifierSubscription = innerSubscribe(this.notifier, new SimpleInnerSubscriber(takeUntilSubscriber));\n\n    if (notifierSubscription && !takeUntilSubscriber.seenValue) {\n      takeUntilSubscriber.add(notifierSubscription);\n      return source.subscribe(takeUntilSubscriber);\n    }\n\n    return takeUntilSubscriber;\n  };\n\n  return TakeUntilOperator;\n}();\n\nvar TakeUntilSubscriber = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(TakeUntilSubscriber, _super);\n\n  function TakeUntilSubscriber(destination) {\n    var _this = _super.call(this, destination) || this;\n\n    _this.seenValue = false;\n    return _this;\n  }\n\n  TakeUntilSubscriber.prototype.notifyNext = function () {\n    this.seenValue = true;\n    this.complete();\n  };\n\n  TakeUntilSubscriber.prototype.notifyComplete = function () {};\n\n  return TakeUntilSubscriber;\n}(SimpleOuterSubscriber);","map":{"version":3,"mappings":";AAKA,OAAO,KAAEA,OAAT,MAAyB,OAAzB;AA0CA,SAAMC,cAAN,EAAyBC,qBAAzB,EAAsDC,qBAAtD,QAAsD,mBAAtD;OACE,SAAOC,SAAP,CAAQC,QAAR,EAAkC;AACnC;AAAA;AAAA;AAED;;IACEC,iCAA6C;WAAzBA,4BAAyB;AAC5C;AAED;;mBACQ,WAAmBC,OAAO,sBAAoBC,MAApB,EAA+B;AAC/D,QAAMC,sBAAoB,IAAGC,mBAAH,CAAuBC,UAAvB,CAA1B;AACA,QAAIC,oBAAoB,iBAAK,gBAAoB,IAAWV,qBAAX,CAAWO,mBAAX,CAApB,CAA7B;;QACEG,oBAAoB,IAAI,oBAAoB,CAACC,WAAC;AAC9CJ,yBAAc,IAAd,CAAwBG,oBAAxB;AACD;AACD;;AACD;AACH;;AAbA,SAaCN,iBAbD;AAoBA,CAnB+C;;IAmBPI,6CAA2BI,MAA3B,EAA2B;AAGjEd,yCAAYc,MAAZ;;WAAAJ,oBACEK,aAAM;AAHR,sBAAY,KAAZ,CAAkB,IAAlB,EAAkBA,WAAlB,KAAkB,IAAlB;;;AAIC;AAED;;qBACgB,WAAQC;AACtB,SAAKH,SAAL,GAAgB,IAAhB;AACD;AAED;;AAEAH,qBAAC,UAAD,CAACO,cAAD,GAAC,aACH,CADE;;AAdsC;CAAA","names":["tslib_1","innerSubscribe","SimpleInnerSubscriber","SimpleOuterSubscriber","takeUntil","notifier","TakeUntilOperator","call","source","takeUntilSubscriber","TakeUntilSubscriber","subscriber","notifierSubscription","seenValue","_super","destination","notifyNext","notifyComplete"],"sources":["D:\\Documents\\EMA\\Mines A3\\NoSQL\\ReseauAchats\\reseau_achats\\node_modules\\rxjs\\src\\internal\\operators\\takeUntil.ts"],"sourcesContent":["import { Operator } from '../Operator';\r\nimport { Observable } from '../Observable';\r\nimport { Subscriber } from '../Subscriber';\r\n\r\nimport { MonoTypeOperatorFunction, TeardownLogic } from '../types';\r\nimport { innerSubscribe, SimpleInnerSubscriber, SimpleOuterSubscriber } from '../innerSubscribe';\r\n\r\n/**\r\n * Emits the values emitted by the source Observable until a `notifier`\r\n * Observable emits a value.\r\n *\r\n * <span class=\"informal\">Lets values pass until a second Observable,\r\n * `notifier`, emits a value. Then, it completes.</span>\r\n *\r\n * ![](takeUntil.png)\r\n *\r\n * `takeUntil` subscribes and begins mirroring the source Observable. It also\r\n * monitors a second Observable, `notifier` that you provide. If the `notifier`\r\n * emits a value, the output Observable stops mirroring the source Observable\r\n * and completes. If the `notifier` doesn't emit any value and completes\r\n * then `takeUntil` will pass all values.\r\n *\r\n * ## Example\r\n * Tick every second until the first click happens\r\n * ```ts\r\n * import { fromEvent, interval } from 'rxjs';\r\n * import { takeUntil } from 'rxjs/operators';\r\n *\r\n * const source = interval(1000);\r\n * const clicks = fromEvent(document, 'click');\r\n * const result = source.pipe(takeUntil(clicks));\r\n * result.subscribe(x => console.log(x));\r\n * ```\r\n *\r\n * @see {@link take}\r\n * @see {@link takeLast}\r\n * @see {@link takeWhile}\r\n * @see {@link skip}\r\n *\r\n * @param {Observable} notifier The Observable whose first emitted value will\r\n * cause the output Observable of `takeUntil` to stop emitting values from the\r\n * source Observable.\r\n * @return {Observable<T>} An Observable that emits the values from the source\r\n * Observable until such time as `notifier` emits its first value.\r\n * @method takeUntil\r\n * @owner Observable\r\n */\r\nexport function takeUntil<T>(notifier: Observable<any>): MonoTypeOperatorFunction<T> {\r\n  return (source: Observable<T>) => source.lift(new TakeUntilOperator(notifier));\r\n}\r\n\r\nclass TakeUntilOperator<T> implements Operator<T, T> {\r\n  constructor(private notifier: Observable<any>) {\r\n  }\r\n\r\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\r\n    const takeUntilSubscriber = new TakeUntilSubscriber(subscriber);\r\n    const notifierSubscription = innerSubscribe(this.notifier, new SimpleInnerSubscriber(takeUntilSubscriber));\r\n    if (notifierSubscription && !takeUntilSubscriber.seenValue) {\r\n      takeUntilSubscriber.add(notifierSubscription);\r\n      return source.subscribe(takeUntilSubscriber);\r\n    }\r\n    return takeUntilSubscriber;\r\n  }\r\n}\r\n\r\n/**\r\n * We need this JSDoc comment for affecting ESDoc.\r\n * @ignore\r\n * @extends {Ignored}\r\n */\r\nclass TakeUntilSubscriber<T, R> extends SimpleOuterSubscriber<T, R> {\r\n  seenValue = false;\r\n\r\n  constructor(destination: Subscriber<any>, ) {\r\n    super(destination);\r\n  }\r\n\r\n  notifyNext(): void {\r\n    this.seenValue = true;\r\n    this.complete();\r\n  }\r\n\r\n  notifyComplete(): void {\r\n    // noop\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}