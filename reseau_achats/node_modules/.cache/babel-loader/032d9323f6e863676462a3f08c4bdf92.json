{"ast":null,"code":"/** PURE_IMPORTS_START tslib,_innerSubscribe PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { SimpleOuterSubscriber, SimpleInnerSubscriber, innerSubscribe } from '../innerSubscribe';\nexport function skipUntil(notifier) {\n  return function (source) {\n    return source.lift(new SkipUntilOperator(notifier));\n  };\n}\n\nvar SkipUntilOperator = /*@__PURE__*/function () {\n  function SkipUntilOperator(notifier) {\n    this.notifier = notifier;\n  }\n\n  SkipUntilOperator.prototype.call = function (destination, source) {\n    return source.subscribe(new SkipUntilSubscriber(destination, this.notifier));\n  };\n\n  return SkipUntilOperator;\n}();\n\nvar SkipUntilSubscriber = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(SkipUntilSubscriber, _super);\n\n  function SkipUntilSubscriber(destination, notifier) {\n    var _this = _super.call(this, destination) || this;\n\n    _this.hasValue = false;\n    var innerSubscriber = new SimpleInnerSubscriber(_this);\n\n    _this.add(innerSubscriber);\n\n    _this.innerSubscription = innerSubscriber;\n    var innerSubscription = innerSubscribe(notifier, innerSubscriber);\n\n    if (innerSubscription !== innerSubscriber) {\n      _this.add(innerSubscription);\n\n      _this.innerSubscription = innerSubscription;\n    }\n\n    return _this;\n  }\n\n  SkipUntilSubscriber.prototype._next = function (value) {\n    if (this.hasValue) {\n      _super.prototype._next.call(this, value);\n    }\n  };\n\n  SkipUntilSubscriber.prototype.notifyNext = function () {\n    this.hasValue = true;\n\n    if (this.innerSubscription) {\n      this.innerSubscription.unsubscribe();\n    }\n  };\n\n  SkipUntilSubscriber.prototype.notifyComplete = function () {};\n\n  return SkipUntilSubscriber;\n}(SimpleOuterSubscriber);","map":{"version":3,"mappings":";AAKA,OAAO,KAAEA,OAAT,MAAS,OAAT;AAyCA,SAAMC,qBAAN,EAA6BC,qBAA7B,EAAsDC,cAAtD,QAAsD,mBAAtD;OACE,SAAOC,SAAP,CAAQC,QAAR,EAAkC;AACnC;AAAA;AAAA;AAED;;IACEC,iCAA6C;WAAzBA,4BAAyB;AAC5C;AAED;;mBACe,CAACC,UAAUC,OAAI,uBAAoBC,MAApB,EAAiC;AAC9D;AACH;;AAPA,SAOCH,iBAPD;AAcA,CAb+C;;IAaPI,6CAA2BC,MAA3B,EAA2B;AAKjEX,yCAAYW,MAAZ;;WAAAD,oBACEE,aAAMP,UAAY;AAJZ,sBAAoB,KAApB,CAA0B,IAA1B,EAA0BO,WAA1B,KAA0B,IAA1B;;AAKNC,SAAM,SAAN,GAAM,KAAN;AACA,uBAAS,OAAgBX,qBAAhB,CAAiBW,KAAjB,CAAT;;AACAA,SAAI,CAACC,GAAL,CAAKC,eAAL;;AACAF,SAAM,kBAAN,GAA0BE,eAA1B;AAIA,QAAIC,iBAAiB,iBAAK,WAAiBD,eAAjB,CAA1B;;QACEC,iBAAS,sBAAmB;AAC5BH,WAAI,CAACC,GAAL,CAAKE,iBAAL;;AACDH;;;AACF;AAES;;qBACC,WAAUI;QACjB;AACDN;AACF;AAED;;qBACe,CAAGJ,UAAKW;AACrB,SAAIC,QAAJ,GAAS,IAAT;;QACE,KAAKH,mBAAkB;AACxB;AACF;AAED;;AAEAN,qBAAC,UAAD,CAACU,cAAD,GAAC,aACH,CADE;;AAnCsC;CAAA","names":["tslib_1","SimpleOuterSubscriber","SimpleInnerSubscriber","innerSubscribe","skipUntil","notifier","SkipUntilOperator","prototype","call","source","SkipUntilSubscriber","_super","destination","_this","add","innerSubscriber","innerSubscription","_next","notifyNext","hasValue","notifyComplete"],"sources":["D:\\Documents\\EMA\\Mines A3\\NoSQL\\ReseauAchats\\reseau_achats\\node_modules\\rxjs\\src\\internal\\operators\\skipUntil.ts"],"sourcesContent":["import { Operator } from '../Operator';\r\nimport { Subscriber } from '../Subscriber';\r\nimport { Observable } from '../Observable';\r\nimport { MonoTypeOperatorFunction, TeardownLogic, ObservableInput } from '../types';\r\nimport { Subscription } from '../Subscription';\r\nimport { SimpleOuterSubscriber, SimpleInnerSubscriber, innerSubscribe } from '../innerSubscribe';\r\n\r\n/**\r\n * Returns an Observable that skips items emitted by the source Observable until a second Observable emits an item.\r\n *\r\n * The `skipUntil` operator causes the observable stream to skip the emission of values ​​until the passed in observable emits the first value.\r\n * This can be particularly useful in combination with user interactions, responses of http requests or waiting for specific times to pass by.\r\n *\r\n * ![](skipUntil.png)\r\n *\r\n * Internally the `skipUntil` operator subscribes to the passed in observable (in the following called *notifier*) in order to recognize the emission\r\n * of its first value. When this happens, the operator unsubscribes from the *notifier* and starts emitting the values of the *source*\r\n * observable. It will never let the *source* observable emit any values if the *notifier* completes or throws an error without emitting\r\n * a value before.\r\n *\r\n * ## Example\r\n *\r\n * In the following example, all emitted values ​​of the interval observable are skipped until the user clicks anywhere within the page.\r\n *\r\n * ```ts\r\n * import { interval, fromEvent } from 'rxjs';\r\n * import { skipUntil } from 'rxjs/operators';\r\n *\r\n * const intervalObservable = interval(1000);\r\n * const click = fromEvent(document, 'click');\r\n *\r\n * const emitAfterClick = intervalObservable.pipe(\r\n *   skipUntil(click)\r\n * );\r\n * // clicked at 4.6s. output: 5...6...7...8........ or\r\n * // clicked at 7.3s. output: 8...9...10..11.......\r\n * const subscribe = emitAfterClick.subscribe(value => console.log(value));\r\n * ```\r\n *\r\n * @param {Observable} notifier - The second Observable that has to emit an item before the source Observable's elements begin to\r\n * be mirrored by the resulting Observable.\r\n * @return {Observable<T>} An Observable that skips items from the source Observable until the second Observable emits\r\n * an item, then emits the remaining items.\r\n * @method skipUntil\r\n * @owner Observable\r\n */\r\nexport function skipUntil<T>(notifier: Observable<any>): MonoTypeOperatorFunction<T> {\r\n  return (source: Observable<T>) => source.lift(new SkipUntilOperator(notifier));\r\n}\r\n\r\nclass SkipUntilOperator<T> implements Operator<T, T> {\r\n  constructor(private notifier: Observable<any>) {\r\n  }\r\n\r\n  call(destination: Subscriber<T>, source: any): TeardownLogic {\r\n    return source.subscribe(new SkipUntilSubscriber(destination, this.notifier));\r\n  }\r\n}\r\n\r\n/**\r\n * We need this JSDoc comment for affecting ESDoc.\r\n * @ignore\r\n * @extends {Ignored}\r\n */\r\nclass SkipUntilSubscriber<T, R> extends SimpleOuterSubscriber<T, R> {\r\n\r\n  private hasValue: boolean = false;\r\n  private innerSubscription?: Subscription;\r\n\r\n  constructor(destination: Subscriber<R>, notifier: ObservableInput<any>) {\r\n    super(destination);\r\n    const innerSubscriber = new SimpleInnerSubscriber(this);\r\n    this.add(innerSubscriber);\r\n    this.innerSubscription = innerSubscriber;\r\n    const innerSubscription = innerSubscribe(notifier, innerSubscriber);\r\n    // The returned subscription will usually be the subscriber that was\r\n    // passed. However, interop subscribers will be wrapped and for\r\n    // unsubscriptions to chain correctly, the wrapper needs to be added, too.\r\n    if (innerSubscription !== innerSubscriber) {\r\n      this.add(innerSubscription);\r\n      this.innerSubscription = innerSubscription;\r\n    }\r\n  }\r\n\r\n  protected _next(value: T) {\r\n    if (this.hasValue) {\r\n      super._next(value);\r\n    }\r\n  }\r\n\r\n  notifyNext(): void {\r\n    this.hasValue = true;\r\n    if (this.innerSubscription) {\r\n      this.innerSubscription.unsubscribe();\r\n    }\r\n  }\r\n\r\n  notifyComplete() {\r\n    /* do nothing */\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}