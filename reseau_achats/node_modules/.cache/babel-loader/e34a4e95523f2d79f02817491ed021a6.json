{"ast":null,"code":"/** PURE_IMPORTS_START _observable_combineLatest PURE_IMPORTS_END */\nimport { CombineLatestOperator } from '../observable/combineLatest';\nexport function combineAll(project) {\n  return function (source) {\n    return source.lift(new CombineLatestOperator(project));\n  };\n}","map":{"version":3,"mappings":"AAAA;AAsDA,SAAMA,qBAAN,QAAuE,6BAAvE;OACE,SAAOC,UAAP,CAA6BC,OAA7B,EAAkC;AACnC;AAAA;AAAA","names":["CombineLatestOperator","combineAll","project"],"sources":["D:\\Documents\\EMA\\Mines A3\\NoSQL\\ReseauAchats\\reseau_achats\\node_modules\\rxjs\\src\\internal\\operators\\combineAll.ts"],"sourcesContent":["import { CombineLatestOperator } from '../observable/combineLatest';\r\nimport { Observable } from '../Observable';\r\nimport { OperatorFunction, ObservableInput } from '../types';\r\n\r\nexport function combineAll<T>(): OperatorFunction<ObservableInput<T>, T[]>;\r\nexport function combineAll<T>(): OperatorFunction<any, T[]>;\r\nexport function combineAll<T, R>(project: (...values: T[]) => R): OperatorFunction<ObservableInput<T>, R>;\r\nexport function combineAll<R>(project: (...values: Array<any>) => R): OperatorFunction<any, R>;\r\n/**\r\n * Flattens an Observable-of-Observables by applying {@link combineLatest} when the Observable-of-Observables completes.\r\n *\r\n * ![](combineAll.png)\r\n *\r\n * `combineAll` takes an Observable of Observables, and collects all Observables from it. Once the outer Observable completes,\r\n * it subscribes to all collected Observables and combines their values using the {@link combineLatest}</a> strategy, such that:\r\n *\r\n * * Every time an inner Observable emits, the output Observable emits\r\n * * When the returned observable emits, it emits all of the latest values by:\r\n *    * If a `project` function is provided, it is called with each recent value from each inner Observable in whatever order they\r\n *      arrived, and the result of the `project` function is what is emitted by the output Observable.\r\n *    * If there is no `project` function, an array of all the most recent values is emitted by the output Observable.\r\n *\r\n * ---\r\n *\r\n * ## Examples\r\n *\r\n * ### Map two click events to a finite interval Observable, then apply `combineAll`\r\n *\r\n * ```ts\r\n * import { fromEvent, interval } from 'rxjs';\r\n * import { map, combineAll, take } from 'rxjs/operators';\r\n *\r\n * const clicks = fromEvent(document, 'click');\r\n * const higherOrder = clicks.pipe(\r\n *   map(ev =>\r\n *      interval(Math.random() * 2000).pipe(take(3))\r\n *   ),\r\n *   take(2)\r\n * );\r\n * const result = higherOrder.pipe(\r\n *   combineAll()\r\n * );\r\n *\r\n * result.subscribe(x => console.log(x));\r\n * ```\r\n *\r\n * @see {@link combineLatest}\r\n * @see {@link mergeAll}\r\n *\r\n * @param {function(...values: Array<any>)} An optional function to map the most recent values from each inner Observable into a new result.\r\n * Takes each of the most recent values from each collected inner Observable as arguments, in order.\r\n * @return {Observable<T>}\r\n * @name combineAll\r\n */\r\nexport function combineAll<T, R>(project?: (...values: Array<any>) => R): OperatorFunction<T, R> {\r\n  return (source: Observable<T>) => source.lift(new CombineLatestOperator(project));\r\n}\r\n"]},"metadata":{},"sourceType":"module"}