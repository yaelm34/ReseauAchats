{"ast":null,"code":"\"use strict\";\n/**\r\n * Copyright (c) \"Neo4j\"\r\n * Neo4j Sweden AB [http://neo4j.com]\r\n *\r\n * This file is part of Neo4j.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isDateTime = exports.DateTime = exports.isLocalDateTime = exports.LocalDateTime = exports.isDate = exports.Date = exports.isTime = exports.Time = exports.isLocalTime = exports.LocalTime = exports.isDuration = exports.Duration = void 0;\n\nvar util = __importStar(require(\"./internal/temporal-util\"));\n\nvar util_1 = require(\"./internal/util\");\n\nvar error_1 = require(\"./error\");\n\nvar integer_1 = __importStar(require(\"./integer\"));\n\nvar IDENTIFIER_PROPERTY_ATTRIBUTES = {\n  value: true,\n  enumerable: false,\n  configurable: false,\n  writable: false\n};\nvar DURATION_IDENTIFIER_PROPERTY = '__isDuration__';\nvar LOCAL_TIME_IDENTIFIER_PROPERTY = '__isLocalTime__';\nvar TIME_IDENTIFIER_PROPERTY = '__isTime__';\nvar DATE_IDENTIFIER_PROPERTY = '__isDate__';\nvar LOCAL_DATE_TIME_IDENTIFIER_PROPERTY = '__isLocalDateTime__';\nvar DATE_TIME_IDENTIFIER_PROPERTY = '__isDateTime__';\n/**\r\n * Represents an ISO 8601 duration. Contains both date-based values (years, months, days) and time-based values (seconds, nanoseconds).\r\n * Created `Duration` objects are frozen with `Object.freeze()` in constructor and thus immutable.\r\n */\n\nvar Duration =\n/** @class */\nfunction () {\n  /**\r\n   * @constructor\r\n   * @param {NumberOrInteger} months - The number of months for the new duration.\r\n   * @param {NumberOrInteger} days - The number of days for the new duration.\r\n   * @param {NumberOrInteger} seconds - The number of seconds for the new duration.\r\n   * @param {NumberOrInteger} nanoseconds - The number of nanoseconds for the new duration.\r\n   */\n  function Duration(months, days, seconds, nanoseconds) {\n    /**\r\n     * The number of months.\r\n     * @type {NumberOrInteger}\r\n     */\n    this.months = (0, util_1.assertNumberOrInteger)(months, 'Months');\n    /**\r\n     * The number of days.\r\n     * @type {NumberOrInteger}\r\n     */\n\n    this.days = (0, util_1.assertNumberOrInteger)(days, 'Days');\n    (0, util_1.assertNumberOrInteger)(seconds, 'Seconds');\n    (0, util_1.assertNumberOrInteger)(nanoseconds, 'Nanoseconds');\n    /**\r\n     * The number of seconds.\r\n     * @type {NumberOrInteger}\r\n     */\n\n    this.seconds = util.normalizeSecondsForDuration(seconds, nanoseconds);\n    /**\r\n     * The number of nanoseconds.\r\n     * @type {NumberOrInteger}\r\n     */\n\n    this.nanoseconds = util.normalizeNanosecondsForDuration(nanoseconds);\n    Object.freeze(this);\n  }\n  /**\r\n   * @ignore\r\n   */\n\n\n  Duration.prototype.toString = function () {\n    return util.durationToIsoString(this.months, this.days, this.seconds, this.nanoseconds);\n  };\n\n  return Duration;\n}();\n\nexports.Duration = Duration;\nObject.defineProperty(Duration.prototype, DURATION_IDENTIFIER_PROPERTY, IDENTIFIER_PROPERTY_ATTRIBUTES);\n/**\r\n * Test if given object is an instance of {@link Duration} class.\r\n * @param {Object} obj the object to test.\r\n * @return {boolean} `true` if given object is a {@link Duration}, `false` otherwise.\r\n */\n\nfunction isDuration(obj) {\n  return hasIdentifierProperty(obj, DURATION_IDENTIFIER_PROPERTY);\n}\n\nexports.isDuration = isDuration;\n/**\r\n * Represents an instant capturing the time of day, but not the date, nor the timezone.\r\n * Created {@link LocalTime} objects are frozen with `Object.freeze()` in constructor and thus immutable.\r\n */\n\nvar LocalTime =\n/** @class */\nfunction () {\n  /**\r\n   * @constructor\r\n   * @param {NumberOrInteger} hour - The hour for the new local time.\r\n   * @param {NumberOrInteger} minute - The minute for the new local time.\r\n   * @param {NumberOrInteger} second - The second for the new local time.\r\n   * @param {NumberOrInteger} nanosecond - The nanosecond for the new local time.\r\n   */\n  function LocalTime(hour, minute, second, nanosecond) {\n    /**\r\n     * The hour.\r\n     * @type {NumberOrInteger}\r\n     */\n    this.hour = util.assertValidHour(hour);\n    /**\r\n     * The minute.\r\n     * @type {NumberOrInteger}\r\n     */\n\n    this.minute = util.assertValidMinute(minute);\n    /**\r\n     * The second.\r\n     * @type {NumberOrInteger}\r\n     */\n\n    this.second = util.assertValidSecond(second);\n    /**\r\n     * The nanosecond.\r\n     * @type {NumberOrInteger}\r\n     */\n\n    this.nanosecond = util.assertValidNanosecond(nanosecond);\n    Object.freeze(this);\n  }\n  /**\r\n   * Create a {@link LocalTime} object from the given standard JavaScript `Date` and optional nanoseconds.\r\n   * Year, month, day and time zone offset components of the given date are ignored.\r\n   * @param {global.Date} standardDate - The standard JavaScript date to convert.\r\n   * @param {NumberOrInteger|undefined} nanosecond - The optional amount of nanoseconds.\r\n   * @return {LocalTime<number>} New LocalTime.\r\n   */\n\n\n  LocalTime.fromStandardDate = function (standardDate, nanosecond) {\n    verifyStandardDateAndNanos(standardDate, nanosecond);\n    var totalNanoseconds = util.totalNanoseconds(standardDate, nanosecond);\n    return new LocalTime(standardDate.getHours(), standardDate.getMinutes(), standardDate.getSeconds(), totalNanoseconds instanceof integer_1.default ? totalNanoseconds.toInt() : typeof totalNanoseconds === 'bigint' ? (0, integer_1.int)(totalNanoseconds).toInt() : totalNanoseconds);\n  };\n  /**\r\n   * @ignore\r\n   */\n\n\n  LocalTime.prototype.toString = function () {\n    return util.timeToIsoString(this.hour, this.minute, this.second, this.nanosecond);\n  };\n\n  return LocalTime;\n}();\n\nexports.LocalTime = LocalTime;\nObject.defineProperty(LocalTime.prototype, LOCAL_TIME_IDENTIFIER_PROPERTY, IDENTIFIER_PROPERTY_ATTRIBUTES);\n/**\r\n * Test if given object is an instance of {@link LocalTime} class.\r\n * @param {Object} obj the object to test.\r\n * @return {boolean} `true` if given object is a {@link LocalTime}, `false` otherwise.\r\n */\n\nfunction isLocalTime(obj) {\n  return hasIdentifierProperty(obj, LOCAL_TIME_IDENTIFIER_PROPERTY);\n}\n\nexports.isLocalTime = isLocalTime;\n/**\r\n * Represents an instant capturing the time of day, and the timezone offset in seconds, but not the date.\r\n * Created {@link Time} objects are frozen with `Object.freeze()` in constructor and thus immutable.\r\n */\n\nvar Time =\n/** @class */\nfunction () {\n  /**\r\n   * @constructor\r\n   * @param {NumberOrInteger} hour - The hour for the new local time.\r\n   * @param {NumberOrInteger} minute - The minute for the new local time.\r\n   * @param {NumberOrInteger} second - The second for the new local time.\r\n   * @param {NumberOrInteger} nanosecond - The nanosecond for the new local time.\r\n   * @param {NumberOrInteger} timeZoneOffsetSeconds - The time zone offset in seconds. Value represents the difference, in seconds, from UTC to local time.\r\n   * This is different from standard JavaScript `Date.getTimezoneOffset()` which is the difference, in minutes, from local time to UTC.\r\n   */\n  function Time(hour, minute, second, nanosecond, timeZoneOffsetSeconds) {\n    /**\r\n     * The hour.\r\n     * @type {NumberOrInteger}\r\n     */\n    this.hour = util.assertValidHour(hour);\n    /**\r\n     * The minute.\r\n     * @type {NumberOrInteger}\r\n     */\n\n    this.minute = util.assertValidMinute(minute);\n    /**\r\n     * The second.\r\n     * @type {NumberOrInteger}\r\n     */\n\n    this.second = util.assertValidSecond(second);\n    /**\r\n     * The nanosecond.\r\n     * @type {NumberOrInteger}\r\n     */\n\n    this.nanosecond = util.assertValidNanosecond(nanosecond);\n    /**\r\n     * The time zone offset in seconds.\r\n     * @type {NumberOrInteger}\r\n     */\n\n    this.timeZoneOffsetSeconds = (0, util_1.assertNumberOrInteger)(timeZoneOffsetSeconds, 'Time zone offset in seconds');\n    Object.freeze(this);\n  }\n  /**\r\n   * Create a {@link Time} object from the given standard JavaScript `Date` and optional nanoseconds.\r\n   * Year, month and day components of the given date are ignored.\r\n   * @param {global.Date} standardDate - The standard JavaScript date to convert.\r\n   * @param {NumberOrInteger|undefined} nanosecond - The optional amount of nanoseconds.\r\n   * @return {Time<number>} New Time.\r\n   */\n\n\n  Time.fromStandardDate = function (standardDate, nanosecond) {\n    verifyStandardDateAndNanos(standardDate, nanosecond);\n    return new Time(standardDate.getHours(), standardDate.getMinutes(), standardDate.getSeconds(), (0, integer_1.toNumber)(util.totalNanoseconds(standardDate, nanosecond)), util.timeZoneOffsetInSeconds(standardDate));\n  };\n  /**\r\n   * @ignore\r\n   */\n\n\n  Time.prototype.toString = function () {\n    return util.timeToIsoString(this.hour, this.minute, this.second, this.nanosecond) + util.timeZoneOffsetToIsoString(this.timeZoneOffsetSeconds);\n  };\n\n  return Time;\n}();\n\nexports.Time = Time;\nObject.defineProperty(Time.prototype, TIME_IDENTIFIER_PROPERTY, IDENTIFIER_PROPERTY_ATTRIBUTES);\n/**\r\n * Test if given object is an instance of {@link Time} class.\r\n * @param {Object} obj the object to test.\r\n * @return {boolean} `true` if given object is a {@link Time}, `false` otherwise.\r\n */\n\nfunction isTime(obj) {\n  return hasIdentifierProperty(obj, TIME_IDENTIFIER_PROPERTY);\n}\n\nexports.isTime = isTime;\n/**\r\n * Represents an instant capturing the date, but not the time, nor the timezone.\r\n * Created {@link Date} objects are frozen with `Object.freeze()` in constructor and thus immutable.\r\n */\n\nvar Date =\n/** @class */\nfunction () {\n  /**\r\n   * @constructor\r\n   * @param {NumberOrInteger} year - The year for the new local date.\r\n   * @param {NumberOrInteger} month - The month for the new local date.\r\n   * @param {NumberOrInteger} day - The day for the new local date.\r\n   */\n  function Date(year, month, day) {\n    /**\r\n     * The year.\r\n     * @type {NumberOrInteger}\r\n     */\n    this.year = util.assertValidYear(year);\n    /**\r\n     * The month.\r\n     * @type {NumberOrInteger}\r\n     */\n\n    this.month = util.assertValidMonth(month);\n    /**\r\n     * The day.\r\n     * @type {NumberOrInteger}\r\n     */\n\n    this.day = util.assertValidDay(day);\n    Object.freeze(this);\n  }\n  /**\r\n   * Create a {@link Date} object from the given standard JavaScript `Date`.\r\n   * Hour, minute, second, millisecond and time zone offset components of the given date are ignored.\r\n   * @param {global.Date} standardDate - The standard JavaScript date to convert.\r\n   * @return {Date} New Date.\r\n   */\n\n\n  Date.fromStandardDate = function (standardDate) {\n    verifyStandardDateAndNanos(standardDate);\n    return new Date(standardDate.getFullYear(), standardDate.getMonth() + 1, standardDate.getDate());\n  };\n  /**\r\n   * @ignore\r\n   */\n\n\n  Date.prototype.toString = function () {\n    return util.dateToIsoString(this.year, this.month, this.day);\n  };\n\n  return Date;\n}();\n\nexports.Date = Date;\nObject.defineProperty(Date.prototype, DATE_IDENTIFIER_PROPERTY, IDENTIFIER_PROPERTY_ATTRIBUTES);\n/**\r\n * Test if given object is an instance of {@link Date} class.\r\n * @param {Object} obj - The object to test.\r\n * @return {boolean} `true` if given object is a {@link Date}, `false` otherwise.\r\n */\n\nfunction isDate(obj) {\n  return hasIdentifierProperty(obj, DATE_IDENTIFIER_PROPERTY);\n}\n\nexports.isDate = isDate;\n/**\r\n * Represents an instant capturing the date and the time, but not the timezone.\r\n * Created {@link LocalDateTime} objects are frozen with `Object.freeze()` in constructor and thus immutable.\r\n */\n\nvar LocalDateTime =\n/** @class */\nfunction () {\n  /**\r\n   * @constructor\r\n   * @param {NumberOrInteger} year - The year for the new local date.\r\n   * @param {NumberOrInteger} month - The month for the new local date.\r\n   * @param {NumberOrInteger} day - The day for the new local date.\r\n   * @param {NumberOrInteger} hour - The hour for the new local time.\r\n   * @param {NumberOrInteger} minute - The minute for the new local time.\r\n   * @param {NumberOrInteger} second - The second for the new local time.\r\n   * @param {NumberOrInteger} nanosecond - The nanosecond for the new local time.\r\n   */\n  function LocalDateTime(year, month, day, hour, minute, second, nanosecond) {\n    /**\r\n     * The year.\r\n     * @type {NumberOrInteger}\r\n     */\n    this.year = util.assertValidYear(year);\n    /**\r\n     * The month.\r\n     * @type {NumberOrInteger}\r\n     */\n\n    this.month = util.assertValidMonth(month);\n    /**\r\n     * The day.\r\n     * @type {NumberOrInteger}\r\n     */\n\n    this.day = util.assertValidDay(day);\n    /**\r\n     * The hour.\r\n     * @type {NumberOrInteger}\r\n     */\n\n    this.hour = util.assertValidHour(hour);\n    /**\r\n     * The minute.\r\n     * @type {NumberOrInteger}\r\n     */\n\n    this.minute = util.assertValidMinute(minute);\n    /**\r\n     * The second.\r\n     * @type {NumberOrInteger}\r\n     */\n\n    this.second = util.assertValidSecond(second);\n    /**\r\n     * The nanosecond.\r\n     * @type {NumberOrInteger}\r\n     */\n\n    this.nanosecond = util.assertValidNanosecond(nanosecond);\n    Object.freeze(this);\n  }\n  /**\r\n   * Create a {@link LocalDateTime} object from the given standard JavaScript `Date` and optional nanoseconds.\r\n   * Time zone offset component of the given date is ignored.\r\n   * @param {global.Date} standardDate - The standard JavaScript date to convert.\r\n   * @param {NumberOrInteger|undefined} nanosecond - The optional amount of nanoseconds.\r\n   * @return {LocalDateTime} New LocalDateTime.\r\n   */\n\n\n  LocalDateTime.fromStandardDate = function (standardDate, nanosecond) {\n    verifyStandardDateAndNanos(standardDate, nanosecond);\n    return new LocalDateTime(standardDate.getFullYear(), standardDate.getMonth() + 1, standardDate.getDate(), standardDate.getHours(), standardDate.getMinutes(), standardDate.getSeconds(), (0, integer_1.toNumber)(util.totalNanoseconds(standardDate, nanosecond)));\n  };\n  /**\r\n   * @ignore\r\n   */\n\n\n  LocalDateTime.prototype.toString = function () {\n    return localDateTimeToString(this.year, this.month, this.day, this.hour, this.minute, this.second, this.nanosecond);\n  };\n\n  return LocalDateTime;\n}();\n\nexports.LocalDateTime = LocalDateTime;\nObject.defineProperty(LocalDateTime.prototype, LOCAL_DATE_TIME_IDENTIFIER_PROPERTY, IDENTIFIER_PROPERTY_ATTRIBUTES);\n/**\r\n * Test if given object is an instance of {@link LocalDateTime} class.\r\n * @param {Object} obj - The object to test.\r\n * @return {boolean} `true` if given object is a {@link LocalDateTime}, `false` otherwise.\r\n */\n\nfunction isLocalDateTime(obj) {\n  return hasIdentifierProperty(obj, LOCAL_DATE_TIME_IDENTIFIER_PROPERTY);\n}\n\nexports.isLocalDateTime = isLocalDateTime;\n/**\r\n * Represents an instant capturing the date, the time and the timezone identifier.\r\n * Created {@ DateTime} objects are frozen with `Object.freeze()` in constructor and thus immutable.\r\n */\n\nvar DateTime =\n/** @class */\nfunction () {\n  /**\r\n   * @constructor\r\n   * @param {NumberOrInteger} year - The year for the new date-time.\r\n   * @param {NumberOrInteger} month - The month for the new date-time.\r\n   * @param {NumberOrInteger} day - The day for the new date-time.\r\n   * @param {NumberOrInteger} hour - The hour for the new date-time.\r\n   * @param {NumberOrInteger} minute - The minute for the new date-time.\r\n   * @param {NumberOrInteger} second - The second for the new date-time.\r\n   * @param {NumberOrInteger} nanosecond - The nanosecond for the new date-time.\r\n   * @param {NumberOrInteger} timeZoneOffsetSeconds - The time zone offset in seconds. Either this argument or `timeZoneId` should be defined.\r\n   * Value represents the difference, in seconds, from UTC to local time.\r\n   * This is different from standard JavaScript `Date.getTimezoneOffset()` which is the difference, in minutes, from local time to UTC.\r\n   * @param {string|null} timeZoneId - The time zone id for the new date-time. Either this argument or `timeZoneOffsetSeconds` should be defined.\r\n   */\n  function DateTime(year, month, day, hour, minute, second, nanosecond, timeZoneOffsetSeconds, timeZoneId) {\n    /**\r\n     * The year.\r\n     * @type {NumberOrInteger}\r\n     */\n    this.year = util.assertValidYear(year);\n    /**\r\n     * The month.\r\n     * @type {NumberOrInteger}\r\n     */\n\n    this.month = util.assertValidMonth(month);\n    /**\r\n     * The day.\r\n     * @type {NumberOrInteger}\r\n     */\n\n    this.day = util.assertValidDay(day);\n    /**\r\n     * The hour.\r\n     * @type {NumberOrInteger}\r\n     */\n\n    this.hour = util.assertValidHour(hour);\n    /**\r\n     * The minute.\r\n     * @type {NumberOrInteger}\r\n     */\n\n    this.minute = util.assertValidMinute(minute);\n    /**\r\n     * The second.\r\n     * @type {NumberOrInteger}\r\n     */\n\n    this.second = util.assertValidSecond(second);\n    /**\r\n     * The nanosecond.\r\n     * @type {NumberOrInteger}\r\n     */\n\n    this.nanosecond = util.assertValidNanosecond(nanosecond);\n\n    var _a = __read(verifyTimeZoneArguments(timeZoneOffsetSeconds, timeZoneId), 2),\n        offset = _a[0],\n        id = _a[1];\n    /**\r\n     * The time zone offset in seconds.\r\n     *\r\n     * *Either this or {@link timeZoneId} is defined.*\r\n     *\r\n     * @type {NumberOrInteger}\r\n     */\n\n\n    this.timeZoneOffsetSeconds = offset;\n    /**\r\n     * The time zone id.\r\n     *\r\n     * *Either this or {@link timeZoneOffsetSeconds} is defined.*\r\n     *\r\n     * @type {string}\r\n     */\n\n    this.timeZoneId = id || undefined;\n    Object.freeze(this);\n  }\n  /**\r\n   * Create a {@link DateTime} object from the given standard JavaScript `Date` and optional nanoseconds.\r\n   * @param {global.Date} standardDate - The standard JavaScript date to convert.\r\n   * @param {NumberOrInteger|undefined} nanosecond - The optional amount of nanoseconds.\r\n   * @return {DateTime} New DateTime.\r\n   */\n\n\n  DateTime.fromStandardDate = function (standardDate, nanosecond) {\n    verifyStandardDateAndNanos(standardDate, nanosecond);\n    return new DateTime(standardDate.getFullYear(), standardDate.getMonth() + 1, standardDate.getDate(), standardDate.getHours(), standardDate.getMinutes(), standardDate.getSeconds(), (0, integer_1.toNumber)(util.totalNanoseconds(standardDate, nanosecond)), util.timeZoneOffsetInSeconds(standardDate), null\n    /* no time zone id */\n    );\n  };\n  /**\r\n   * @ignore\r\n   */\n\n\n  DateTime.prototype.toString = function () {\n    var localDateTimeStr = localDateTimeToString(this.year, this.month, this.day, this.hour, this.minute, this.second, this.nanosecond);\n    var timeZoneStr = this.timeZoneId ? \"[\" + this.timeZoneId + \"]\" : util.timeZoneOffsetToIsoString(this.timeZoneOffsetSeconds || 0);\n    return localDateTimeStr + timeZoneStr;\n  };\n\n  return DateTime;\n}();\n\nexports.DateTime = DateTime;\nObject.defineProperty(DateTime.prototype, DATE_TIME_IDENTIFIER_PROPERTY, IDENTIFIER_PROPERTY_ATTRIBUTES);\n/**\r\n * Test if given object is an instance of {@link DateTime} class.\r\n * @param {Object} obj - The object to test.\r\n * @return {boolean} `true` if given object is a {@link DateTime}, `false` otherwise.\r\n */\n\nfunction isDateTime(obj) {\n  return hasIdentifierProperty(obj, DATE_TIME_IDENTIFIER_PROPERTY);\n}\n\nexports.isDateTime = isDateTime;\n\nfunction hasIdentifierProperty(obj, property) {\n  return (obj && obj[property]) === true;\n}\n\nfunction localDateTimeToString(year, month, day, hour, minute, second, nanosecond) {\n  return util.dateToIsoString(year, month, day) + 'T' + util.timeToIsoString(hour, minute, second, nanosecond);\n}\n/**\r\n * @private\r\n * @param {NumberOrInteger} timeZoneOffsetSeconds\r\n * @param {string | null } timeZoneId\r\n * @returns {Array<NumberOrInteger | undefined | null, string | undefined | null>}\r\n */\n\n\nfunction verifyTimeZoneArguments(timeZoneOffsetSeconds, timeZoneId) {\n  var offsetDefined = timeZoneOffsetSeconds || timeZoneOffsetSeconds === 0;\n  var idDefined = timeZoneId && timeZoneId !== '';\n\n  if (offsetDefined && !idDefined) {\n    (0, util_1.assertNumberOrInteger)(timeZoneOffsetSeconds, 'Time zone offset in seconds');\n    return [timeZoneOffsetSeconds, undefined];\n  } else if (!offsetDefined && idDefined) {\n    (0, util_1.assertString)(timeZoneId, 'Time zone ID');\n    return [undefined, timeZoneId];\n  } else if (offsetDefined && idDefined) {\n    throw (0, error_1.newError)(\"Unable to create DateTime with both time zone offset and id. Please specify either of them. Given offset: \" + timeZoneOffsetSeconds + \" and id: \" + timeZoneId);\n  } else {\n    throw (0, error_1.newError)(\"Unable to create DateTime without either time zone offset or id. Please specify either of them. Given offset: \" + timeZoneOffsetSeconds + \" and id: \" + timeZoneId);\n  }\n}\n/**\r\n * @private\r\n * @param {StandardDate} standardDate\r\n * @param {NumberOrInteger} nanosecond\r\n * @returns {void}\r\n */\n\n\nfunction verifyStandardDateAndNanos(standardDate, nanosecond) {\n  (0, util_1.assertValidDate)(standardDate, 'Standard date');\n\n  if (nanosecond !== null && nanosecond !== undefined) {\n    (0, util_1.assertNumberOrInteger)(nanosecond, 'Nanosecond');\n  }\n}","map":{"version":3,"sources":["D:/Documents/EMA/Mines A3/NoSQL/ReseauAchats/reseau_achats/node_modules/neo4j-driver-core/lib/temporal-types.js"],"names":["__createBinding","Object","create","o","m","k","k2","undefined","defineProperty","enumerable","get","__setModuleDefault","v","value","__importStar","mod","__esModule","result","prototype","hasOwnProperty","call","__read","n","Symbol","iterator","i","r","ar","e","next","done","push","error","exports","isDateTime","DateTime","isLocalDateTime","LocalDateTime","isDate","Date","isTime","Time","isLocalTime","LocalTime","isDuration","Duration","util","require","util_1","error_1","integer_1","IDENTIFIER_PROPERTY_ATTRIBUTES","configurable","writable","DURATION_IDENTIFIER_PROPERTY","LOCAL_TIME_IDENTIFIER_PROPERTY","TIME_IDENTIFIER_PROPERTY","DATE_IDENTIFIER_PROPERTY","LOCAL_DATE_TIME_IDENTIFIER_PROPERTY","DATE_TIME_IDENTIFIER_PROPERTY","months","days","seconds","nanoseconds","assertNumberOrInteger","normalizeSecondsForDuration","normalizeNanosecondsForDuration","freeze","toString","durationToIsoString","obj","hasIdentifierProperty","hour","minute","second","nanosecond","assertValidHour","assertValidMinute","assertValidSecond","assertValidNanosecond","fromStandardDate","standardDate","verifyStandardDateAndNanos","totalNanoseconds","getHours","getMinutes","getSeconds","default","toInt","int","timeToIsoString","timeZoneOffsetSeconds","toNumber","timeZoneOffsetInSeconds","timeZoneOffsetToIsoString","year","month","day","assertValidYear","assertValidMonth","assertValidDay","getFullYear","getMonth","getDate","dateToIsoString","localDateTimeToString","timeZoneId","_a","verifyTimeZoneArguments","offset","id","localDateTimeStr","timeZoneStr","property","offsetDefined","idDefined","assertString","newError","assertValidDate"],"mappings":"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","sourcesContent":["\"use strict\";\r\n/**\r\n * Copyright (c) \"Neo4j\"\r\n * Neo4j Sweden AB [http://neo4j.com]\r\n *\r\n * This file is part of Neo4j.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}));\r\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n});\r\nvar __importStar = (this && this.__importStar) || function (mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n};\r\nvar __read = (this && this.__read) || function (o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.isDateTime = exports.DateTime = exports.isLocalDateTime = exports.LocalDateTime = exports.isDate = exports.Date = exports.isTime = exports.Time = exports.isLocalTime = exports.LocalTime = exports.isDuration = exports.Duration = void 0;\r\nvar util = __importStar(require(\"./internal/temporal-util\"));\r\nvar util_1 = require(\"./internal/util\");\r\nvar error_1 = require(\"./error\");\r\nvar integer_1 = __importStar(require(\"./integer\"));\r\nvar IDENTIFIER_PROPERTY_ATTRIBUTES = {\r\n    value: true,\r\n    enumerable: false,\r\n    configurable: false,\r\n    writable: false\r\n};\r\nvar DURATION_IDENTIFIER_PROPERTY = '__isDuration__';\r\nvar LOCAL_TIME_IDENTIFIER_PROPERTY = '__isLocalTime__';\r\nvar TIME_IDENTIFIER_PROPERTY = '__isTime__';\r\nvar DATE_IDENTIFIER_PROPERTY = '__isDate__';\r\nvar LOCAL_DATE_TIME_IDENTIFIER_PROPERTY = '__isLocalDateTime__';\r\nvar DATE_TIME_IDENTIFIER_PROPERTY = '__isDateTime__';\r\n/**\r\n * Represents an ISO 8601 duration. Contains both date-based values (years, months, days) and time-based values (seconds, nanoseconds).\r\n * Created `Duration` objects are frozen with `Object.freeze()` in constructor and thus immutable.\r\n */\r\nvar Duration = /** @class */ (function () {\r\n    /**\r\n     * @constructor\r\n     * @param {NumberOrInteger} months - The number of months for the new duration.\r\n     * @param {NumberOrInteger} days - The number of days for the new duration.\r\n     * @param {NumberOrInteger} seconds - The number of seconds for the new duration.\r\n     * @param {NumberOrInteger} nanoseconds - The number of nanoseconds for the new duration.\r\n     */\r\n    function Duration(months, days, seconds, nanoseconds) {\r\n        /**\r\n         * The number of months.\r\n         * @type {NumberOrInteger}\r\n         */\r\n        this.months = (0, util_1.assertNumberOrInteger)(months, 'Months');\r\n        /**\r\n         * The number of days.\r\n         * @type {NumberOrInteger}\r\n         */\r\n        this.days = (0, util_1.assertNumberOrInteger)(days, 'Days');\r\n        (0, util_1.assertNumberOrInteger)(seconds, 'Seconds');\r\n        (0, util_1.assertNumberOrInteger)(nanoseconds, 'Nanoseconds');\r\n        /**\r\n         * The number of seconds.\r\n         * @type {NumberOrInteger}\r\n         */\r\n        this.seconds = util.normalizeSecondsForDuration(seconds, nanoseconds);\r\n        /**\r\n         * The number of nanoseconds.\r\n         * @type {NumberOrInteger}\r\n         */\r\n        this.nanoseconds = util.normalizeNanosecondsForDuration(nanoseconds);\r\n        Object.freeze(this);\r\n    }\r\n    /**\r\n     * @ignore\r\n     */\r\n    Duration.prototype.toString = function () {\r\n        return util.durationToIsoString(this.months, this.days, this.seconds, this.nanoseconds);\r\n    };\r\n    return Duration;\r\n}());\r\nexports.Duration = Duration;\r\nObject.defineProperty(Duration.prototype, DURATION_IDENTIFIER_PROPERTY, IDENTIFIER_PROPERTY_ATTRIBUTES);\r\n/**\r\n * Test if given object is an instance of {@link Duration} class.\r\n * @param {Object} obj the object to test.\r\n * @return {boolean} `true` if given object is a {@link Duration}, `false` otherwise.\r\n */\r\nfunction isDuration(obj) {\r\n    return hasIdentifierProperty(obj, DURATION_IDENTIFIER_PROPERTY);\r\n}\r\nexports.isDuration = isDuration;\r\n/**\r\n * Represents an instant capturing the time of day, but not the date, nor the timezone.\r\n * Created {@link LocalTime} objects are frozen with `Object.freeze()` in constructor and thus immutable.\r\n */\r\nvar LocalTime = /** @class */ (function () {\r\n    /**\r\n     * @constructor\r\n     * @param {NumberOrInteger} hour - The hour for the new local time.\r\n     * @param {NumberOrInteger} minute - The minute for the new local time.\r\n     * @param {NumberOrInteger} second - The second for the new local time.\r\n     * @param {NumberOrInteger} nanosecond - The nanosecond for the new local time.\r\n     */\r\n    function LocalTime(hour, minute, second, nanosecond) {\r\n        /**\r\n         * The hour.\r\n         * @type {NumberOrInteger}\r\n         */\r\n        this.hour = util.assertValidHour(hour);\r\n        /**\r\n         * The minute.\r\n         * @type {NumberOrInteger}\r\n         */\r\n        this.minute = util.assertValidMinute(minute);\r\n        /**\r\n         * The second.\r\n         * @type {NumberOrInteger}\r\n         */\r\n        this.second = util.assertValidSecond(second);\r\n        /**\r\n         * The nanosecond.\r\n         * @type {NumberOrInteger}\r\n         */\r\n        this.nanosecond = util.assertValidNanosecond(nanosecond);\r\n        Object.freeze(this);\r\n    }\r\n    /**\r\n     * Create a {@link LocalTime} object from the given standard JavaScript `Date` and optional nanoseconds.\r\n     * Year, month, day and time zone offset components of the given date are ignored.\r\n     * @param {global.Date} standardDate - The standard JavaScript date to convert.\r\n     * @param {NumberOrInteger|undefined} nanosecond - The optional amount of nanoseconds.\r\n     * @return {LocalTime<number>} New LocalTime.\r\n     */\r\n    LocalTime.fromStandardDate = function (standardDate, nanosecond) {\r\n        verifyStandardDateAndNanos(standardDate, nanosecond);\r\n        var totalNanoseconds = util.totalNanoseconds(standardDate, nanosecond);\r\n        return new LocalTime(standardDate.getHours(), standardDate.getMinutes(), standardDate.getSeconds(), totalNanoseconds instanceof integer_1.default\r\n            ? totalNanoseconds.toInt()\r\n            : typeof totalNanoseconds === 'bigint'\r\n                ? (0, integer_1.int)(totalNanoseconds).toInt()\r\n                : totalNanoseconds);\r\n    };\r\n    /**\r\n     * @ignore\r\n     */\r\n    LocalTime.prototype.toString = function () {\r\n        return util.timeToIsoString(this.hour, this.minute, this.second, this.nanosecond);\r\n    };\r\n    return LocalTime;\r\n}());\r\nexports.LocalTime = LocalTime;\r\nObject.defineProperty(LocalTime.prototype, LOCAL_TIME_IDENTIFIER_PROPERTY, IDENTIFIER_PROPERTY_ATTRIBUTES);\r\n/**\r\n * Test if given object is an instance of {@link LocalTime} class.\r\n * @param {Object} obj the object to test.\r\n * @return {boolean} `true` if given object is a {@link LocalTime}, `false` otherwise.\r\n */\r\nfunction isLocalTime(obj) {\r\n    return hasIdentifierProperty(obj, LOCAL_TIME_IDENTIFIER_PROPERTY);\r\n}\r\nexports.isLocalTime = isLocalTime;\r\n/**\r\n * Represents an instant capturing the time of day, and the timezone offset in seconds, but not the date.\r\n * Created {@link Time} objects are frozen with `Object.freeze()` in constructor and thus immutable.\r\n */\r\nvar Time = /** @class */ (function () {\r\n    /**\r\n     * @constructor\r\n     * @param {NumberOrInteger} hour - The hour for the new local time.\r\n     * @param {NumberOrInteger} minute - The minute for the new local time.\r\n     * @param {NumberOrInteger} second - The second for the new local time.\r\n     * @param {NumberOrInteger} nanosecond - The nanosecond for the new local time.\r\n     * @param {NumberOrInteger} timeZoneOffsetSeconds - The time zone offset in seconds. Value represents the difference, in seconds, from UTC to local time.\r\n     * This is different from standard JavaScript `Date.getTimezoneOffset()` which is the difference, in minutes, from local time to UTC.\r\n     */\r\n    function Time(hour, minute, second, nanosecond, timeZoneOffsetSeconds) {\r\n        /**\r\n         * The hour.\r\n         * @type {NumberOrInteger}\r\n         */\r\n        this.hour = util.assertValidHour(hour);\r\n        /**\r\n         * The minute.\r\n         * @type {NumberOrInteger}\r\n         */\r\n        this.minute = util.assertValidMinute(minute);\r\n        /**\r\n         * The second.\r\n         * @type {NumberOrInteger}\r\n         */\r\n        this.second = util.assertValidSecond(second);\r\n        /**\r\n         * The nanosecond.\r\n         * @type {NumberOrInteger}\r\n         */\r\n        this.nanosecond = util.assertValidNanosecond(nanosecond);\r\n        /**\r\n         * The time zone offset in seconds.\r\n         * @type {NumberOrInteger}\r\n         */\r\n        this.timeZoneOffsetSeconds = (0, util_1.assertNumberOrInteger)(timeZoneOffsetSeconds, 'Time zone offset in seconds');\r\n        Object.freeze(this);\r\n    }\r\n    /**\r\n     * Create a {@link Time} object from the given standard JavaScript `Date` and optional nanoseconds.\r\n     * Year, month and day components of the given date are ignored.\r\n     * @param {global.Date} standardDate - The standard JavaScript date to convert.\r\n     * @param {NumberOrInteger|undefined} nanosecond - The optional amount of nanoseconds.\r\n     * @return {Time<number>} New Time.\r\n     */\r\n    Time.fromStandardDate = function (standardDate, nanosecond) {\r\n        verifyStandardDateAndNanos(standardDate, nanosecond);\r\n        return new Time(standardDate.getHours(), standardDate.getMinutes(), standardDate.getSeconds(), (0, integer_1.toNumber)(util.totalNanoseconds(standardDate, nanosecond)), util.timeZoneOffsetInSeconds(standardDate));\r\n    };\r\n    /**\r\n     * @ignore\r\n     */\r\n    Time.prototype.toString = function () {\r\n        return (util.timeToIsoString(this.hour, this.minute, this.second, this.nanosecond) + util.timeZoneOffsetToIsoString(this.timeZoneOffsetSeconds));\r\n    };\r\n    return Time;\r\n}());\r\nexports.Time = Time;\r\nObject.defineProperty(Time.prototype, TIME_IDENTIFIER_PROPERTY, IDENTIFIER_PROPERTY_ATTRIBUTES);\r\n/**\r\n * Test if given object is an instance of {@link Time} class.\r\n * @param {Object} obj the object to test.\r\n * @return {boolean} `true` if given object is a {@link Time}, `false` otherwise.\r\n */\r\nfunction isTime(obj) {\r\n    return hasIdentifierProperty(obj, TIME_IDENTIFIER_PROPERTY);\r\n}\r\nexports.isTime = isTime;\r\n/**\r\n * Represents an instant capturing the date, but not the time, nor the timezone.\r\n * Created {@link Date} objects are frozen with `Object.freeze()` in constructor and thus immutable.\r\n */\r\nvar Date = /** @class */ (function () {\r\n    /**\r\n     * @constructor\r\n     * @param {NumberOrInteger} year - The year for the new local date.\r\n     * @param {NumberOrInteger} month - The month for the new local date.\r\n     * @param {NumberOrInteger} day - The day for the new local date.\r\n     */\r\n    function Date(year, month, day) {\r\n        /**\r\n         * The year.\r\n         * @type {NumberOrInteger}\r\n         */\r\n        this.year = util.assertValidYear(year);\r\n        /**\r\n         * The month.\r\n         * @type {NumberOrInteger}\r\n         */\r\n        this.month = util.assertValidMonth(month);\r\n        /**\r\n         * The day.\r\n         * @type {NumberOrInteger}\r\n         */\r\n        this.day = util.assertValidDay(day);\r\n        Object.freeze(this);\r\n    }\r\n    /**\r\n     * Create a {@link Date} object from the given standard JavaScript `Date`.\r\n     * Hour, minute, second, millisecond and time zone offset components of the given date are ignored.\r\n     * @param {global.Date} standardDate - The standard JavaScript date to convert.\r\n     * @return {Date} New Date.\r\n     */\r\n    Date.fromStandardDate = function (standardDate) {\r\n        verifyStandardDateAndNanos(standardDate);\r\n        return new Date(standardDate.getFullYear(), standardDate.getMonth() + 1, standardDate.getDate());\r\n    };\r\n    /**\r\n     * @ignore\r\n     */\r\n    Date.prototype.toString = function () {\r\n        return util.dateToIsoString(this.year, this.month, this.day);\r\n    };\r\n    return Date;\r\n}());\r\nexports.Date = Date;\r\nObject.defineProperty(Date.prototype, DATE_IDENTIFIER_PROPERTY, IDENTIFIER_PROPERTY_ATTRIBUTES);\r\n/**\r\n * Test if given object is an instance of {@link Date} class.\r\n * @param {Object} obj - The object to test.\r\n * @return {boolean} `true` if given object is a {@link Date}, `false` otherwise.\r\n */\r\nfunction isDate(obj) {\r\n    return hasIdentifierProperty(obj, DATE_IDENTIFIER_PROPERTY);\r\n}\r\nexports.isDate = isDate;\r\n/**\r\n * Represents an instant capturing the date and the time, but not the timezone.\r\n * Created {@link LocalDateTime} objects are frozen with `Object.freeze()` in constructor and thus immutable.\r\n */\r\nvar LocalDateTime = /** @class */ (function () {\r\n    /**\r\n     * @constructor\r\n     * @param {NumberOrInteger} year - The year for the new local date.\r\n     * @param {NumberOrInteger} month - The month for the new local date.\r\n     * @param {NumberOrInteger} day - The day for the new local date.\r\n     * @param {NumberOrInteger} hour - The hour for the new local time.\r\n     * @param {NumberOrInteger} minute - The minute for the new local time.\r\n     * @param {NumberOrInteger} second - The second for the new local time.\r\n     * @param {NumberOrInteger} nanosecond - The nanosecond for the new local time.\r\n     */\r\n    function LocalDateTime(year, month, day, hour, minute, second, nanosecond) {\r\n        /**\r\n         * The year.\r\n         * @type {NumberOrInteger}\r\n         */\r\n        this.year = util.assertValidYear(year);\r\n        /**\r\n         * The month.\r\n         * @type {NumberOrInteger}\r\n         */\r\n        this.month = util.assertValidMonth(month);\r\n        /**\r\n         * The day.\r\n         * @type {NumberOrInteger}\r\n         */\r\n        this.day = util.assertValidDay(day);\r\n        /**\r\n         * The hour.\r\n         * @type {NumberOrInteger}\r\n         */\r\n        this.hour = util.assertValidHour(hour);\r\n        /**\r\n         * The minute.\r\n         * @type {NumberOrInteger}\r\n         */\r\n        this.minute = util.assertValidMinute(minute);\r\n        /**\r\n         * The second.\r\n         * @type {NumberOrInteger}\r\n         */\r\n        this.second = util.assertValidSecond(second);\r\n        /**\r\n         * The nanosecond.\r\n         * @type {NumberOrInteger}\r\n         */\r\n        this.nanosecond = util.assertValidNanosecond(nanosecond);\r\n        Object.freeze(this);\r\n    }\r\n    /**\r\n     * Create a {@link LocalDateTime} object from the given standard JavaScript `Date` and optional nanoseconds.\r\n     * Time zone offset component of the given date is ignored.\r\n     * @param {global.Date} standardDate - The standard JavaScript date to convert.\r\n     * @param {NumberOrInteger|undefined} nanosecond - The optional amount of nanoseconds.\r\n     * @return {LocalDateTime} New LocalDateTime.\r\n     */\r\n    LocalDateTime.fromStandardDate = function (standardDate, nanosecond) {\r\n        verifyStandardDateAndNanos(standardDate, nanosecond);\r\n        return new LocalDateTime(standardDate.getFullYear(), standardDate.getMonth() + 1, standardDate.getDate(), standardDate.getHours(), standardDate.getMinutes(), standardDate.getSeconds(), (0, integer_1.toNumber)(util.totalNanoseconds(standardDate, nanosecond)));\r\n    };\r\n    /**\r\n     * @ignore\r\n     */\r\n    LocalDateTime.prototype.toString = function () {\r\n        return localDateTimeToString(this.year, this.month, this.day, this.hour, this.minute, this.second, this.nanosecond);\r\n    };\r\n    return LocalDateTime;\r\n}());\r\nexports.LocalDateTime = LocalDateTime;\r\nObject.defineProperty(LocalDateTime.prototype, LOCAL_DATE_TIME_IDENTIFIER_PROPERTY, IDENTIFIER_PROPERTY_ATTRIBUTES);\r\n/**\r\n * Test if given object is an instance of {@link LocalDateTime} class.\r\n * @param {Object} obj - The object to test.\r\n * @return {boolean} `true` if given object is a {@link LocalDateTime}, `false` otherwise.\r\n */\r\nfunction isLocalDateTime(obj) {\r\n    return hasIdentifierProperty(obj, LOCAL_DATE_TIME_IDENTIFIER_PROPERTY);\r\n}\r\nexports.isLocalDateTime = isLocalDateTime;\r\n/**\r\n * Represents an instant capturing the date, the time and the timezone identifier.\r\n * Created {@ DateTime} objects are frozen with `Object.freeze()` in constructor and thus immutable.\r\n */\r\nvar DateTime = /** @class */ (function () {\r\n    /**\r\n     * @constructor\r\n     * @param {NumberOrInteger} year - The year for the new date-time.\r\n     * @param {NumberOrInteger} month - The month for the new date-time.\r\n     * @param {NumberOrInteger} day - The day for the new date-time.\r\n     * @param {NumberOrInteger} hour - The hour for the new date-time.\r\n     * @param {NumberOrInteger} minute - The minute for the new date-time.\r\n     * @param {NumberOrInteger} second - The second for the new date-time.\r\n     * @param {NumberOrInteger} nanosecond - The nanosecond for the new date-time.\r\n     * @param {NumberOrInteger} timeZoneOffsetSeconds - The time zone offset in seconds. Either this argument or `timeZoneId` should be defined.\r\n     * Value represents the difference, in seconds, from UTC to local time.\r\n     * This is different from standard JavaScript `Date.getTimezoneOffset()` which is the difference, in minutes, from local time to UTC.\r\n     * @param {string|null} timeZoneId - The time zone id for the new date-time. Either this argument or `timeZoneOffsetSeconds` should be defined.\r\n     */\r\n    function DateTime(year, month, day, hour, minute, second, nanosecond, timeZoneOffsetSeconds, timeZoneId) {\r\n        /**\r\n         * The year.\r\n         * @type {NumberOrInteger}\r\n         */\r\n        this.year = util.assertValidYear(year);\r\n        /**\r\n         * The month.\r\n         * @type {NumberOrInteger}\r\n         */\r\n        this.month = util.assertValidMonth(month);\r\n        /**\r\n         * The day.\r\n         * @type {NumberOrInteger}\r\n         */\r\n        this.day = util.assertValidDay(day);\r\n        /**\r\n         * The hour.\r\n         * @type {NumberOrInteger}\r\n         */\r\n        this.hour = util.assertValidHour(hour);\r\n        /**\r\n         * The minute.\r\n         * @type {NumberOrInteger}\r\n         */\r\n        this.minute = util.assertValidMinute(minute);\r\n        /**\r\n         * The second.\r\n         * @type {NumberOrInteger}\r\n         */\r\n        this.second = util.assertValidSecond(second);\r\n        /**\r\n         * The nanosecond.\r\n         * @type {NumberOrInteger}\r\n         */\r\n        this.nanosecond = util.assertValidNanosecond(nanosecond);\r\n        var _a = __read(verifyTimeZoneArguments(timeZoneOffsetSeconds, timeZoneId), 2), offset = _a[0], id = _a[1];\r\n        /**\r\n         * The time zone offset in seconds.\r\n         *\r\n         * *Either this or {@link timeZoneId} is defined.*\r\n         *\r\n         * @type {NumberOrInteger}\r\n         */\r\n        this.timeZoneOffsetSeconds = offset;\r\n        /**\r\n         * The time zone id.\r\n         *\r\n         * *Either this or {@link timeZoneOffsetSeconds} is defined.*\r\n         *\r\n         * @type {string}\r\n         */\r\n        this.timeZoneId = id || undefined;\r\n        Object.freeze(this);\r\n    }\r\n    /**\r\n     * Create a {@link DateTime} object from the given standard JavaScript `Date` and optional nanoseconds.\r\n     * @param {global.Date} standardDate - The standard JavaScript date to convert.\r\n     * @param {NumberOrInteger|undefined} nanosecond - The optional amount of nanoseconds.\r\n     * @return {DateTime} New DateTime.\r\n     */\r\n    DateTime.fromStandardDate = function (standardDate, nanosecond) {\r\n        verifyStandardDateAndNanos(standardDate, nanosecond);\r\n        return new DateTime(standardDate.getFullYear(), standardDate.getMonth() + 1, standardDate.getDate(), standardDate.getHours(), standardDate.getMinutes(), standardDate.getSeconds(), (0, integer_1.toNumber)(util.totalNanoseconds(standardDate, nanosecond)), util.timeZoneOffsetInSeconds(standardDate), null /* no time zone id */);\r\n    };\r\n    /**\r\n     * @ignore\r\n     */\r\n    DateTime.prototype.toString = function () {\r\n        var localDateTimeStr = localDateTimeToString(this.year, this.month, this.day, this.hour, this.minute, this.second, this.nanosecond);\r\n        var timeZoneStr = this.timeZoneId\r\n            ? \"[\" + this.timeZoneId + \"]\"\r\n            : util.timeZoneOffsetToIsoString(this.timeZoneOffsetSeconds || 0);\r\n        return localDateTimeStr + timeZoneStr;\r\n    };\r\n    return DateTime;\r\n}());\r\nexports.DateTime = DateTime;\r\nObject.defineProperty(DateTime.prototype, DATE_TIME_IDENTIFIER_PROPERTY, IDENTIFIER_PROPERTY_ATTRIBUTES);\r\n/**\r\n * Test if given object is an instance of {@link DateTime} class.\r\n * @param {Object} obj - The object to test.\r\n * @return {boolean} `true` if given object is a {@link DateTime}, `false` otherwise.\r\n */\r\nfunction isDateTime(obj) {\r\n    return hasIdentifierProperty(obj, DATE_TIME_IDENTIFIER_PROPERTY);\r\n}\r\nexports.isDateTime = isDateTime;\r\nfunction hasIdentifierProperty(obj, property) {\r\n    return (obj && obj[property]) === true;\r\n}\r\nfunction localDateTimeToString(year, month, day, hour, minute, second, nanosecond) {\r\n    return (util.dateToIsoString(year, month, day) +\r\n        'T' +\r\n        util.timeToIsoString(hour, minute, second, nanosecond));\r\n}\r\n/**\r\n * @private\r\n * @param {NumberOrInteger} timeZoneOffsetSeconds\r\n * @param {string | null } timeZoneId\r\n * @returns {Array<NumberOrInteger | undefined | null, string | undefined | null>}\r\n */\r\nfunction verifyTimeZoneArguments(timeZoneOffsetSeconds, timeZoneId) {\r\n    var offsetDefined = timeZoneOffsetSeconds || timeZoneOffsetSeconds === 0;\r\n    var idDefined = timeZoneId && timeZoneId !== '';\r\n    if (offsetDefined && !idDefined) {\r\n        (0, util_1.assertNumberOrInteger)(timeZoneOffsetSeconds, 'Time zone offset in seconds');\r\n        return [timeZoneOffsetSeconds, undefined];\r\n    }\r\n    else if (!offsetDefined && idDefined) {\r\n        (0, util_1.assertString)(timeZoneId, 'Time zone ID');\r\n        return [undefined, timeZoneId];\r\n    }\r\n    else if (offsetDefined && idDefined) {\r\n        throw (0, error_1.newError)(\"Unable to create DateTime with both time zone offset and id. Please specify either of them. Given offset: \" + timeZoneOffsetSeconds + \" and id: \" + timeZoneId);\r\n    }\r\n    else {\r\n        throw (0, error_1.newError)(\"Unable to create DateTime without either time zone offset or id. Please specify either of them. Given offset: \" + timeZoneOffsetSeconds + \" and id: \" + timeZoneId);\r\n    }\r\n}\r\n/**\r\n * @private\r\n * @param {StandardDate} standardDate\r\n * @param {NumberOrInteger} nanosecond\r\n * @returns {void}\r\n */\r\nfunction verifyStandardDateAndNanos(standardDate, nanosecond) {\r\n    (0, util_1.assertValidDate)(standardDate, 'Standard date');\r\n    if (nanosecond !== null && nanosecond !== undefined) {\r\n        (0, util_1.assertNumberOrInteger)(nanosecond, 'Nanosecond');\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"script"}