{"ast":null,"code":"\"use strict\";\n/**\n * Copyright (c) \"Neo4j\"\n * Neo4j Sweden AB [http://neo4j.com]\n *\n * This file is part of Neo4j.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.EMPTY_CONNECTION_HOLDER = exports.ReadOnlyConnectionHolder = exports.ConnectionHolder = void 0;\n\nvar error_1 = require(\"../error\");\n\nvar util_1 = require(\"./util\");\n\nvar constants_1 = require(\"./constants\");\n\nvar bookmark_1 = require(\"./bookmark\");\n/**\n * Utility to lazily initialize connections and return them back to the pool when unused.\n * @private\n */\n\n\nvar ConnectionHolder =\n/** @class */\nfunction () {\n  /**\n   * @constructor\n   * @param {object} params\n   * @property {string} params.mode - the access mode for new connection holder.\n   * @property {string} params.database - the target database name.\n   * @property {Bookmark} params.bookmark - the last bookmark\n   * @property {ConnectionProvider} params.connectionProvider - the connection provider to acquire connections from.\n   * @property {string?} params.impersonatedUser - the user which will be impersonated\n   * @property {function(databaseName:string)} params.onDatabaseNameResolved - callback called when the database name is resolved\n   */\n  function ConnectionHolder(_a) {\n    var _b = _a === void 0 ? {} : _a,\n        _c = _b.mode,\n        mode = _c === void 0 ? constants_1.ACCESS_MODE_WRITE : _c,\n        _d = _b.database,\n        database = _d === void 0 ? '' : _d,\n        bookmark = _b.bookmark,\n        connectionProvider = _b.connectionProvider,\n        impersonatedUser = _b.impersonatedUser,\n        onDatabaseNameResolved = _b.onDatabaseNameResolved;\n\n    this._mode = mode;\n    this._database = database ? (0, util_1.assertString)(database, 'database') : '';\n    this._bookmark = bookmark || bookmark_1.Bookmark.empty();\n    this._connectionProvider = connectionProvider;\n    this._impersonatedUser = impersonatedUser;\n    this._referenceCount = 0;\n    this._connectionPromise = Promise.resolve();\n    this._onDatabaseNameResolved = onDatabaseNameResolved;\n  }\n\n  ConnectionHolder.prototype.mode = function () {\n    return this._mode;\n  };\n\n  ConnectionHolder.prototype.database = function () {\n    return this._database;\n  };\n\n  ConnectionHolder.prototype.setDatabase = function (database) {\n    this._database = database;\n  };\n\n  ConnectionHolder.prototype.bookmark = function () {\n    return this._bookmark;\n  };\n\n  ConnectionHolder.prototype.connectionProvider = function () {\n    return this._connectionProvider;\n  };\n\n  ConnectionHolder.prototype.referenceCount = function () {\n    return this._referenceCount;\n  };\n\n  ConnectionHolder.prototype.initializeConnection = function () {\n    if (this._referenceCount === 0 && this._connectionProvider) {\n      this._connectionPromise = this._connectionProvider.acquireConnection({\n        accessMode: this._mode,\n        database: this._database,\n        bookmarks: this._bookmark,\n        impersonatedUser: this._impersonatedUser,\n        onDatabaseNameResolved: this._onDatabaseNameResolved\n      });\n    } else {\n      this._referenceCount++;\n      return false;\n    }\n\n    this._referenceCount++;\n    return true;\n  };\n\n  ConnectionHolder.prototype.getConnection = function () {\n    return this._connectionPromise;\n  };\n\n  ConnectionHolder.prototype.releaseConnection = function () {\n    if (this._referenceCount === 0) {\n      return this._connectionPromise;\n    }\n\n    this._referenceCount--;\n\n    if (this._referenceCount === 0) {\n      return this._releaseConnection();\n    }\n\n    return this._connectionPromise;\n  };\n\n  ConnectionHolder.prototype.close = function () {\n    if (this._referenceCount === 0) {\n      return this._connectionPromise;\n    }\n\n    this._referenceCount = 0;\n    return this._releaseConnection();\n  };\n  /**\n   * Return the current pooled connection instance to the connection pool.\n   * We don't pool Session instances, to avoid users using the Session after they've called close.\n   * The `Session` object is just a thin wrapper around Connection anyway, so it makes little difference.\n   * @return {Promise} - promise resolved then connection is returned to the pool.\n   * @private\n   */\n\n\n  ConnectionHolder.prototype._releaseConnection = function () {\n    this._connectionPromise = this._connectionPromise.then(function (connection) {\n      if (connection) {\n        if (connection.isOpen()) {\n          return connection.resetAndFlush().catch(ignoreError).then(function () {\n            return connection._release();\n          });\n        }\n\n        return connection._release();\n      } else {\n        return Promise.resolve();\n      }\n    }).catch(ignoreError);\n    return this._connectionPromise;\n  };\n\n  return ConnectionHolder;\n}();\n\nexports.ConnectionHolder = ConnectionHolder;\n/**\n * Provides a interaction with a ConnectionHolder without change it state by\n * releasing or initilizing\n */\n\nvar ReadOnlyConnectionHolder =\n/** @class */\nfunction (_super) {\n  __extends(ReadOnlyConnectionHolder, _super);\n  /**\n   * Contructor\n   * @param {ConnectionHolder} connectionHolder the connection holder which will treat the requests\n   */\n\n\n  function ReadOnlyConnectionHolder(connectionHolder) {\n    var _this = _super.call(this, {\n      mode: connectionHolder.mode(),\n      database: connectionHolder.database(),\n      bookmark: connectionHolder.bookmark(),\n      connectionProvider: connectionHolder.connectionProvider()\n    }) || this;\n\n    _this._connectionHolder = connectionHolder;\n    return _this;\n  }\n  /**\n   * Return the true if the connection is suppose to be initilized with the command.\n   *\n   * @return {boolean}\n   */\n\n\n  ReadOnlyConnectionHolder.prototype.initializeConnection = function () {\n    if (this._connectionHolder.referenceCount() === 0) {\n      return false;\n    }\n\n    return true;\n  };\n  /**\n   * Get the current connection promise.\n   * @return {Promise<Connection>} promise resolved with the current connection.\n   */\n\n\n  ReadOnlyConnectionHolder.prototype.getConnection = function () {\n    return this._connectionHolder.getConnection();\n  };\n  /**\n   * Get the current connection promise, doesn't performs the release\n   * @return {Promise<Connection>} promise with the resolved current connection\n   */\n\n\n  ReadOnlyConnectionHolder.prototype.releaseConnection = function () {\n    return this._connectionHolder.getConnection().catch(function () {\n      return Promise.resolve();\n    });\n  };\n  /**\n   * Get the current connection promise, doesn't performs the connection close\n   * @return {Promise<Connection>} promise with the resolved current connection\n   */\n\n\n  ReadOnlyConnectionHolder.prototype.close = function () {\n    return this._connectionHolder.getConnection().catch(function () {\n      return Promise.resolve();\n    });\n  };\n\n  return ReadOnlyConnectionHolder;\n}(ConnectionHolder);\n\nexports.ReadOnlyConnectionHolder = ReadOnlyConnectionHolder;\nexports.default = ReadOnlyConnectionHolder;\n\nvar EmptyConnectionHolder =\n/** @class */\nfunction (_super) {\n  __extends(EmptyConnectionHolder, _super);\n\n  function EmptyConnectionHolder() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  EmptyConnectionHolder.prototype.mode = function () {\n    return undefined;\n  };\n\n  EmptyConnectionHolder.prototype.database = function () {\n    return undefined;\n  };\n\n  EmptyConnectionHolder.prototype.initializeConnection = function () {\n    // nothing to initialize\n    return true;\n  };\n\n  EmptyConnectionHolder.prototype.getConnection = function () {\n    return Promise.reject((0, error_1.newError)('This connection holder does not serve connections'));\n  };\n\n  EmptyConnectionHolder.prototype.releaseConnection = function () {\n    return Promise.resolve();\n  };\n\n  EmptyConnectionHolder.prototype.close = function () {\n    return Promise.resolve();\n  };\n\n  return EmptyConnectionHolder;\n}(ConnectionHolder);\n/**\n * Connection holder that does not manage any connections.\n * @type {ConnectionHolder}\n * @private\n */\n\n\nvar EMPTY_CONNECTION_HOLDER = new EmptyConnectionHolder();\nexports.EMPTY_CONNECTION_HOLDER = EMPTY_CONNECTION_HOLDER; // eslint-disable-next-line handle-callback-err\n\nfunction ignoreError(error) {}","map":{"version":3,"sources":["D:/Documents/EMA/Mines A3/NoSQL/ReseauAchats/reseau_achats/node_modules/neo4j-driver-core/lib/internal/connection-holder.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","prototype","hasOwnProperty","call","TypeError","String","__","constructor","create","defineProperty","exports","value","EMPTY_CONNECTION_HOLDER","ReadOnlyConnectionHolder","ConnectionHolder","error_1","require","util_1","constants_1","bookmark_1","_a","_b","_c","mode","ACCESS_MODE_WRITE","_d","database","bookmark","connectionProvider","impersonatedUser","onDatabaseNameResolved","_mode","_database","assertString","_bookmark","Bookmark","empty","_connectionProvider","_impersonatedUser","_referenceCount","_connectionPromise","Promise","resolve","_onDatabaseNameResolved","setDatabase","referenceCount","initializeConnection","acquireConnection","accessMode","bookmarks","getConnection","releaseConnection","_releaseConnection","close","then","connection","isOpen","resetAndFlush","catch","ignoreError","_release","_super","connectionHolder","_this","_connectionHolder","default","EmptyConnectionHolder","apply","arguments","undefined","reject","newError","error"],"mappings":"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","sourcesContent":["\"use strict\";\n/**\n * Copyright (c) \"Neo4j\"\n * Neo4j Sweden AB [http://neo4j.com]\n *\n * This file is part of Neo4j.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EMPTY_CONNECTION_HOLDER = exports.ReadOnlyConnectionHolder = exports.ConnectionHolder = void 0;\nvar error_1 = require(\"../error\");\nvar util_1 = require(\"./util\");\nvar constants_1 = require(\"./constants\");\nvar bookmark_1 = require(\"./bookmark\");\n/**\n * Utility to lazily initialize connections and return them back to the pool when unused.\n * @private\n */\nvar ConnectionHolder = /** @class */ (function () {\n    /**\n     * @constructor\n     * @param {object} params\n     * @property {string} params.mode - the access mode for new connection holder.\n     * @property {string} params.database - the target database name.\n     * @property {Bookmark} params.bookmark - the last bookmark\n     * @property {ConnectionProvider} params.connectionProvider - the connection provider to acquire connections from.\n     * @property {string?} params.impersonatedUser - the user which will be impersonated\n     * @property {function(databaseName:string)} params.onDatabaseNameResolved - callback called when the database name is resolved\n     */\n    function ConnectionHolder(_a) {\n        var _b = _a === void 0 ? {} : _a, _c = _b.mode, mode = _c === void 0 ? constants_1.ACCESS_MODE_WRITE : _c, _d = _b.database, database = _d === void 0 ? '' : _d, bookmark = _b.bookmark, connectionProvider = _b.connectionProvider, impersonatedUser = _b.impersonatedUser, onDatabaseNameResolved = _b.onDatabaseNameResolved;\n        this._mode = mode;\n        this._database = database ? (0, util_1.assertString)(database, 'database') : '';\n        this._bookmark = bookmark || bookmark_1.Bookmark.empty();\n        this._connectionProvider = connectionProvider;\n        this._impersonatedUser = impersonatedUser;\n        this._referenceCount = 0;\n        this._connectionPromise = Promise.resolve();\n        this._onDatabaseNameResolved = onDatabaseNameResolved;\n    }\n    ConnectionHolder.prototype.mode = function () {\n        return this._mode;\n    };\n    ConnectionHolder.prototype.database = function () {\n        return this._database;\n    };\n    ConnectionHolder.prototype.setDatabase = function (database) {\n        this._database = database;\n    };\n    ConnectionHolder.prototype.bookmark = function () {\n        return this._bookmark;\n    };\n    ConnectionHolder.prototype.connectionProvider = function () {\n        return this._connectionProvider;\n    };\n    ConnectionHolder.prototype.referenceCount = function () {\n        return this._referenceCount;\n    };\n    ConnectionHolder.prototype.initializeConnection = function () {\n        if (this._referenceCount === 0 && this._connectionProvider) {\n            this._connectionPromise = this._connectionProvider.acquireConnection({\n                accessMode: this._mode,\n                database: this._database,\n                bookmarks: this._bookmark,\n                impersonatedUser: this._impersonatedUser,\n                onDatabaseNameResolved: this._onDatabaseNameResolved\n            });\n        }\n        else {\n            this._referenceCount++;\n            return false;\n        }\n        this._referenceCount++;\n        return true;\n    };\n    ConnectionHolder.prototype.getConnection = function () {\n        return this._connectionPromise;\n    };\n    ConnectionHolder.prototype.releaseConnection = function () {\n        if (this._referenceCount === 0) {\n            return this._connectionPromise;\n        }\n        this._referenceCount--;\n        if (this._referenceCount === 0) {\n            return this._releaseConnection();\n        }\n        return this._connectionPromise;\n    };\n    ConnectionHolder.prototype.close = function () {\n        if (this._referenceCount === 0) {\n            return this._connectionPromise;\n        }\n        this._referenceCount = 0;\n        return this._releaseConnection();\n    };\n    /**\n     * Return the current pooled connection instance to the connection pool.\n     * We don't pool Session instances, to avoid users using the Session after they've called close.\n     * The `Session` object is just a thin wrapper around Connection anyway, so it makes little difference.\n     * @return {Promise} - promise resolved then connection is returned to the pool.\n     * @private\n     */\n    ConnectionHolder.prototype._releaseConnection = function () {\n        this._connectionPromise = this._connectionPromise\n            .then(function (connection) {\n            if (connection) {\n                if (connection.isOpen()) {\n                    return connection\n                        .resetAndFlush()\n                        .catch(ignoreError)\n                        .then(function () { return connection._release(); });\n                }\n                return connection._release();\n            }\n            else {\n                return Promise.resolve();\n            }\n        })\n            .catch(ignoreError);\n        return this._connectionPromise;\n    };\n    return ConnectionHolder;\n}());\nexports.ConnectionHolder = ConnectionHolder;\n/**\n * Provides a interaction with a ConnectionHolder without change it state by\n * releasing or initilizing\n */\nvar ReadOnlyConnectionHolder = /** @class */ (function (_super) {\n    __extends(ReadOnlyConnectionHolder, _super);\n    /**\n     * Contructor\n     * @param {ConnectionHolder} connectionHolder the connection holder which will treat the requests\n     */\n    function ReadOnlyConnectionHolder(connectionHolder) {\n        var _this = _super.call(this, {\n            mode: connectionHolder.mode(),\n            database: connectionHolder.database(),\n            bookmark: connectionHolder.bookmark(),\n            connectionProvider: connectionHolder.connectionProvider()\n        }) || this;\n        _this._connectionHolder = connectionHolder;\n        return _this;\n    }\n    /**\n     * Return the true if the connection is suppose to be initilized with the command.\n     *\n     * @return {boolean}\n     */\n    ReadOnlyConnectionHolder.prototype.initializeConnection = function () {\n        if (this._connectionHolder.referenceCount() === 0) {\n            return false;\n        }\n        return true;\n    };\n    /**\n     * Get the current connection promise.\n     * @return {Promise<Connection>} promise resolved with the current connection.\n     */\n    ReadOnlyConnectionHolder.prototype.getConnection = function () {\n        return this._connectionHolder.getConnection();\n    };\n    /**\n     * Get the current connection promise, doesn't performs the release\n     * @return {Promise<Connection>} promise with the resolved current connection\n     */\n    ReadOnlyConnectionHolder.prototype.releaseConnection = function () {\n        return this._connectionHolder.getConnection().catch(function () { return Promise.resolve(); });\n    };\n    /**\n     * Get the current connection promise, doesn't performs the connection close\n     * @return {Promise<Connection>} promise with the resolved current connection\n     */\n    ReadOnlyConnectionHolder.prototype.close = function () {\n        return this._connectionHolder.getConnection().catch(function () { return Promise.resolve(); });\n    };\n    return ReadOnlyConnectionHolder;\n}(ConnectionHolder));\nexports.ReadOnlyConnectionHolder = ReadOnlyConnectionHolder;\nexports.default = ReadOnlyConnectionHolder;\nvar EmptyConnectionHolder = /** @class */ (function (_super) {\n    __extends(EmptyConnectionHolder, _super);\n    function EmptyConnectionHolder() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    EmptyConnectionHolder.prototype.mode = function () {\n        return undefined;\n    };\n    EmptyConnectionHolder.prototype.database = function () {\n        return undefined;\n    };\n    EmptyConnectionHolder.prototype.initializeConnection = function () {\n        // nothing to initialize\n        return true;\n    };\n    EmptyConnectionHolder.prototype.getConnection = function () {\n        return Promise.reject((0, error_1.newError)('This connection holder does not serve connections'));\n    };\n    EmptyConnectionHolder.prototype.releaseConnection = function () {\n        return Promise.resolve();\n    };\n    EmptyConnectionHolder.prototype.close = function () {\n        return Promise.resolve();\n    };\n    return EmptyConnectionHolder;\n}(ConnectionHolder));\n/**\n * Connection holder that does not manage any connections.\n * @type {ConnectionHolder}\n * @private\n */\nvar EMPTY_CONNECTION_HOLDER = new EmptyConnectionHolder();\nexports.EMPTY_CONNECTION_HOLDER = EMPTY_CONNECTION_HOLDER;\n// eslint-disable-next-line handle-callback-err\nfunction ignoreError(error) { }\n"]},"metadata":{},"sourceType":"script"}