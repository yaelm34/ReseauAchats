{"ast":null,"code":"/** PURE_IMPORTS_START tslib,_Subject,_innerSubscribe PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subject } from '../Subject';\nimport { SimpleOuterSubscriber, innerSubscribe, SimpleInnerSubscriber } from '../innerSubscribe';\nexport function retryWhen(notifier) {\n  return function (source) {\n    return source.lift(new RetryWhenOperator(notifier, source));\n  };\n}\n\nvar RetryWhenOperator = /*@__PURE__*/function () {\n  function RetryWhenOperator(notifier, source) {\n    this.notifier = notifier;\n    this.source = source;\n  }\n\n  RetryWhenOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new RetryWhenSubscriber(subscriber, this.notifier, this.source));\n  };\n\n  return RetryWhenOperator;\n}();\n\nvar RetryWhenSubscriber = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(RetryWhenSubscriber, _super);\n\n  function RetryWhenSubscriber(destination, notifier, source) {\n    var _this = _super.call(this, destination) || this;\n\n    _this.notifier = notifier;\n    _this.source = source;\n    return _this;\n  }\n\n  RetryWhenSubscriber.prototype.error = function (err) {\n    if (!this.isStopped) {\n      var errors = this.errors;\n      var retries = this.retries;\n      var retriesSubscription = this.retriesSubscription;\n\n      if (!retries) {\n        errors = new Subject();\n\n        try {\n          var notifier = this.notifier;\n          retries = notifier(errors);\n        } catch (e) {\n          return _super.prototype.error.call(this, e);\n        }\n\n        retriesSubscription = innerSubscribe(retries, new SimpleInnerSubscriber(this));\n      } else {\n        this.errors = undefined;\n        this.retriesSubscription = undefined;\n      }\n\n      this._unsubscribeAndRecycle();\n\n      this.errors = errors;\n      this.retries = retries;\n      this.retriesSubscription = retriesSubscription;\n      errors.next(err);\n    }\n  };\n\n  RetryWhenSubscriber.prototype._unsubscribe = function () {\n    var _a = this,\n        errors = _a.errors,\n        retriesSubscription = _a.retriesSubscription;\n\n    if (errors) {\n      errors.unsubscribe();\n      this.errors = undefined;\n    }\n\n    if (retriesSubscription) {\n      retriesSubscription.unsubscribe();\n      this.retriesSubscription = undefined;\n    }\n\n    this.retries = undefined;\n  };\n\n  RetryWhenSubscriber.prototype.notifyNext = function () {\n    var _unsubscribe = this._unsubscribe;\n    this._unsubscribe = null;\n\n    this._unsubscribeAndRecycle();\n\n    this._unsubscribe = _unsubscribe;\n    this.source.subscribe(this);\n  };\n\n  return RetryWhenSubscriber;\n}(SimpleOuterSubscriber);","map":{"version":3,"mappings":";AAGA,OAAO,KAAEA,OAAT,MAAwB,OAAxB;AAIA,SAASC,OAAT,QAAS,YAAT;AAgBA,SAAMC,qBAAN,EAA6BC,cAA7B,EAAmFC,qBAAnF,QAAmF,mBAAnF;OACE,SAAOC,SAAP,CAAQC,QAAR,EAAkC;AACnC;AAAA;AAAA;AAED;;IACEC,iCAA4E,YACjC;WADrBA,4BAAsDC;AACtD;AACrB;AAED;;mBACe,CAACC,UAAUC,OAAI,sBAAoBF,MAApB,EAAgC;AAC7D;AACH;;AARA,SAQCD,iBARD;AAeA,CAd8E;;IActCI,6CAA2BC,MAA3B,EAA2B;AAMjEZ,yCAAYY,MAAZ;;WAAAD,oBAGEE,aAAMP,UAAYE,QACnB;AAHmB,kCAAsDK,WAAtD,KAAsD,IAAtD;;AACAC;;AAEnB;AAED;;qBACY,WAAWC;QAEnB,MAAIC,WAAa;AACjB,UAAIC,SAAO,KAAYA,MAAvB;AACA,UAAIC,sBAAJ;AAEA,UAAIC,mBAAU,2BAAd;;UACE,UAAS;AACTF,cAAI,gBAAJ;;YACU;AACR,sBAAU,QAASX,QAAnB;AACDY;AAAC,iBACAE;AACD;AACD;;AACDD;aACC;AACA,aAAKF,MAAL,GAAKI,SAAL;AACD;AAED;;AAEA,WAAKC,sBAAL;;AACA,WAAKL,MAAL,GAAYA,MAAZ;AACA,WAAKC,OAAL,GAAKA,OAAL;AAEA,iCAAkBC,mBAAlB;AACDF;AACF;AAGD;;qBACU,0BAAQ;AAChB,QAAIM,SAAJ;AAAA,QAAYN,kBAAZ;AAAA,QAAYE,4CAAZ;;QACEF,QAAO;AACPA,YAAK,YAAL;AACD;AACD;;QACEE,qBAAoB;AACpBA,yBAAK,YAAL;AACD;AACD;;AACD;AAED;;qBACU,wBAAsB;AAE9B,QAAIK,YAAC,GAAY,KAAQA,YAAzB;AACA,SAAKA,YAAL,GAAK,IAAL;;AACA,SAAKF,sBAAL;;AAEA,SAAKE,YAAL,GAAYA,YAAZ;AACD;AACH;;AAlEwC;CAAA","names":["tslib_1","Subject","SimpleOuterSubscriber","innerSubscribe","SimpleInnerSubscriber","retryWhen","notifier","RetryWhenOperator","source","prototype","call","RetryWhenSubscriber","_super","destination","_this","error","isStopped","errors","retries","retriesSubscription","e","undefined","_unsubscribeAndRecycle","_a","_unsubscribe"],"sources":["D:\\Documents\\EMA\\Mines A3\\NoSQL\\ReseauAchats\\reseau_achats\\node_modules\\rxjs\\src\\internal\\operators\\retryWhen.ts"],"sourcesContent":["import { Operator } from '../Operator';\r\nimport { Subscriber } from '../Subscriber';\r\nimport { Observable } from '../Observable';\r\nimport { Subject } from '../Subject';\r\nimport { Subscription } from '../Subscription';\r\n\r\nimport { MonoTypeOperatorFunction, TeardownLogic } from '../types';\r\nimport { SimpleOuterSubscriber, innerSubscribe, SimpleInnerSubscriber } from '../innerSubscribe';\r\n\r\n/**\r\n * Returns an Observable that mirrors the source Observable with the exception of an `error`. If the source Observable\r\n * calls `error`, this method will emit the Throwable that caused the error to the Observable returned from `notifier`.\r\n * If that Observable calls `complete` or `error` then this method will call `complete` or `error` on the child\r\n * subscription. Otherwise this method will resubscribe to the source Observable.\r\n *\r\n * ![](retryWhen.png)\r\n *\r\n * @param {function(errors: Observable): Observable} notifier - Receives an Observable of notifications with which a\r\n * user can `complete` or `error`, aborting the retry.\r\n * @return {Observable} The source Observable modified with retry logic.\r\n * @method retryWhen\r\n * @owner Observable\r\n */\r\nexport function retryWhen<T>(notifier: (errors: Observable<any>) => Observable<any>): MonoTypeOperatorFunction<T> {\r\n  return (source: Observable<T>) => source.lift(new RetryWhenOperator(notifier, source));\r\n}\r\n\r\nclass RetryWhenOperator<T> implements Operator<T, T> {\r\n  constructor(protected notifier: (errors: Observable<any>) => Observable<any>,\r\n              protected source: Observable<T>) {\r\n  }\r\n\r\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\r\n    return source.subscribe(new RetryWhenSubscriber(subscriber, this.notifier, this.source));\r\n  }\r\n}\r\n\r\n/**\r\n * We need this JSDoc comment for affecting ESDoc.\r\n * @ignore\r\n * @extends {Ignored}\r\n */\r\nclass RetryWhenSubscriber<T, R> extends SimpleOuterSubscriber<T, R> {\r\n\r\n  private errors?: Subject<any>;\r\n  private retries?: Observable<any>;\r\n  private retriesSubscription?: Subscription;\r\n\r\n  constructor(destination: Subscriber<R>,\r\n              private notifier: (errors: Observable<any>) => Observable<any>,\r\n              private source: Observable<T>) {\r\n    super(destination);\r\n  }\r\n\r\n  error(err: any) {\r\n    if (!this.isStopped) {\r\n\r\n      let errors = this.errors;\r\n      let retries: any = this.retries;\r\n      let retriesSubscription = this.retriesSubscription;\r\n\r\n      if (!retries) {\r\n        errors = new Subject();\r\n        try {\r\n          const { notifier } = this;\r\n          retries = notifier(errors);\r\n        } catch (e) {\r\n          return super.error(e);\r\n        }\r\n        retriesSubscription = innerSubscribe(retries, new SimpleInnerSubscriber(this));\r\n      } else {\r\n        this.errors = undefined;\r\n        this.retriesSubscription = undefined;\r\n      }\r\n\r\n      this._unsubscribeAndRecycle();\r\n\r\n      this.errors = errors;\r\n      this.retries = retries;\r\n      this.retriesSubscription = retriesSubscription;\r\n\r\n      errors!.next(err);\r\n    }\r\n  }\r\n\r\n  /** @deprecated This is an internal implementation detail, do not use. */\r\n  _unsubscribe() {\r\n    const { errors, retriesSubscription } = this;\r\n    if (errors) {\r\n      errors.unsubscribe();\r\n      this.errors = undefined;\r\n    }\r\n    if (retriesSubscription) {\r\n      retriesSubscription.unsubscribe();\r\n      this.retriesSubscription = undefined;\r\n    }\r\n    this.retries = undefined;\r\n  }\r\n\r\n  notifyNext(): void {\r\n    const { _unsubscribe } = this;\r\n\r\n    this._unsubscribe = null!;\r\n    this._unsubscribeAndRecycle();\r\n    this._unsubscribe = _unsubscribe;\r\n\r\n    this.source.subscribe(this);\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}