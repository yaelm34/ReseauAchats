{"ast":null,"code":"/** PURE_IMPORTS_START _util_isScheduler,_fromArray,_scheduled_scheduleArray PURE_IMPORTS_END */\nimport { isScheduler } from '../util/isScheduler';\nimport { fromArray } from './fromArray';\nimport { scheduleArray } from '../scheduled/scheduleArray';\nexport function of() {\n  var args = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    args[_i] = arguments[_i];\n  }\n\n  var scheduler = args[args.length - 1];\n\n  if (isScheduler(scheduler)) {\n    args.pop();\n    return scheduleArray(args, scheduler);\n  } else {\n    return fromArray(args);\n  }\n}","map":{"version":3,"mappings":"AACA;AACA,SAASA,WAAT,QAA0B,qBAA1B;AAEA,SAASC,SAAT,QAAwB,aAAxB;AAiGA,SAAMC,aAAN,QAAkB,4BAAlB;OAAsB,cAAiC;UAAjC;;OAAA,0BAAiC;;AACrD;;AACA,MAAIC,YAAYC,SAAS,CAACC,MAAV,GAAY,CAAZ,CAAhB;;MACEL,WAAW;AACXI;AACD;SACC;AACD;AACF","names":["isScheduler","fromArray","scheduleArray","scheduler","args","length"],"sources":["D:\\Documents\\EMA\\Mines A3\\NoSQL\\ReseauAchats\\reseau_achats\\node_modules\\rxjs\\src\\internal\\observable\\of.ts"],"sourcesContent":["import { SchedulerLike } from '../types';\r\nimport { isScheduler } from '../util/isScheduler';\r\nimport { fromArray } from './fromArray';\r\nimport { Observable } from '../Observable';\r\nimport { scheduleArray } from '../scheduled/scheduleArray';\r\n\r\n/* tslint:disable:max-line-length */\r\n/** @deprecated use {@link scheduled} instead `scheduled([a, b, c], scheduler)` */\r\nexport function of<T>(a: T, scheduler: SchedulerLike): Observable<T>;\r\n/** @deprecated use {@link scheduled} instead `scheduled([a, b, c], scheduler)` */\r\nexport function of<T, T2>(a: T, b: T2, scheduler: SchedulerLike): Observable<T | T2>;\r\n/** @deprecated use {@link scheduled} instead `scheduled([a, b, c], scheduler)` */\r\nexport function of<T, T2, T3>(a: T, b: T2, c: T3, scheduler: SchedulerLike): Observable<T | T2 | T3>;\r\n/** @deprecated use {@link scheduled} instead `scheduled([a, b, c], scheduler)` */\r\nexport function of<T, T2, T3, T4>(a: T, b: T2, c: T3, d: T4, scheduler: SchedulerLike): Observable<T | T2 | T3 | T4>;\r\n/** @deprecated use {@link scheduled} instead `scheduled([a, b, c], scheduler)` */\r\nexport function of<T, T2, T3, T4, T5>(a: T, b: T2, c: T3, d: T4, e: T5, scheduler: SchedulerLike): Observable<T | T2 | T3 | T4 | T5>;\r\n/** @deprecated use {@link scheduled} instead `scheduled([a, b, c], scheduler)` */\r\nexport function of<T, T2, T3, T4, T5, T6>(a: T, b: T2, c: T3, d: T4, e: T5, f: T6, scheduler: SchedulerLike): Observable<T | T2 | T3 | T4 | T5 | T6>;\r\n/** @deprecated use {@link scheduled} instead `scheduled([a, b, c], scheduler)` */\r\nexport function of<T, T2, T3, T4, T5, T6, T7>(a: T, b: T2, c: T3, d: T4, e: T5, f: T6, g: T7, scheduler: SchedulerLike):\r\n  Observable<T | T2 | T3 | T4 | T5 | T6 | T7>;\r\n/** @deprecated use {@link scheduled} instead `scheduled([a, b, c], scheduler)` */\r\nexport function of<T, T2, T3, T4, T5, T6, T7, T8>(a: T, b: T2, c: T3, d: T4, e: T5, f: T6, g: T7, h: T8, scheduler: SchedulerLike):\r\n  Observable<T | T2 | T3 | T4 | T5 | T6 | T7 | T8>;\r\n/** @deprecated use {@link scheduled} instead `scheduled([a, b, c], scheduler)` */\r\nexport function of<T, T2, T3, T4, T5, T6, T7, T8, T9>(a: T, b: T2, c: T3, d: T4, e: T5, f: T6, g: T7, h: T8, i: T9, scheduler: SchedulerLike):\r\n  Observable<T | T2 | T3 | T4 | T5 | T6 | T7 | T8 | T9>;\r\nexport function of<T>(...args: (T | SchedulerLike)[]): Observable<T>;\r\n\r\n// TODO(benlesh): Update the typings for this when we can switch to TS 3.x\r\nexport function of<T>(a: T): Observable<T>;\r\nexport function of<T, T2>(a: T, b: T2): Observable<T | T2>;\r\nexport function of<T, T2, T3>(a: T, b: T2, c: T3): Observable<T | T2 | T3>;\r\nexport function of<T, T2, T3, T4>(a: T, b: T2, c: T3, d: T4): Observable<T | T2 | T3 | T4>;\r\nexport function of<T, T2, T3, T4, T5>(a: T, b: T2, c: T3, d: T4, e: T5): Observable<T | T2 | T3 | T4 | T5>;\r\nexport function of<T, T2, T3, T4, T5, T6>(a: T, b: T2, c: T3, d: T4, e: T5, f: T6): Observable<T | T2 | T3 | T4 | T5 | T6>;\r\nexport function of<T, T2, T3, T4, T5, T6, T7>(a: T, b: T2, c: T3, d: T4, e: T5, f: T6, g: T7):\r\n  Observable<T | T2 | T3 | T4 | T5 | T6 | T7>;\r\nexport function of<T, T2, T3, T4, T5, T6, T7, T8>(a: T, b: T2, c: T3, d: T4, e: T5, f: T6, g: T7, h: T8):\r\n  Observable<T | T2 | T3 | T4 | T5 | T6 | T7 | T8>;\r\nexport function of<T, T2, T3, T4, T5, T6, T7, T8, T9>(a: T, b: T2, c: T3, d: T4, e: T5, f: T6, g: T7, h: T8, i: T9):\r\n  Observable<T | T2 | T3 | T4 | T5 | T6 | T7 | T8 | T9>;\r\nexport function of<T>(...args: T[]): Observable<T>;\r\n/* tslint:enable:max-line-length */\r\n\r\n/**\r\n * Converts the arguments to an observable sequence.\r\n *\r\n * <span class=\"informal\">Each argument becomes a `next` notification.</span>\r\n *\r\n * ![](of.png)\r\n *\r\n * Unlike {@link from}, it does not do any flattening and emits each argument in whole\r\n * as a separate `next` notification.\r\n *\r\n * ## Examples\r\n *\r\n * Emit the values `10, 20, 30`\r\n *\r\n * ```ts\r\n * import { of } from 'rxjs';\r\n *\r\n * of(10, 20, 30)\r\n * .subscribe(\r\n *   next => console.log('next:', next),\r\n *   err => console.log('error:', err),\r\n *   () => console.log('the end'),\r\n * );\r\n * // result:\r\n * // 'next: 10'\r\n * // 'next: 20'\r\n * // 'next: 30'\r\n *\r\n * ```\r\n *\r\n * Emit the array `[1,2,3]`\r\n *\r\n * ```ts\r\n * import { of } from 'rxjs';\r\n *\r\n * of([1,2,3])\r\n * .subscribe(\r\n *   next => console.log('next:', next),\r\n *   err => console.log('error:', err),\r\n *   () => console.log('the end'),\r\n * );\r\n * // result:\r\n * // 'next: [1,2,3]'\r\n * ```\r\n *\r\n * @see {@link from}\r\n * @see {@link range}\r\n *\r\n * @param {...T} values A comma separated list of arguments you want to be emitted\r\n * @return {Observable} An Observable that emits the arguments\r\n * described above and then completes.\r\n * @method of\r\n * @owner Observable\r\n */\r\n\r\nexport function of<T>(...args: Array<T | SchedulerLike>): Observable<T> {\r\n  let scheduler = args[args.length - 1] as SchedulerLike;\r\n  if (isScheduler(scheduler)) {\r\n    args.pop();\r\n    return scheduleArray(args as T[], scheduler);\r\n  } else {\r\n    return fromArray(args as T[]);\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}