{"ast":null,"code":"/** PURE_IMPORTS_START _Observable,_from,_empty PURE_IMPORTS_END */\nimport { Observable } from '../Observable';\nimport { from } from './from';\nimport { empty } from './empty';\nexport function defer(observableFactory) {\n  return new Observable(function (subscriber) {\n    var input;\n\n    try {\n      input = observableFactory();\n    } catch (err) {\n      subscriber.error(err);\n      return undefined;\n    }\n\n    var source = input ? from(input) : empty();\n    return source.subscribe(subscriber);\n  });\n}","map":{"version":3,"mappings":"AAAA;AAEA,SAASA,UAAT,QAAqB,eAArB;AACA,SAASC,IAAT,QAAgB,QAAhB;AAmDA,SAAMC,KAAN,QAA6D,SAA7D;OACE,SAAWC,KAAX,CAAWC,iBAAX,EAA0C;SACxC,IAAIJ,UAAJ,CAAoB;AACpB,QAAIK,KAAJ;;QACE;AACDA;AAAC,aACAC;AACAC,gBAAO,MAAP,CAAiBD,GAAjB;AACD;AACD;;AACA,cAAO,GAAMD,KAAC,OAAU,OAAV,GAAqBH,KAAC,EAApC;AACC;AACJ,GAVG","names":["Observable","from","empty","defer","observableFactory","input","err","subscriber"],"sources":["D:\\Documents\\EMA\\Mines A3\\NoSQL\\ReseauAchats\\reseau_achats\\node_modules\\rxjs\\src\\internal\\observable\\defer.ts"],"sourcesContent":["import { Observable } from '../Observable';\r\nimport { SubscribableOrPromise, ObservedValueOf, ObservableInput } from '../types';\r\nimport { from } from './from'; // lol\r\nimport { empty } from './empty';\r\n\r\n/**\r\n * Creates an Observable that, on subscribe, calls an Observable factory to\r\n * make an Observable for each new Observer.\r\n *\r\n * <span class=\"informal\">Creates the Observable lazily, that is, only when it\r\n * is subscribed.\r\n * </span>\r\n *\r\n * ![](defer.png)\r\n *\r\n * `defer` allows you to create the Observable only when the Observer\r\n * subscribes, and create a fresh Observable for each Observer. It waits until\r\n * an Observer subscribes to it, and then it generates an Observable,\r\n * typically with an Observable factory function. It does this afresh for each\r\n * subscriber, so although each subscriber may think it is subscribing to the\r\n * same Observable, in fact each subscriber gets its own individual\r\n * Observable.\r\n *\r\n * ## Example\r\n * ### Subscribe to either an Observable of clicks or an Observable of interval, at random\r\n * ```ts\r\n * import { defer, fromEvent, interval } from 'rxjs';\r\n *\r\n * const clicksOrInterval = defer(function () {\r\n *   return Math.random() > 0.5\r\n *     ? fromEvent(document, 'click')\r\n *     : interval(1000);\r\n * });\r\n * clicksOrInterval.subscribe(x => console.log(x));\r\n *\r\n * // Results in the following behavior:\r\n * // If the result of Math.random() is greater than 0.5 it will listen\r\n * // for clicks anywhere on the \"document\"; when document is clicked it\r\n * // will log a MouseEvent object to the console. If the result is less\r\n * // than 0.5 it will emit ascending numbers, one every second(1000ms).\r\n * ```\r\n *\r\n * @see {@link Observable}\r\n *\r\n * @param {function(): SubscribableOrPromise} observableFactory The Observable\r\n * factory function to invoke for each Observer that subscribes to the output\r\n * Observable. May also return a Promise, which will be converted on the fly\r\n * to an Observable.\r\n * @return {Observable} An Observable whose Observers' subscriptions trigger\r\n * an invocation of the given Observable factory function.\r\n * @static true\r\n * @name defer\r\n * @owner Observable\r\n */\r\nexport function defer<R extends ObservableInput<any> | void>(observableFactory: () => R): Observable<ObservedValueOf<R>> {\r\n  return new Observable<ObservedValueOf<R>>(subscriber => {\r\n    let input: R | void;\r\n    try {\r\n      input = observableFactory();\r\n    } catch (err) {\r\n      subscriber.error(err);\r\n      return undefined;\r\n    }\r\n    const source = input ? from(input as ObservableInput<ObservedValueOf<R>>) : empty();\r\n    return source.subscribe(subscriber);\r\n  });\r\n}\r\n"]},"metadata":{},"sourceType":"module"}