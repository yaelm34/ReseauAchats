{"ast":null,"code":"/** PURE_IMPORTS_START tslib,_Subscriber,_Subscription,_Observable,_Subject PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nexport function groupBy(keySelector, elementSelector, durationSelector, subjectSelector) {\n  return function (source) {\n    return source.lift(new GroupByOperator(keySelector, elementSelector, durationSelector, subjectSelector));\n  };\n}\n\nvar GroupByOperator = /*@__PURE__*/function () {\n  function GroupByOperator(keySelector, elementSelector, durationSelector, subjectSelector) {\n    this.keySelector = keySelector;\n    this.elementSelector = elementSelector;\n    this.durationSelector = durationSelector;\n    this.subjectSelector = subjectSelector;\n  }\n\n  GroupByOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new GroupBySubscriber(subscriber, this.keySelector, this.elementSelector, this.durationSelector, this.subjectSelector));\n  };\n\n  return GroupByOperator;\n}();\n\nvar GroupBySubscriber = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(GroupBySubscriber, _super);\n\n  function GroupBySubscriber(destination, keySelector, elementSelector, durationSelector, subjectSelector) {\n    var _this = _super.call(this, destination) || this;\n\n    _this.keySelector = keySelector;\n    _this.elementSelector = elementSelector;\n    _this.durationSelector = durationSelector;\n    _this.subjectSelector = subjectSelector;\n    _this.groups = null;\n    _this.attemptedToUnsubscribe = false;\n    _this.count = 0;\n    return _this;\n  }\n\n  GroupBySubscriber.prototype._next = function (value) {\n    var key;\n\n    try {\n      key = this.keySelector(value);\n    } catch (err) {\n      this.error(err);\n      return;\n    }\n\n    this._group(value, key);\n  };\n\n  GroupBySubscriber.prototype._group = function (value, key) {\n    var groups = this.groups;\n\n    if (!groups) {\n      groups = this.groups = new Map();\n    }\n\n    var group = groups.get(key);\n    var element;\n\n    if (this.elementSelector) {\n      try {\n        element = this.elementSelector(value);\n      } catch (err) {\n        this.error(err);\n      }\n    } else {\n      element = value;\n    }\n\n    if (!group) {\n      group = this.subjectSelector ? this.subjectSelector() : new Subject();\n      groups.set(key, group);\n      var groupedObservable = new GroupedObservable(key, group, this);\n      this.destination.next(groupedObservable);\n\n      if (this.durationSelector) {\n        var duration = void 0;\n\n        try {\n          duration = this.durationSelector(new GroupedObservable(key, group));\n        } catch (err) {\n          this.error(err);\n          return;\n        }\n\n        this.add(duration.subscribe(new GroupDurationSubscriber(key, group, this)));\n      }\n    }\n\n    if (!group.closed) {\n      group.next(element);\n    }\n  };\n\n  GroupBySubscriber.prototype._error = function (err) {\n    var groups = this.groups;\n\n    if (groups) {\n      groups.forEach(function (group, key) {\n        group.error(err);\n      });\n      groups.clear();\n    }\n\n    this.destination.error(err);\n  };\n\n  GroupBySubscriber.prototype._complete = function () {\n    var groups = this.groups;\n\n    if (groups) {\n      groups.forEach(function (group, key) {\n        group.complete();\n      });\n      groups.clear();\n    }\n\n    this.destination.complete();\n  };\n\n  GroupBySubscriber.prototype.removeGroup = function (key) {\n    this.groups.delete(key);\n  };\n\n  GroupBySubscriber.prototype.unsubscribe = function () {\n    if (!this.closed) {\n      this.attemptedToUnsubscribe = true;\n\n      if (this.count === 0) {\n        _super.prototype.unsubscribe.call(this);\n      }\n    }\n  };\n\n  return GroupBySubscriber;\n}(Subscriber);\n\nvar GroupDurationSubscriber = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(GroupDurationSubscriber, _super);\n\n  function GroupDurationSubscriber(key, group, parent) {\n    var _this = _super.call(this, group) || this;\n\n    _this.key = key;\n    _this.group = group;\n    _this.parent = parent;\n    return _this;\n  }\n\n  GroupDurationSubscriber.prototype._next = function (value) {\n    this.complete();\n  };\n\n  GroupDurationSubscriber.prototype._unsubscribe = function () {\n    var _a = this,\n        parent = _a.parent,\n        key = _a.key;\n\n    this.key = this.parent = null;\n\n    if (parent) {\n      parent.removeGroup(key);\n    }\n  };\n\n  return GroupDurationSubscriber;\n}(Subscriber);\n\nvar GroupedObservable = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(GroupedObservable, _super);\n\n  function GroupedObservable(key, groupSubject, refCountSubscription) {\n    var _this = _super.call(this) || this;\n\n    _this.key = key;\n    _this.groupSubject = groupSubject;\n    _this.refCountSubscription = refCountSubscription;\n    return _this;\n  }\n\n  GroupedObservable.prototype._subscribe = function (subscriber) {\n    var subscription = new Subscription();\n\n    var _a = this,\n        refCountSubscription = _a.refCountSubscription,\n        groupSubject = _a.groupSubject;\n\n    if (refCountSubscription && !refCountSubscription.closed) {\n      subscription.add(new InnerRefCountSubscription(refCountSubscription));\n    }\n\n    subscription.add(groupSubject.subscribe(subscriber));\n    return subscription;\n  };\n\n  return GroupedObservable;\n}(Observable);\n\nexport { GroupedObservable };\n\nvar InnerRefCountSubscription = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(InnerRefCountSubscription, _super);\n\n  function InnerRefCountSubscription(parent) {\n    var _this = _super.call(this) || this;\n\n    _this.parent = parent;\n    parent.count++;\n    return _this;\n  }\n\n  InnerRefCountSubscription.prototype.unsubscribe = function () {\n    var parent = this.parent;\n\n    if (!parent.closed && !this.closed) {\n      _super.prototype.unsubscribe.call(this);\n\n      parent.count -= 1;\n\n      if (parent.count === 0 && parent.attemptedToUnsubscribe) {\n        parent.unsubscribe();\n      }\n    }\n  };\n\n  return InnerRefCountSubscription;\n}(Subscription);","map":{"version":3,"mappings":"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","names":["tslib_1","Subscriber","Subscription","Observable","Subject","groupBy","keySelector","elementSelector","durationSelector","subjectSelector","source","GroupByOperator","call","GroupBySubscriber","_super","destination","_this","key","err","_group","groups","group","element","groupedObservable","next","duration","_error","_complete","removeGroup","unsubscribe","closed","attemptedToUnsubscribe","GroupDurationSubscriber","parent","_a","GroupedObservable","refCountSubscription","_subscribe","subscriber","groupSubject","subscription","InnerRefCountSubscription","prototype","count"],"sources":["D:\\Documents\\EMA\\Mines A3\\NoSQL\\ReseauAchats\\reseau_achats\\node_modules\\rxjs\\src\\internal\\operators\\groupBy.ts"],"sourcesContent":["import { Subscriber } from '../Subscriber';\r\nimport { Subscription } from '../Subscription';\r\nimport { Observable } from '../Observable';\r\nimport { Operator } from '../Operator';\r\nimport { Subject } from '../Subject';\r\nimport { OperatorFunction } from '../types';\r\n\r\n/* tslint:disable:max-line-length */\r\nexport function groupBy<T, K>(keySelector: (value: T) => K): OperatorFunction<T, GroupedObservable<K, T>>;\r\nexport function groupBy<T, K>(keySelector: (value: T) => K, elementSelector: void, durationSelector: (grouped: GroupedObservable<K, T>) => Observable<any>): OperatorFunction<T, GroupedObservable<K, T>>;\r\nexport function groupBy<T, K, R>(keySelector: (value: T) => K, elementSelector?: (value: T) => R, durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>): OperatorFunction<T, GroupedObservable<K, R>>;\r\nexport function groupBy<T, K, R>(keySelector: (value: T) => K, elementSelector?: (value: T) => R, durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>, subjectSelector?: () => Subject<R>): OperatorFunction<T, GroupedObservable<K, R>>;\r\n/* tslint:enable:max-line-length */\r\n\r\n/**\r\n * Groups the items emitted by an Observable according to a specified criterion,\r\n * and emits these grouped items as `GroupedObservables`, one\r\n * {@link GroupedObservable} per group.\r\n *\r\n * ![](groupBy.png)\r\n *\r\n * When the Observable emits an item, a key is computed for this item with the keySelector function.\r\n *\r\n * If a {@link GroupedObservable} for this key exists, this {@link GroupedObservable} emits. Elsewhere, a new\r\n * {@link GroupedObservable} for this key is created and emits.\r\n *\r\n * A {@link GroupedObservable} represents values belonging to the same group represented by a common key. The common\r\n * key is available as the key field of a {@link GroupedObservable} instance.\r\n *\r\n * The elements emitted by {@link GroupedObservable}s are by default the items emitted by the Observable, or elements\r\n * returned by the elementSelector function.\r\n *\r\n * ## Examples\r\n *\r\n * ### Group objects by id and return as array\r\n *\r\n * ```ts\r\n * import { of } from 'rxjs';\r\n * import { mergeMap, groupBy, reduce } from 'rxjs/operators';\r\n *\r\n * of(\r\n *   {id: 1, name: 'JavaScript'},\r\n *   {id: 2, name: 'Parcel'},\r\n *   {id: 2, name: 'webpack'},\r\n *   {id: 1, name: 'TypeScript'},\r\n *   {id: 3, name: 'TSLint'}\r\n * ).pipe(\r\n *   groupBy(p => p.id),\r\n *   mergeMap((group$) => group$.pipe(reduce((acc, cur) => [...acc, cur], []))),\r\n * )\r\n * .subscribe(p => console.log(p));\r\n *\r\n * // displays:\r\n * // [ { id: 1, name: 'JavaScript'},\r\n * //   { id: 1, name: 'TypeScript'} ]\r\n * //\r\n * // [ { id: 2, name: 'Parcel'},\r\n * //   { id: 2, name: 'webpack'} ]\r\n * //\r\n * // [ { id: 3, name: 'TSLint'} ]\r\n * ```\r\n *\r\n * ### Pivot data on the id field\r\n *\r\n * ```ts\r\n * import { of } from 'rxjs';\r\n * import { groupBy, map, mergeMap, reduce } from 'rxjs/operators';\r\n *\r\n * of(\r\n *   { id: 1, name: 'JavaScript' },\r\n *   { id: 2, name: 'Parcel' },\r\n *   { id: 2, name: 'webpack' },\r\n *   { id: 1, name: 'TypeScript' },\r\n *   { id: 3, name: 'TSLint' }\r\n * )\r\n *   .pipe(\r\n *     groupBy(p => p.id, p => p.name),\r\n *     mergeMap(group$ =>\r\n *       group$.pipe(reduce((acc, cur) => [...acc, cur], [`${group$.key}`]))\r\n *     ),\r\n *     map(arr => ({ id: parseInt(arr[0], 10), values: arr.slice(1) }))\r\n *  )\r\n *  .subscribe(p => console.log(p));\r\n *\r\n * // displays:\r\n * // { id: 1, values: [ 'JavaScript', 'TypeScript' ] }\r\n * // { id: 2, values: [ 'Parcel', 'webpack' ] }\r\n * // { id: 3, values: [ 'TSLint' ] }\r\n * ```\r\n *\r\n * @param {function(value: T): K} keySelector A function that extracts the key\r\n * for each item.\r\n * @param {function(value: T): R} [elementSelector] A function that extracts the\r\n * return element for each item.\r\n * @param {function(grouped: GroupedObservable<K,R>): Observable<any>} [durationSelector]\r\n * A function that returns an Observable to determine how long each group should\r\n * exist.\r\n * @return {Observable<GroupedObservable<K,R>>} An Observable that emits\r\n * GroupedObservables, each of which corresponds to a unique key value and each\r\n * of which emits those items from the source Observable that share that key\r\n * value.\r\n * @method groupBy\r\n * @owner Observable\r\n */\r\nexport function groupBy<T, K, R>(keySelector: (value: T) => K,\r\n                                 elementSelector?: ((value: T) => R) | void,\r\n                                 durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>,\r\n                                 subjectSelector?: () => Subject<R>): OperatorFunction<T, GroupedObservable<K, R>> {\r\n  return (source: Observable<T>) =>\r\n    source.lift(new GroupByOperator(keySelector, elementSelector, durationSelector, subjectSelector));\r\n}\r\n\r\nexport interface RefCountSubscription {\r\n  count: number;\r\n  unsubscribe: () => void;\r\n  closed: boolean;\r\n  attemptedToUnsubscribe: boolean;\r\n}\r\n\r\nclass GroupByOperator<T, K, R> implements Operator<T, GroupedObservable<K, R>> {\r\n  constructor(private keySelector: (value: T) => K,\r\n              private elementSelector?: ((value: T) => R) | void,\r\n              private durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>,\r\n              private subjectSelector?: () => Subject<R>) {\r\n  }\r\n\r\n  call(subscriber: Subscriber<GroupedObservable<K, R>>, source: any): any {\r\n    return source.subscribe(new GroupBySubscriber(\r\n      subscriber, this.keySelector, this.elementSelector, this.durationSelector, this.subjectSelector\r\n    ));\r\n  }\r\n}\r\n\r\n/**\r\n * We need this JSDoc comment for affecting ESDoc.\r\n * @ignore\r\n * @extends {Ignored}\r\n */\r\nclass GroupBySubscriber<T, K, R> extends Subscriber<T> implements RefCountSubscription {\r\n  private groups: Map<K, Subject<T | R>> = null;\r\n  public attemptedToUnsubscribe: boolean = false;\r\n  public count: number = 0;\r\n\r\n  constructor(destination: Subscriber<GroupedObservable<K, R>>,\r\n              private keySelector: (value: T) => K,\r\n              private elementSelector?: ((value: T) => R) | void,\r\n              private durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>,\r\n              private subjectSelector?: () => Subject<R>) {\r\n    super(destination);\r\n  }\r\n\r\n  protected _next(value: T): void {\r\n    let key: K;\r\n    try {\r\n      key = this.keySelector(value);\r\n    } catch (err) {\r\n      this.error(err);\r\n      return;\r\n    }\r\n\r\n    this._group(value, key);\r\n  }\r\n\r\n  private _group(value: T, key: K) {\r\n    let groups = this.groups;\r\n\r\n    if (!groups) {\r\n      groups = this.groups = new Map<K, Subject<T | R>>();\r\n    }\r\n\r\n    let group = groups.get(key);\r\n\r\n    let element: R;\r\n    if (this.elementSelector) {\r\n      try {\r\n        element = this.elementSelector(value);\r\n      } catch (err) {\r\n        this.error(err);\r\n      }\r\n    } else {\r\n      element = <any>value;\r\n    }\r\n\r\n    if (!group) {\r\n      group = (this.subjectSelector ? this.subjectSelector() : new Subject<R>()) as Subject<T | R>;\r\n      groups.set(key, group);\r\n      const groupedObservable = new GroupedObservable(key, group, this);\r\n      this.destination.next(groupedObservable);\r\n      if (this.durationSelector) {\r\n        let duration: any;\r\n        try {\r\n          duration = this.durationSelector(new GroupedObservable<K, R>(key, <Subject<R>>group));\r\n        } catch (err) {\r\n          this.error(err);\r\n          return;\r\n        }\r\n        this.add(duration.subscribe(new GroupDurationSubscriber(key, group, this)));\r\n      }\r\n    }\r\n\r\n    if (!group.closed) {\r\n      group.next(element);\r\n    }\r\n  }\r\n\r\n  protected _error(err: any): void {\r\n    const groups = this.groups;\r\n    if (groups) {\r\n      groups.forEach((group, key) => {\r\n        group.error(err);\r\n      });\r\n\r\n      groups.clear();\r\n    }\r\n    this.destination.error(err);\r\n  }\r\n\r\n  protected _complete(): void {\r\n    const groups = this.groups;\r\n    if (groups) {\r\n      groups.forEach((group, key) => {\r\n        group.complete();\r\n      });\r\n\r\n      groups.clear();\r\n    }\r\n    this.destination.complete();\r\n  }\r\n\r\n  removeGroup(key: K): void {\r\n    this.groups.delete(key);\r\n  }\r\n\r\n  unsubscribe() {\r\n    if (!this.closed) {\r\n      this.attemptedToUnsubscribe = true;\r\n      if (this.count === 0) {\r\n        super.unsubscribe();\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * We need this JSDoc comment for affecting ESDoc.\r\n * @ignore\r\n * @extends {Ignored}\r\n */\r\nclass GroupDurationSubscriber<K, T> extends Subscriber<T> {\r\n  constructor(private key: K,\r\n              private group: Subject<T>,\r\n              private parent: GroupBySubscriber<any, K, T | any>) {\r\n    super(group);\r\n  }\r\n\r\n  protected _next(value: T): void {\r\n    this.complete();\r\n  }\r\n\r\n  /** @deprecated This is an internal implementation detail, do not use. */\r\n  _unsubscribe() {\r\n    const { parent, key } = this;\r\n    this.key = this.parent = null;\r\n    if (parent) {\r\n      parent.removeGroup(key);\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * An Observable representing values belonging to the same group represented by\r\n * a common key. The values emitted by a GroupedObservable come from the source\r\n * Observable. The common key is available as the field `key` on a\r\n * GroupedObservable instance.\r\n *\r\n * @class GroupedObservable<K, T>\r\n */\r\nexport class GroupedObservable<K, T> extends Observable<T> {\r\n  /** @deprecated Do not construct this type. Internal use only */\r\n  constructor(public key: K,\r\n              private groupSubject: Subject<T>,\r\n              private refCountSubscription?: RefCountSubscription) {\r\n    super();\r\n  }\r\n\r\n  /** @deprecated This is an internal implementation detail, do not use. */\r\n  _subscribe(subscriber: Subscriber<T>) {\r\n    const subscription = new Subscription();\r\n    const { refCountSubscription, groupSubject } = this;\r\n    if (refCountSubscription && !refCountSubscription.closed) {\r\n      subscription.add(new InnerRefCountSubscription(refCountSubscription));\r\n    }\r\n    subscription.add(groupSubject.subscribe(subscriber));\r\n    return subscription;\r\n  }\r\n}\r\n\r\n/**\r\n * We need this JSDoc comment for affecting ESDoc.\r\n * @ignore\r\n * @extends {Ignored}\r\n */\r\nclass InnerRefCountSubscription extends Subscription {\r\n  constructor(private parent: RefCountSubscription) {\r\n    super();\r\n    parent.count++;\r\n  }\r\n\r\n  unsubscribe() {\r\n    const parent = this.parent;\r\n    if (!parent.closed && !this.closed) {\r\n      super.unsubscribe();\r\n      parent.count -= 1;\r\n      if (parent.count === 0 && parent.attemptedToUnsubscribe) {\r\n        parent.unsubscribe();\r\n      }\r\n    }\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}