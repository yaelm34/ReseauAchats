{"ast":null,"code":"/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nexport function dematerialize() {\n  return function dematerializeOperatorFunction(source) {\n    return source.lift(new DeMaterializeOperator());\n  };\n}\n\nvar DeMaterializeOperator = /*@__PURE__*/function () {\n  function DeMaterializeOperator() {}\n\n  DeMaterializeOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new DeMaterializeSubscriber(subscriber));\n  };\n\n  return DeMaterializeOperator;\n}();\n\nvar DeMaterializeSubscriber = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(DeMaterializeSubscriber, _super);\n\n  function DeMaterializeSubscriber(destination) {\n    return _super.call(this, destination) || this;\n  }\n\n  DeMaterializeSubscriber.prototype._next = function (value) {\n    value.observe(this.destination);\n  };\n\n  return DeMaterializeSubscriber;\n}(Subscriber);","map":{"version":3,"mappings":";AAEA,OAAO,KAAEA,OAAT,MAAqB,OAArB;AAkDA,SAAMC,UAAN,QAAgB,eAAhB;OACE,SAAOC,aAAP,GAAgB;SACd,SAAOC,6BAAP,CAAuBC,MAAvB,EAAgD;AAChD;AACH;AAED;;IAAAC;AAIA,WAACA,qBAAD,GAAC,CAHC;;uBACgB,WAAcC,6BAAwBF,MAAxB,EAAqC;AAClE;AACH;;AAJA,SAICC,qBAJD;AAWA,CAXA;;IAWmEE,iDAAaC,MAAb,EAAa;AAC9ER,6CAAYQ,MAAZ;;mCACQC,aAAY;AACnB;AAES;;yBACW,WAAWC,QAAE;AACjCC;AACH;;AARmE;CAAA","names":["tslib_1","Subscriber","dematerialize","dematerializeOperatorFunction","source","DeMaterializeOperator","call","DeMaterializeSubscriber","_super","destination","_next","value"],"sources":["D:\\Documents\\EMA\\Mines A3\\NoSQL\\ReseauAchats\\reseau_achats\\node_modules\\rxjs\\src\\internal\\operators\\dematerialize.ts"],"sourcesContent":["import { Operator } from '../Operator';\r\nimport { Observable } from '../Observable';\r\nimport { Subscriber } from '../Subscriber';\r\nimport { Notification } from '../Notification';\r\nimport { OperatorFunction } from '../types';\r\n\r\n/**\r\n * Converts an Observable of {@link Notification} objects into the emissions\r\n * that they represent.\r\n *\r\n * <span class=\"informal\">Unwraps {@link Notification} objects as actual `next`,\r\n * `error` and `complete` emissions. The opposite of {@link materialize}.</span>\r\n *\r\n * ![](dematerialize.png)\r\n *\r\n * `dematerialize` is assumed to operate an Observable that only emits\r\n * {@link Notification} objects as `next` emissions, and does not emit any\r\n * `error`. Such Observable is the output of a `materialize` operation. Those\r\n * notifications are then unwrapped using the metadata they contain, and emitted\r\n * as `next`, `error`, and `complete` on the output Observable.\r\n *\r\n * Use this operator in conjunction with {@link materialize}.\r\n *\r\n * ## Example\r\n * Convert an Observable of Notifications to an actual Observable\r\n * ```ts\r\n * import { of, Notification } from 'rxjs';\r\n * import { dematerialize } from 'rxjs/operators';\r\n *\r\n * const notifA = new Notification('N', 'A');\r\n * const notifB = new Notification('N', 'B');\r\n * const notifE = new Notification('E', undefined,\r\n *   new TypeError('x.toUpperCase is not a function')\r\n * );\r\n * const materialized = of(notifA, notifB, notifE);\r\n * const upperCase = materialized.pipe(dematerialize());\r\n * upperCase.subscribe(x => console.log(x), e => console.error(e));\r\n *\r\n * // Results in:\r\n * // A\r\n * // B\r\n * // TypeError: x.toUpperCase is not a function\r\n * ```\r\n *\r\n * @see {@link Notification}\r\n * @see {@link materialize}\r\n *\r\n * @return {Observable} An Observable that emits items and notifications\r\n * embedded in Notification objects emitted by the source Observable.\r\n * @method dematerialize\r\n * @owner Observable\r\n */\r\nexport function dematerialize<T>(): OperatorFunction<Notification<T>, T> {\r\n  return function dematerializeOperatorFunction(source: Observable<Notification<T>>) {\r\n    return source.lift(new DeMaterializeOperator());\r\n  };\r\n}\r\n\r\nclass DeMaterializeOperator<T extends Notification<any>, R> implements Operator<T, R> {\r\n  call(subscriber: Subscriber<any>, source: any): any {\r\n    return source.subscribe(new DeMaterializeSubscriber(subscriber));\r\n  }\r\n}\r\n\r\n/**\r\n * We need this JSDoc comment for affecting ESDoc.\r\n * @ignore\r\n * @extends {Ignored}\r\n */\r\nclass DeMaterializeSubscriber<T extends Notification<any>> extends Subscriber<T> {\r\n  constructor(destination: Subscriber<any>) {\r\n    super(destination);\r\n  }\r\n\r\n  protected _next(value: T) {\r\n    value.observe(this.destination);\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}