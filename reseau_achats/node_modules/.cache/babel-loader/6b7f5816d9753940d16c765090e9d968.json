{"ast":null,"code":"/** PURE_IMPORTS_START tslib,_Subscription,_util_subscribeToResult,_OuterSubscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscription } from '../Subscription';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nexport function bufferToggle(openings, closingSelector) {\n  return function bufferToggleOperatorFunction(source) {\n    return source.lift(new BufferToggleOperator(openings, closingSelector));\n  };\n}\n\nvar BufferToggleOperator = /*@__PURE__*/function () {\n  function BufferToggleOperator(openings, closingSelector) {\n    this.openings = openings;\n    this.closingSelector = closingSelector;\n  }\n\n  BufferToggleOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new BufferToggleSubscriber(subscriber, this.openings, this.closingSelector));\n  };\n\n  return BufferToggleOperator;\n}();\n\nvar BufferToggleSubscriber = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(BufferToggleSubscriber, _super);\n\n  function BufferToggleSubscriber(destination, openings, closingSelector) {\n    var _this = _super.call(this, destination) || this;\n\n    _this.closingSelector = closingSelector;\n    _this.contexts = [];\n\n    _this.add(subscribeToResult(_this, openings));\n\n    return _this;\n  }\n\n  BufferToggleSubscriber.prototype._next = function (value) {\n    var contexts = this.contexts;\n    var len = contexts.length;\n\n    for (var i = 0; i < len; i++) {\n      contexts[i].buffer.push(value);\n    }\n  };\n\n  BufferToggleSubscriber.prototype._error = function (err) {\n    var contexts = this.contexts;\n\n    while (contexts.length > 0) {\n      var context_1 = contexts.shift();\n      context_1.subscription.unsubscribe();\n      context_1.buffer = null;\n      context_1.subscription = null;\n    }\n\n    this.contexts = null;\n\n    _super.prototype._error.call(this, err);\n  };\n\n  BufferToggleSubscriber.prototype._complete = function () {\n    var contexts = this.contexts;\n\n    while (contexts.length > 0) {\n      var context_2 = contexts.shift();\n      this.destination.next(context_2.buffer);\n      context_2.subscription.unsubscribe();\n      context_2.buffer = null;\n      context_2.subscription = null;\n    }\n\n    this.contexts = null;\n\n    _super.prototype._complete.call(this);\n  };\n\n  BufferToggleSubscriber.prototype.notifyNext = function (outerValue, innerValue) {\n    outerValue ? this.closeBuffer(outerValue) : this.openBuffer(innerValue);\n  };\n\n  BufferToggleSubscriber.prototype.notifyComplete = function (innerSub) {\n    this.closeBuffer(innerSub.context);\n  };\n\n  BufferToggleSubscriber.prototype.openBuffer = function (value) {\n    try {\n      var closingSelector = this.closingSelector;\n      var closingNotifier = closingSelector.call(this, value);\n\n      if (closingNotifier) {\n        this.trySubscribe(closingNotifier);\n      }\n    } catch (err) {\n      this._error(err);\n    }\n  };\n\n  BufferToggleSubscriber.prototype.closeBuffer = function (context) {\n    var contexts = this.contexts;\n\n    if (contexts && context) {\n      var buffer = context.buffer,\n          subscription = context.subscription;\n      this.destination.next(buffer);\n      contexts.splice(contexts.indexOf(context), 1);\n      this.remove(subscription);\n      subscription.unsubscribe();\n    }\n  };\n\n  BufferToggleSubscriber.prototype.trySubscribe = function (closingNotifier) {\n    var contexts = this.contexts;\n    var buffer = [];\n    var subscription = new Subscription();\n    var context = {\n      buffer: buffer,\n      subscription: subscription\n    };\n    contexts.push(context);\n    var innerSubscription = subscribeToResult(this, closingNotifier, context);\n\n    if (!innerSubscription || innerSubscription.closed) {\n      this.closeBuffer(context);\n    } else {\n      innerSubscription.context = context;\n      this.add(innerSubscription);\n      subscription.add(innerSubscription);\n    }\n  };\n\n  return BufferToggleSubscriber;\n}(OuterSubscriber);","map":{"version":3,"mappings":";AAGA,OAAO,KAAEA,OAAT,MAAuB,OAAvB;AACA,SAASC,YAAT,QAA4B,iBAA5B;AACA,SAASC,iBAAT,QAAgC,2BAAhC;AAkDA,SAAMC,eAAN,QACE,oBADF;OAIE,SAAOC,YAAP,CAAgBC,QAAhB,EAAgBC,eAAhB,EAAkE;SAChE,SAAOC,4BAAP,CAAuBC,MAAvB,EAAkD;AAClD;AACH;AAED;;IAEEC,oCAAsD,YAClC;WADAA,qBAAkCJ;AAClC;AACnB;AAED;;sBACgB,WAAUK,OAAI,sBAAuBF,MAAvB,EAAmC;AAChE;AACH;;AATA,SASCC,oBATD;AAqBA,CAnBwD;;IAmBbE,gDAAqBC,MAArB,EAAqB;AAG9DZ,4CAAYY,MAAZ;;WAAAD,uBAGEE,aAAiBR,UAElBC;AAHmB,kDAAgE,IAAhE;;AAJZQ,4BAAuCR,eAAvC;AAMNQ,SAAI,CAACC,QAAL,GAAS,EAAT;;;;AACD;AAES;;wBACS,CAAIC,UAAUC;AAC/B,QAAMF,QAAM,QAASA,QAArB;AACA,WAAK,GAAKA,QAAO,OAAjB;;SACE,QAAS,GAAGG,SAAOA,KAAK;AACzBH;AACF;AAES;;wBACS,CAAIC,UAAUG;AAC/B,gBAAO,GAAQ,KAACJ,QAAhB;;WACEA,QAAM,OAAN,GAAgB,GAAQ;AACxB,mBAAQ,WAAa,MAAb,EAAR;AACAK,eAAO,CAACC,YAAR,CAAsBC,WAAtB;AACAF,eAAO,CAACG,MAAR,GAAQ,IAAR;AACDH;AACD;;AACA;;AACDR;AAES;;wBACS,CAAII,UAAUQ;AAC/B,gBAAO,GAAQ,KAACT,QAAhB;;WACEA,QAAM,OAAN,GAAgB,GAAQ;AACxB,UAAIU,SAAC,GAAWV,QAAO,MAAP,EAAhB;AACA,uBAAQW,IAAR,CAAoBD,SAAC,OAArB;AACAA,eAAO,CAACJ,YAAR,CAAsBC,WAAtB;AACAG,eAAO,CAACF,MAAR,GAAQ,IAAR;AACDE;AACD;;AACA;;AACDb;AAED;;wBACoB,WAAWe,aAAa,UAAOC,UAAP,EAAkBC,UAAlB,EAA8B;AACzED;AAED;;wBAC0B,WAAUE,iBAAS;AAC5C;AAEO;;wBACF;QACF;AACA,UAAMxB,eAAe,GAAG,oBAAxB;AACA,UAAIyB,eAAe,GAAEzB,iCAArB;;UACEyB,iBAAiB;AAClB;AACF;AAAC,aACAC,KAAK;AACN;AACF;AAEO;;wBACW,CAAIhB,UAAUiB;AAE/B,QAAIlB,QAAQ,QAAIA,QAAhB;;QACUA;AACR,UAAIQ,MAAC,UAAY,CAAKA,MAAtB;AAAA,UAA8BF,YAAC,uBAA/B;AACA,uBAAgBK,IAAhB,CAAgBH,MAAhB;AACAR,cAAK,OAAL,CAAYA,QAAY,CAACmB,OAAb,CAAcC,OAAd,CAAZ,EAA0B,CAA1B;AACA,kBAAYd,YAAZ;AACDA;AACF;AAEO;;wBACW,CAAIL,UAAUoB;AAE/B,QAAMrB,QAAM,GAAe,KAACA,QAA5B;AACA,QAAMQ,WAAN;AACA,QAAMF,YAAY,OAAMpB,YAAN,EAAlB;AACA,eAAS,GAAK;AAAAsB,YAAQ,EAACA,MAAT;AAASF;AAAT,KAAd;AAEAN,YAAM,KAAN,CAAMoB,OAAN;AAEA,QAAIE,iBAAC,GAAiBnC,iBAAI,OAAkB6B,eAAlB,EAA0BI,OAA1B,CAA1B;;QACE,sBAAiBE,iBAAS;AAC3B;WACE;AAEDA,uBAAS,QAAT,GAA4BF,OAA5B;AACA;AACDd;AACF;AACH;;AA9F2C;CAAA","names":["tslib_1","Subscription","subscribeToResult","OuterSubscriber","bufferToggle","openings","closingSelector","bufferToggleOperatorFunction","source","BufferToggleOperator","call","BufferToggleSubscriber","_super","destination","_this","contexts","prototype","_next","i","_error","context_1","subscription","unsubscribe","buffer","_complete","context_2","next","notifyNext","outerValue","innerValue","notifyComplete","closingNotifier","err","closeBuffer","indexOf","context","trySubscribe","innerSubscription"],"sources":["D:\\Documents\\EMA\\Mines A3\\NoSQL\\ReseauAchats\\reseau_achats\\node_modules\\rxjs\\src\\internal\\operators\\bufferToggle.ts"],"sourcesContent":["import { Operator } from '../Operator';\r\nimport { Subscriber } from '../Subscriber';\r\nimport { Observable } from '../Observable';\r\nimport { Subscription } from '../Subscription';\r\nimport { subscribeToResult } from '../util/subscribeToResult';\r\nimport { OuterSubscriber } from '../OuterSubscriber';\r\nimport { InnerSubscriber } from '../InnerSubscriber';\r\nimport { OperatorFunction, SubscribableOrPromise } from '../types';\r\n\r\n/**\r\n * Buffers the source Observable values starting from an emission from\r\n * `openings` and ending when the output of `closingSelector` emits.\r\n *\r\n * <span class=\"informal\">Collects values from the past as an array. Starts\r\n * collecting only when `opening` emits, and calls the `closingSelector`\r\n * function to get an Observable that tells when to close the buffer.</span>\r\n *\r\n * ![](bufferToggle.png)\r\n *\r\n * Buffers values from the source by opening the buffer via signals from an\r\n * Observable provided to `openings`, and closing and sending the buffers when\r\n * a Subscribable or Promise returned by the `closingSelector` function emits.\r\n *\r\n * ## Example\r\n *\r\n * Every other second, emit the click events from the next 500ms\r\n *\r\n * ```ts\r\n * import { fromEvent, interval, EMPTY } from 'rxjs';\r\n * import { bufferToggle } from 'rxjs/operators';\r\n *\r\n * const clicks = fromEvent(document, 'click');\r\n * const openings = interval(1000);\r\n * const buffered = clicks.pipe(bufferToggle(openings, i =>\r\n *   i % 2 ? interval(500) : EMPTY\r\n * ));\r\n * buffered.subscribe(x => console.log(x));\r\n * ```\r\n *\r\n * @see {@link buffer}\r\n * @see {@link bufferCount}\r\n * @see {@link bufferTime}\r\n * @see {@link bufferWhen}\r\n * @see {@link windowToggle}\r\n *\r\n * @param {SubscribableOrPromise<O>} openings A Subscribable or Promise of notifications to start new\r\n * buffers.\r\n * @param {function(value: O): SubscribableOrPromise} closingSelector A function that takes\r\n * the value emitted by the `openings` observable and returns a Subscribable or Promise,\r\n * which, when it emits, signals that the associated buffer should be emitted\r\n * and cleared.\r\n * @return {Observable<T[]>} An observable of arrays of buffered values.\r\n * @method bufferToggle\r\n * @owner Observable\r\n */\r\nexport function bufferToggle<T, O>(\r\n  openings: SubscribableOrPromise<O>,\r\n  closingSelector: (value: O) => SubscribableOrPromise<any>\r\n): OperatorFunction<T, T[]> {\r\n  return function bufferToggleOperatorFunction(source: Observable<T>) {\r\n    return source.lift(new BufferToggleOperator<T, O>(openings, closingSelector));\r\n  };\r\n}\r\n\r\nclass BufferToggleOperator<T, O> implements Operator<T, T[]> {\r\n\r\n  constructor(private openings: SubscribableOrPromise<O>,\r\n              private closingSelector: (value: O) => SubscribableOrPromise<any>) {\r\n  }\r\n\r\n  call(subscriber: Subscriber<T[]>, source: any): any {\r\n    return source.subscribe(new BufferToggleSubscriber(subscriber, this.openings, this.closingSelector));\r\n  }\r\n}\r\n\r\ninterface BufferContext<T> {\r\n  buffer: T[];\r\n  subscription: Subscription;\r\n}\r\n\r\n/**\r\n * We need this JSDoc comment for affecting ESDoc.\r\n * @ignore\r\n * @extends {Ignored}\r\n */\r\nclass BufferToggleSubscriber<T, O> extends OuterSubscriber<T, O> {\r\n  private contexts: Array<BufferContext<T>> = [];\r\n\r\n  constructor(destination: Subscriber<T[]>,\r\n              openings: SubscribableOrPromise<O>,\r\n              private closingSelector: (value: O) => SubscribableOrPromise<any> | void) {\r\n    super(destination);\r\n    this.add(subscribeToResult(this, openings));\r\n  }\r\n\r\n  protected _next(value: T): void {\r\n    const contexts = this.contexts;\r\n    const len = contexts.length;\r\n    for (let i = 0; i < len; i++) {\r\n      contexts[i].buffer.push(value);\r\n    }\r\n  }\r\n\r\n  protected _error(err: any): void {\r\n    const contexts = this.contexts;\r\n    while (contexts.length > 0) {\r\n      const context = contexts.shift()!;\r\n      context.subscription.unsubscribe();\r\n      context.buffer = null!;\r\n      context.subscription = null!;\r\n    }\r\n    this.contexts = null!;\r\n    super._error(err);\r\n  }\r\n\r\n  protected _complete(): void {\r\n    const contexts = this.contexts;\r\n    while (contexts.length > 0) {\r\n      const context = contexts.shift()!;\r\n      this.destination.next!(context.buffer);\r\n      context.subscription.unsubscribe();\r\n      context.buffer = null!;\r\n      context.subscription = null!;\r\n    }\r\n    this.contexts = null!;\r\n    super._complete();\r\n  }\r\n\r\n  notifyNext(outerValue: any, innerValue: O): void {\r\n    outerValue ? this.closeBuffer(outerValue) : this.openBuffer(innerValue);\r\n  }\r\n\r\n  notifyComplete(innerSub: InnerSubscriber<T, O>): void {\r\n    this.closeBuffer((<any> innerSub).context);\r\n  }\r\n\r\n  private openBuffer(value: O): void {\r\n    try {\r\n      const closingSelector = this.closingSelector;\r\n      const closingNotifier = closingSelector.call(this, value);\r\n      if (closingNotifier) {\r\n        this.trySubscribe(closingNotifier);\r\n      }\r\n    } catch (err) {\r\n      this._error(err);\r\n    }\r\n  }\r\n\r\n  private closeBuffer(context: BufferContext<T>): void {\r\n    const contexts = this.contexts;\r\n\r\n    if (contexts && context) {\r\n      const { buffer, subscription } = context;\r\n      this.destination.next!(buffer);\r\n      contexts.splice(contexts.indexOf(context), 1);\r\n      this.remove(subscription);\r\n      subscription.unsubscribe();\r\n    }\r\n  }\r\n\r\n  private trySubscribe(closingNotifier: any): void {\r\n    const contexts = this.contexts;\r\n\r\n    const buffer: Array<T> = [];\r\n    const subscription = new Subscription();\r\n    const context = { buffer, subscription };\r\n    contexts.push(context);\r\n\r\n    const innerSubscription = subscribeToResult(this, closingNotifier, context as any);\r\n\r\n    if (!innerSubscription || innerSubscription.closed) {\r\n      this.closeBuffer(context);\r\n    } else {\r\n      (innerSubscription as any).context = context;\r\n\r\n      this.add(innerSubscription);\r\n      subscription.add(innerSubscription);\r\n    }\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}