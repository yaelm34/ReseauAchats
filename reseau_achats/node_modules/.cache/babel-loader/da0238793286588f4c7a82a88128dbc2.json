{"ast":null,"code":"/** PURE_IMPORTS_START _util_EmptyError,_filter,_take,_defaultIfEmpty,_throwIfEmpty,_util_identity PURE_IMPORTS_END */\nimport { EmptyError } from '../util/EmptyError';\nimport { filter } from './filter';\nimport { take } from './take';\nimport { defaultIfEmpty } from './defaultIfEmpty';\nimport { throwIfEmpty } from './throwIfEmpty';\nimport { identity } from '../util/identity';\nexport function first(predicate, defaultValue) {\n  var hasDefaultValue = arguments.length >= 2;\n  return function (source) {\n    return source.pipe(predicate ? filter(function (v, i) {\n      return predicate(v, i, source);\n    }) : identity, take(1), hasDefaultValue ? defaultIfEmpty(defaultValue) : throwIfEmpty(function () {\n      return new EmptyError();\n    }));\n  };\n}","map":{"version":3,"mappings":"AAGA;AAEA,SAASA,UAAT,QAAuB,oBAAvB;AACA,SAASC,MAAT,QAAqB,UAArB;AACA,SAASC,IAAT,QAAS,QAAT;AACA,SAASC,cAAT,QAA6B,kBAA7B;AACA,SAASC,YAAT,QAAyB,gBAAzB;AAuEA,SAAMC,QAAN,QACE,kBADF;OAIE,SAAMC,KAAN,CAAMC,SAAN,EAAwBC,YAAxB,EAA6C;AAC7C,qBAAQ,YAA0B,OAA1B,IAAiC,CAAzC;AAKD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","names":["EmptyError","filter","take","defaultIfEmpty","throwIfEmpty","identity","first","predicate","defaultValue"],"sources":["D:\\Documents\\EMA\\Mines A3\\NoSQL\\ReseauAchats\\reseau_achats\\node_modules\\rxjs\\src\\internal\\operators\\first.ts"],"sourcesContent":["import { Observable } from '../Observable';\r\nimport { Operator } from '../Operator';\r\nimport { Subscriber } from '../Subscriber';\r\nimport { EmptyError } from '../util/EmptyError';\r\nimport { OperatorFunction } from '../../internal/types';\r\nimport { filter } from './filter';\r\nimport { take } from './take';\r\nimport { defaultIfEmpty } from './defaultIfEmpty';\r\nimport { throwIfEmpty } from './throwIfEmpty';\r\nimport { identity } from '../util/identity';\r\n\r\n/* tslint:disable:max-line-length */\r\nexport function first<T, D = T>(\r\n  predicate?: null,\r\n  defaultValue?: D\r\n): OperatorFunction<T, T | D>;\r\nexport function first<T, S extends T>(\r\n  predicate: (value: T, index: number, source: Observable<T>) => value is S,\r\n  defaultValue?: S\r\n): OperatorFunction<T, S>;\r\nexport function first<T, D = T>(\r\n  predicate: (value: T, index: number, source: Observable<T>) => boolean,\r\n  defaultValue?: D\r\n): OperatorFunction<T, T | D>;\r\n/* tslint:enable:max-line-length */\r\n\r\n/**\r\n * Emits only the first value (or the first value that meets some condition)\r\n * emitted by the source Observable.\r\n *\r\n * <span class=\"informal\">Emits only the first value. Or emits only the first\r\n * value that passes some test.</span>\r\n *\r\n * ![](first.png)\r\n *\r\n * If called with no arguments, `first` emits the first value of the source\r\n * Observable, then completes. If called with a `predicate` function, `first`\r\n * emits the first value of the source that matches the specified condition. It\r\n * may also take a deprecated `resultSelector` function to produce the output\r\n * value from the input value, and a `defaultValue` to emit in case the source\r\n * completes before it is able to emit a valid value. Throws an error if\r\n * `defaultValue` was not provided and a matching element is not found.\r\n *\r\n * ## Examples\r\n * Emit only the first click that happens on the DOM\r\n * ```ts\r\n * import { fromEvent } from 'rxjs';\r\n * import { first } from 'rxjs/operators';\r\n *\r\n * const clicks = fromEvent(document, 'click');\r\n * const result = clicks.pipe(first());\r\n * result.subscribe(x => console.log(x));\r\n * ```\r\n *\r\n * Emits the first click that happens on a DIV\r\n * ```ts\r\n * import { fromEvent } from 'rxjs';\r\n * import { first } from 'rxjs/operators';\r\n *\r\n * const clicks = fromEvent(document, 'click');\r\n * const result = clicks.pipe(first(ev => ev.target.tagName === 'DIV'));\r\n * result.subscribe(x => console.log(x));\r\n * ```\r\n *\r\n * @see {@link filter}\r\n * @see {@link find}\r\n * @see {@link take}\r\n *\r\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\r\n * callback if the Observable completes before any `next` notification was sent.\r\n *\r\n * @param {function(value: T, index: number, source: Observable<T>): boolean} [predicate]\r\n * An optional function called with each item to test for condition matching.\r\n * @param {R} [defaultValue] The default value emitted in case no valid value\r\n * was found on the source.\r\n * @return {Observable<T|R>} An Observable of the first item that matches the\r\n * condition.\r\n * @method first\r\n * @owner Observable\r\n */\r\nexport function first<T, D>(\r\n  predicate?: ((value: T, index: number, source: Observable<T>) => boolean) | null,\r\n  defaultValue?: D\r\n): OperatorFunction<T, T | D> {\r\n  const hasDefaultValue = arguments.length >= 2;\r\n  return (source: Observable<T>) => source.pipe(\r\n    predicate ? filter((v, i) => predicate(v, i, source)) : identity,\r\n    take(1),\r\n    hasDefaultValue ? defaultIfEmpty<T | D>(defaultValue) : throwIfEmpty(() => new EmptyError()),\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}