{"ast":null,"code":"/** PURE_IMPORTS_START _reduce PURE_IMPORTS_END */\nimport { reduce } from './reduce';\n\nfunction toArrayReducer(arr, item, index) {\n  if (index === 0) {\n    return [item];\n  }\n\n  arr.push(item);\n  return arr;\n}\n\nexport function toArray() {\n  return reduce(toArrayReducer, []);\n}","map":{"version":3,"mappings":"AAAA;AAGA,SAASA,MAAT,QAAuB,UAAvB;;SACMC,eAAaC;MACfC,UAAQ,GAAK;AACd;AACD;;AACAD,WAAOE,IAAP;AACD;AAiCD;;OACE,SAAOC,OAAP,GAAc;AACf","names":["reduce","toArrayReducer","arr","index","item","toArray"],"sources":["D:\\Documents\\EMA\\Mines A3\\NoSQL\\ReseauAchats\\reseau_achats\\node_modules\\rxjs\\src\\internal\\operators\\toArray.ts"],"sourcesContent":["import { reduce } from './reduce';\r\nimport { OperatorFunction } from '../types';\r\n\r\nfunction toArrayReducer<T>(arr: T[], item: T, index: number) {\r\n  if (index === 0) {\r\n    return [item];\r\n  }\r\n  arr.push(item);\r\n  return arr;\r\n}\r\n\r\n/**\r\n * Collects all source emissions and emits them as an array when the source completes.\r\n *\r\n * <span class=\"informal\">Get all values inside an array when the source completes</span>\r\n *\r\n * ![](toArray.png)\r\n *\r\n * `toArray` will wait until the source Observable completes before emitting\r\n * the array containing all emissions. When the source Observable errors no\r\n * array will be emitted.\r\n *\r\n *  ## Example\r\n * ```ts\r\n * import { interval } from 'rxjs';\r\n * import { toArray, take } from 'rxjs/operators';\r\n *\r\n * const source = interval(1000);\r\n * const example = source.pipe(\r\n *   take(10),\r\n *   toArray()\r\n * );\r\n *\r\n * const subscribe = example.subscribe(val => console.log(val));\r\n *\r\n * // output: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\r\n *\r\n * ```\r\n* @return An array from an observable sequence.\r\n* @method toArray\r\n* @owner Observable\r\n*/\r\nexport function toArray<T>(): OperatorFunction<T, T[]> {\r\n  return reduce(toArrayReducer, [] as T[]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}