{"ast":null,"code":"/** PURE_IMPORTS_START tslib,_Subscriber,_Notification PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nimport { Notification } from '../Notification';\nexport function materialize() {\n  return function materializeOperatorFunction(source) {\n    return source.lift(new MaterializeOperator());\n  };\n}\n\nvar MaterializeOperator = /*@__PURE__*/function () {\n  function MaterializeOperator() {}\n\n  MaterializeOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new MaterializeSubscriber(subscriber));\n  };\n\n  return MaterializeOperator;\n}();\n\nvar MaterializeSubscriber = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(MaterializeSubscriber, _super);\n\n  function MaterializeSubscriber(destination) {\n    return _super.call(this, destination) || this;\n  }\n\n  MaterializeSubscriber.prototype._next = function (value) {\n    this.destination.next(Notification.createNext(value));\n  };\n\n  MaterializeSubscriber.prototype._error = function (err) {\n    var destination = this.destination;\n    destination.next(Notification.createError(err));\n    destination.complete();\n  };\n\n  MaterializeSubscriber.prototype._complete = function () {\n    var destination = this.destination;\n    destination.next(Notification.createComplete());\n    destination.complete();\n  };\n\n  return MaterializeSubscriber;\n}(Subscriber);","map":{"version":3,"mappings":";AAEA,OAAO,KAAEA,OAAT,MAAqB,OAArB;AACA,SAASC,UAAT,QAAuB,eAAvB;AAqDA,SAAMC,YAAN,QAA2B,iBAA3B;OACE,SAAOC,WAAP,GAAgB;SACd,SAAOC,2BAAP,CAAuBC,MAAvB,EAA8C;AAC9C;AACH;AAED;;IAAAC;AAIA,WAACA,mBAAD,GAAC,CAHC;;qBACgB,WAAUC,OAAI,sBAAsBF,MAAtB,EAAmC;AAChE;AACH;;AAJA,SAICC,mBAJD;AAWA,CAXA;;IAWuCE,+CAAaC,MAAb,EAAa;AAClDT,2CAAYS,MAAZ;;iCACQC,aAAY;AACnB;AAES;;uBACS,WAAKC,QAAa,UAAWC,KAAX,EAAkB;AACtD;AAES;;uBACS,CAAGC,UAAKC,SAAY;AACrC,mBAAY,GAAK,gBAAjB;AACAJ,eAAW,CAACK,IAAZ,CAAYb,YAAW,YAAX,CAAWc,GAAX,CAAZ;AACDN;AAES;;uBACS,CAAGG,UAAKI,YAAY;AACrC,mBAAY,GAAK,gBAAjB;AACAP,eAAW,CAACK,IAAZ,CAAYb,YAAW,eAAX,EAAZ;AACDQ;AACH;;AApBuC;CAAA","names":["tslib_1","Subscriber","Notification","materialize","materializeOperatorFunction","source","MaterializeOperator","call","MaterializeSubscriber","_super","destination","_next","value","prototype","_error","next","err","_complete"],"sources":["D:\\Documents\\EMA\\Mines A3\\NoSQL\\ReseauAchats\\reseau_achats\\node_modules\\rxjs\\src\\internal\\operators\\materialize.ts"],"sourcesContent":["import { Operator } from '../Operator';\r\nimport { Observable } from '../Observable';\r\nimport { Subscriber } from '../Subscriber';\r\nimport { Notification } from '../Notification';\r\nimport { OperatorFunction } from '../types';\r\n\r\n/**\r\n * Represents all of the notifications from the source Observable as `next`\r\n * emissions marked with their original types within {@link Notification}\r\n * objects.\r\n *\r\n * <span class=\"informal\">Wraps `next`, `error` and `complete` emissions in\r\n * {@link Notification} objects, emitted as `next` on the output Observable.\r\n * </span>\r\n *\r\n * ![](materialize.png)\r\n *\r\n * `materialize` returns an Observable that emits a `next` notification for each\r\n * `next`, `error`, or `complete` emission of the source Observable. When the\r\n * source Observable emits `complete`, the output Observable will emit `next` as\r\n * a Notification of type \"complete\", and then it will emit `complete` as well.\r\n * When the source Observable emits `error`, the output will emit `next` as a\r\n * Notification of type \"error\", and then `complete`.\r\n *\r\n * This operator is useful for producing metadata of the source Observable, to\r\n * be consumed as `next` emissions. Use it in conjunction with\r\n * {@link dematerialize}.\r\n *\r\n * ## Example\r\n * Convert a faulty Observable to an Observable of Notifications\r\n * ```ts\r\n * import { of } from 'rxjs';\r\n * import { materialize, map } from 'rxjs/operators';\r\n *\r\n * const letters = of('a', 'b', 13, 'd');\r\n * const upperCase = letters.pipe(map(x => x.toUpperCase()));\r\n * const materialized = upperCase.pipe(materialize());\r\n * materialized.subscribe(x => console.log(x));\r\n *\r\n * // Results in the following:\r\n * // - Notification {kind: \"N\", value: \"A\", error: undefined, hasValue: true}\r\n * // - Notification {kind: \"N\", value: \"B\", error: undefined, hasValue: true}\r\n * // - Notification {kind: \"E\", value: undefined, error: TypeError:\r\n * //   x.toUpperCase is not a function at MapSubscriber.letters.map.x\r\n * //   [as project] (http://1â€¦, hasValue: false}\r\n * ```\r\n *\r\n * @see {@link Notification}\r\n * @see {@link dematerialize}\r\n *\r\n * @return {Observable<Notification<T>>} An Observable that emits\r\n * {@link Notification} objects that wrap the original emissions from the source\r\n * Observable with metadata.\r\n * @method materialize\r\n * @owner Observable\r\n */\r\nexport function materialize<T>(): OperatorFunction<T, Notification<T>> {\r\n  return function materializeOperatorFunction(source: Observable<T>) {\r\n    return source.lift(new MaterializeOperator());\r\n  };\r\n}\r\n\r\nclass MaterializeOperator<T> implements Operator<T, Notification<T>> {\r\n  call(subscriber: Subscriber<Notification<T>>, source: any): any {\r\n    return source.subscribe(new MaterializeSubscriber(subscriber));\r\n  }\r\n}\r\n\r\n/**\r\n * We need this JSDoc comment for affecting ESDoc.\r\n * @ignore\r\n * @extends {Ignored}\r\n */\r\nclass MaterializeSubscriber<T> extends Subscriber<T> {\r\n  constructor(destination: Subscriber<Notification<T>>) {\r\n    super(destination);\r\n  }\r\n\r\n  protected _next(value: T) {\r\n    this.destination.next(Notification.createNext(value));\r\n  }\r\n\r\n  protected _error(err: any) {\r\n    const destination = this.destination;\r\n    destination.next(Notification.createError(err));\r\n    destination.complete();\r\n  }\r\n\r\n  protected _complete() {\r\n    const destination = this.destination;\r\n    destination.next(Notification.createComplete());\r\n    destination.complete();\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}