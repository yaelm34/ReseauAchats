{"ast":null,"code":"/** PURE_IMPORTS_START _Observable,_util_subscribeTo,_scheduled_scheduled PURE_IMPORTS_END */\nimport { Observable } from '../Observable';\nimport { subscribeTo } from '../util/subscribeTo';\nimport { scheduled } from '../scheduled/scheduled';\nexport function from(input, scheduler) {\n  if (!scheduler) {\n    if (input instanceof Observable) {\n      return input;\n    }\n\n    return new Observable(subscribeTo(input));\n  } else {\n    return scheduled(input, scheduler);\n  }\n}","map":{"version":3,"mappings":"AAAA;AACA,SAASA,UAAT,QAAsB,eAAtB;AAEA,SAASC,WAAT,QAA0B,qBAA1B;AAyGA,SAAMC,SAAN,QAAiD,wBAAjD;OACE,SAAKC,IAAL,CAAgBC,KAAhB,EAAgBC,SAAhB,EAAgB;MACd,YAAS;QACPD,iBAAaJ;AACd;AACD;;AACD;SACC;AACD;AACF","names":["Observable","subscribeTo","scheduled","from","input","scheduler"],"sources":["D:\\Documents\\EMA\\Mines A3\\NoSQL\\ReseauAchats\\reseau_achats\\node_modules\\rxjs\\src\\internal\\observable\\from.ts"],"sourcesContent":["import { Observable } from '../Observable';\r\nimport { subscribeTo } from '../util/subscribeTo';\r\nimport { ObservableInput, SchedulerLike, ObservedValueOf } from '../types';\r\nimport { scheduled } from '../scheduled/scheduled';\r\n\r\nexport function from<O extends ObservableInput<any>>(input: O): Observable<ObservedValueOf<O>>;\r\n/** @deprecated use {@link scheduled} instead. */\r\nexport function from<O extends ObservableInput<any>>(input: O, scheduler: SchedulerLike): Observable<ObservedValueOf<O>>;\r\n\r\n/**\r\n * Creates an Observable from an Array, an array-like object, a Promise, an iterable object, or an Observable-like object.\r\n *\r\n * <span class=\"informal\">Converts almost anything to an Observable.</span>\r\n *\r\n * ![](from.png)\r\n *\r\n * `from` converts various other objects and data types into Observables. It also converts a Promise, an array-like, or an\r\n * <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#iterable\" target=\"_blank\">iterable</a>\r\n * object into an Observable that emits the items in that promise, array, or iterable. A String, in this context, is treated\r\n * as an array of characters. Observable-like objects (contains a function named with the ES2015 Symbol for Observable) can also be\r\n * converted through this operator.\r\n *\r\n * ## Examples\r\n *\r\n * ### Converts an array to an Observable\r\n *\r\n * ```ts\r\n * import { from } from 'rxjs';\r\n *\r\n * const array = [10, 20, 30];\r\n * const result = from(array);\r\n *\r\n * result.subscribe(x => console.log(x));\r\n *\r\n * // Logs:\r\n * // 10\r\n * // 20\r\n * // 30\r\n * ```\r\n *\r\n * ---\r\n *\r\n * ### Convert an infinite iterable (from a generator) to an Observable\r\n *\r\n * ```ts\r\n * import { from } from 'rxjs';\r\n * import { take } from 'rxjs/operators';\r\n *\r\n * function* generateDoubles(seed) {\r\n *    let i = seed;\r\n *    while (true) {\r\n *      yield i;\r\n *      i = 2 * i; // double it\r\n *    }\r\n * }\r\n *\r\n * const iterator = generateDoubles(3);\r\n * const result = from(iterator).pipe(take(10));\r\n *\r\n * result.subscribe(x => console.log(x));\r\n *\r\n * // Logs:\r\n * // 3\r\n * // 6\r\n * // 12\r\n * // 24\r\n * // 48\r\n * // 96\r\n * // 192\r\n * // 384\r\n * // 768\r\n * // 1536\r\n * ```\r\n *\r\n * ---\r\n *\r\n * ### With async scheduler\r\n *\r\n * ```ts\r\n * import { from, asyncScheduler } from 'rxjs';\r\n *\r\n * console.log('start');\r\n *\r\n * const array = [10, 20, 30];\r\n * const result = from(array, asyncScheduler);\r\n *\r\n * result.subscribe(x => console.log(x));\r\n *\r\n * console.log('end');\r\n *\r\n * // Logs:\r\n * // start\r\n * // end\r\n * // 10\r\n * // 20\r\n * // 30\r\n * ```\r\n *\r\n * @see {@link fromEvent}\r\n * @see {@link fromEventPattern}\r\n *\r\n * @param {ObservableInput<T>} A subscription object, a Promise, an Observable-like,\r\n * an Array, an iterable, or an array-like object to be converted.\r\n * @param {SchedulerLike} An optional {@link SchedulerLike} on which to schedule the emission of values.\r\n * @return {Observable<T>}\r\n * @name from\r\n * @owner Observable\r\n */\r\nexport function from<T>(input: ObservableInput<T>, scheduler?: SchedulerLike): Observable<T> {\r\n  if (!scheduler) {\r\n    if (input instanceof Observable) {\r\n      return input;\r\n    }\r\n    return new Observable<T>(subscribeTo(input));\r\n  } else {\r\n    return scheduled(input, scheduler);\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}