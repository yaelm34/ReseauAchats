{"ast":null,"code":"/** PURE_IMPORTS_START _observable_SubscribeOnObservable PURE_IMPORTS_END */\nimport { SubscribeOnObservable } from '../observable/SubscribeOnObservable';\nexport function subscribeOn(scheduler, delay) {\n  if (delay === void 0) {\n    delay = 0;\n  }\n\n  return function subscribeOnOperatorFunction(source) {\n    return source.lift(new SubscribeOnOperator(scheduler, delay));\n  };\n}\n\nvar SubscribeOnOperator = /*@__PURE__*/function () {\n  function SubscribeOnOperator(scheduler, delay) {\n    this.scheduler = scheduler;\n    this.delay = delay;\n  }\n\n  SubscribeOnOperator.prototype.call = function (subscriber, source) {\n    return new SubscribeOnObservable(source, this.delay, this.scheduler).subscribe(subscriber);\n  };\n\n  return SubscribeOnOperator;\n}();","map":{"version":3,"mappings":"AAGA;AA6CA,SAAMA,qBAAN,QAAuD,qCAAvD;OAAyD,gCAAiBC,KAAjB,EAAiB;AACxE,WAAO,UAAS,CAAhB,EAAgB;AACdA,YAAO,CAAP;AACD;;AACF;AAED;AACE,GAHD;;;uBAIqB,GAAK,aAAQ;AACjC,WAACC,mBAAD,CAACC,SAAD,EAACF,KAAD,EAAC;AACD;AACE,iBAAWA,KAAX;AAGD;;AACHC,gCAACE,IAAD,GAAC;AAAA;GAAD;;;CAPmC","names":["SubscribeOnObservable","delay","SubscribeOnOperator","scheduler","call"],"sources":["D:\\Documents\\EMA\\Mines A3\\NoSQL\\ReseauAchats\\reseau_achats\\node_modules\\rxjs\\src\\internal\\operators\\subscribeOn.ts"],"sourcesContent":["import { Operator } from '../Operator';\r\nimport { Subscriber } from '../Subscriber';\r\nimport { Observable } from '../Observable';\r\nimport { SubscribeOnObservable } from '../observable/SubscribeOnObservable';\r\nimport { MonoTypeOperatorFunction, SchedulerLike, TeardownLogic } from '../types';\r\n\r\n/**\r\n * Asynchronously subscribes Observers to this Observable on the specified {@link SchedulerLike}.\r\n *\r\n * With `subscribeOn` you can decide what type of scheduler a specific Observable will be using when it is subscribed to.\r\n *\r\n * Schedulers control the speed and order of emissions to observers from an Observable stream.\r\n *\r\n * ![](subscribeOn.png)\r\n *\r\n * ## Example\r\n * Given the following code:\r\n * ```javascript\r\n * import { of, merge } from 'rxjs';\r\n *\r\n * const a = of(1, 2, 3, 4);\r\n * const b = of(5, 6, 7, 8, 9);\r\n * merge(a, b).subscribe(console.log);\r\n * ```\r\n *\r\n * Both Observable `a` and `b` will emit their values directly and synchronously once they are subscribed to.\r\n * This will result in the output of `1 2 3 4 5 6 7 8 9`.\r\n *\r\n * But if we instead us the `subscribeOn` operator declaring that we want to use the {@link asyncScheduler} for values emited by Observable `a`:\r\n * ```javascript\r\n * import { of, merge, asyncScheduler } from 'rxjs';\r\n * import { subscribeOn } from 'rxjs/operators';\r\n *\r\n * const a = of(1, 2, 3, 4).pipe(subscribeOn(asyncScheduler));\r\n * const b = of(5, 6, 7, 8, 9);\r\n * merge(a, b).subscribe(console.log);\r\n * ```\r\n *\r\n * The output will instead be `5 6 7 8 9 1 2 3 4`.\r\n * The reason for this is that Observable `b` emits its values directly and synchronously like before\r\n * but the emissions from `a` are scheduled on the event loop because we are now using the {@link asyncScheduler} for that specific Observable.\r\n *\r\n * @param {SchedulerLike} scheduler - The {@link SchedulerLike} to perform subscription actions on.\r\n * @return {Observable<T>} The source Observable modified so that its subscriptions happen on the specified {@link SchedulerLike}.\r\n .\r\n * @method subscribeOn\r\n * @owner Observable\r\n */\r\nexport function subscribeOn<T>(scheduler: SchedulerLike, delay: number = 0): MonoTypeOperatorFunction<T> {\r\n  return function subscribeOnOperatorFunction(source: Observable<T>): Observable<T> {\r\n    return source.lift(new SubscribeOnOperator<T>(scheduler, delay));\r\n  };\r\n}\r\n\r\nclass SubscribeOnOperator<T> implements Operator<T, T> {\r\n  constructor(private scheduler: SchedulerLike,\r\n              private delay: number) {\r\n  }\r\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\r\n    return new SubscribeOnObservable<T>(\r\n      source, this.delay, this.scheduler\r\n    ).subscribe(subscriber);\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}