{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * Copyright (c) \"Neo4j\"\n * Neo4j Sweden AB [http://neo4j.com]\n *\n * This file is part of Neo4j.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar neo4j_driver_core_1 = require(\"neo4j-driver-core\"); // Signature bytes for each response message type\n\n\nvar SUCCESS = 0x70; // 0111 0000 // SUCCESS <metadata>\n\nvar RECORD = 0x71; // 0111 0001 // RECORD <value>\n\nvar IGNORED = 0x7e; // 0111 1110 // IGNORED <metadata>\n\nvar FAILURE = 0x7f; // 0111 1111 // FAILURE <metadata>\n\nfunction NO_OP() {}\n\nfunction NO_OP_IDENTITY(subject) {\n  return subject;\n}\n\nvar NO_OP_OBSERVER = {\n  onNext: NO_OP,\n  onCompleted: NO_OP,\n  onError: NO_OP\n};\n/**\n * Treat the protocol responses and notify the observers\n */\n\nvar ResponseHandler =\n/** @class */\nfunction () {\n  /**\n   * Called when something went wrong with the connectio\n   * @callback ResponseHandler~Observer~OnErrorApplyTransformation\n   * @param {any} error The error\n   * @returns {any} The new error\n   */\n\n  /**\n   * Called when something went wrong with the connectio\n   * @callback ResponseHandler~Observer~OnError\n   * @param {any} error The error\n   */\n\n  /**\n   * Called when something went wrong with the connectio\n   * @callback ResponseHandler~MetadataTransformer\n   * @param {any} metadata The metadata got onSuccess\n   * @returns {any} The transformed metadata\n   */\n\n  /**\n   * @typedef {Object} ResponseHandler~Observer\n   * @property {ResponseHandler~Observer~OnError} onError Invoke when a connection error occurs\n   * @property {ResponseHandler~Observer~OnError} onFailure Invoke when a protocol failure occurs\n   * @property {ResponseHandler~Observer~OnErrorApplyTransformation} onErrorApplyTransformation Invoke just after the failure occurs,\n   *  before notify to respective observer. This method should transform the failure reason to the approprited one.\n   */\n\n  /**\n   * Constructor\n   * @param {Object} param The params\n   * @param {ResponseHandler~MetadataTransformer} transformMetadata Transform metadata when the SUCCESS is received.\n   * @param {Channel} channel The channel used to exchange messages\n   * @param {Logger} log The logger\n   * @param {ResponseHandler~Observer} observer Object which will be notified about errors\n   */\n  function ResponseHandler(_a) {\n    var _b = _a === void 0 ? {} : _a,\n        transformMetadata = _b.transformMetadata,\n        log = _b.log,\n        observer = _b.observer;\n\n    this._pendingObservers = [];\n    this._log = log;\n    this._transformMetadata = transformMetadata || NO_OP_IDENTITY;\n    this._observer = Object.assign({\n      onError: NO_OP,\n      onFailure: NO_OP,\n      onErrorApplyTransformation: NO_OP_IDENTITY\n    }, observer);\n  }\n\n  Object.defineProperty(ResponseHandler.prototype, \"currentFailure\", {\n    get: function () {\n      return this._currentFailure;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  ResponseHandler.prototype.handleResponse = function (msg) {\n    var payload = msg.fields[0];\n\n    switch (msg.signature) {\n      case RECORD:\n        if (this._log.isDebugEnabled()) {\n          this._log.debug(\"S: RECORD \" + neo4j_driver_core_1.json.stringify(msg));\n        }\n\n        this._currentObserver.onNext(payload);\n\n        break;\n\n      case SUCCESS:\n        if (this._log.isDebugEnabled()) {\n          this._log.debug(\"S: SUCCESS \" + neo4j_driver_core_1.json.stringify(msg));\n        }\n\n        try {\n          var metadata = this._transformMetadata(payload);\n\n          this._currentObserver.onCompleted(metadata);\n        } finally {\n          this._updateCurrentObserver();\n        }\n\n        break;\n\n      case FAILURE:\n        if (this._log.isDebugEnabled()) {\n          this._log.debug(\"S: FAILURE \" + neo4j_driver_core_1.json.stringify(msg));\n        }\n\n        try {\n          var error = (0, neo4j_driver_core_1.newError)(payload.message, payload.code);\n          this._currentFailure = this._observer.onErrorApplyTransformation(error);\n\n          this._currentObserver.onError(this._currentFailure);\n        } finally {\n          this._updateCurrentObserver(); // Things are now broken. Pending observers will get FAILURE messages routed until we are done handling this failure.\n\n\n          this._observer.onFailure(this._currentFailure);\n        }\n\n        break;\n\n      case IGNORED:\n        if (this._log.isDebugEnabled()) {\n          this._log.debug(\"S: IGNORED \" + neo4j_driver_core_1.json.stringify(msg));\n        }\n\n        try {\n          if (this._currentFailure && this._currentObserver.onError) {\n            this._currentObserver.onError(this._currentFailure);\n          } else if (this._currentObserver.onError) {\n            this._currentObserver.onError((0, neo4j_driver_core_1.newError)('Ignored either because of an error or RESET'));\n          }\n        } finally {\n          this._updateCurrentObserver();\n        }\n\n        break;\n\n      default:\n        this._observer.onError((0, neo4j_driver_core_1.newError)('Unknown Bolt protocol message: ' + msg));\n\n    }\n  };\n  /*\n   * Pop next pending observer form the list of observers and make it current observer.\n   * @protected\n   */\n\n\n  ResponseHandler.prototype._updateCurrentObserver = function () {\n    this._currentObserver = this._pendingObservers.shift();\n  };\n\n  ResponseHandler.prototype._queueObserver = function (observer) {\n    observer = observer || NO_OP_OBSERVER;\n    observer.onCompleted = observer.onCompleted || NO_OP;\n    observer.onError = observer.onError || NO_OP;\n    observer.onNext = observer.onNext || NO_OP;\n\n    if (this._currentObserver === undefined) {\n      this._currentObserver = observer;\n    } else {\n      this._pendingObservers.push(observer);\n    }\n\n    return true;\n  };\n\n  ResponseHandler.prototype._notifyErrorToObservers = function (error) {\n    if (this._currentObserver && this._currentObserver.onError) {\n      this._currentObserver.onError(error);\n    }\n\n    while (this._pendingObservers.length > 0) {\n      var observer = this._pendingObservers.shift();\n\n      if (observer && observer.onError) {\n        observer.onError(error);\n      }\n    }\n  };\n\n  ResponseHandler.prototype.hasOngoingObservableRequests = function () {\n    return this._currentObserver != null || this._pendingObservers.length > 0;\n  };\n\n  ResponseHandler.prototype._resetFailure = function () {\n    this._currentFailure = null;\n  };\n\n  return ResponseHandler;\n}();\n\nexports.default = ResponseHandler;","map":{"version":3,"sources":["D:/Documents/EMA/Mines A3/NoSQL/ReseauAchats/reseau_achats/node_modules/neo4j-driver-bolt-connection/lib/bolt/response-handler.js"],"names":["Object","defineProperty","exports","value","neo4j_driver_core_1","require","SUCCESS","RECORD","IGNORED","FAILURE","NO_OP","NO_OP_IDENTITY","subject","NO_OP_OBSERVER","onNext","onCompleted","onError","ResponseHandler","_a","_b","transformMetadata","log","observer","_pendingObservers","_log","_transformMetadata","_observer","assign","onFailure","onErrorApplyTransformation","prototype","get","_currentFailure","enumerable","configurable","handleResponse","msg","payload","fields","signature","isDebugEnabled","debug","json","stringify","_currentObserver","metadata","_updateCurrentObserver","error","newError","message","code","shift","_queueObserver","undefined","push","_notifyErrorToObservers","length","hasOngoingObservableRequests","_resetFailure","default"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Copyright (c) \"Neo4j\"\n * Neo4j Sweden AB [http://neo4j.com]\n *\n * This file is part of Neo4j.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar neo4j_driver_core_1 = require(\"neo4j-driver-core\");\n// Signature bytes for each response message type\nvar SUCCESS = 0x70; // 0111 0000 // SUCCESS <metadata>\nvar RECORD = 0x71; // 0111 0001 // RECORD <value>\nvar IGNORED = 0x7e; // 0111 1110 // IGNORED <metadata>\nvar FAILURE = 0x7f; // 0111 1111 // FAILURE <metadata>\nfunction NO_OP() { }\nfunction NO_OP_IDENTITY(subject) {\n    return subject;\n}\nvar NO_OP_OBSERVER = {\n    onNext: NO_OP,\n    onCompleted: NO_OP,\n    onError: NO_OP\n};\n/**\n * Treat the protocol responses and notify the observers\n */\nvar ResponseHandler = /** @class */ (function () {\n    /**\n     * Called when something went wrong with the connectio\n     * @callback ResponseHandler~Observer~OnErrorApplyTransformation\n     * @param {any} error The error\n     * @returns {any} The new error\n     */\n    /**\n     * Called when something went wrong with the connectio\n     * @callback ResponseHandler~Observer~OnError\n     * @param {any} error The error\n     */\n    /**\n     * Called when something went wrong with the connectio\n     * @callback ResponseHandler~MetadataTransformer\n     * @param {any} metadata The metadata got onSuccess\n     * @returns {any} The transformed metadata\n     */\n    /**\n     * @typedef {Object} ResponseHandler~Observer\n     * @property {ResponseHandler~Observer~OnError} onError Invoke when a connection error occurs\n     * @property {ResponseHandler~Observer~OnError} onFailure Invoke when a protocol failure occurs\n     * @property {ResponseHandler~Observer~OnErrorApplyTransformation} onErrorApplyTransformation Invoke just after the failure occurs,\n     *  before notify to respective observer. This method should transform the failure reason to the approprited one.\n     */\n    /**\n     * Constructor\n     * @param {Object} param The params\n     * @param {ResponseHandler~MetadataTransformer} transformMetadata Transform metadata when the SUCCESS is received.\n     * @param {Channel} channel The channel used to exchange messages\n     * @param {Logger} log The logger\n     * @param {ResponseHandler~Observer} observer Object which will be notified about errors\n     */\n    function ResponseHandler(_a) {\n        var _b = _a === void 0 ? {} : _a, transformMetadata = _b.transformMetadata, log = _b.log, observer = _b.observer;\n        this._pendingObservers = [];\n        this._log = log;\n        this._transformMetadata = transformMetadata || NO_OP_IDENTITY;\n        this._observer = Object.assign({\n            onError: NO_OP,\n            onFailure: NO_OP,\n            onErrorApplyTransformation: NO_OP_IDENTITY\n        }, observer);\n    }\n    Object.defineProperty(ResponseHandler.prototype, \"currentFailure\", {\n        get: function () {\n            return this._currentFailure;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    ResponseHandler.prototype.handleResponse = function (msg) {\n        var payload = msg.fields[0];\n        switch (msg.signature) {\n            case RECORD:\n                if (this._log.isDebugEnabled()) {\n                    this._log.debug(\"S: RECORD \" + neo4j_driver_core_1.json.stringify(msg));\n                }\n                this._currentObserver.onNext(payload);\n                break;\n            case SUCCESS:\n                if (this._log.isDebugEnabled()) {\n                    this._log.debug(\"S: SUCCESS \" + neo4j_driver_core_1.json.stringify(msg));\n                }\n                try {\n                    var metadata = this._transformMetadata(payload);\n                    this._currentObserver.onCompleted(metadata);\n                }\n                finally {\n                    this._updateCurrentObserver();\n                }\n                break;\n            case FAILURE:\n                if (this._log.isDebugEnabled()) {\n                    this._log.debug(\"S: FAILURE \" + neo4j_driver_core_1.json.stringify(msg));\n                }\n                try {\n                    var error = (0, neo4j_driver_core_1.newError)(payload.message, payload.code);\n                    this._currentFailure = this._observer.onErrorApplyTransformation(error);\n                    this._currentObserver.onError(this._currentFailure);\n                }\n                finally {\n                    this._updateCurrentObserver();\n                    // Things are now broken. Pending observers will get FAILURE messages routed until we are done handling this failure.\n                    this._observer.onFailure(this._currentFailure);\n                }\n                break;\n            case IGNORED:\n                if (this._log.isDebugEnabled()) {\n                    this._log.debug(\"S: IGNORED \" + neo4j_driver_core_1.json.stringify(msg));\n                }\n                try {\n                    if (this._currentFailure && this._currentObserver.onError) {\n                        this._currentObserver.onError(this._currentFailure);\n                    }\n                    else if (this._currentObserver.onError) {\n                        this._currentObserver.onError((0, neo4j_driver_core_1.newError)('Ignored either because of an error or RESET'));\n                    }\n                }\n                finally {\n                    this._updateCurrentObserver();\n                }\n                break;\n            default:\n                this._observer.onError((0, neo4j_driver_core_1.newError)('Unknown Bolt protocol message: ' + msg));\n        }\n    };\n    /*\n     * Pop next pending observer form the list of observers and make it current observer.\n     * @protected\n     */\n    ResponseHandler.prototype._updateCurrentObserver = function () {\n        this._currentObserver = this._pendingObservers.shift();\n    };\n    ResponseHandler.prototype._queueObserver = function (observer) {\n        observer = observer || NO_OP_OBSERVER;\n        observer.onCompleted = observer.onCompleted || NO_OP;\n        observer.onError = observer.onError || NO_OP;\n        observer.onNext = observer.onNext || NO_OP;\n        if (this._currentObserver === undefined) {\n            this._currentObserver = observer;\n        }\n        else {\n            this._pendingObservers.push(observer);\n        }\n        return true;\n    };\n    ResponseHandler.prototype._notifyErrorToObservers = function (error) {\n        if (this._currentObserver && this._currentObserver.onError) {\n            this._currentObserver.onError(error);\n        }\n        while (this._pendingObservers.length > 0) {\n            var observer = this._pendingObservers.shift();\n            if (observer && observer.onError) {\n                observer.onError(error);\n            }\n        }\n    };\n    ResponseHandler.prototype.hasOngoingObservableRequests = function () {\n        return this._currentObserver != null || this._pendingObservers.length > 0;\n    };\n    ResponseHandler.prototype._resetFailure = function () {\n        this._currentFailure = null;\n    };\n    return ResponseHandler;\n}());\nexports.default = ResponseHandler;\n"]},"metadata":{},"sourceType":"script"}