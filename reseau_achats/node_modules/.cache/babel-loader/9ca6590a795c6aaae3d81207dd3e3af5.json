{"ast":null,"code":"/** PURE_IMPORTS_START tslib,_Subscriber,_observable_empty PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nimport { empty } from '../observable/empty';\nexport function repeat(count) {\n  if (count === void 0) {\n    count = -1;\n  }\n\n  return function (source) {\n    if (count === 0) {\n      return empty();\n    } else if (count < 0) {\n      return source.lift(new RepeatOperator(-1, source));\n    } else {\n      return source.lift(new RepeatOperator(count - 1, source));\n    }\n  };\n}\n\nvar RepeatOperator = /*@__PURE__*/function () {\n  function RepeatOperator(count, source) {\n    this.count = count;\n    this.source = source;\n  }\n\n  RepeatOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new RepeatSubscriber(subscriber, this.count, this.source));\n  };\n\n  return RepeatOperator;\n}();\n\nvar RepeatSubscriber = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(RepeatSubscriber, _super);\n\n  function RepeatSubscriber(destination, count, source) {\n    var _this = _super.call(this, destination) || this;\n\n    _this.count = count;\n    _this.source = source;\n    return _this;\n  }\n\n  RepeatSubscriber.prototype.complete = function () {\n    if (!this.isStopped) {\n      var _a = this,\n          source = _a.source,\n          count = _a.count;\n\n      if (count === 0) {\n        return _super.prototype.complete.call(this);\n      } else if (count > -1) {\n        this.count = count - 1;\n      }\n\n      source.subscribe(this._unsubscribeAndRecycle());\n    }\n  };\n\n  return RepeatSubscriber;\n}(Subscriber);","map":{"version":3,"mappings":";AACA,OAAO,KAAEA,OAAT,MAAqB,OAArB;AAEA,SAASC,UAAT,QAAsB,eAAtB;AA2DA,SAAMC,KAAN,QAAsB,qBAAtB;OAA0B;AACxB,WAAO,UAAC,CAAR,EAAQ;AACNC,SAAI,IAAK,CAAT;;;SAEC;aAAU,KAAK,GAAG;AACjB,aAAOD,OAAP;AACD,WAAM;AACL,aAAOE,MAAM,CAACC,IAAP,CAAY,IAAIC,cAAJ,CAAmB,EAAnB,EAAmBF,MAAnB,CAAZ,CAAP;AACD,KAFM,MAGP;AACH;AAED;AACE;;;kBACoB,GAAM,aAAe;AACzC,WAACE,cAAD,CAACH,KAAD,EAACC,MAAD,EAAC;AACD;AACE,kBAAcA,MAAd;AACD;;AACHE,2BAACC,IAAD,GAAC;AAAA;AAOD,GAPA;;AAOkC;CAZS;;oBAgBvC,gBAAM,kBAAY;SAFA,6BAAaC;;WACbC,iBAAqBC;;;AAExCC;AACDA;AACE,WAAKA,KAAL;;;kBAEM,CAAKC,UAAQC;cACfC,WAAO;UACRC;UAAAX;UAAAD;;eAAU,KAAK,GAAG;AACjB,eAAKK,MAAQ,UAAR,CAAkBK,QAAlB,CAAkBN,IAAlB,CAAkB,IAAlB,CAAL;AACD,aACD,IAAOJ,QAAU,EAAjB,EAAqB;AACtB;AACF;;AACHC,uBAAC,6BAAD;AAjBkC;;;;CAIxB","names":["tslib_1","Subscriber","empty","count","source","lift","RepeatOperator","call","_super","RepeatSubscriber","destination","_this","prototype","complete","isStopped","_a"],"sources":["D:\\Documents\\EMA\\Mines A3\\NoSQL\\ReseauAchats\\reseau_achats\\node_modules\\rxjs\\src\\internal\\operators\\repeat.ts"],"sourcesContent":["import { Operator } from '../Operator';\r\nimport { Subscriber } from '../Subscriber';\r\nimport { Observable } from '../Observable';\r\nimport { empty } from '../observable/empty';\r\nimport { MonoTypeOperatorFunction, TeardownLogic } from '../types';\r\n\r\n/**\r\n * Returns an Observable that will resubscribe to the source stream when the source stream completes, at most count times.\r\n *\r\n * <span class=\"informal\">Repeats all values emitted on the source. It's like {@link retry}, but for non error cases.</span>\r\n *\r\n * ![](repeat.png)\r\n *\r\n * Similar to {@link retry}, this operator repeats the stream of items emitted by the source for non error cases.\r\n * Repeat can be useful for creating observables that are meant to have some repeated pattern or rhythm.\r\n *\r\n * Note: `repeat(0)` returns an empty observable and `repeat()` will repeat forever\r\n *\r\n * ## Example\r\n * Repeat a message stream\r\n * ```ts\r\n * import { of } from 'rxjs';\r\n * import { repeat, delay } from 'rxjs/operators';\r\n *\r\n * const source = of('Repeat message');\r\n * const example = source.pipe(repeat(3));\r\n * example.subscribe(x => console.log(x));\r\n *\r\n * // Results\r\n * // Repeat message\r\n * // Repeat message\r\n * // Repeat message\r\n * ```\r\n *\r\n * Repeat 3 values, 2 times\r\n * ```ts\r\n * import { interval } from 'rxjs';\r\n * import { repeat, take } from 'rxjs/operators';\r\n *\r\n * const source = interval(1000);\r\n * const example = source.pipe(take(3), repeat(2));\r\n * example.subscribe(x => console.log(x));\r\n *\r\n * // Results every second\r\n * // 0\r\n * // 1\r\n * // 2\r\n * // 0\r\n * // 1\r\n * // 2\r\n * ```\r\n *\r\n * @see {@link repeatWhen}\r\n * @see {@link retry}\r\n *\r\n * @param {number} [count] The number of times the source Observable items are repeated, a count of 0 will yield\r\n * an empty Observable.\r\n * @return {Observable} An Observable that will resubscribe to the source stream when the source stream completes\r\n * , at most count times.\r\n * @method repeat\r\n * @owner Observable\r\n */\r\nexport function repeat<T>(count: number = -1): MonoTypeOperatorFunction<T> {\r\n  return (source: Observable<T>) => {\r\n    if (count === 0) {\r\n      return empty();\r\n    } else if (count < 0) {\r\n      return source.lift(new RepeatOperator(-1, source));\r\n    } else {\r\n      return source.lift(new RepeatOperator(count - 1, source));\r\n    }\r\n  };\r\n}\r\n\r\nclass RepeatOperator<T> implements Operator<T, T> {\r\n  constructor(private count: number,\r\n              private source: Observable<T>) {\r\n  }\r\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\r\n    return source.subscribe(new RepeatSubscriber(subscriber, this.count, this.source));\r\n  }\r\n}\r\n\r\n/**\r\n * We need this JSDoc comment for affecting ESDoc.\r\n * @ignore\r\n * @extends {Ignored}\r\n */\r\nclass RepeatSubscriber<T> extends Subscriber<T> {\r\n  constructor(destination: Subscriber<any>,\r\n              private count: number,\r\n              private source: Observable<T>) {\r\n    super(destination);\r\n  }\r\n  complete() {\r\n    if (!this.isStopped) {\r\n      const { source, count } = this;\r\n      if (count === 0) {\r\n        return super.complete();\r\n      } else if (count > -1) {\r\n        this.count = count - 1;\r\n      }\r\n      source.subscribe(this._unsubscribeAndRecycle());\r\n    }\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}