{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\r\n * Copyright (c) \"Neo4j\"\r\n * Neo4j Sweden AB [http://neo4j.com]\r\n *\r\n * This file is part of Neo4j.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nvar bolt_protocol_util_1 = require(\"./bolt-protocol-util\");\n\nvar packstream_1 = require(\"../packstream\");\n\nvar request_message_1 = __importDefault(require(\"./request-message\"));\n\nvar stream_observers_1 = require(\"./stream-observers\");\n\nvar neo4j_driver_core_1 = require(\"neo4j-driver-core\");\n\nvar Bookmark = neo4j_driver_core_1.internal.bookmark.Bookmark,\n    _a = neo4j_driver_core_1.internal.constants,\n    ACCESS_MODE_WRITE = _a.ACCESS_MODE_WRITE,\n    BOLT_PROTOCOL_V1 = _a.BOLT_PROTOCOL_V1,\n    Logger = neo4j_driver_core_1.internal.logger.Logger,\n    TxConfig = neo4j_driver_core_1.internal.txConfig.TxConfig;\n\nvar BoltProtocol =\n/** @class */\nfunction () {\n  /**\r\n   * @callback CreateResponseHandler Creates the response handler\r\n   * @param {BoltProtocol} protocol The bolt protocol\r\n   * @returns {ResponseHandler} The response handler\r\n   */\n\n  /**\r\n   * @callback OnProtocolError Handles protocol error\r\n   * @param {string} error The description\r\n   */\n\n  /**\r\n   * @constructor\r\n   * @param {Object} server the server informatio.\r\n   * @param {Chunker} chunker the chunker.\r\n   * @param {Object} packstreamConfig Packstream configuration\r\n   * @param {boolean} packstreamConfig.disableLosslessIntegers if this connection should convert all received integers to native JS numbers.\r\n   * @param {boolean} packstreamConfig.useBigInt if this connection should convert all received integers to native BigInt numbers.\r\n   * @param {CreateResponseHandler} createResponseHandler Function which creates the response handler\r\n   * @param {Logger} log the logger\r\n   * @param {OnProtocolError} onProtocolError handles protocol errors\r\n   */\n  function BoltProtocol(server, chunker, _a, createResponseHandler, log, onProtocolError) {\n    var _b = _a === void 0 ? {} : _a,\n        disableLosslessIntegers = _b.disableLosslessIntegers,\n        useBigInt = _b.useBigInt;\n\n    if (createResponseHandler === void 0) {\n      createResponseHandler = function () {\n        return null;\n      };\n    }\n\n    this._server = server || {};\n    this._chunker = chunker;\n    this._packer = this._createPacker(chunker);\n    this._unpacker = this._createUnpacker(disableLosslessIntegers, useBigInt);\n    this._responseHandler = createResponseHandler(this);\n    this._log = log;\n    this._onProtocolError = onProtocolError;\n    this._fatalError = null;\n  }\n\n  Object.defineProperty(BoltProtocol.prototype, \"version\", {\n    /**\r\n     * Returns the numerical version identifier for this protocol\r\n     */\n    get: function () {\n      return BOLT_PROTOCOL_V1;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Get the packer.\r\n   * @return {Packer} the protocol's packer.\r\n   */\n\n  BoltProtocol.prototype.packer = function () {\n    return this._packer;\n  };\n  /**\r\n   * Get the unpacker.\r\n   * @return {Unpacker} the protocol's unpacker.\r\n   */\n\n\n  BoltProtocol.prototype.unpacker = function () {\n    return this._unpacker;\n  };\n  /**\r\n   * Transform metadata received in SUCCESS message before it is passed to the handler.\r\n   * @param {Object} metadata the received metadata.\r\n   * @return {Object} transformed metadata.\r\n   */\n\n\n  BoltProtocol.prototype.transformMetadata = function (metadata) {\n    return metadata;\n  };\n  /**\r\n   * Perform initialization and authentication of the underlying connection.\r\n   * @param {Object} param\r\n   * @param {string} param.userAgent the user agent.\r\n   * @param {Object} param.authToken the authentication token.\r\n   * @param {function(err: Error)} param.onError the callback to invoke on error.\r\n   * @param {function()} param.onComplete the callback to invoke on completion.\r\n   * @returns {StreamObserver} the stream observer that monitors the corresponding server response.\r\n   */\n\n\n  BoltProtocol.prototype.initialize = function (_a) {\n    var _this = this;\n\n    var _b = _a === void 0 ? {} : _a,\n        userAgent = _b.userAgent,\n        authToken = _b.authToken,\n        onError = _b.onError,\n        onComplete = _b.onComplete;\n\n    var observer = new stream_observers_1.LoginObserver({\n      onError: function (error) {\n        return _this._onLoginError(error, onError);\n      },\n      onCompleted: function (metadata) {\n        return _this._onLoginCompleted(metadata, onComplete);\n      }\n    });\n    this.write(request_message_1.default.init(userAgent, authToken), observer, true);\n    return observer;\n  };\n  /**\r\n   * Perform protocol related operations for closing this connection\r\n   */\n\n\n  BoltProtocol.prototype.prepareToClose = function () {// no need to notify the database in this protocol version\n  };\n  /**\r\n   * Begin an explicit transaction.\r\n   * @param {Object} param\r\n   * @param {Bookmark} param.bookmark the bookmark.\r\n   * @param {TxConfig} param.txConfig the configuration.\r\n   * @param {string} param.database the target database name.\r\n   * @param {string} param.mode the access mode.\r\n   * @param {string} param.impersonatedUser the impersonated user\r\n   * @param {function(err: Error)} param.beforeError the callback to invoke before handling the error.\r\n   * @param {function(err: Error)} param.afterError the callback to invoke after handling the error.\r\n   * @param {function()} param.beforeComplete the callback to invoke before handling the completion.\r\n   * @param {function()} param.afterComplete the callback to invoke after handling the completion.\r\n   * @returns {StreamObserver} the stream observer that monitors the corresponding server response.\r\n   */\n\n\n  BoltProtocol.prototype.beginTransaction = function (_a) {\n    var _b = _a === void 0 ? {} : _a,\n        bookmark = _b.bookmark,\n        txConfig = _b.txConfig,\n        database = _b.database,\n        mode = _b.mode,\n        impersonatedUser = _b.impersonatedUser,\n        beforeError = _b.beforeError,\n        afterError = _b.afterError,\n        beforeComplete = _b.beforeComplete,\n        afterComplete = _b.afterComplete;\n\n    return this.run('BEGIN', bookmark ? bookmark.asBeginTransactionParameters() : {}, {\n      bookmark: bookmark,\n      txConfig: txConfig,\n      database: database,\n      mode: mode,\n      impersonatedUser: impersonatedUser,\n      beforeError: beforeError,\n      afterError: afterError,\n      beforeComplete: beforeComplete,\n      afterComplete: afterComplete,\n      flush: false\n    });\n  };\n  /**\r\n   * Commit the explicit transaction.\r\n   * @param {Object} param\r\n   * @param {function(err: Error)} param.beforeError the callback to invoke before handling the error.\r\n   * @param {function(err: Error)} param.afterError the callback to invoke after handling the error.\r\n   * @param {function()} param.beforeComplete the callback to invoke before handling the completion.\r\n   * @param {function()} param.afterComplete the callback to invoke after handling the completion.\r\n   * @returns {StreamObserver} the stream observer that monitors the corresponding server response.\r\n   */\n\n\n  BoltProtocol.prototype.commitTransaction = function (_a) {\n    var _b = _a === void 0 ? {} : _a,\n        beforeError = _b.beforeError,\n        afterError = _b.afterError,\n        beforeComplete = _b.beforeComplete,\n        afterComplete = _b.afterComplete; // WRITE access mode is used as a place holder here, it has\n    // no effect on behaviour for Bolt V1 & V2\n\n\n    return this.run('COMMIT', {}, {\n      bookmark: Bookmark.empty(),\n      txConfig: TxConfig.empty(),\n      mode: ACCESS_MODE_WRITE,\n      beforeError: beforeError,\n      afterError: afterError,\n      beforeComplete: beforeComplete,\n      afterComplete: afterComplete\n    });\n  };\n  /**\r\n   * Rollback the explicit transaction.\r\n   * @param {Object} param\r\n   * @param {function(err: Error)} param.beforeError the callback to invoke before handling the error.\r\n   * @param {function(err: Error)} param.afterError the callback to invoke after handling the error.\r\n   * @param {function()} param.beforeComplete the callback to invoke before handling the completion.\r\n   * @param {function()} param.afterComplete the callback to invoke after handling the completion.\r\n   * @returns {StreamObserver} the stream observer that monitors the corresponding server response.\r\n   */\n\n\n  BoltProtocol.prototype.rollbackTransaction = function (_a) {\n    var _b = _a === void 0 ? {} : _a,\n        beforeError = _b.beforeError,\n        afterError = _b.afterError,\n        beforeComplete = _b.beforeComplete,\n        afterComplete = _b.afterComplete; // WRITE access mode is used as a place holder here, it has\n    // no effect on behaviour for Bolt V1 & V2\n\n\n    return this.run('ROLLBACK', {}, {\n      bookmark: Bookmark.empty(),\n      txConfig: TxConfig.empty(),\n      mode: ACCESS_MODE_WRITE,\n      beforeError: beforeError,\n      afterError: afterError,\n      beforeComplete: beforeComplete,\n      afterComplete: afterComplete\n    });\n  };\n  /**\r\n   * Send a Cypher query through the underlying connection.\r\n   * @param {string} query the cypher query.\r\n   * @param {Object} parameters the query parameters.\r\n   * @param {Object} param\r\n   * @param {Bookmark} param.bookmark the bookmark.\r\n   * @param {TxConfig} param.txConfig the transaction configuration.\r\n   * @param {string} param.database the target database name.\r\n   * @param {string} param.impersonatedUser the impersonated user\r\n   * @param {string} param.mode the access mode.\r\n   * @param {function(keys: string[])} param.beforeKeys the callback to invoke before handling the keys.\r\n   * @param {function(keys: string[])} param.afterKeys the callback to invoke after handling the keys.\r\n   * @param {function(err: Error)} param.beforeError the callback to invoke before handling the error.\r\n   * @param {function(err: Error)} param.afterError the callback to invoke after handling the error.\r\n   * @param {function()} param.beforeComplete the callback to invoke before handling the completion.\r\n   * @param {function()} param.afterComplete the callback to invoke after handling the completion.\r\n   * @param {boolean} param.flush whether to flush the buffered messages.\r\n   * @returns {StreamObserver} the stream observer that monitors the corresponding server response.\r\n   */\n\n\n  BoltProtocol.prototype.run = function (query, parameters, _a) {\n    var _b = _a === void 0 ? {} : _a,\n        bookmark = _b.bookmark,\n        txConfig = _b.txConfig,\n        database = _b.database,\n        mode = _b.mode,\n        impersonatedUser = _b.impersonatedUser,\n        beforeKeys = _b.beforeKeys,\n        afterKeys = _b.afterKeys,\n        beforeError = _b.beforeError,\n        afterError = _b.afterError,\n        beforeComplete = _b.beforeComplete,\n        afterComplete = _b.afterComplete,\n        _c = _b.flush,\n        flush = _c === void 0 ? true : _c;\n\n    var observer = new stream_observers_1.ResultStreamObserver({\n      server: this._server,\n      beforeKeys: beforeKeys,\n      afterKeys: afterKeys,\n      beforeError: beforeError,\n      afterError: afterError,\n      beforeComplete: beforeComplete,\n      afterComplete: afterComplete\n    }); // bookmark and mode are ignored in this version of the protocol\n\n    (0, bolt_protocol_util_1.assertTxConfigIsEmpty)(txConfig, this._onProtocolError, observer); // passing in a database name on this protocol version throws an error\n\n    (0, bolt_protocol_util_1.assertDatabaseIsEmpty)(database, this._onProtocolError, observer); // passing impersonated user on this protocol version throws an error\n\n    (0, bolt_protocol_util_1.assertImpersonatedUserIsEmpty)(impersonatedUser, this._onProtocolError, observer);\n    this.write(request_message_1.default.run(query, parameters), observer, false);\n    this.write(request_message_1.default.pullAll(), observer, flush);\n    return observer;\n  };\n\n  Object.defineProperty(BoltProtocol.prototype, \"currentFailure\", {\n    get: function () {\n      return this._responseHandler.currentFailure;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Send a RESET through the underlying connection.\r\n   * @param {Object} param\r\n   * @param {function(err: Error)} param.onError the callback to invoke on error.\r\n   * @param {function()} param.onComplete the callback to invoke on completion.\r\n   * @returns {StreamObserver} the stream observer that monitors the corresponding server response.\r\n   */\n\n  BoltProtocol.prototype.reset = function (_a) {\n    var _b = _a === void 0 ? {} : _a,\n        onError = _b.onError,\n        onComplete = _b.onComplete;\n\n    var observer = new stream_observers_1.ResetObserver({\n      onProtocolError: this._onProtocolError,\n      onError: onError,\n      onComplete: onComplete\n    });\n    this.write(request_message_1.default.reset(), observer, true);\n    return observer;\n  };\n\n  BoltProtocol.prototype._createPacker = function (chunker) {\n    return new packstream_1.v1.Packer(chunker);\n  };\n\n  BoltProtocol.prototype._createUnpacker = function (disableLosslessIntegers, useBigInt) {\n    return new packstream_1.v1.Unpacker(disableLosslessIntegers, useBigInt);\n  };\n  /**\r\n   * Write a message to the network channel.\r\n   * @param {RequestMessage} message the message to write.\r\n   * @param {StreamObserver} observer the response observer.\r\n   * @param {boolean} flush `true` if flush should happen after the message is written to the buffer.\r\n   */\n\n\n  BoltProtocol.prototype.write = function (message, observer, flush) {\n    var _this = this;\n\n    var queued = this.queueObserverIfProtocolIsNotBroken(observer);\n\n    if (queued) {\n      if (this._log.isDebugEnabled()) {\n        this._log.debug(\"C: \" + message);\n      }\n\n      this.packer().packStruct(message.signature, message.fields.map(function (field) {\n        return _this.packer().packable(field);\n      }));\n\n      this._chunker.messageBoundary();\n\n      if (flush) {\n        this._chunker.flush();\n      }\n    }\n  };\n  /**\r\n   * Notifies faltal erros to the observers and mark the protocol in the fatal error state.\r\n   * @param {Error} error The error\r\n   */\n\n\n  BoltProtocol.prototype.notifyFatalError = function (error) {\n    this._fatalError = error;\n    return this._responseHandler._notifyErrorToObservers(error);\n  };\n  /**\r\n   * Updates the the current observer with the next one on the queue.\r\n   */\n\n\n  BoltProtocol.prototype.updateCurrentObserver = function () {\n    return this._responseHandler._updateCurrentObserver();\n  };\n  /**\r\n   * Checks if exist an ongoing observable requests\r\n   * @return {boolean}\r\n   */\n\n\n  BoltProtocol.prototype.hasOngoingObservableRequests = function () {\n    return this._responseHandler.hasOngoingObservableRequests();\n  };\n  /**\r\n   * Enqueue the observer if the protocol is not broken.\r\n   * In case it's broken, the observer will be notified about the error.\r\n   *\r\n   * @param {StreamObserver} observer The observer\r\n   * @returns {boolean} if it was queued\r\n   */\n\n\n  BoltProtocol.prototype.queueObserverIfProtocolIsNotBroken = function (observer) {\n    if (this.isBroken()) {\n      this.notifyFatalErrorToObserver(observer);\n      return false;\n    }\n\n    return this._responseHandler._queueObserver(observer);\n  };\n  /**\r\n   * Veritfy the protocol is not broken.\r\n   * @returns {boolean}\r\n   */\n\n\n  BoltProtocol.prototype.isBroken = function () {\n    return !!this._fatalError;\n  };\n  /**\r\n   * Notifies the current fatal error to the observer\r\n   *\r\n   * @param {StreamObserver} observer The observer\r\n   */\n\n\n  BoltProtocol.prototype.notifyFatalErrorToObserver = function (observer) {\n    if (observer && observer.onError) {\n      observer.onError(this._fatalError);\n    }\n  };\n  /**\r\n   * Reset current failure on the observable response handler to null.\r\n   */\n\n\n  BoltProtocol.prototype.resetFailure = function () {\n    this._responseHandler._resetFailure();\n  };\n\n  BoltProtocol.prototype._onLoginCompleted = function (metadata, onCompleted) {\n    if (metadata) {\n      var serverVersion = metadata.server;\n\n      if (!this._server.version) {\n        this._server.version = serverVersion;\n      }\n    }\n\n    if (onCompleted) {\n      onCompleted(metadata);\n    }\n  };\n\n  BoltProtocol.prototype._onLoginError = function (error, onError) {\n    this._onProtocolError(error.message);\n\n    if (onError) {\n      onError(error);\n    }\n  };\n\n  return BoltProtocol;\n}();\n\nexports.default = BoltProtocol;","map":{"version":3,"sources":["D:/Documents/EMA/Mines A3/NoSQL/ReseauAchats/reseau_achats/node_modules/neo4j-driver-bolt-connection/lib/bolt/bolt-protocol-v1.js"],"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","bolt_protocol_util_1","require","packstream_1","request_message_1","stream_observers_1","neo4j_driver_core_1","Bookmark","internal","bookmark","_a","constants","ACCESS_MODE_WRITE","BOLT_PROTOCOL_V1","Logger","logger","TxConfig","txConfig","BoltProtocol","server","chunker","createResponseHandler","log","onProtocolError","_b","disableLosslessIntegers","useBigInt","_server","_chunker","_packer","_createPacker","_unpacker","_createUnpacker","_responseHandler","_log","_onProtocolError","_fatalError","prototype","get","enumerable","configurable","packer","unpacker","transformMetadata","metadata","initialize","_this","userAgent","authToken","onError","onComplete","observer","LoginObserver","error","_onLoginError","onCompleted","_onLoginCompleted","write","default","init","prepareToClose","beginTransaction","database","mode","impersonatedUser","beforeError","afterError","beforeComplete","afterComplete","run","asBeginTransactionParameters","flush","commitTransaction","empty","rollbackTransaction","query","parameters","beforeKeys","afterKeys","_c","ResultStreamObserver","assertTxConfigIsEmpty","assertDatabaseIsEmpty","assertImpersonatedUserIsEmpty","pullAll","currentFailure","reset","ResetObserver","v1","Packer","Unpacker","message","queued","queueObserverIfProtocolIsNotBroken","isDebugEnabled","debug","packStruct","signature","fields","map","field","packable","messageBoundary","notifyFatalError","_notifyErrorToObservers","updateCurrentObserver","_updateCurrentObserver","hasOngoingObservableRequests","isBroken","notifyFatalErrorToObserver","_queueObserver","resetFailure","_resetFailure","serverVersion","version"],"mappings":"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","sourcesContent":["\"use strict\";\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n * Copyright (c) \"Neo4j\"\r\n * Neo4j Sweden AB [http://neo4j.com]\r\n *\r\n * This file is part of Neo4j.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar bolt_protocol_util_1 = require(\"./bolt-protocol-util\");\r\nvar packstream_1 = require(\"../packstream\");\r\nvar request_message_1 = __importDefault(require(\"./request-message\"));\r\nvar stream_observers_1 = require(\"./stream-observers\");\r\nvar neo4j_driver_core_1 = require(\"neo4j-driver-core\");\r\nvar Bookmark = neo4j_driver_core_1.internal.bookmark.Bookmark, _a = neo4j_driver_core_1.internal.constants, ACCESS_MODE_WRITE = _a.ACCESS_MODE_WRITE, BOLT_PROTOCOL_V1 = _a.BOLT_PROTOCOL_V1, Logger = neo4j_driver_core_1.internal.logger.Logger, TxConfig = neo4j_driver_core_1.internal.txConfig.TxConfig;\r\nvar BoltProtocol = /** @class */ (function () {\r\n    /**\r\n     * @callback CreateResponseHandler Creates the response handler\r\n     * @param {BoltProtocol} protocol The bolt protocol\r\n     * @returns {ResponseHandler} The response handler\r\n     */\r\n    /**\r\n     * @callback OnProtocolError Handles protocol error\r\n     * @param {string} error The description\r\n     */\r\n    /**\r\n     * @constructor\r\n     * @param {Object} server the server informatio.\r\n     * @param {Chunker} chunker the chunker.\r\n     * @param {Object} packstreamConfig Packstream configuration\r\n     * @param {boolean} packstreamConfig.disableLosslessIntegers if this connection should convert all received integers to native JS numbers.\r\n     * @param {boolean} packstreamConfig.useBigInt if this connection should convert all received integers to native BigInt numbers.\r\n     * @param {CreateResponseHandler} createResponseHandler Function which creates the response handler\r\n     * @param {Logger} log the logger\r\n     * @param {OnProtocolError} onProtocolError handles protocol errors\r\n     */\r\n    function BoltProtocol(server, chunker, _a, createResponseHandler, log, onProtocolError) {\r\n        var _b = _a === void 0 ? {} : _a, disableLosslessIntegers = _b.disableLosslessIntegers, useBigInt = _b.useBigInt;\r\n        if (createResponseHandler === void 0) { createResponseHandler = function () { return null; }; }\r\n        this._server = server || {};\r\n        this._chunker = chunker;\r\n        this._packer = this._createPacker(chunker);\r\n        this._unpacker = this._createUnpacker(disableLosslessIntegers, useBigInt);\r\n        this._responseHandler = createResponseHandler(this);\r\n        this._log = log;\r\n        this._onProtocolError = onProtocolError;\r\n        this._fatalError = null;\r\n    }\r\n    Object.defineProperty(BoltProtocol.prototype, \"version\", {\r\n        /**\r\n         * Returns the numerical version identifier for this protocol\r\n         */\r\n        get: function () {\r\n            return BOLT_PROTOCOL_V1;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Get the packer.\r\n     * @return {Packer} the protocol's packer.\r\n     */\r\n    BoltProtocol.prototype.packer = function () {\r\n        return this._packer;\r\n    };\r\n    /**\r\n     * Get the unpacker.\r\n     * @return {Unpacker} the protocol's unpacker.\r\n     */\r\n    BoltProtocol.prototype.unpacker = function () {\r\n        return this._unpacker;\r\n    };\r\n    /**\r\n     * Transform metadata received in SUCCESS message before it is passed to the handler.\r\n     * @param {Object} metadata the received metadata.\r\n     * @return {Object} transformed metadata.\r\n     */\r\n    BoltProtocol.prototype.transformMetadata = function (metadata) {\r\n        return metadata;\r\n    };\r\n    /**\r\n     * Perform initialization and authentication of the underlying connection.\r\n     * @param {Object} param\r\n     * @param {string} param.userAgent the user agent.\r\n     * @param {Object} param.authToken the authentication token.\r\n     * @param {function(err: Error)} param.onError the callback to invoke on error.\r\n     * @param {function()} param.onComplete the callback to invoke on completion.\r\n     * @returns {StreamObserver} the stream observer that monitors the corresponding server response.\r\n     */\r\n    BoltProtocol.prototype.initialize = function (_a) {\r\n        var _this = this;\r\n        var _b = _a === void 0 ? {} : _a, userAgent = _b.userAgent, authToken = _b.authToken, onError = _b.onError, onComplete = _b.onComplete;\r\n        var observer = new stream_observers_1.LoginObserver({\r\n            onError: function (error) { return _this._onLoginError(error, onError); },\r\n            onCompleted: function (metadata) { return _this._onLoginCompleted(metadata, onComplete); }\r\n        });\r\n        this.write(request_message_1.default.init(userAgent, authToken), observer, true);\r\n        return observer;\r\n    };\r\n    /**\r\n     * Perform protocol related operations for closing this connection\r\n     */\r\n    BoltProtocol.prototype.prepareToClose = function () {\r\n        // no need to notify the database in this protocol version\r\n    };\r\n    /**\r\n     * Begin an explicit transaction.\r\n     * @param {Object} param\r\n     * @param {Bookmark} param.bookmark the bookmark.\r\n     * @param {TxConfig} param.txConfig the configuration.\r\n     * @param {string} param.database the target database name.\r\n     * @param {string} param.mode the access mode.\r\n     * @param {string} param.impersonatedUser the impersonated user\r\n     * @param {function(err: Error)} param.beforeError the callback to invoke before handling the error.\r\n     * @param {function(err: Error)} param.afterError the callback to invoke after handling the error.\r\n     * @param {function()} param.beforeComplete the callback to invoke before handling the completion.\r\n     * @param {function()} param.afterComplete the callback to invoke after handling the completion.\r\n     * @returns {StreamObserver} the stream observer that monitors the corresponding server response.\r\n     */\r\n    BoltProtocol.prototype.beginTransaction = function (_a) {\r\n        var _b = _a === void 0 ? {} : _a, bookmark = _b.bookmark, txConfig = _b.txConfig, database = _b.database, mode = _b.mode, impersonatedUser = _b.impersonatedUser, beforeError = _b.beforeError, afterError = _b.afterError, beforeComplete = _b.beforeComplete, afterComplete = _b.afterComplete;\r\n        return this.run('BEGIN', bookmark ? bookmark.asBeginTransactionParameters() : {}, {\r\n            bookmark: bookmark,\r\n            txConfig: txConfig,\r\n            database: database,\r\n            mode: mode,\r\n            impersonatedUser: impersonatedUser,\r\n            beforeError: beforeError,\r\n            afterError: afterError,\r\n            beforeComplete: beforeComplete,\r\n            afterComplete: afterComplete,\r\n            flush: false\r\n        });\r\n    };\r\n    /**\r\n     * Commit the explicit transaction.\r\n     * @param {Object} param\r\n     * @param {function(err: Error)} param.beforeError the callback to invoke before handling the error.\r\n     * @param {function(err: Error)} param.afterError the callback to invoke after handling the error.\r\n     * @param {function()} param.beforeComplete the callback to invoke before handling the completion.\r\n     * @param {function()} param.afterComplete the callback to invoke after handling the completion.\r\n     * @returns {StreamObserver} the stream observer that monitors the corresponding server response.\r\n     */\r\n    BoltProtocol.prototype.commitTransaction = function (_a) {\r\n        var _b = _a === void 0 ? {} : _a, beforeError = _b.beforeError, afterError = _b.afterError, beforeComplete = _b.beforeComplete, afterComplete = _b.afterComplete;\r\n        // WRITE access mode is used as a place holder here, it has\r\n        // no effect on behaviour for Bolt V1 & V2\r\n        return this.run('COMMIT', {}, {\r\n            bookmark: Bookmark.empty(),\r\n            txConfig: TxConfig.empty(),\r\n            mode: ACCESS_MODE_WRITE,\r\n            beforeError: beforeError,\r\n            afterError: afterError,\r\n            beforeComplete: beforeComplete,\r\n            afterComplete: afterComplete\r\n        });\r\n    };\r\n    /**\r\n     * Rollback the explicit transaction.\r\n     * @param {Object} param\r\n     * @param {function(err: Error)} param.beforeError the callback to invoke before handling the error.\r\n     * @param {function(err: Error)} param.afterError the callback to invoke after handling the error.\r\n     * @param {function()} param.beforeComplete the callback to invoke before handling the completion.\r\n     * @param {function()} param.afterComplete the callback to invoke after handling the completion.\r\n     * @returns {StreamObserver} the stream observer that monitors the corresponding server response.\r\n     */\r\n    BoltProtocol.prototype.rollbackTransaction = function (_a) {\r\n        var _b = _a === void 0 ? {} : _a, beforeError = _b.beforeError, afterError = _b.afterError, beforeComplete = _b.beforeComplete, afterComplete = _b.afterComplete;\r\n        // WRITE access mode is used as a place holder here, it has\r\n        // no effect on behaviour for Bolt V1 & V2\r\n        return this.run('ROLLBACK', {}, {\r\n            bookmark: Bookmark.empty(),\r\n            txConfig: TxConfig.empty(),\r\n            mode: ACCESS_MODE_WRITE,\r\n            beforeError: beforeError,\r\n            afterError: afterError,\r\n            beforeComplete: beforeComplete,\r\n            afterComplete: afterComplete\r\n        });\r\n    };\r\n    /**\r\n     * Send a Cypher query through the underlying connection.\r\n     * @param {string} query the cypher query.\r\n     * @param {Object} parameters the query parameters.\r\n     * @param {Object} param\r\n     * @param {Bookmark} param.bookmark the bookmark.\r\n     * @param {TxConfig} param.txConfig the transaction configuration.\r\n     * @param {string} param.database the target database name.\r\n     * @param {string} param.impersonatedUser the impersonated user\r\n     * @param {string} param.mode the access mode.\r\n     * @param {function(keys: string[])} param.beforeKeys the callback to invoke before handling the keys.\r\n     * @param {function(keys: string[])} param.afterKeys the callback to invoke after handling the keys.\r\n     * @param {function(err: Error)} param.beforeError the callback to invoke before handling the error.\r\n     * @param {function(err: Error)} param.afterError the callback to invoke after handling the error.\r\n     * @param {function()} param.beforeComplete the callback to invoke before handling the completion.\r\n     * @param {function()} param.afterComplete the callback to invoke after handling the completion.\r\n     * @param {boolean} param.flush whether to flush the buffered messages.\r\n     * @returns {StreamObserver} the stream observer that monitors the corresponding server response.\r\n     */\r\n    BoltProtocol.prototype.run = function (query, parameters, _a) {\r\n        var _b = _a === void 0 ? {} : _a, bookmark = _b.bookmark, txConfig = _b.txConfig, database = _b.database, mode = _b.mode, impersonatedUser = _b.impersonatedUser, beforeKeys = _b.beforeKeys, afterKeys = _b.afterKeys, beforeError = _b.beforeError, afterError = _b.afterError, beforeComplete = _b.beforeComplete, afterComplete = _b.afterComplete, _c = _b.flush, flush = _c === void 0 ? true : _c;\r\n        var observer = new stream_observers_1.ResultStreamObserver({\r\n            server: this._server,\r\n            beforeKeys: beforeKeys,\r\n            afterKeys: afterKeys,\r\n            beforeError: beforeError,\r\n            afterError: afterError,\r\n            beforeComplete: beforeComplete,\r\n            afterComplete: afterComplete\r\n        });\r\n        // bookmark and mode are ignored in this version of the protocol\r\n        (0, bolt_protocol_util_1.assertTxConfigIsEmpty)(txConfig, this._onProtocolError, observer);\r\n        // passing in a database name on this protocol version throws an error\r\n        (0, bolt_protocol_util_1.assertDatabaseIsEmpty)(database, this._onProtocolError, observer);\r\n        // passing impersonated user on this protocol version throws an error\r\n        (0, bolt_protocol_util_1.assertImpersonatedUserIsEmpty)(impersonatedUser, this._onProtocolError, observer);\r\n        this.write(request_message_1.default.run(query, parameters), observer, false);\r\n        this.write(request_message_1.default.pullAll(), observer, flush);\r\n        return observer;\r\n    };\r\n    Object.defineProperty(BoltProtocol.prototype, \"currentFailure\", {\r\n        get: function () {\r\n            return this._responseHandler.currentFailure;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Send a RESET through the underlying connection.\r\n     * @param {Object} param\r\n     * @param {function(err: Error)} param.onError the callback to invoke on error.\r\n     * @param {function()} param.onComplete the callback to invoke on completion.\r\n     * @returns {StreamObserver} the stream observer that monitors the corresponding server response.\r\n     */\r\n    BoltProtocol.prototype.reset = function (_a) {\r\n        var _b = _a === void 0 ? {} : _a, onError = _b.onError, onComplete = _b.onComplete;\r\n        var observer = new stream_observers_1.ResetObserver({\r\n            onProtocolError: this._onProtocolError,\r\n            onError: onError,\r\n            onComplete: onComplete\r\n        });\r\n        this.write(request_message_1.default.reset(), observer, true);\r\n        return observer;\r\n    };\r\n    BoltProtocol.prototype._createPacker = function (chunker) {\r\n        return new packstream_1.v1.Packer(chunker);\r\n    };\r\n    BoltProtocol.prototype._createUnpacker = function (disableLosslessIntegers, useBigInt) {\r\n        return new packstream_1.v1.Unpacker(disableLosslessIntegers, useBigInt);\r\n    };\r\n    /**\r\n     * Write a message to the network channel.\r\n     * @param {RequestMessage} message the message to write.\r\n     * @param {StreamObserver} observer the response observer.\r\n     * @param {boolean} flush `true` if flush should happen after the message is written to the buffer.\r\n     */\r\n    BoltProtocol.prototype.write = function (message, observer, flush) {\r\n        var _this = this;\r\n        var queued = this.queueObserverIfProtocolIsNotBroken(observer);\r\n        if (queued) {\r\n            if (this._log.isDebugEnabled()) {\r\n                this._log.debug(\"C: \" + message);\r\n            }\r\n            this.packer().packStruct(message.signature, message.fields.map(function (field) { return _this.packer().packable(field); }));\r\n            this._chunker.messageBoundary();\r\n            if (flush) {\r\n                this._chunker.flush();\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Notifies faltal erros to the observers and mark the protocol in the fatal error state.\r\n     * @param {Error} error The error\r\n     */\r\n    BoltProtocol.prototype.notifyFatalError = function (error) {\r\n        this._fatalError = error;\r\n        return this._responseHandler._notifyErrorToObservers(error);\r\n    };\r\n    /**\r\n     * Updates the the current observer with the next one on the queue.\r\n     */\r\n    BoltProtocol.prototype.updateCurrentObserver = function () {\r\n        return this._responseHandler._updateCurrentObserver();\r\n    };\r\n    /**\r\n     * Checks if exist an ongoing observable requests\r\n     * @return {boolean}\r\n     */\r\n    BoltProtocol.prototype.hasOngoingObservableRequests = function () {\r\n        return this._responseHandler.hasOngoingObservableRequests();\r\n    };\r\n    /**\r\n     * Enqueue the observer if the protocol is not broken.\r\n     * In case it's broken, the observer will be notified about the error.\r\n     *\r\n     * @param {StreamObserver} observer The observer\r\n     * @returns {boolean} if it was queued\r\n     */\r\n    BoltProtocol.prototype.queueObserverIfProtocolIsNotBroken = function (observer) {\r\n        if (this.isBroken()) {\r\n            this.notifyFatalErrorToObserver(observer);\r\n            return false;\r\n        }\r\n        return this._responseHandler._queueObserver(observer);\r\n    };\r\n    /**\r\n     * Veritfy the protocol is not broken.\r\n     * @returns {boolean}\r\n     */\r\n    BoltProtocol.prototype.isBroken = function () {\r\n        return !!this._fatalError;\r\n    };\r\n    /**\r\n     * Notifies the current fatal error to the observer\r\n     *\r\n     * @param {StreamObserver} observer The observer\r\n     */\r\n    BoltProtocol.prototype.notifyFatalErrorToObserver = function (observer) {\r\n        if (observer && observer.onError) {\r\n            observer.onError(this._fatalError);\r\n        }\r\n    };\r\n    /**\r\n     * Reset current failure on the observable response handler to null.\r\n     */\r\n    BoltProtocol.prototype.resetFailure = function () {\r\n        this._responseHandler._resetFailure();\r\n    };\r\n    BoltProtocol.prototype._onLoginCompleted = function (metadata, onCompleted) {\r\n        if (metadata) {\r\n            var serverVersion = metadata.server;\r\n            if (!this._server.version) {\r\n                this._server.version = serverVersion;\r\n            }\r\n        }\r\n        if (onCompleted) {\r\n            onCompleted(metadata);\r\n        }\r\n    };\r\n    BoltProtocol.prototype._onLoginError = function (error, onError) {\r\n        this._onProtocolError(error.message);\r\n        if (onError) {\r\n            onError(error);\r\n        }\r\n    };\r\n    return BoltProtocol;\r\n}());\r\nexports.default = BoltProtocol;\r\n"]},"metadata":{},"sourceType":"script"}