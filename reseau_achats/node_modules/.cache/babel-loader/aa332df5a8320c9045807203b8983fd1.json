{"ast":null,"code":"\"use strict\";\n/**\r\n * Copyright (c) \"Neo4j\"\r\n * Neo4j Sweden AB [http://neo4j.com]\r\n *\r\n * This file is part of Neo4j.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.canRetryOn = void 0;\n\nvar error_1 = require(\"../error\");\n/**\r\n * Verified error and returns if it could be retried or not\r\n *\r\n * @param _error The error\r\n * @returns If the transaction could be retried.\r\n */\n\n\nfunction canRetryOn(_error) {\n  return _error && _error instanceof error_1.Neo4jError && _error.code && (_error.code === error_1.SERVICE_UNAVAILABLE || _error.code === error_1.SESSION_EXPIRED || _isAuthorizationExpired(_error) || _isTransientError(_error));\n}\n\nexports.canRetryOn = canRetryOn;\n\nfunction _isTransientError(error) {\n  // Retries should not happen when transaction was explicitly terminated by the user.\n  // Termination of transaction might result in two different error codes depending on where it was\n  // terminated. These are really client errors but classification on the server is not entirely correct and\n  // they are classified as transient.\n  var code = error.code;\n\n  if (code.indexOf('TransientError') >= 0) {\n    if (code === 'Neo.TransientError.Transaction.Terminated' || code === 'Neo.TransientError.Transaction.LockClientStopped') {\n      return false;\n    }\n\n    return true;\n  }\n\n  return false;\n}\n\nfunction _isAuthorizationExpired(error) {\n  return error.code === 'Neo.ClientError.Security.AuthorizationExpired';\n}","map":{"version":3,"sources":["D:/Documents/EMA/Mines A3/NoSQL/ReseauAchats/reseau_achats/node_modules/neo4j-driver-core/lib/internal/retry-strategy.js"],"names":["Object","defineProperty","exports","value","canRetryOn","error_1","require","_error","Neo4jError","code","SERVICE_UNAVAILABLE","SESSION_EXPIRED","_isAuthorizationExpired","_isTransientError","error","indexOf"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,UAAR,GAAqB,KAAK,CAA1B;;AACA,IAAIC,OAAO,GAAGC,OAAO,CAAC,UAAD,CAArB;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASF,UAAT,CAAoBG,MAApB,EAA4B;AACxB,SAAQA,MAAM,IACVA,MAAM,YAAYF,OAAO,CAACG,UADtB,IAEJD,MAAM,CAACE,IAFH,KAGHF,MAAM,CAACE,IAAP,KAAgBJ,OAAO,CAACK,mBAAxB,IACGH,MAAM,CAACE,IAAP,KAAgBJ,OAAO,CAACM,eAD3B,IAEGC,uBAAuB,CAACL,MAAD,CAF1B,IAGGM,iBAAiB,CAACN,MAAD,CANjB,CAAR;AAOH;;AACDL,OAAO,CAACE,UAAR,GAAqBA,UAArB;;AACA,SAASS,iBAAT,CAA2BC,KAA3B,EAAkC;AAC9B;AACA;AACA;AACA;AACA,MAAIL,IAAI,GAAGK,KAAK,CAACL,IAAjB;;AACA,MAAIA,IAAI,CAACM,OAAL,CAAa,gBAAb,KAAkC,CAAtC,EAAyC;AACrC,QAAIN,IAAI,KAAK,2CAAT,IACAA,IAAI,KAAK,kDADb,EACiE;AAC7D,aAAO,KAAP;AACH;;AACD,WAAO,IAAP;AACH;;AACD,SAAO,KAAP;AACH;;AACD,SAASG,uBAAT,CAAiCE,KAAjC,EAAwC;AACpC,SAAOA,KAAK,CAACL,IAAN,KAAe,+CAAtB;AACH","sourcesContent":["\"use strict\";\r\n/**\r\n * Copyright (c) \"Neo4j\"\r\n * Neo4j Sweden AB [http://neo4j.com]\r\n *\r\n * This file is part of Neo4j.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.canRetryOn = void 0;\r\nvar error_1 = require(\"../error\");\r\n/**\r\n * Verified error and returns if it could be retried or not\r\n *\r\n * @param _error The error\r\n * @returns If the transaction could be retried.\r\n */\r\nfunction canRetryOn(_error) {\r\n    return (_error &&\r\n        _error instanceof error_1.Neo4jError &&\r\n        _error.code &&\r\n        (_error.code === error_1.SERVICE_UNAVAILABLE ||\r\n            _error.code === error_1.SESSION_EXPIRED ||\r\n            _isAuthorizationExpired(_error) ||\r\n            _isTransientError(_error)));\r\n}\r\nexports.canRetryOn = canRetryOn;\r\nfunction _isTransientError(error) {\r\n    // Retries should not happen when transaction was explicitly terminated by the user.\r\n    // Termination of transaction might result in two different error codes depending on where it was\r\n    // terminated. These are really client errors but classification on the server is not entirely correct and\r\n    // they are classified as transient.\r\n    var code = error.code;\r\n    if (code.indexOf('TransientError') >= 0) {\r\n        if (code === 'Neo.TransientError.Transaction.Terminated' ||\r\n            code === 'Neo.TransientError.Transaction.LockClientStopped') {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\nfunction _isAuthorizationExpired(error) {\r\n    return error.code === 'Neo.ClientError.Security.AuthorizationExpired';\r\n}\r\n"]},"metadata":{},"sourceType":"script"}