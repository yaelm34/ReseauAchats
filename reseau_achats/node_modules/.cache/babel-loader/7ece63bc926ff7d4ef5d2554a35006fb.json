{"ast":null,"code":"/** PURE_IMPORTS_START _ReplaySubject PURE_IMPORTS_END */\nimport { ReplaySubject } from '../ReplaySubject';\nexport function shareReplay(configOrBufferSize, windowTime, scheduler) {\n  var config;\n\n  if (configOrBufferSize && typeof configOrBufferSize === 'object') {\n    config = configOrBufferSize;\n  } else {\n    config = {\n      bufferSize: configOrBufferSize,\n      windowTime: windowTime,\n      refCount: false,\n      scheduler: scheduler\n    };\n  }\n\n  return function (source) {\n    return source.lift(shareReplayOperator(config));\n  };\n}\n\nfunction shareReplayOperator(_a) {\n  var _b = _a.bufferSize,\n      bufferSize = _b === void 0 ? Number.POSITIVE_INFINITY : _b,\n      _c = _a.windowTime,\n      windowTime = _c === void 0 ? Number.POSITIVE_INFINITY : _c,\n      useRefCount = _a.refCount,\n      scheduler = _a.scheduler;\n  var subject;\n  var refCount = 0;\n  var subscription;\n  var hasError = false;\n  var isComplete = false;\n  return function shareReplayOperation(source) {\n    refCount++;\n    var innerSub;\n\n    if (!subject || hasError) {\n      hasError = false;\n      subject = new ReplaySubject(bufferSize, windowTime, scheduler);\n      innerSub = subject.subscribe(this);\n      subscription = source.subscribe({\n        next: function (value) {\n          subject.next(value);\n        },\n        error: function (err) {\n          hasError = true;\n          subject.error(err);\n        },\n        complete: function () {\n          isComplete = true;\n          subscription = undefined;\n          subject.complete();\n        }\n      });\n\n      if (isComplete) {\n        subscription = undefined;\n      }\n    } else {\n      innerSub = subject.subscribe(this);\n    }\n\n    this.add(function () {\n      refCount--;\n      innerSub.unsubscribe();\n      innerSub = undefined;\n\n      if (subscription && !isComplete && useRefCount && refCount === 0) {\n        subscription.unsubscribe();\n        subscription = undefined;\n        subject = undefined;\n      }\n    });\n  };\n}","map":{"version":3,"mappings":"AACA;AAiEA,SAAMA,aAAN,QACE,kBADF;OAKE,SAA8BC,WAA9B,CAA8BC,kBAA9B,EAA8BC,UAA9B,EAA8BC,SAA9B,EAA8B;AAC9B,MAAIC,MAAJ;;MACEH,kBAAS,WAAwCA,kBAAxC,KAAwC;AAClDG;SACC;UACE;AACAC,gBAAU,oBADV;AAEAH,gBAAU,YAFV;AAGAI,gBAAS,KAHT;AAIAH;AAJA;AAMJ;;AACD;AAAA;AAAA;AAED;;SACEI;AAKA,MAAIC,OAAqC,CAACH,UAA1C;AAAA,MAA0CA,0DAA1C;AAAA,MAA0CI,kBAA1C;AAAA,MAA0CP,0DAA1C;AAAA,MAA0CQ,yBAA1C;AAAA,MAA0CP,wBAA1C;AACA,MAAIQ,OAAJ;AACA,MAAIL,YAAJ;AACA,MAAIM,YAAJ;AACA,MAAIC,WAAU,KAAd;AAEA,gBAAO,GAAS,KAAhB;SAIE,SAAWC,oBAAX,CAAWC,MAAX,EAAW;AACXT,YAAI;AACJ,QAAIU,QAAJ;;QACE,YAAWH,UAAM;AACjBA,cAAO,GAAG,KAAV;AACAF,gBAAQ,IAAGZ,aAAH,CAAoBM,UAApB,EAA2BH,UAA3B,EAA2BC,SAA3B,CAAR;AACAa,wBAAe,UAAf,CAAsB,IAAtB;kBACM,SAAC,UAAD,CAAM;YACR,YAAYC,KAAZ,EAAmB;AACpBN;AACD,SAHU;aAIR,YAAWO,GAAX,EAAgB;AAChBL,kBAAQ,OAAR;AACDF;AACD,SAPU;gBAQR,cAAkB;AAClBQ,uBAAY,IAAZ;AACAP,sBAAQ,YAAR;AACDD;AACA;AAZS,OAAN;;UAmBJQ,YAAY;AACbP;AACF;WACC;AACDI;AAED;;SACEI,gBAAW;AACXd,cAAQ;AACRU,cAAQ,YAAR;AACAA,cAAI,YAAJ;;UACEJ,YAAY,IAAC,WAAb,IAA2BF,WAA3B,IAA2BJ;AAC3BM,oBAAY,YAAZ;AACAA,oBAAU,YAAV;AACDD;AACA;AACH;AACH","names":["ReplaySubject","shareReplay","configOrBufferSize","windowTime","scheduler","config","bufferSize","refCount","shareReplayOperator","_b","_c","useRefCount","subject","subscription","hasError","shareReplayOperation","source","innerSub","value","err","isComplete","add"],"sources":["D:\\Documents\\EMA\\Mines A3\\NoSQL\\ReseauAchats\\reseau_achats\\node_modules\\rxjs\\src\\internal\\operators\\shareReplay.ts"],"sourcesContent":["import { Observable } from '../Observable';\r\nimport { ReplaySubject } from '../ReplaySubject';\r\nimport { Subscription } from '../Subscription';\r\nimport { MonoTypeOperatorFunction, SchedulerLike } from '../types';\r\nimport { Subscriber } from '../Subscriber';\r\n\r\nexport interface ShareReplayConfig {\r\n  bufferSize?: number;\r\n  windowTime?: number;\r\n  refCount: boolean;\r\n  scheduler?: SchedulerLike;\r\n}\r\n\r\n/**\r\n * Share source and replay specified number of emissions on subscription.\r\n *\r\n * This operator is a specialization of `replay` that connects to a source observable\r\n * and multicasts through a `ReplaySubject` constructed with the specified arguments.\r\n * A successfully completed source will stay cached in the `shareReplayed observable` forever,\r\n * but an errored source can be retried.\r\n *\r\n * ## Why use shareReplay?\r\n * You generally want to use `shareReplay` when you have side-effects or taxing computations\r\n * that you do not wish to be executed amongst multiple subscribers.\r\n * It may also be valuable in situations where you know you will have late subscribers to\r\n * a stream that need access to previously emitted values.\r\n * This ability to replay values on subscription is what differentiates {@link share} and `shareReplay`.\r\n *\r\n * ![](shareReplay.png)\r\n *\r\n * ## Example\r\n * ```ts\r\n * import { interval } from 'rxjs';\r\n * import { shareReplay, take } from 'rxjs/operators';\r\n *\r\n * const obs$ = interval(1000);\r\n * const shared$ = obs$.pipe(\r\n *   take(4),\r\n *   shareReplay(3)\r\n * );\r\n * shared$.subscribe(x => console.log('source A: ', x));\r\n * shared$.subscribe(y => console.log('source B: ', y));\r\n *\r\n * ```\r\n *\r\n * @see {@link publish}\r\n * @see {@link share}\r\n * @see {@link publishReplay}\r\n *\r\n * @param {Number} [bufferSize=Number.POSITIVE_INFINITY] Maximum element count of the replay buffer.\r\n * @param {Number} [windowTime=Number.POSITIVE_INFINITY] Maximum time length of the replay buffer in milliseconds.\r\n * @param {Scheduler} [scheduler] Scheduler where connected observers within the selector function\r\n * will be invoked on.\r\n * @return {Observable} An observable sequence that contains the elements of a sequence produced\r\n * by multicasting the source sequence within a selector function.\r\n * @method shareReplay\r\n * @owner Observable\r\n */\r\nexport function shareReplay<T>(\r\n  config: ShareReplayConfig\r\n): MonoTypeOperatorFunction<T>;\r\nexport function shareReplay<T>(\r\n  bufferSize?: number,\r\n  windowTime?: number,\r\n  scheduler?: SchedulerLike\r\n): MonoTypeOperatorFunction<T>;\r\nexport function shareReplay<T>(\r\n  configOrBufferSize?: ShareReplayConfig | number,\r\n  windowTime?: number,\r\n  scheduler?: SchedulerLike\r\n): MonoTypeOperatorFunction<T> {\r\n  let config: ShareReplayConfig;\r\n  if (configOrBufferSize && typeof configOrBufferSize === 'object') {\r\n    config = configOrBufferSize as ShareReplayConfig;\r\n  } else {\r\n    config = {\r\n      bufferSize: configOrBufferSize as number | undefined,\r\n      windowTime,\r\n      refCount: false,\r\n      scheduler,\r\n    };\r\n  }\r\n  return (source: Observable<T>) => source.lift(shareReplayOperator(config));\r\n}\r\n\r\nfunction shareReplayOperator<T>({\r\n  bufferSize = Number.POSITIVE_INFINITY,\r\n  windowTime = Number.POSITIVE_INFINITY,\r\n  refCount: useRefCount,\r\n  scheduler,\r\n}: ShareReplayConfig) {\r\n  let subject: ReplaySubject<T> | undefined;\r\n  let refCount = 0;\r\n  let subscription: Subscription | undefined;\r\n  let hasError = false;\r\n  let isComplete = false;\r\n\r\n  return function shareReplayOperation(\r\n    this: Subscriber<T>,\r\n    source: Observable<T>\r\n  ) {\r\n    refCount++;\r\n    let innerSub: Subscription;\r\n    if (!subject || hasError) {\r\n      hasError = false;\r\n      subject = new ReplaySubject<T>(bufferSize, windowTime, scheduler);\r\n      innerSub = subject.subscribe(this);\r\n      subscription = source.subscribe({\r\n        next(value) {\r\n          subject.next(value);\r\n        },\r\n        error(err) {\r\n          hasError = true;\r\n          subject.error(err);\r\n        },\r\n        complete() {\r\n          isComplete = true;\r\n          subscription = undefined;\r\n          subject.complete();\r\n        },\r\n      });\r\n\r\n      // Here we need to check to see if the source synchronously completed. Although\r\n      // we're setting `subscription = undefined` in the completion handler, if the source\r\n      // is synchronous, that will happen *before* subscription is set by the return of\r\n      // the `subscribe` call.\r\n      if (isComplete) {\r\n        subscription = undefined;\r\n      }\r\n    } else {\r\n      innerSub = subject.subscribe(this);\r\n    }\r\n\r\n    this.add(() => {\r\n      refCount--;\r\n      innerSub.unsubscribe();\r\n      innerSub = undefined;\r\n      if (subscription && !isComplete && useRefCount && refCount === 0) {\r\n        subscription.unsubscribe();\r\n        subscription = undefined;\r\n        subject = undefined;\r\n      }\r\n    });\r\n  };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}