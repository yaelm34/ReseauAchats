{"ast":null,"code":"/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nexport function every(predicate, thisArg) {\n  return function (source) {\n    return source.lift(new EveryOperator(predicate, thisArg, source));\n  };\n}\n\nvar EveryOperator = /*@__PURE__*/function () {\n  function EveryOperator(predicate, thisArg, source) {\n    this.predicate = predicate;\n    this.thisArg = thisArg;\n    this.source = source;\n  }\n\n  EveryOperator.prototype.call = function (observer, source) {\n    return source.subscribe(new EverySubscriber(observer, this.predicate, this.thisArg, this.source));\n  };\n\n  return EveryOperator;\n}();\n\nvar EverySubscriber = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(EverySubscriber, _super);\n\n  function EverySubscriber(destination, predicate, thisArg, source) {\n    var _this = _super.call(this, destination) || this;\n\n    _this.predicate = predicate;\n    _this.thisArg = thisArg;\n    _this.source = source;\n    _this.index = 0;\n    _this.thisArg = thisArg || _this;\n    return _this;\n  }\n\n  EverySubscriber.prototype.notifyComplete = function (everyValueMatch) {\n    this.destination.next(everyValueMatch);\n    this.destination.complete();\n  };\n\n  EverySubscriber.prototype._next = function (value) {\n    var result = false;\n\n    try {\n      result = this.predicate.call(this.thisArg, value, this.index++, this.source);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n\n    if (!result) {\n      this.notifyComplete(false);\n    }\n  };\n\n  EverySubscriber.prototype._complete = function () {\n    this.notifyComplete(true);\n  };\n\n  return EverySubscriber;\n}(Subscriber);","map":{"version":3,"mappings":";AAEA,OAAO,KAAEA,OAAT,MAAqB,OAArB;AAwBA,SAAMC,UAAN,QAAyB,eAAzB;OAEE,SAAOC,KAAP,CAAQC,SAAR,EAAkCC,OAAlC,EAAkC;AACnC;AAAA;AAAA;AAED;;IACEC,6BAAoB,YAEA;WAFAA,yBAAsED;AACtE;AACA;AACnB;AAED;;eACS,WAAOE,OAAU,UAAIC,QAAJ,EAAoBC,MAApB,EAA8B;AACvD;AACH;;AATA,SASCH,aATD;AAgBA,CAfsB;;IAeWI,yCAAaC,MAAb,EAAa;AAG5CV,qCAAYU,MAAZ;;WAAAD,gBAIEE,aAAMR,WAAYC,SAEnBI;AALmB,kCAAsEG,WAAtE,KAAsE,IAAtE;;AACAC;AACAA;AALZA,mBAAiBJ,MAAjB;AAONI,SAAI,CAACC,KAAL,GAAY,CAAZ;;AACD;AAEO;;iBACD,WAAiBC,iBAAiB;AACvC,SAAKH,WAAL,CAAiBI,IAAjB,CAAiBC,eAAjB;AACD;AAES;;iBACE,WAASC;AACnB,QAAIC,cAAJ;;QACE;AACDA;AAAC,aACAC,KAAK;AACL,uBAAOC,KAAP,CAAOD,GAAP;AACD;AAED;;QACE,SAAK;AACN;AACF;AAES;;iBACH,WAAeE,YAAM;AAC3B;AACH;;AAjCiC;CAAA","names":["tslib_1","Subscriber","every","predicate","thisArg","EveryOperator","call","observer","source","EverySubscriber","_super","destination","_this","index","notifyComplete","next","everyValueMatch","_next","result","err","error","_complete"],"sources":["D:\\Documents\\EMA\\Mines A3\\NoSQL\\ReseauAchats\\reseau_achats\\node_modules\\rxjs\\src\\internal\\operators\\every.ts"],"sourcesContent":["import { Operator } from '../Operator';\r\nimport { Observable } from '../Observable';\r\nimport { Subscriber } from '../Subscriber';\r\nimport { Observer, OperatorFunction } from '../types';\r\n\r\n/**\r\n * Returns an Observable that emits whether or not every item of the source satisfies the condition specified.\r\n *\r\n * ## Example\r\n * A simple example emitting true if all elements are less than 5, false otherwise\r\n * ```ts\r\n * import { of } from 'rxjs';\r\n * import { every } from 'rxjs/operators';\r\n *\r\n *  of(1, 2, 3, 4, 5, 6).pipe(\r\n *     every(x => x < 5),\r\n * )\r\n * .subscribe(x => console.log(x)); // -> false\r\n * ```\r\n *\r\n * @param {function} predicate A function for determining if an item meets a specified condition.\r\n * @param {any} [thisArg] Optional object to use for `this` in the callback.\r\n * @return {Observable} An Observable of booleans that determines if all items of the source Observable meet the condition specified.\r\n * @method every\r\n * @owner Observable\r\n */\r\nexport function every<T>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\r\n                         thisArg?: any): OperatorFunction<T, boolean> {\r\n  return (source: Observable<T>) => source.lift(new EveryOperator(predicate, thisArg, source));\r\n}\r\n\r\nclass EveryOperator<T> implements Operator<T, boolean> {\r\n  constructor(private predicate: (value: T, index: number, source: Observable<T>) => boolean,\r\n              private thisArg?: any,\r\n              private source?: Observable<T>) {\r\n  }\r\n\r\n  call(observer: Subscriber<boolean>, source: any): any {\r\n    return source.subscribe(new EverySubscriber(observer, this.predicate, this.thisArg, this.source));\r\n  }\r\n}\r\n\r\n/**\r\n * We need this JSDoc comment for affecting ESDoc.\r\n * @ignore\r\n * @extends {Ignored}\r\n */\r\nclass EverySubscriber<T> extends Subscriber<T> {\r\n  private index: number = 0;\r\n\r\n  constructor(destination: Observer<boolean>,\r\n              private predicate: (value: T, index: number, source: Observable<T>) => boolean,\r\n              private thisArg: any,\r\n              private source?: Observable<T>) {\r\n    super(destination);\r\n    this.thisArg = thisArg || this;\r\n  }\r\n\r\n  private notifyComplete(everyValueMatch: boolean): void {\r\n    this.destination.next(everyValueMatch);\r\n    this.destination.complete();\r\n  }\r\n\r\n  protected _next(value: T): void {\r\n    let result = false;\r\n    try {\r\n      result = this.predicate.call(this.thisArg, value, this.index++, this.source);\r\n    } catch (err) {\r\n      this.destination.error(err);\r\n      return;\r\n    }\r\n\r\n    if (!result) {\r\n      this.notifyComplete(false);\r\n    }\r\n  }\r\n\r\n  protected _complete(): void {\r\n    this.notifyComplete(true);\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}