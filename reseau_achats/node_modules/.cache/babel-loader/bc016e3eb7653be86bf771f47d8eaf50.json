{"ast":null,"code":"/** PURE_IMPORTS_START tslib,_Subscriber,_scheduler_async,_throttle PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nimport { async } from '../scheduler/async';\nimport { defaultThrottleConfig } from './throttle';\nexport function throttleTime(duration, scheduler, config) {\n  if (scheduler === void 0) {\n    scheduler = async;\n  }\n\n  if (config === void 0) {\n    config = defaultThrottleConfig;\n  }\n\n  return function (source) {\n    return source.lift(new ThrottleTimeOperator(duration, scheduler, config.leading, config.trailing));\n  };\n}\n\nvar ThrottleTimeOperator = /*@__PURE__*/function () {\n  function ThrottleTimeOperator(duration, scheduler, leading, trailing) {\n    this.duration = duration;\n    this.scheduler = scheduler;\n    this.leading = leading;\n    this.trailing = trailing;\n  }\n\n  ThrottleTimeOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new ThrottleTimeSubscriber(subscriber, this.duration, this.scheduler, this.leading, this.trailing));\n  };\n\n  return ThrottleTimeOperator;\n}();\n\nvar ThrottleTimeSubscriber = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(ThrottleTimeSubscriber, _super);\n\n  function ThrottleTimeSubscriber(destination, duration, scheduler, leading, trailing) {\n    var _this = _super.call(this, destination) || this;\n\n    _this.duration = duration;\n    _this.scheduler = scheduler;\n    _this.leading = leading;\n    _this.trailing = trailing;\n    _this._hasTrailingValue = false;\n    _this._trailingValue = null;\n    return _this;\n  }\n\n  ThrottleTimeSubscriber.prototype._next = function (value) {\n    if (this.throttled) {\n      if (this.trailing) {\n        this._trailingValue = value;\n        this._hasTrailingValue = true;\n      }\n    } else {\n      this.add(this.throttled = this.scheduler.schedule(dispatchNext, this.duration, {\n        subscriber: this\n      }));\n\n      if (this.leading) {\n        this.destination.next(value);\n      } else if (this.trailing) {\n        this._trailingValue = value;\n        this._hasTrailingValue = true;\n      }\n    }\n  };\n\n  ThrottleTimeSubscriber.prototype._complete = function () {\n    if (this._hasTrailingValue) {\n      this.destination.next(this._trailingValue);\n      this.destination.complete();\n    } else {\n      this.destination.complete();\n    }\n  };\n\n  ThrottleTimeSubscriber.prototype.clearThrottle = function () {\n    var throttled = this.throttled;\n\n    if (throttled) {\n      if (this.trailing && this._hasTrailingValue) {\n        this.destination.next(this._trailingValue);\n        this._trailingValue = null;\n        this._hasTrailingValue = false;\n      }\n\n      throttled.unsubscribe();\n      this.remove(throttled);\n      this.throttled = null;\n    }\n  };\n\n  return ThrottleTimeSubscriber;\n}(Subscriber);\n\nfunction dispatchNext(arg) {\n  var subscriber = arg.subscriber;\n  subscriber.clearThrottle();\n}","map":{"version":3,"mappings":";AACA,OAAO,KAAEA,OAAT,MAAqB,OAArB;AAEA,SAASC,UAAT,QAAsB,eAAtB;AAEA,SAAyBC,KAAzB,QAAyB,oBAAzB;AAkFA,SAAMC,qBAAN,QAAgD,YAAhD;OACgC,2CAAgCC,MAAhC,EAAgC;AAChC;AAC9BC,aAAO,QAAP;AACD;;AAED;AACED;;;SACoB;AAAA,WAAwBE,2FAAxB;AAAwB;;;wBAExB,gBAAiB;AACrC,WAACC,oBAAD,CAACC,QAAD,EAACH,SAAD,EAACI,OAAD,EAACC,QAAD,EAAC;AAED;AACE,qBAAcL,SAAd;AAGD;AACH;AAAC;;AAODE;AAAwC,uDAAaI,UAAb,EAAa,aAAb,EAAa,cAAb,EAAa,YAAb,EAAa,aAAb;AAKtC,GALF;;SAKEJ;CApBqC;;0BAsBjB,gBAAwB;SACxB,WAAOK,wBAASC;;WAChBD,uBAAiBE;AAP7B,4BAAiB,IAAjB,EAA6BA,WAA7B,KAAmC,IAAnC;;AACAC;;AAQPA;AAESA;AACRA,SAAI,kBAAJ,GAAoB,KAApB;SACE,kBAAmB;;;;wBAGlB;QACF;UAAM;AACD,aAAKC,cAAL,GAAsBC,KAAtB;AACA,aAAKC,iBAAL,GAAc,IAAd;;;WAGFC,IAAK,iBAAiB,KAAKd,SAAL,CAAMe,QAAN,CAAMC,YAAN,EAAM,aAAN,EAAM;AAAAV;AAAA,OAAN;;UACtB,KAAKF;AACN;AACF,aACF;AAES;AACA,aAACS,iBAAD,GAAoB,IAApB;AACN;;;;wBAEK;QACL,KAAKA,mBAAY;AAClB;AACF;AAED,WACQ;AACF,uBAAWI,QAAX;;;;wBAGK,WAAcC,gBAAQ;iBACtB;;mBACN;AACD,eAASb,QAAT,IAAqB,KAAGQ,iBAAxB,EAAwB;AACpB,aAACJ,WAAD,CAAiBU,IAAjB,CAAmB,mBAAnB;AACA,aAACR,cAAD,GAAkB,IAAlB;AACL;AACF;;AACHS;AApDkD,WAoDjDC,MApDiD,CAoDjDD,SApDiD;AA0DzC,uBAAmC,IAAnC;AACC;AACR;;AACD;CAtD6C","names":["tslib_1","Subscriber","async","defaultThrottleConfig","config","scheduler","source","ThrottleTimeOperator","duration","leading","trailing","subscriber","ThrottleTimeSubscriber","_super","destination","_this","_trailingValue","value","_hasTrailingValue","add","schedule","dispatchNext","complete","clearThrottle","next","throttled","remove"],"sources":["D:\\Documents\\EMA\\Mines A3\\NoSQL\\ReseauAchats\\reseau_achats\\node_modules\\rxjs\\src\\internal\\operators\\throttleTime.ts"],"sourcesContent":["import { Operator } from '../Operator';\r\nimport { Subscriber } from '../Subscriber';\r\nimport { Subscription } from '../Subscription';\r\nimport { async } from '../scheduler/async';\r\nimport { Observable } from '../Observable';\r\nimport { ThrottleConfig, defaultThrottleConfig } from './throttle';\r\nimport { MonoTypeOperatorFunction, SchedulerLike, TeardownLogic } from '../types';\r\n\r\n/**\r\n * Emits a value from the source Observable, then ignores subsequent source\r\n * values for `duration` milliseconds, then repeats this process.\r\n *\r\n * <span class=\"informal\">Lets a value pass, then ignores source values for the\r\n * next `duration` milliseconds.</span>\r\n *\r\n * ![](throttleTime.png)\r\n *\r\n * `throttleTime` emits the source Observable values on the output Observable\r\n * when its internal timer is disabled, and ignores source values when the timer\r\n * is enabled. Initially, the timer is disabled. As soon as the first source\r\n * value arrives, it is forwarded to the output Observable, and then the timer\r\n * is enabled. After `duration` milliseconds (or the time unit determined\r\n * internally by the optional `scheduler`) has passed, the timer is disabled,\r\n * and this process repeats for the next source value. Optionally takes a\r\n * {@link SchedulerLike} for managing timers.\r\n *\r\n * ## Examples\r\n *\r\n * #### Limit click rate\r\n *\r\n * Emit clicks at a rate of at most one click per second\r\n * ```ts\r\n * import { fromEvent } from 'rxjs';\r\n * import { throttleTime } from 'rxjs/operators';\r\n *\r\n * const clicks = fromEvent(document, 'click');\r\n * const result = clicks.pipe(throttleTime(1000));\r\n * result.subscribe(x => console.log(x));\r\n * ```\r\n *\r\n * #### Double Click\r\n *\r\n * The following example only emits clicks which happen within a subsequent\r\n * delay of 400ms of the previous click. This for example can emulate a double\r\n * click. It makes use of the `trailing` parameter of the throttle configuration.\r\n *\r\n * ```ts\r\n * import { fromEvent, asyncScheduler } from 'rxjs';\r\n * import { throttleTime, withLatestFrom } from 'rxjs/operators';\r\n *\r\n * // defaultThottleConfig = { leading: true, trailing: false }\r\n * const throttleConfig = {\r\n *   leading: false,\r\n *   trailing: true\r\n * }\r\n *\r\n * const click = fromEvent(document, 'click');\r\n * const doubleClick = click.pipe(\r\n *   throttleTime(400, asyncScheduler, throttleConfig)\r\n * );\r\n *\r\n * doubleClick.subscribe((throttleValue: Event) => {\r\n *   console.log(`Double-clicked! Timestamp: ${throttleValue.timeStamp}`);\r\n * });\r\n * ```\r\n *\r\n * If you enable the `leading` parameter in this example, the output would be the primary click and\r\n * the double click, but restricts additional clicks within 400ms.\r\n *\r\n * @see {@link auditTime}\r\n * @see {@link debounceTime}\r\n * @see {@link delay}\r\n * @see {@link sampleTime}\r\n * @see {@link throttle}\r\n *\r\n * @param {number} duration Time to wait before emitting another value after\r\n * emitting the last value, measured in milliseconds or the time unit determined\r\n * internally by the optional `scheduler`.\r\n * @param {SchedulerLike} [scheduler=async] The {@link SchedulerLike} to use for\r\n * managing the timers that handle the throttling.\r\n * @param {Object} config a configuration object to define `leading` and\r\n * `trailing` behavior. Defaults to `{ leading: true, trailing: false }`.\r\n * @return {Observable<T>} An Observable that performs the throttle operation to\r\n * limit the rate of emissions from the source.\r\n * @method throttleTime\r\n * @owner Observable\r\n */\r\nexport function throttleTime<T>(duration: number,\r\n                                scheduler: SchedulerLike = async,\r\n                                config: ThrottleConfig = defaultThrottleConfig): MonoTypeOperatorFunction<T> {\r\n  return (source: Observable<T>) => source.lift(new ThrottleTimeOperator(duration, scheduler, config.leading, config.trailing));\r\n}\r\n\r\nclass ThrottleTimeOperator<T> implements Operator<T, T> {\r\n  constructor(private duration: number,\r\n              private scheduler: SchedulerLike,\r\n              private leading: boolean,\r\n              private trailing: boolean) {\r\n  }\r\n\r\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\r\n    return source.subscribe(\r\n      new ThrottleTimeSubscriber(subscriber, this.duration, this.scheduler, this.leading, this.trailing)\r\n    );\r\n  }\r\n}\r\n\r\n/**\r\n * We need this JSDoc comment for affecting ESDoc.\r\n * @ignore\r\n * @extends {Ignored}\r\n */\r\nclass ThrottleTimeSubscriber<T> extends Subscriber<T> {\r\n  private throttled: Subscription;\r\n  private _hasTrailingValue: boolean = false;\r\n  private _trailingValue: T = null;\r\n\r\n  constructor(destination: Subscriber<T>,\r\n              private duration: number,\r\n              private scheduler: SchedulerLike,\r\n              private leading: boolean,\r\n              private trailing: boolean) {\r\n    super(destination);\r\n  }\r\n\r\n  protected _next(value: T) {\r\n    if (this.throttled) {\r\n      if (this.trailing) {\r\n        this._trailingValue = value;\r\n        this._hasTrailingValue = true;\r\n      }\r\n    } else {\r\n      this.add(this.throttled = this.scheduler.schedule<DispatchArg<T>>(dispatchNext, this.duration, { subscriber: this }));\r\n      if (this.leading) {\r\n        this.destination.next(value);\r\n      } else if (this.trailing) {\r\n        this._trailingValue = value;\r\n        this._hasTrailingValue = true;\r\n      }\r\n    }\r\n  }\r\n\r\n  protected _complete() {\r\n    if (this._hasTrailingValue) {\r\n      this.destination.next(this._trailingValue);\r\n      this.destination.complete();\r\n    } else {\r\n      this.destination.complete();\r\n    }\r\n  }\r\n\r\n  clearThrottle() {\r\n    const throttled = this.throttled;\r\n    if (throttled) {\r\n      if (this.trailing && this._hasTrailingValue) {\r\n        this.destination.next(this._trailingValue);\r\n        this._trailingValue = null;\r\n        this._hasTrailingValue = false;\r\n      }\r\n      throttled.unsubscribe();\r\n      this.remove(throttled);\r\n      this.throttled = null;\r\n    }\r\n  }\r\n}\r\n\r\ninterface DispatchArg<T> {\r\n  subscriber: ThrottleTimeSubscriber<T>;\r\n}\r\n\r\nfunction dispatchNext<T>(arg: DispatchArg<T>) {\r\n  const { subscriber } = arg;\r\n  subscriber.clearThrottle();\r\n}\r\n"]},"metadata":{},"sourceType":"module"}