{"ast":null,"code":"/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nvar _enable_super_gross_mode_that_will_cause_bad_things = false;\nexport var config = {\n  Promise: undefined,\n\n  set useDeprecatedSynchronousErrorHandling(value) {\n    if (value) {\n      var error = /*@__PURE__*/new Error();\n      /*@__PURE__*/\n\n      console.warn('DEPRECATED! RxJS was set to use deprecated synchronous error handling behavior by code at: \\n' + error.stack);\n    } else if (_enable_super_gross_mode_that_will_cause_bad_things) {\n      /*@__PURE__*/\n      console.log('RxJS: Back to a better error behavior. Thank you. <3');\n    }\n\n    _enable_super_gross_mode_that_will_cause_bad_things = value;\n  },\n\n  get useDeprecatedSynchronousErrorHandling() {\n    return _enable_super_gross_mode_that_will_cause_bad_things;\n  }\n\n};","map":{"version":3,"mappings":"AAAA;AAMA,uDAAsB,QAAtB;OAKE,IAAOA,MAAE;AAUTC,SAAI,WAVK;;MAWPC,sCAAWC;QACTA,OAAM;AACN,eAAQ,GAAI,aAAC,WAAb;AACD;;AAAAC;WACC,yDAAY;AACb;AAAAA;AACD;;AACDC;AAED,GApBS;;MAqBPH,wCAAO;AACR;AACD;;AAvBS,CAAT","names":["config","Promise","useDeprecatedSynchronousErrorHandling","value","console","_enable_super_gross_mode_that_will_cause_bad_things"],"sources":["D:\\Documents\\EMA\\Mines A3\\NoSQL\\ReseauAchats\\reseau_achats\\node_modules\\rxjs\\src\\internal\\config.ts"],"sourcesContent":["let _enable_super_gross_mode_that_will_cause_bad_things = false;\r\n\r\n/**\r\n * The global configuration object for RxJS, used to configure things\r\n * like what Promise contructor should used to create Promises\r\n */\r\nexport const config = {\r\n  /**\r\n   * The promise constructor used by default for methods such as\r\n   * {@link toPromise} and {@link forEach}\r\n   */\r\n  Promise: undefined as PromiseConstructorLike,\r\n\r\n  /**\r\n   * If true, turns on synchronous error rethrowing, which is a deprecated behavior\r\n   * in v6 and higher. This behavior enables bad patterns like wrapping a subscribe\r\n   * call in a try/catch block. It also enables producer interference, a nasty bug\r\n   * where a multicast can be broken for all observers by a downstream consumer with\r\n   * an unhandled error. DO NOT USE THIS FLAG UNLESS IT'S NEEDED TO BY TIME\r\n   * FOR MIGRATION REASONS.\r\n   */\r\n  set useDeprecatedSynchronousErrorHandling(value: boolean) {\r\n    if (value) {\r\n      const error = new Error();\r\n      console.warn('DEPRECATED! RxJS was set to use deprecated synchronous error handling behavior by code at: \\n' + error.stack);\r\n    } else if (_enable_super_gross_mode_that_will_cause_bad_things) {\r\n      console.log('RxJS: Back to a better error behavior. Thank you. <3');\r\n    }\r\n    _enable_super_gross_mode_that_will_cause_bad_things = value;\r\n  },\r\n\r\n  get useDeprecatedSynchronousErrorHandling() {\r\n    return _enable_super_gross_mode_that_will_cause_bad_things;\r\n  },\r\n};\r\n"]},"metadata":{},"sourceType":"module"}