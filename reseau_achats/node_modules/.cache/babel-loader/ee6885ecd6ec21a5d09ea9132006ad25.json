{"ast":null,"code":"var neo4j = require('neo4j-driver');\n\nvar session;\nexport default class Neo4j {\n  constructor() {\n    this.driver = neo4j.driver('bolt://localhost:7687', neo4j.auth.basic('neo4j', 'BDD'));\n    this.res = null;\n  }\n\n  async getInfluenceurProducts(influenceurId) {\n    session = this.driver.session();\n    var writeTxResultPromise = session.writeTransaction(async txc => {\n      // used transaction will be committed automatically, no need for explicit commit/rollback\n      var result = await txc.run(\"match (i:Utilisateur {id:$nameParam})<-[:suit]-(:Utilisateur)-[r:achete]->(p:Produit) return p.id as product_id, p.nom as nom_produit, p.description as description_produit,  count(r) as nb_achats ORDER BY nb_achats DESC\", {\n        nameParam: influenceurId\n      }); // at this point it is possible to either return the result or process it and return the\n      // result of processing it is also possible to run more statements in the same transaction\n\n      return result.records;\n    });\n    /*\r\n          await session\r\n    .run('match (i:Utilisateur {id:$nameParam})<-[:suit]-(:Utilisateur)-[r:achete]->(p:Produit) return p.id as product_id, p.nom as nom_produit, p.description as description_produit,  count(r) as nb_achats ORDER BY nb_achats DESC', {\r\n    nameParam: influenceurId\r\n    })\r\n    .then(result => {\r\n    result.records.forEach(record => {\r\n    console.log(record)\r\n        })\r\n    })\r\n    .catch(error => {\r\n    console.log(error)\r\n    })\r\n    .then(() => session.close())            \r\n    return r;\r\n    */\n\n    writeTxResultPromise.then(namesArray => {\n      this.res = namesArray;\n    }).catch(error => {\n      console.log(error);\n    }).then(() => session.close());\n    return this.res;\n  }\n\n}","map":{"version":3,"sources":["D:/Documents/EMA/Mines A3/NoSQL/ReseauAchats/reseau_achats/src/Neo4j.js"],"names":["neo4j","require","session","Neo4j","constructor","driver","auth","basic","res","getInfluenceurProducts","influenceurId","writeTxResultPromise","writeTransaction","txc","result","run","nameParam","records","then","namesArray","catch","error","console","log","close"],"mappings":"AAAA,IAAIA,KAAK,GAAGC,OAAO,CAAC,cAAD,CAAnB;;AAGE,IAAIC,OAAJ;AAIF,eAAe,MAAMC,KAAN,CAAW;AAEtBC,EAAAA,WAAW,GAAE;AACT,SAAKC,MAAL,GAAcL,KAAK,CAACK,MAAN,CACV,uBADU,EAEVL,KAAK,CAACM,IAAN,CAAWC,KAAX,CAAiB,OAAjB,EAA0B,KAA1B,CAFU,CAAd;AAIE,SAAKC,GAAL,GAAW,IAAX;AACL;;AAG2B,QAAtBC,sBAAsB,CAACC,aAAD,EAAe;AACvCR,IAAAA,OAAO,GAAG,KAAKG,MAAL,CAAYH,OAAZ,EAAV;AAEA,QAAIS,oBAAoB,GAAGT,OAAO,CAACU,gBAAR,CAAyB,MAAMC,GAAN,IAAa;AAC/D;AAEA,UAAIC,MAAM,GAAG,MAAMD,GAAG,CAACE,GAAJ,CACjB,6NADiB,EAEhB;AAAEC,QAAAA,SAAS,EAAEN;AAAb,OAFgB,CAAnB,CAH+D,CAO/D;AACA;;AACA,aAAOI,MAAM,CAACG,OAAd;AACL,KAV8B,CAA3B;AAYA;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAOIN,IAAAA,oBAAoB,CACnBO,IADD,CACMC,UAAU,IAAI;AAClB,WAAKX,GAAL,GAAUW,UAAV;AACD,KAHD,EAICC,KAJD,CAIOC,KAAK,IAAI;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD,KAND,EAOCH,IAPD,CAOM,MAAMhB,OAAO,CAACsB,KAAR,EAPZ;AAQE,WAAO,KAAKhB,GAAZ;AACD;;AAzDqB","sourcesContent":["var neo4j = require('neo4j-driver')\r\n\r\n\r\n  var session;\r\n\r\n\r\n\r\nexport default class Neo4j{\r\n\r\n    constructor(){\r\n        this.driver = neo4j.driver(\r\n            'bolt://localhost:7687',\r\n            neo4j.auth.basic('neo4j', 'BDD')\r\n          );\r\n          this.res = null;\r\n    }\r\n   \r\n\r\n    async getInfluenceurProducts(influenceurId){\r\n        session = this.driver.session()\r\n\r\n        var writeTxResultPromise = session.writeTransaction(async txc => {\r\n          // used transaction will be committed automatically, no need for explicit commit/rollback\r\n        \r\n          var result = await txc.run(\r\n            \"match (i:Utilisateur {id:$nameParam})<-[:suit]-(:Utilisateur)-[r:achete]->(p:Produit) return p.id as product_id, p.nom as nom_produit, p.description as description_produit,  count(r) as nb_achats ORDER BY nb_achats DESC\"\r\n            ,{ nameParam: influenceurId}\r\n          )\r\n          // at this point it is possible to either return the result or process it and return the\r\n          // result of processing it is also possible to run more statements in the same transaction\r\n          return result.records;\r\n    })\r\n\r\n        /*\r\n      \r\n      await session\r\n  .run('match (i:Utilisateur {id:$nameParam})<-[:suit]-(:Utilisateur)-[r:achete]->(p:Produit) return p.id as product_id, p.nom as nom_produit, p.description as description_produit,  count(r) as nb_achats ORDER BY nb_achats DESC', {\r\n    nameParam: influenceurId\r\n  })\r\n  .then(result => {\r\n    result.records.forEach(record => {\r\n      console.log(record)\r\n      \r\n    })\r\n \r\n  })\r\n  .catch(error => {\r\n    console.log(error)\r\n  })\r\n  .then(() => session.close())            \r\n    \r\n  return r;\r\n*/\r\n\r\n\r\n    writeTxResultPromise\r\n    .then(namesArray => {\r\n      this.res= namesArray\r\n    })\r\n    .catch(error => {\r\n      console.log(error)\r\n    })\r\n    .then(() => session.close())\r\n      return this.res;\r\n    }\r\n\r\n}"]},"metadata":{},"sourceType":"module"}