{"ast":null,"code":"/** PURE_IMPORTS_START tslib,_innerSubscribe PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { SimpleOuterSubscriber, SimpleInnerSubscriber, innerSubscribe } from '../innerSubscribe';\nexport function catchError(selector) {\n  return function catchErrorOperatorFunction(source) {\n    var operator = new CatchOperator(selector);\n    var caught = source.lift(operator);\n    return operator.caught = caught;\n  };\n}\n\nvar CatchOperator = /*@__PURE__*/function () {\n  function CatchOperator(selector) {\n    this.selector = selector;\n  }\n\n  CatchOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new CatchSubscriber(subscriber, this.selector, this.caught));\n  };\n\n  return CatchOperator;\n}();\n\nvar CatchSubscriber = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(CatchSubscriber, _super);\n\n  function CatchSubscriber(destination, selector, caught) {\n    var _this = _super.call(this, destination) || this;\n\n    _this.selector = selector;\n    _this.caught = caught;\n    return _this;\n  }\n\n  CatchSubscriber.prototype.error = function (err) {\n    if (!this.isStopped) {\n      var result = void 0;\n\n      try {\n        result = this.selector(err, this.caught);\n      } catch (err2) {\n        _super.prototype.error.call(this, err2);\n\n        return;\n      }\n\n      this._unsubscribeAndRecycle();\n\n      var innerSubscriber = new SimpleInnerSubscriber(this);\n      this.add(innerSubscriber);\n      var innerSubscription = innerSubscribe(result, innerSubscriber);\n\n      if (innerSubscription !== innerSubscriber) {\n        this.add(innerSubscription);\n      }\n    }\n  };\n\n  return CatchSubscriber;\n}(SimpleOuterSubscriber);","map":{"version":3,"mappings":";AAKA,OAAO,KAAEA,OAAT,MAAS,OAAT;AAkFA,SAAMC,qBAAN,EACEC,qBADF,EACkDC,cADlD,QACkD,mBADlD;OAGE,SAAOC,UAAP,CAAgBC,QAAhB,EAAgB;SACd,SAAcC,0BAAd,CAAmCC,MAAnC,EAA6C;AAC7C,QAAMC,QAAM,GAAG,IAAMC,aAAN,CAAoBJ,QAApB,CAAf;AACA,cAAQ,SAAS,KAAT,CAAeG,QAAf,CAAR;AACA;AACH;AAED;;IAGEC,6BAAyF;WAArEA,wBAAqE;AACxF;AAED;;eACS,WAAOC,OAAU,UAAIC,UAAJ,EAAoBJ,MAApB,EAAgC;AACzD;AACH;;AATA,SASCE,aATD;AAgBA,CAb2F;;IAavDG,yCAA+BC,MAA/B,EAA+B;AACjEb,qCAAYa,MAAZ;;WAAAD,gBAGEE,aAAMT,UAAYU,QACnB;AAHmB,kCAAqED,WAArE,KAAqE,IAArE;;AACAE;;AAEnB;AAOD;;iBACY,WAAWC;QACnB,MAAIC,WAAM;AACV,UAAIC,eAAJ;;UACE;AACDA;AAAC,eACAC;AACAP,eAAOQ,SAAP,CAAOJ,KAAP,CAAOP,IAAP,CAAO,IAAP,EAAOU,IAAP;;AACD;AACD;;AACA,WAAME,sBAAN;;AACA,UAAIC,eAAK,OAAiBrB,qBAAjB,CAAiB,IAAjB,CAAT;AACA,WAAMsB,GAAN,CAAMD,eAAN;AAIA,UAAIE,iBAAiB,iBAAK,SAAiBF,eAAjB,CAA1B;;UACEE,iBAAS,sBAAmB;AAC7B;AACF;AACF;AACH;;AAjCoC;CAAA","names":["tslib_1","SimpleOuterSubscriber","SimpleInnerSubscriber","innerSubscribe","catchError","selector","catchErrorOperatorFunction","source","operator","CatchOperator","call","subscriber","CatchSubscriber","_super","destination","caught","_this","error","isStopped","result","err2","prototype","_unsubscribeAndRecycle","innerSubscriber","add","innerSubscription"],"sources":["D:\\Documents\\EMA\\Mines A3\\NoSQL\\ReseauAchats\\reseau_achats\\node_modules\\rxjs\\src\\internal\\operators\\catchError.ts"],"sourcesContent":["import { Operator } from '../Operator';\r\nimport { Subscriber } from '../Subscriber';\r\nimport { Observable } from '../Observable';\r\n\r\nimport { ObservableInput, OperatorFunction, ObservedValueOf } from '../types';\r\nimport { SimpleOuterSubscriber, SimpleInnerSubscriber, innerSubscribe } from '../innerSubscribe';\r\n\r\n/* tslint:disable:max-line-length */\r\nexport function catchError<T, O extends ObservableInput<any>>(selector: (err: any, caught: Observable<T>) => O): OperatorFunction<T, T | ObservedValueOf<O>>;\r\n/* tslint:enable:max-line-length */\r\n\r\n/**\r\n * Catches errors on the observable to be handled by returning a new observable or throwing an error.\r\n *\r\n * ![](catch.png)\r\n *\r\n * ## Examples\r\n * Continues with a different Observable when there's an error\r\n *\r\n * ```ts\r\n * import { of } from 'rxjs';\r\n * import { map, catchError } from 'rxjs/operators';\r\n *\r\n * of(1, 2, 3, 4, 5).pipe(\r\n *     map(n => {\r\n *   \t   if (n === 4) {\r\n * \t       throw 'four!';\r\n *       }\r\n *\t     return n;\r\n *     }),\r\n *     catchError(err => of('I', 'II', 'III', 'IV', 'V')),\r\n *   )\r\n *   .subscribe(x => console.log(x));\r\n *   // 1, 2, 3, I, II, III, IV, V\r\n * ```\r\n *\r\n * Retries the caught source Observable again in case of error, similar to retry() operator\r\n *\r\n * ```ts\r\n * import { of } from 'rxjs';\r\n * import { map, catchError, take } from 'rxjs/operators';\r\n *\r\n * of(1, 2, 3, 4, 5).pipe(\r\n *     map(n => {\r\n *   \t   if (n === 4) {\r\n *   \t     throw 'four!';\r\n *       }\r\n * \t     return n;\r\n *     }),\r\n *     catchError((err, caught) => caught),\r\n *     take(30),\r\n *   )\r\n *   .subscribe(x => console.log(x));\r\n *   // 1, 2, 3, 1, 2, 3, ...\r\n * ```\r\n *\r\n * Throws a new error when the source Observable throws an error\r\n *\r\n * ```ts\r\n * import { of } from 'rxjs';\r\n * import { map, catchError } from 'rxjs/operators';\r\n *\r\n * of(1, 2, 3, 4, 5).pipe(\r\n *     map(n => {\r\n *       if (n === 4) {\r\n *         throw 'four!';\r\n *       }\r\n *       return n;\r\n *     }),\r\n *     catchError(err => {\r\n *       throw 'error in source. Details: ' + err;\r\n *     }),\r\n *   )\r\n *   .subscribe(\r\n *     x => console.log(x),\r\n *     err => console.log(err)\r\n *   );\r\n *   // 1, 2, 3, error in source. Details: four!\r\n * ```\r\n *\r\n *  @param {function} selector a function that takes as arguments `err`, which is the error, and `caught`, which\r\n *  is the source observable, in case you'd like to \"retry\" that observable by returning it again. Whatever observable\r\n *  is returned by the `selector` will be used to continue the observable chain.\r\n * @return {Observable} An observable that originates from either the source or the observable returned by the\r\n *  catch `selector` function.\r\n * @name catchError\r\n */\r\nexport function catchError<T, O extends ObservableInput<any>>(\r\n  selector: (err: any, caught: Observable<T>) => O\r\n): OperatorFunction<T, T | ObservedValueOf<O>> {\r\n  return function catchErrorOperatorFunction(source: Observable<T>): Observable<T | ObservedValueOf<O>> {\r\n    const operator = new CatchOperator(selector);\r\n    const caught = source.lift(operator);\r\n    return (operator.caught = caught as Observable<T>);\r\n  };\r\n}\r\n\r\nclass CatchOperator<T, R> implements Operator<T, T | R> {\r\n  caught: Observable<T>;\r\n\r\n  constructor(private selector: (err: any, caught: Observable<T>) => ObservableInput<T | R>) {\r\n  }\r\n\r\n  call(subscriber: Subscriber<R>, source: any): any {\r\n    return source.subscribe(new CatchSubscriber(subscriber, this.selector, this.caught));\r\n  }\r\n}\r\n\r\n/**\r\n * We need this JSDoc comment for affecting ESDoc.\r\n * @ignore\r\n * @extends {Ignored}\r\n */\r\nclass CatchSubscriber<T, R> extends SimpleOuterSubscriber<T, T | R> {\r\n  constructor(destination: Subscriber<any>,\r\n              private selector: (err: any, caught: Observable<T>) => ObservableInput<T | R>,\r\n              private caught: Observable<T>) {\r\n    super(destination);\r\n  }\r\n\r\n  // NOTE: overriding `error` instead of `_error` because we don't want\r\n  // to have this flag this subscriber as `isStopped`. We can mimic the\r\n  // behavior of the RetrySubscriber (from the `retry` operator), where\r\n  // we unsubscribe from our source chain, reset our Subscriber flags,\r\n  // then subscribe to the selector result.\r\n  error(err: any) {\r\n    if (!this.isStopped) {\r\n      let result: any;\r\n      try {\r\n        result = this.selector(err, this.caught);\r\n      } catch (err2) {\r\n        super.error(err2);\r\n        return;\r\n      }\r\n      this._unsubscribeAndRecycle();\r\n      const innerSubscriber = new SimpleInnerSubscriber(this);\r\n      this.add(innerSubscriber);\r\n      const innerSubscription = innerSubscribe(result, innerSubscriber);\r\n      // The returned subscription will usually be the subscriber that was\r\n      // passed. However, interop subscribers will be wrapped and for\r\n      // unsubscriptions to chain correctly, the wrapper needs to be added, too.\r\n      if (innerSubscription !== innerSubscriber) {\r\n        this.add(innerSubscription);\r\n      }\r\n    }\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}