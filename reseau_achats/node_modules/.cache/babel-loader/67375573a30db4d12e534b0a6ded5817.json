{"ast":null,"code":"\"use strict\";\n/**\r\n * Copyright (c) \"Neo4j\"\r\n * Neo4j Sweden AB [http://neo4j.com]\r\n *\r\n * This file is part of Neo4j.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TransactionExecutor = void 0;\n\nvar error_1 = require(\"../error\");\n\nvar retry_strategy_1 = require(\"./retry-strategy\");\n\nvar DEFAULT_MAX_RETRY_TIME_MS = 30 * 1000; // 30 seconds\n\nvar DEFAULT_INITIAL_RETRY_DELAY_MS = 1000; // 1 seconds\n\nvar DEFAULT_RETRY_DELAY_MULTIPLIER = 2.0;\nvar DEFAULT_RETRY_DELAY_JITTER_FACTOR = 0.2;\n\nvar TransactionExecutor =\n/** @class */\nfunction () {\n  function TransactionExecutor(maxRetryTimeMs, initialRetryDelayMs, multiplier, jitterFactor) {\n    this._maxRetryTimeMs = _valueOrDefault(maxRetryTimeMs, DEFAULT_MAX_RETRY_TIME_MS);\n    this._initialRetryDelayMs = _valueOrDefault(initialRetryDelayMs, DEFAULT_INITIAL_RETRY_DELAY_MS);\n    this._multiplier = _valueOrDefault(multiplier, DEFAULT_RETRY_DELAY_MULTIPLIER);\n    this._jitterFactor = _valueOrDefault(jitterFactor, DEFAULT_RETRY_DELAY_JITTER_FACTOR);\n    this._inFlightTimeoutIds = [];\n\n    this._verifyAfterConstruction();\n  }\n\n  TransactionExecutor.prototype.execute = function (transactionCreator, transactionWork) {\n    var _this = this;\n\n    return new Promise(function (resolve, reject) {\n      _this._executeTransactionInsidePromise(transactionCreator, transactionWork, resolve, reject);\n    }).catch(function (error) {\n      var retryStartTimeMs = Date.now();\n      var retryDelayMs = _this._initialRetryDelayMs;\n      return _this._retryTransactionPromise(transactionCreator, transactionWork, error, retryStartTimeMs, retryDelayMs);\n    });\n  };\n\n  TransactionExecutor.prototype.close = function () {\n    // cancel all existing timeouts to prevent further retries\n    this._inFlightTimeoutIds.forEach(function (timeoutId) {\n      return clearTimeout(timeoutId);\n    });\n\n    this._inFlightTimeoutIds = [];\n  };\n\n  TransactionExecutor.prototype._retryTransactionPromise = function (transactionCreator, transactionWork, error, retryStartTime, retryDelayMs) {\n    var _this = this;\n\n    var elapsedTimeMs = Date.now() - retryStartTime;\n\n    if (elapsedTimeMs > this._maxRetryTimeMs || !(0, retry_strategy_1.canRetryOn)(error)) {\n      return Promise.reject(error);\n    }\n\n    return new Promise(function (resolve, reject) {\n      var nextRetryTime = _this._computeDelayWithJitter(retryDelayMs);\n\n      var timeoutId = setTimeout(function () {\n        // filter out this timeoutId when time has come and function is being executed\n        _this._inFlightTimeoutIds = _this._inFlightTimeoutIds.filter(function (id) {\n          return id !== timeoutId;\n        });\n\n        _this._executeTransactionInsidePromise(transactionCreator, transactionWork, resolve, reject);\n      }, nextRetryTime); // add newly created timeoutId to the list of all in-flight timeouts\n\n      _this._inFlightTimeoutIds.push(timeoutId);\n    }).catch(function (error) {\n      var nextRetryDelayMs = retryDelayMs * _this._multiplier;\n      return _this._retryTransactionPromise(transactionCreator, transactionWork, error, retryStartTime, nextRetryDelayMs);\n    });\n  };\n\n  TransactionExecutor.prototype._executeTransactionInsidePromise = function (transactionCreator, transactionWork, resolve, reject) {\n    var _this = this;\n\n    var tx;\n\n    try {\n      tx = transactionCreator();\n    } catch (error) {\n      // failed to create a transaction\n      reject(error);\n      return;\n    }\n\n    var resultPromise = this._safeExecuteTransactionWork(tx, transactionWork);\n\n    resultPromise.then(function (result) {\n      return _this._handleTransactionWorkSuccess(result, tx, resolve, reject);\n    }).catch(function (error) {\n      return _this._handleTransactionWorkFailure(error, tx, reject);\n    });\n  };\n\n  TransactionExecutor.prototype._safeExecuteTransactionWork = function (tx, transactionWork) {\n    try {\n      var result = transactionWork(tx); // user defined callback is supposed to return a promise, but it might not; so to protect against an\n      // incorrect API usage we wrap the returned value with a resolved promise; this is effectively a\n      // validation step without type checks\n\n      return Promise.resolve(result);\n    } catch (error) {\n      return Promise.reject(error);\n    }\n  };\n\n  TransactionExecutor.prototype._handleTransactionWorkSuccess = function (result, tx, resolve, reject) {\n    if (tx.isOpen()) {\n      // transaction work returned resolved promise and transaction has not been committed/rolled back\n      // try to commit the transaction\n      tx.commit().then(function () {\n        // transaction was committed, return result to the user\n        resolve(result);\n      }).catch(function (error) {\n        // transaction failed to commit, propagate the failure\n        reject(error);\n      });\n    } else {\n      // transaction work returned resolved promise and transaction is already committed/rolled back\n      // return the result returned by given transaction work\n      resolve(result);\n    }\n  };\n\n  TransactionExecutor.prototype._handleTransactionWorkFailure = function (error, tx, reject) {\n    if (tx.isOpen()) {\n      // transaction work failed and the transaction is still open, roll it back and propagate the failure\n      tx.rollback().catch(function (ignore) {// ignore the rollback error\n      }).then(function () {\n        return reject(error);\n      }); // propagate the original error we got from the transaction work\n    } else {\n      // transaction is already rolled back, propagate the error\n      reject(error);\n    }\n  };\n\n  TransactionExecutor.prototype._computeDelayWithJitter = function (delayMs) {\n    var jitter = delayMs * this._jitterFactor;\n    var min = delayMs - jitter;\n    var max = delayMs + jitter;\n    return Math.random() * (max - min) + min;\n  };\n\n  TransactionExecutor.prototype._verifyAfterConstruction = function () {\n    if (this._maxRetryTimeMs < 0) {\n      throw (0, error_1.newError)('Max retry time should be >= 0: ' + this._maxRetryTimeMs);\n    }\n\n    if (this._initialRetryDelayMs < 0) {\n      throw (0, error_1.newError)('Initial retry delay should >= 0: ' + this._initialRetryDelayMs);\n    }\n\n    if (this._multiplier < 1.0) {\n      throw (0, error_1.newError)('Multiplier should be >= 1.0: ' + this._multiplier);\n    }\n\n    if (this._jitterFactor < 0 || this._jitterFactor > 1) {\n      throw (0, error_1.newError)('Jitter factor should be in [0.0, 1.0]: ' + this._jitterFactor);\n    }\n  };\n\n  return TransactionExecutor;\n}();\n\nexports.TransactionExecutor = TransactionExecutor;\n\nfunction _valueOrDefault(value, defaultValue) {\n  if (value || value === 0) {\n    return value;\n  }\n\n  return defaultValue;\n}","map":{"version":3,"sources":["D:/Documents/EMA/Mines A3/NoSQL/ReseauAchats/reseau_achats/node_modules/neo4j-driver-core/lib/internal/transaction-executor.js"],"names":["Object","defineProperty","exports","value","TransactionExecutor","error_1","require","retry_strategy_1","DEFAULT_MAX_RETRY_TIME_MS","DEFAULT_INITIAL_RETRY_DELAY_MS","DEFAULT_RETRY_DELAY_MULTIPLIER","DEFAULT_RETRY_DELAY_JITTER_FACTOR","maxRetryTimeMs","initialRetryDelayMs","multiplier","jitterFactor","_maxRetryTimeMs","_valueOrDefault","_initialRetryDelayMs","_multiplier","_jitterFactor","_inFlightTimeoutIds","_verifyAfterConstruction","prototype","execute","transactionCreator","transactionWork","_this","Promise","resolve","reject","_executeTransactionInsidePromise","catch","error","retryStartTimeMs","Date","now","retryDelayMs","_retryTransactionPromise","close","forEach","timeoutId","clearTimeout","retryStartTime","elapsedTimeMs","canRetryOn","nextRetryTime","_computeDelayWithJitter","setTimeout","filter","id","push","nextRetryDelayMs","tx","resultPromise","_safeExecuteTransactionWork","then","result","_handleTransactionWorkSuccess","_handleTransactionWorkFailure","isOpen","commit","rollback","ignore","delayMs","jitter","min","max","Math","random","newError","defaultValue"],"mappings":"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","sourcesContent":["\"use strict\";\r\n/**\r\n * Copyright (c) \"Neo4j\"\r\n * Neo4j Sweden AB [http://neo4j.com]\r\n *\r\n * This file is part of Neo4j.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.TransactionExecutor = void 0;\r\nvar error_1 = require(\"../error\");\r\nvar retry_strategy_1 = require(\"./retry-strategy\");\r\nvar DEFAULT_MAX_RETRY_TIME_MS = 30 * 1000; // 30 seconds\r\nvar DEFAULT_INITIAL_RETRY_DELAY_MS = 1000; // 1 seconds\r\nvar DEFAULT_RETRY_DELAY_MULTIPLIER = 2.0;\r\nvar DEFAULT_RETRY_DELAY_JITTER_FACTOR = 0.2;\r\nvar TransactionExecutor = /** @class */ (function () {\r\n    function TransactionExecutor(maxRetryTimeMs, initialRetryDelayMs, multiplier, jitterFactor) {\r\n        this._maxRetryTimeMs = _valueOrDefault(maxRetryTimeMs, DEFAULT_MAX_RETRY_TIME_MS);\r\n        this._initialRetryDelayMs = _valueOrDefault(initialRetryDelayMs, DEFAULT_INITIAL_RETRY_DELAY_MS);\r\n        this._multiplier = _valueOrDefault(multiplier, DEFAULT_RETRY_DELAY_MULTIPLIER);\r\n        this._jitterFactor = _valueOrDefault(jitterFactor, DEFAULT_RETRY_DELAY_JITTER_FACTOR);\r\n        this._inFlightTimeoutIds = [];\r\n        this._verifyAfterConstruction();\r\n    }\r\n    TransactionExecutor.prototype.execute = function (transactionCreator, transactionWork) {\r\n        var _this = this;\r\n        return new Promise(function (resolve, reject) {\r\n            _this._executeTransactionInsidePromise(transactionCreator, transactionWork, resolve, reject);\r\n        }).catch(function (error) {\r\n            var retryStartTimeMs = Date.now();\r\n            var retryDelayMs = _this._initialRetryDelayMs;\r\n            return _this._retryTransactionPromise(transactionCreator, transactionWork, error, retryStartTimeMs, retryDelayMs);\r\n        });\r\n    };\r\n    TransactionExecutor.prototype.close = function () {\r\n        // cancel all existing timeouts to prevent further retries\r\n        this._inFlightTimeoutIds.forEach(function (timeoutId) { return clearTimeout(timeoutId); });\r\n        this._inFlightTimeoutIds = [];\r\n    };\r\n    TransactionExecutor.prototype._retryTransactionPromise = function (transactionCreator, transactionWork, error, retryStartTime, retryDelayMs) {\r\n        var _this = this;\r\n        var elapsedTimeMs = Date.now() - retryStartTime;\r\n        if (elapsedTimeMs > this._maxRetryTimeMs || !(0, retry_strategy_1.canRetryOn)(error)) {\r\n            return Promise.reject(error);\r\n        }\r\n        return new Promise(function (resolve, reject) {\r\n            var nextRetryTime = _this._computeDelayWithJitter(retryDelayMs);\r\n            var timeoutId = setTimeout(function () {\r\n                // filter out this timeoutId when time has come and function is being executed\r\n                _this._inFlightTimeoutIds = _this._inFlightTimeoutIds.filter(function (id) { return id !== timeoutId; });\r\n                _this._executeTransactionInsidePromise(transactionCreator, transactionWork, resolve, reject);\r\n            }, nextRetryTime);\r\n            // add newly created timeoutId to the list of all in-flight timeouts\r\n            _this._inFlightTimeoutIds.push(timeoutId);\r\n        }).catch(function (error) {\r\n            var nextRetryDelayMs = retryDelayMs * _this._multiplier;\r\n            return _this._retryTransactionPromise(transactionCreator, transactionWork, error, retryStartTime, nextRetryDelayMs);\r\n        });\r\n    };\r\n    TransactionExecutor.prototype._executeTransactionInsidePromise = function (transactionCreator, transactionWork, resolve, reject) {\r\n        var _this = this;\r\n        var tx;\r\n        try {\r\n            tx = transactionCreator();\r\n        }\r\n        catch (error) {\r\n            // failed to create a transaction\r\n            reject(error);\r\n            return;\r\n        }\r\n        var resultPromise = this._safeExecuteTransactionWork(tx, transactionWork);\r\n        resultPromise\r\n            .then(function (result) {\r\n            return _this._handleTransactionWorkSuccess(result, tx, resolve, reject);\r\n        })\r\n            .catch(function (error) { return _this._handleTransactionWorkFailure(error, tx, reject); });\r\n    };\r\n    TransactionExecutor.prototype._safeExecuteTransactionWork = function (tx, transactionWork) {\r\n        try {\r\n            var result = transactionWork(tx);\r\n            // user defined callback is supposed to return a promise, but it might not; so to protect against an\r\n            // incorrect API usage we wrap the returned value with a resolved promise; this is effectively a\r\n            // validation step without type checks\r\n            return Promise.resolve(result);\r\n        }\r\n        catch (error) {\r\n            return Promise.reject(error);\r\n        }\r\n    };\r\n    TransactionExecutor.prototype._handleTransactionWorkSuccess = function (result, tx, resolve, reject) {\r\n        if (tx.isOpen()) {\r\n            // transaction work returned resolved promise and transaction has not been committed/rolled back\r\n            // try to commit the transaction\r\n            tx.commit()\r\n                .then(function () {\r\n                // transaction was committed, return result to the user\r\n                resolve(result);\r\n            })\r\n                .catch(function (error) {\r\n                // transaction failed to commit, propagate the failure\r\n                reject(error);\r\n            });\r\n        }\r\n        else {\r\n            // transaction work returned resolved promise and transaction is already committed/rolled back\r\n            // return the result returned by given transaction work\r\n            resolve(result);\r\n        }\r\n    };\r\n    TransactionExecutor.prototype._handleTransactionWorkFailure = function (error, tx, reject) {\r\n        if (tx.isOpen()) {\r\n            // transaction work failed and the transaction is still open, roll it back and propagate the failure\r\n            tx.rollback()\r\n                .catch(function (ignore) {\r\n                // ignore the rollback error\r\n            })\r\n                .then(function () { return reject(error); }); // propagate the original error we got from the transaction work\r\n        }\r\n        else {\r\n            // transaction is already rolled back, propagate the error\r\n            reject(error);\r\n        }\r\n    };\r\n    TransactionExecutor.prototype._computeDelayWithJitter = function (delayMs) {\r\n        var jitter = delayMs * this._jitterFactor;\r\n        var min = delayMs - jitter;\r\n        var max = delayMs + jitter;\r\n        return Math.random() * (max - min) + min;\r\n    };\r\n    TransactionExecutor.prototype._verifyAfterConstruction = function () {\r\n        if (this._maxRetryTimeMs < 0) {\r\n            throw (0, error_1.newError)('Max retry time should be >= 0: ' + this._maxRetryTimeMs);\r\n        }\r\n        if (this._initialRetryDelayMs < 0) {\r\n            throw (0, error_1.newError)('Initial retry delay should >= 0: ' + this._initialRetryDelayMs);\r\n        }\r\n        if (this._multiplier < 1.0) {\r\n            throw (0, error_1.newError)('Multiplier should be >= 1.0: ' + this._multiplier);\r\n        }\r\n        if (this._jitterFactor < 0 || this._jitterFactor > 1) {\r\n            throw (0, error_1.newError)('Jitter factor should be in [0.0, 1.0]: ' + this._jitterFactor);\r\n        }\r\n    };\r\n    return TransactionExecutor;\r\n}());\r\nexports.TransactionExecutor = TransactionExecutor;\r\nfunction _valueOrDefault(value, defaultValue) {\r\n    if (value || value === 0) {\r\n        return value;\r\n    }\r\n    return defaultValue;\r\n}\r\n"]},"metadata":{},"sourceType":"script"}