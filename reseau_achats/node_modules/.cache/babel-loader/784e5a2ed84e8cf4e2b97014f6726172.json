{"ast":null,"code":"/** PURE_IMPORTS_START _scan,_takeLast,_defaultIfEmpty,_util_pipe PURE_IMPORTS_END */\nimport { scan } from './scan';\nimport { takeLast } from './takeLast';\nimport { defaultIfEmpty } from './defaultIfEmpty';\nimport { pipe } from '../util/pipe';\nexport function reduce(accumulator, seed) {\n  if (arguments.length >= 2) {\n    return function reduceOperatorFunctionWithSeed(source) {\n      return pipe(scan(accumulator, seed), takeLast(1), defaultIfEmpty(seed))(source);\n    };\n  }\n\n  return function reduceOperatorFunction(source) {\n    return pipe(scan(function (acc, value, index) {\n      return accumulator(acc, value, index + 1);\n    }), takeLast(1))(source);\n  };\n}","map":{"version":3,"mappings":"AACA;AACA,SAASA,IAAT,QAAmB,QAAnB;AACA,SAASC,QAAT,QAAyB,YAAzB;AAEA,SAASC,cAAT,QAAqB,kBAArB;AA2DA,SAAMC,IAAN,QAAgB,cAAhB;OAME,SAAIC,MAAJ,CAAcC,WAAd,EAA2BC,IAA3B,EAA2B;MACzBC,SAAO,OAAP,IAAgB;WACd,SAAYC,8BAAZ,CAAqCC,MAArC,EAAkD;AAClD;AACH;AACD;;SACE,SACEC,sBADF,CACuBD,MADvB,EAC8B;AAG9B;AAAA;AAAA;AACH","names":["scan","takeLast","defaultIfEmpty","pipe","reduce","accumulator","seed","arguments","reduceOperatorFunctionWithSeed","source","reduceOperatorFunction"],"sources":["D:\\Documents\\EMA\\Mines A3\\NoSQL\\ReseauAchats\\reseau_achats\\node_modules\\rxjs\\src\\internal\\operators\\reduce.ts"],"sourcesContent":["import { Observable } from '../Observable';\r\nimport { scan } from './scan';\r\nimport { takeLast } from './takeLast';\r\nimport { defaultIfEmpty } from './defaultIfEmpty';\r\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../types';\r\nimport { pipe } from '../util/pipe';\r\n\r\n/* tslint:disable:max-line-length */\r\nexport function reduce<T, R>(accumulator: (acc: R, value: T, index: number) => R, seed: R): OperatorFunction<T, R>;\r\nexport function reduce<T>(accumulator: (acc: T, value: T, index: number) => T, seed?: T): MonoTypeOperatorFunction<T>;\r\nexport function reduce<T, R>(accumulator: (acc: R, value: T, index: number) => R): OperatorFunction<T, R>;\r\n/* tslint:enable:max-line-length */\r\n\r\n/**\r\n * Applies an accumulator function over the source Observable, and returns the\r\n * accumulated result when the source completes, given an optional seed value.\r\n *\r\n * <span class=\"informal\">Combines together all values emitted on the source,\r\n * using an accumulator function that knows how to join a new source value into\r\n * the accumulation from the past.</span>\r\n *\r\n * ![](reduce.png)\r\n *\r\n * Like\r\n * [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce),\r\n * `reduce` applies an `accumulator` function against an accumulation and each\r\n * value of the source Observable (from the past) to reduce it to a single\r\n * value, emitted on the output Observable. Note that `reduce` will only emit\r\n * one value, only when the source Observable completes. It is equivalent to\r\n * applying operator {@link scan} followed by operator {@link last}.\r\n *\r\n * Returns an Observable that applies a specified `accumulator` function to each\r\n * item emitted by the source Observable. If a `seed` value is specified, then\r\n * that value will be used as the initial value for the accumulator. If no seed\r\n * value is specified, the first item of the source is used as the seed.\r\n *\r\n * ## Example\r\n * Count the number of click events that happened in 5 seconds\r\n * ```ts\r\n * import { fromEvent, interval } from 'rxjs';\r\n * import { reduce, takeUntil, mapTo } from 'rxjs/operators';\r\n *\r\n * const clicksInFiveSeconds = fromEvent(document, 'click').pipe(\r\n *   takeUntil(interval(5000)),\r\n * );\r\n * const ones = clicksInFiveSeconds.pipe(mapTo(1));\r\n * const seed = 0;\r\n * const count = ones.pipe(reduce((acc, one) => acc + one, seed));\r\n * count.subscribe(x => console.log(x));\r\n * ```\r\n *\r\n * @see {@link count}\r\n * @see {@link expand}\r\n * @see {@link mergeScan}\r\n * @see {@link scan}\r\n *\r\n * @param {function(acc: R, value: T, index: number): R} accumulator The accumulator function\r\n * called on each source value.\r\n * @param {R} [seed] The initial accumulation value.\r\n * @return {Observable<R>} An Observable that emits a single value that is the\r\n * result of accumulating the values emitted by the source Observable.\r\n * @method reduce\r\n * @owner Observable\r\n */\r\nexport function reduce<T, R>(accumulator: (acc: T | R, value: T, index?: number) => T | R, seed?: T | R): OperatorFunction<T, T | R> {\r\n  // providing a seed of `undefined` *should* be valid and trigger\r\n  // hasSeed! so don't use `seed !== undefined` checks!\r\n  // For this reason, we have to check it here at the original call site\r\n  // otherwise inside Operator/Subscriber we won't know if `undefined`\r\n  // means they didn't provide anything or if they literally provided `undefined`\r\n  if (arguments.length >= 2) {\r\n    return function reduceOperatorFunctionWithSeed(source: Observable<T>): Observable<T | R> {\r\n      return pipe(scan(accumulator, seed), takeLast(1), defaultIfEmpty(seed))(source);\r\n    };\r\n  }\r\n  return function reduceOperatorFunction(source: Observable<T>): Observable<T | R> {\r\n    return pipe(\r\n      scan<T, T | R>((acc, value, index) => accumulator(acc, value, index + 1)),\r\n      takeLast(1),\r\n    )(source);\r\n  };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}