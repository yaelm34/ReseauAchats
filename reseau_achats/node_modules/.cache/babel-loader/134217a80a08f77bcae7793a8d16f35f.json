{"ast":null,"code":"/** PURE_IMPORTS_START _Observable,_util_isArray,_util_isFunction,_operators_map PURE_IMPORTS_END */\nimport { Observable } from '../Observable';\nimport { isArray } from '../util/isArray';\nimport { isFunction } from '../util/isFunction';\nimport { map } from '../operators/map';\n\nvar toString = /*@__PURE__*/function () {\n  return Object.prototype.toString;\n}();\n\nexport function fromEvent(target, eventName, options, resultSelector) {\n  if (isFunction(options)) {\n    resultSelector = options;\n    options = undefined;\n  }\n\n  if (resultSelector) {\n    return fromEvent(target, eventName, options).pipe(map(function (args) {\n      return isArray(args) ? resultSelector.apply(void 0, args) : resultSelector(args);\n    }));\n  }\n\n  return new Observable(function (subscriber) {\n    function handler(e) {\n      if (arguments.length > 1) {\n        subscriber.next(Array.prototype.slice.call(arguments));\n      } else {\n        subscriber.next(e);\n      }\n    }\n\n    setupSubscription(target, eventName, handler, subscriber, options);\n  });\n}\n\nfunction setupSubscription(sourceObj, eventName, handler, subscriber, options) {\n  var unsubscribe;\n\n  if (isEventTarget(sourceObj)) {\n    var source_1 = sourceObj;\n    sourceObj.addEventListener(eventName, handler, options);\n\n    unsubscribe = function () {\n      return source_1.removeEventListener(eventName, handler, options);\n    };\n  } else if (isJQueryStyleEventEmitter(sourceObj)) {\n    var source_2 = sourceObj;\n    sourceObj.on(eventName, handler);\n\n    unsubscribe = function () {\n      return source_2.off(eventName, handler);\n    };\n  } else if (isNodeStyleEventEmitter(sourceObj)) {\n    var source_3 = sourceObj;\n    sourceObj.addListener(eventName, handler);\n\n    unsubscribe = function () {\n      return source_3.removeListener(eventName, handler);\n    };\n  } else if (sourceObj && sourceObj.length) {\n    for (var i = 0, len = sourceObj.length; i < len; i++) {\n      setupSubscription(sourceObj[i], eventName, handler, subscriber, options);\n    }\n  } else {\n    throw new TypeError('Invalid event target');\n  }\n\n  subscriber.add(unsubscribe);\n}\n\nfunction isNodeStyleEventEmitter(sourceObj) {\n  return sourceObj && typeof sourceObj.addListener === 'function' && typeof sourceObj.removeListener === 'function';\n}\n\nfunction isJQueryStyleEventEmitter(sourceObj) {\n  return sourceObj && typeof sourceObj.on === 'function' && typeof sourceObj.off === 'function';\n}\n\nfunction isEventTarget(sourceObj) {\n  return sourceObj && typeof sourceObj.addEventListener === 'function' && typeof sourceObj.removeEventListener === 'function';\n}","map":{"version":3,"mappings":"AAAA;AACA,SAASA,UAAT,QAAwB,eAAxB;AACA,SAASC,OAAT,QAAqB,iBAArB;AAEA,SAASC,UAAT,QAAoB,oBAApB;AAEA,SAAMC,GAAN,QAA4B,kBAA5B;;AA0KA,YAAM,gBACJ,YACA;AAAiB,SACjBC,MACA,UADA,CACwCC,QAFvB;AAEuB,CAHxC,EADF;;OAOE,SAAIC,SAAJ,CAAsBC,MAAtB,EAAyBC,SAAzB,EAAyBC,OAAzB,EAAyBC,cAAzB,EAAyB;MAEvBR,qBAAiB;AACjBQ,kBAAU,UAAV;AACDD;AACD;;MAEEC,gBAAgB;AAGjB;AAAA;AAAA;AAED;;SACE,eAAqB;aACfC,QAASC,GAAC;UACZC,UAAUC,MAAV,GAAgB,GAAM;AACvBC;aACC;AACDA;AACF;AACD;;AACCC;AACJ,GATG;AAWJ;;SAGMA,kBAAwBC;AAC5B,MAAIC,WAAJ;;MACEC,aAAY,aAAa;AACzB,gBAAU,YAAV;AACAF,+BAAcT,SAAd,EAAoBG,OAApB,EAA2BF,OAA3B;;AACDS;AAAA;AAAA;SACC,IAAME,yBAAmB,WAAzB,EAAyB;AACzB,gBAAY,GAACH,SAAb;AACAA,iBAAWT,SAAX,EAAcG,OAAd;;AACDO;AAAA;AAAA;GAHC,MAIA,IAAMG,uBAAmB,WAAzB,EAAyB;AACzB,gBAAU,YAAV;AACAJ,0BAAcT,SAAd,EAAoBG,OAApB;;AACDO;AAAA;AAAA;GAHC,MAIA,IAAKD,SAAS,IAAEA,SAAO,OAAvB,EAAyC;SACvC,iBAAkBA,SAAS,CAACH,QAAIQ,SAAWA,KAAO;AACnDN;AACF;GAHC,MAIA;AACD;AAED;;AACDD;AAED;;SACEM,wBAA2BJ,WAAU;AACtC;AAED;;SACEG,0BAA2BH,WAAY;AACxC;AAED;;SACEE,cAAgBF,WAAW;AAC5B","names":["Observable","isArray","isFunction","map","Object","toString","fromEvent","target","eventName","options","resultSelector","handler","e","arguments","length","subscriber","setupSubscription","sourceObj","unsubscribe","isEventTarget","isJQueryStyleEventEmitter","isNodeStyleEventEmitter","i"],"sources":["D:\\Documents\\EMA\\Mines A3\\NoSQL\\ReseauAchats\\reseau_achats\\node_modules\\rxjs\\src\\internal\\observable\\fromEvent.ts"],"sourcesContent":["import { Observable } from '../Observable';\r\nimport { isArray } from '../util/isArray';\r\nimport { isFunction } from '../util/isFunction';\r\nimport { Subscriber } from '../Subscriber';\r\nimport { map } from '../operators/map';\r\n\r\nconst toString: Function = (() => Object.prototype.toString)();\r\n\r\nexport interface NodeStyleEventEmitter {\r\n  addListener: (eventName: string | symbol, handler: NodeEventHandler) => this;\r\n  removeListener: (eventName: string | symbol, handler: NodeEventHandler) => this;\r\n}\r\n\r\nexport type NodeEventHandler = (...args: any[]) => void;\r\n\r\n// For APIs that implement `addListener` and `removeListener` methods that may\r\n// not use the same arguments or return EventEmitter values\r\n// such as React Native\r\nexport interface NodeCompatibleEventEmitter {\r\n  addListener: (eventName: string, handler: NodeEventHandler) => void | {};\r\n  removeListener: (eventName: string, handler: NodeEventHandler) => void | {};\r\n}\r\n\r\nexport interface JQueryStyleEventEmitter {\r\n  on: (eventName: string, handler: Function) => void;\r\n  off: (eventName: string, handler: Function) => void;\r\n}\r\n\r\nexport interface HasEventTargetAddRemove<E> {\r\n  addEventListener(type: string, listener: ((evt: E) => void) | null, options?: boolean | AddEventListenerOptions): void;\r\n  removeEventListener(type: string, listener?: ((evt: E) => void) | null, options?: EventListenerOptions | boolean): void;\r\n}\r\n\r\nexport type EventTargetLike<T> = HasEventTargetAddRemove<T> | NodeStyleEventEmitter | NodeCompatibleEventEmitter | JQueryStyleEventEmitter;\r\n\r\nexport type FromEventTarget<T> = EventTargetLike<T> | ArrayLike<EventTargetLike<T>>;\r\n\r\nexport interface EventListenerOptions {\r\n  capture?: boolean;\r\n  passive?: boolean;\r\n  once?: boolean;\r\n}\r\n\r\nexport interface AddEventListenerOptions extends EventListenerOptions {\r\n  once?: boolean;\r\n  passive?: boolean;\r\n}\r\n\r\n/* tslint:disable:max-line-length */\r\nexport function fromEvent<T>(target: FromEventTarget<T>, eventName: string): Observable<T>;\r\n/** @deprecated resultSelector no longer supported, pipe to map instead */\r\nexport function fromEvent<T>(target: FromEventTarget<T>, eventName: string, resultSelector: (...args: any[]) => T): Observable<T>;\r\nexport function fromEvent<T>(target: FromEventTarget<T>, eventName: string, options: EventListenerOptions): Observable<T>;\r\n/** @deprecated resultSelector no longer supported, pipe to map instead */\r\nexport function fromEvent<T>(target: FromEventTarget<T>, eventName: string, options: EventListenerOptions, resultSelector: (...args: any[]) => T): Observable<T>;\r\n/* tslint:enable:max-line-length */\r\n\r\n/**\r\n * Creates an Observable that emits events of a specific type coming from the\r\n * given event target.\r\n *\r\n * <span class=\"informal\">Creates an Observable from DOM events, or Node.js\r\n * EventEmitter events or others.</span>\r\n *\r\n * ![](fromEvent.png)\r\n *\r\n * `fromEvent` accepts as a first argument event target, which is an object with methods\r\n * for registering event handler functions. As a second argument it takes string that indicates\r\n * type of event we want to listen for. `fromEvent` supports selected types of event targets,\r\n * which are described in detail below. If your event target does not match any of the ones listed,\r\n * you should use {@link fromEventPattern}, which can be used on arbitrary APIs.\r\n * When it comes to APIs supported by `fromEvent`, their methods for adding and removing event\r\n * handler functions have different names, but they all accept a string describing event type\r\n * and function itself, which will be called whenever said event happens.\r\n *\r\n * Every time resulting Observable is subscribed, event handler function will be registered\r\n * to event target on given event type. When that event fires, value\r\n * passed as a first argument to registered function will be emitted by output Observable.\r\n * When Observable is unsubscribed, function will be unregistered from event target.\r\n *\r\n * Note that if event target calls registered function with more than one argument, second\r\n * and following arguments will not appear in resulting stream. In order to get access to them,\r\n * you can pass to `fromEvent` optional project function, which will be called with all arguments\r\n * passed to event handler. Output Observable will then emit value returned by project function,\r\n * instead of the usual value.\r\n *\r\n * Remember that event targets listed below are checked via duck typing. It means that\r\n * no matter what kind of object you have and no matter what environment you work in,\r\n * you can safely use `fromEvent` on that object if it exposes described methods (provided\r\n * of course they behave as was described above). So for example if Node.js library exposes\r\n * event target which has the same method names as DOM EventTarget, `fromEvent` is still\r\n * a good choice.\r\n *\r\n * If the API you use is more callback then event handler oriented (subscribed\r\n * callback function fires only once and thus there is no need to manually\r\n * unregister it), you should use {@link bindCallback} or {@link bindNodeCallback}\r\n * instead.\r\n *\r\n * `fromEvent` supports following types of event targets:\r\n *\r\n * **DOM EventTarget**\r\n *\r\n * This is an object with `addEventListener` and `removeEventListener` methods.\r\n *\r\n * In the browser, `addEventListener` accepts - apart from event type string and event\r\n * handler function arguments - optional third parameter, which is either an object or boolean,\r\n * both used for additional configuration how and when passed function will be called. When\r\n * `fromEvent` is used with event target of that type, you can provide this values\r\n * as third parameter as well.\r\n *\r\n * **Node.js EventEmitter**\r\n *\r\n * An object with `addListener` and `removeListener` methods.\r\n *\r\n * **JQuery-style event target**\r\n *\r\n * An object with `on` and `off` methods\r\n *\r\n * **DOM NodeList**\r\n *\r\n * List of DOM Nodes, returned for example by `document.querySelectorAll` or `Node.childNodes`.\r\n *\r\n * Although this collection is not event target in itself, `fromEvent` will iterate over all Nodes\r\n * it contains and install event handler function in every of them. When returned Observable\r\n * is unsubscribed, function will be removed from all Nodes.\r\n *\r\n * **DOM HtmlCollection**\r\n *\r\n * Just as in case of NodeList it is a collection of DOM nodes. Here as well event handler function is\r\n * installed and removed in each of elements.\r\n *\r\n *\r\n * ## Examples\r\n * ### Emits clicks happening on the DOM document\r\n * ```ts\r\n * import { fromEvent } from 'rxjs';\r\n *\r\n * const clicks = fromEvent(document, 'click');\r\n * clicks.subscribe(x => console.log(x));\r\n *\r\n * // Results in:\r\n * // MouseEvent object logged to console every time a click\r\n * // occurs on the document.\r\n * ```\r\n *\r\n * ### Use addEventListener with capture option\r\n * ```ts\r\n * import { fromEvent } from 'rxjs';\r\n *\r\n * const clicksInDocument = fromEvent(document, 'click', true); // note optional configuration parameter\r\n *                                                              // which will be passed to addEventListener\r\n * const clicksInDiv = fromEvent(someDivInDocument, 'click');\r\n *\r\n * clicksInDocument.subscribe(() => console.log('document'));\r\n * clicksInDiv.subscribe(() => console.log('div'));\r\n *\r\n * // By default events bubble UP in DOM tree, so normally\r\n * // when we would click on div in document\r\n * // \"div\" would be logged first and then \"document\".\r\n * // Since we specified optional `capture` option, document\r\n * // will catch event when it goes DOWN DOM tree, so console\r\n * // will log \"document\" and then \"div\".\r\n * ```\r\n *\r\n * @see {@link bindCallback}\r\n * @see {@link bindNodeCallback}\r\n * @see {@link fromEventPattern}\r\n *\r\n * @param {FromEventTarget<T>} target The DOM EventTarget, Node.js\r\n * EventEmitter, JQuery-like event target, NodeList or HTMLCollection to attach the event handler to.\r\n * @param {string} eventName The event name of interest, being emitted by the\r\n * `target`.\r\n * @param {EventListenerOptions} [options] Options to pass through to addEventListener\r\n * @return {Observable<T>}\r\n * @name fromEvent\r\n */\r\nexport function fromEvent<T>(\r\n  target: FromEventTarget<T>,\r\n  eventName: string,\r\n  options?: EventListenerOptions | ((...args: any[]) => T),\r\n  resultSelector?: ((...args: any[]) => T)\r\n): Observable<T> {\r\n\r\n  if (isFunction(options)) {\r\n    // DEPRECATED PATH\r\n    resultSelector = options;\r\n    options = undefined;\r\n  }\r\n  if (resultSelector) {\r\n    // DEPRECATED PATH\r\n    return fromEvent<T>(target, eventName, <EventListenerOptions | undefined>options).pipe(\r\n      map(args => isArray(args) ? resultSelector(...args) : resultSelector(args))\r\n    );\r\n  }\r\n\r\n  return new Observable<T>(subscriber => {\r\n    function handler(e: T) {\r\n      if (arguments.length > 1) {\r\n        subscriber.next(Array.prototype.slice.call(arguments));\r\n      } else {\r\n        subscriber.next(e);\r\n      }\r\n    }\r\n    setupSubscription(target, eventName, handler, subscriber, options as EventListenerOptions);\r\n  });\r\n}\r\n\r\nfunction setupSubscription<T>(sourceObj: FromEventTarget<T>, eventName: string,\r\n                              handler: (...args: any[]) => void, subscriber: Subscriber<T>,\r\n                              options?: EventListenerOptions) {\r\n  let unsubscribe: () => void;\r\n  if (isEventTarget(sourceObj)) {\r\n    const source = sourceObj;\r\n    sourceObj.addEventListener(eventName, handler, options);\r\n    unsubscribe = () => source.removeEventListener(eventName, handler, options);\r\n  } else if (isJQueryStyleEventEmitter(sourceObj)) {\r\n    const source = sourceObj;\r\n    sourceObj.on(eventName, handler);\r\n    unsubscribe = () => source.off(eventName, handler);\r\n  } else if (isNodeStyleEventEmitter(sourceObj)) {\r\n    const source = sourceObj;\r\n    sourceObj.addListener(eventName, handler as NodeEventHandler);\r\n    unsubscribe = () => source.removeListener(eventName, handler as NodeEventHandler);\r\n  } else if (sourceObj && (sourceObj as any).length) {\r\n    for (let i = 0, len = (sourceObj as any).length; i < len; i++) {\r\n      setupSubscription(sourceObj[i], eventName, handler, subscriber, options);\r\n    }\r\n  } else {\r\n    throw new TypeError('Invalid event target');\r\n  }\r\n\r\n  subscriber.add(unsubscribe);\r\n}\r\n\r\nfunction isNodeStyleEventEmitter(sourceObj: any): sourceObj is NodeStyleEventEmitter {\r\n  return sourceObj && typeof sourceObj.addListener === 'function' && typeof sourceObj.removeListener === 'function';\r\n}\r\n\r\nfunction isJQueryStyleEventEmitter(sourceObj: any): sourceObj is JQueryStyleEventEmitter {\r\n  return sourceObj && typeof sourceObj.on === 'function' && typeof sourceObj.off === 'function';\r\n}\r\n\r\nfunction isEventTarget(sourceObj: any): sourceObj is HasEventTargetAddRemove<any> {\r\n  return sourceObj && typeof sourceObj.addEventListener === 'function' && typeof sourceObj.removeEventListener === 'function';\r\n}\r\n"]},"metadata":{},"sourceType":"module"}