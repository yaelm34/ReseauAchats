{"ast":null,"code":"/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nexport function bufferCount(bufferSize, startBufferEvery) {\n  if (startBufferEvery === void 0) {\n    startBufferEvery = null;\n  }\n\n  return function bufferCountOperatorFunction(source) {\n    return source.lift(new BufferCountOperator(bufferSize, startBufferEvery));\n  };\n}\n\nvar BufferCountOperator = /*@__PURE__*/function () {\n  function BufferCountOperator(bufferSize, startBufferEvery) {\n    this.bufferSize = bufferSize;\n    this.startBufferEvery = startBufferEvery;\n\n    if (!startBufferEvery || bufferSize === startBufferEvery) {\n      this.subscriberClass = BufferCountSubscriber;\n    } else {\n      this.subscriberClass = BufferSkipCountSubscriber;\n    }\n  }\n\n  BufferCountOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new this.subscriberClass(subscriber, this.bufferSize, this.startBufferEvery));\n  };\n\n  return BufferCountOperator;\n}();\n\nvar BufferCountSubscriber = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(BufferCountSubscriber, _super);\n\n  function BufferCountSubscriber(destination, bufferSize) {\n    var _this = _super.call(this, destination) || this;\n\n    _this.bufferSize = bufferSize;\n    _this.buffer = [];\n    return _this;\n  }\n\n  BufferCountSubscriber.prototype._next = function (value) {\n    var buffer = this.buffer;\n    buffer.push(value);\n\n    if (buffer.length == this.bufferSize) {\n      this.destination.next(buffer);\n      this.buffer = [];\n    }\n  };\n\n  BufferCountSubscriber.prototype._complete = function () {\n    var buffer = this.buffer;\n\n    if (buffer.length > 0) {\n      this.destination.next(buffer);\n    }\n\n    _super.prototype._complete.call(this);\n  };\n\n  return BufferCountSubscriber;\n}(Subscriber);\n\nvar BufferSkipCountSubscriber = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(BufferSkipCountSubscriber, _super);\n\n  function BufferSkipCountSubscriber(destination, bufferSize, startBufferEvery) {\n    var _this = _super.call(this, destination) || this;\n\n    _this.bufferSize = bufferSize;\n    _this.startBufferEvery = startBufferEvery;\n    _this.buffers = [];\n    _this.count = 0;\n    return _this;\n  }\n\n  BufferSkipCountSubscriber.prototype._next = function (value) {\n    var _a = this,\n        bufferSize = _a.bufferSize,\n        startBufferEvery = _a.startBufferEvery,\n        buffers = _a.buffers,\n        count = _a.count;\n\n    this.count++;\n\n    if (count % startBufferEvery === 0) {\n      buffers.push([]);\n    }\n\n    for (var i = buffers.length; i--;) {\n      var buffer = buffers[i];\n      buffer.push(value);\n\n      if (buffer.length === bufferSize) {\n        buffers.splice(i, 1);\n        this.destination.next(buffer);\n      }\n    }\n  };\n\n  BufferSkipCountSubscriber.prototype._complete = function () {\n    var _a = this,\n        buffers = _a.buffers,\n        destination = _a.destination;\n\n    while (buffers.length > 0) {\n      var buffer = buffers.shift();\n\n      if (buffer.length > 0) {\n        destination.next(buffer);\n      }\n    }\n\n    _super.prototype._complete.call(this);\n  };\n\n  return BufferSkipCountSubscriber;\n}(Subscriber);","map":{"version":3,"mappings":";AACA,OAAO,KAAEA,OAAT,MAAqB,OAArB;AA2DA,SAAMC,UAAN,QAA2B,eAA3B;OAAmD;AACjD,sBAAgB,WAAhB,EAAgB;AACdC,oBAAc,GAAK,IAAnB;AACD;;AACF;AAED;AAGE,GALD;;;uBAKiD,4BAAwB;WACjEC,oBAAoBC,YAAUF,kBAAK;SACtCE,aAAKA;SACNF;;SAAMA;AACL,WAAKG,eAAL,GAAuBC,qBAAvB;AACD,WACF;AAED;AACE;AACD;;AACHH,gCAACI,IAAD,GAAC;AAAA;AAOD,GAPA;;AAOuC;CAlBW;;yBAsB9C,gBAAM,UAAYC,MAAZ,EACP;SAFiD,kCAAkBA;;WAF5DF,sBAAiBG;;;AAIxBC;AAESA;AACR,WAAMA,KAAN;;;uBAIiB,WAASC,QAAU,UAAEC,KAAF,EAAE;QACpCC,MAAK;UACL,MAAKD;;QACNC;AACF;AAES;AACR;;;uBAEO,WAAiBC,YAAQ;QAC/BD;;AACD,wBAAM,CAAN,EAAM;AACP;AACH;;AAzBuCL,UAAU,CAyBhDO,SAzBsC,CAyBtCD,SAzBsC,CAyBtCP,IAzBsC,CAyBtC,IAzBsC;AAgCvC;;AAA2C;CA5BjC;;6BAiCN,gBAAM,UAAYC,MAAZ,EACP;SAFiD,sCAAkBA;;WAAUQ,uCAAwBZ;AAH9F,sBAAwB,CAACG,IAAzB,CAAyB,IAAzB,EAAyBE,WAAzB,KAAyB,IAAzB;;AACAC,uBAAkBN,UAAlB;;AAIPM;AAESA;AACF;;;2BAGM,WAAgBC,QAAQ;QAClCM;QAAQb,UAAS;QAAAF;QAAAgB;QAAAC;;SAClBA;;AAED,aAAS,GAACjB,gBAAV,KAAgC,CAAhC,EAAoC;AAClCgB,aAAM,KAAN,CAAe,EAAf;;;SAEA,IAAIE,WAAO,CAAMC,QAAKD;UACpBP,SAAQK,OAAQ;YAChB,MAAKN;;UACNC;AACFK;AACF;AAES;AACF;;;2BAGS,WAAeJ,YAAC;QAC7BG,KAAI;QAAOC,OAAM,GAAID,EAAE;QAAAR;;kBACrB,UAAgB,GAAC;UAClBI;;AACF;AACDJ,mBAAM,KAAN,CAAMI,MAAN;AACD;AAEH;;AAtC2CL,UAAU,CAsCpDO,SAtC0C,CAsC1CD,SAtC0C,CAsC1CP,IAtC0C,CAsC1C,IAtC0C;;;;CAKjC","names":["tslib_1","Subscriber","startBufferEvery","BufferCountOperator","bufferSize","subscriberClass","BufferCountSubscriber","call","_super","destination","_this","_next","value","buffer","_complete","prototype","BufferSkipCountSubscriber","_a","buffers","count","i","length"],"sources":["D:\\Documents\\EMA\\Mines A3\\NoSQL\\ReseauAchats\\reseau_achats\\node_modules\\rxjs\\src\\internal\\operators\\bufferCount.ts"],"sourcesContent":["import { Operator } from '../Operator';\r\nimport { Subscriber } from '../Subscriber';\r\nimport { Observable } from '../Observable';\r\nimport { OperatorFunction, TeardownLogic } from '../types';\r\n\r\n/**\r\n * Buffers the source Observable values until the size hits the maximum\r\n * `bufferSize` given.\r\n *\r\n * <span class=\"informal\">Collects values from the past as an array, and emits\r\n * that array only when its size reaches `bufferSize`.</span>\r\n *\r\n * ![](bufferCount.png)\r\n *\r\n * Buffers a number of values from the source Observable by `bufferSize` then\r\n * emits the buffer and clears it, and starts a new buffer each\r\n * `startBufferEvery` values. If `startBufferEvery` is not provided or is\r\n * `null`, then new buffers are started immediately at the start of the source\r\n * and when each buffer closes and is emitted.\r\n *\r\n * ## Examples\r\n *\r\n * Emit the last two click events as an array\r\n *\r\n * ```ts\r\n * import { fromEvent } from 'rxjs';\r\n * import { bufferCount } from 'rxjs/operators';\r\n *\r\n * const clicks = fromEvent(document, 'click');\r\n * const buffered = clicks.pipe(bufferCount(2));\r\n * buffered.subscribe(x => console.log(x));\r\n * ```\r\n *\r\n * On every click, emit the last two click events as an array\r\n *\r\n * ```ts\r\n * import { fromEvent } from 'rxjs';\r\n * import { bufferCount } from 'rxjs/operators';\r\n *\r\n * const clicks = fromEvent(document, 'click');\r\n * const buffered = clicks.pipe(bufferCount(2, 1));\r\n * buffered.subscribe(x => console.log(x));\r\n * ```\r\n *\r\n * @see {@link buffer}\r\n * @see {@link bufferTime}\r\n * @see {@link bufferToggle}\r\n * @see {@link bufferWhen}\r\n * @see {@link pairwise}\r\n * @see {@link windowCount}\r\n *\r\n * @param {number} bufferSize The maximum size of the buffer emitted.\r\n * @param {number} [startBufferEvery] Interval at which to start a new buffer.\r\n * For example if `startBufferEvery` is `2`, then a new buffer will be started\r\n * on every other value from the source. A new buffer is started at the\r\n * beginning of the source by default.\r\n * @return {Observable<T[]>} An Observable of arrays of buffered values.\r\n * @method bufferCount\r\n * @owner Observable\r\n */\r\nexport function bufferCount<T>(bufferSize: number, startBufferEvery: number = null): OperatorFunction<T, T[]> {\r\n  return function bufferCountOperatorFunction(source: Observable<T>) {\r\n    return source.lift(new BufferCountOperator<T>(bufferSize, startBufferEvery));\r\n  };\r\n}\r\n\r\nclass BufferCountOperator<T> implements Operator<T, T[]> {\r\n  private subscriberClass: any;\r\n\r\n  constructor(private bufferSize: number, private startBufferEvery: number) {\r\n    if (!startBufferEvery || bufferSize === startBufferEvery) {\r\n      this.subscriberClass = BufferCountSubscriber;\r\n    } else {\r\n      this.subscriberClass = BufferSkipCountSubscriber;\r\n    }\r\n  }\r\n\r\n  call(subscriber: Subscriber<T[]>, source: any): TeardownLogic {\r\n    return source.subscribe(new this.subscriberClass(subscriber, this.bufferSize, this.startBufferEvery));\r\n  }\r\n}\r\n\r\n/**\r\n * We need this JSDoc comment for affecting ESDoc.\r\n * @ignore\r\n * @extends {Ignored}\r\n */\r\nclass BufferCountSubscriber<T> extends Subscriber<T> {\r\n  private buffer: T[] = [];\r\n\r\n  constructor(destination: Subscriber<T[]>, private bufferSize: number) {\r\n    super(destination);\r\n  }\r\n\r\n  protected _next(value: T): void {\r\n    const buffer = this.buffer;\r\n\r\n    buffer.push(value);\r\n\r\n    if (buffer.length == this.bufferSize) {\r\n      this.destination.next(buffer);\r\n      this.buffer = [];\r\n    }\r\n  }\r\n\r\n  protected _complete(): void {\r\n    const buffer = this.buffer;\r\n    if (buffer.length > 0) {\r\n      this.destination.next(buffer);\r\n    }\r\n    super._complete();\r\n  }\r\n}\r\n\r\n/**\r\n * We need this JSDoc comment for affecting ESDoc.\r\n * @ignore\r\n * @extends {Ignored}\r\n */\r\nclass BufferSkipCountSubscriber<T> extends Subscriber<T> {\r\n  private buffers: Array<T[]> = [];\r\n  private count: number = 0;\r\n\r\n  constructor(destination: Subscriber<T[]>, private bufferSize: number, private startBufferEvery: number) {\r\n    super(destination);\r\n  }\r\n\r\n  protected _next(value: T): void {\r\n    const { bufferSize, startBufferEvery, buffers, count } = this;\r\n\r\n    this.count++;\r\n    if (count % startBufferEvery === 0) {\r\n      buffers.push([]);\r\n    }\r\n\r\n    for (let i = buffers.length; i--; ) {\r\n      const buffer = buffers[i];\r\n      buffer.push(value);\r\n      if (buffer.length === bufferSize) {\r\n        buffers.splice(i, 1);\r\n        this.destination.next(buffer);\r\n      }\r\n    }\r\n  }\r\n\r\n  protected _complete(): void {\r\n    const { buffers, destination } = this;\r\n\r\n    while (buffers.length > 0) {\r\n      let buffer = buffers.shift();\r\n      if (buffer.length > 0) {\r\n        destination.next(buffer);\r\n      }\r\n    }\r\n    super._complete();\r\n  }\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module"}