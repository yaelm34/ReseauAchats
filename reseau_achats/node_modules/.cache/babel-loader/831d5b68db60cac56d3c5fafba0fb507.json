{"ast":null,"code":"/** PURE_IMPORTS_START _Observable,_Subscription PURE_IMPORTS_END */\nimport { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nexport function pairs(obj, scheduler) {\n  if (!scheduler) {\n    return new Observable(function (subscriber) {\n      var keys = Object.keys(obj);\n\n      for (var i = 0; i < keys.length && !subscriber.closed; i++) {\n        var key = keys[i];\n\n        if (obj.hasOwnProperty(key)) {\n          subscriber.next([key, obj[key]]);\n        }\n      }\n\n      subscriber.complete();\n    });\n  } else {\n    return new Observable(function (subscriber) {\n      var keys = Object.keys(obj);\n      var subscription = new Subscription();\n      subscription.add(scheduler.schedule(dispatch, 0, {\n        keys: keys,\n        index: 0,\n        subscriber: subscriber,\n        subscription: subscription,\n        obj: obj\n      }));\n      return subscription;\n    });\n  }\n}\nexport function dispatch(state) {\n  var keys = state.keys,\n      index = state.index,\n      subscriber = state.subscriber,\n      subscription = state.subscription,\n      obj = state.obj;\n\n  if (!subscriber.closed) {\n    if (index < keys.length) {\n      var key = keys[index];\n      subscriber.next([key, obj[key]]);\n      subscription.add(this.schedule({\n        keys: keys,\n        index: index + 1,\n        subscriber: subscriber,\n        subscription: subscription,\n        obj: obj\n      }));\n    } else {\n      subscriber.complete();\n    }\n  }\n}","map":{"version":3,"mappings":"AAAA;AAGA,SAASA,UAAT,QAAuB,eAAvB;AAkDA,SAAMC,YAAN,QAAsC,iBAAtC;OACE,SAAKC,KAAL,CAAgBC,GAAhB,EAAgBC,SAAhB,EAAgB;MACd,YAAW;WACT,IAAMJ,UAAN,CAAoB,UAAUK,UAAV,EAAU;AAC9B,cAAK,GAAKC,MAAO,KAAP,CAAUH,GAAV,CAAV;;WACE,IAAMI,IAAG,GAAGA,IAAMC,IAAE,OAAR,IAAQ;AACpB,YAAIC,GAAG,GAACD,OAAR;;YACEL,mBAAiBM,GAAjB,GAAyB;AAC1BJ;AACF;AACD;;AACCA;AACJ,KATG;SAUF;WACE,IAAML,UAAN,CAAoB,UAAUK,UAAV,EAAU;AAC9B,UAAMG,aAAY,KAAZ,CAAmBL,GAAnB,CAAN;AACA,sBAAgB,GACd,kBADF;AAGAO,kBAAO,IAAP,CAAON,SAAa,SAAb,CAAaO,QAAb,EAAa,CAAb,EAAa;AAAAH;AAAAI;AAAAP;AAAAK;AAAAP;AAAA,OAAb,CAAP;AACC;AACJ,KAPG;AAQL;AAGD;OAEU,kBAAIU,KAAJ,EAAM;AACd,MAAIL,IAAC,QAAW,KAAhB;AAAA,MAAsBI,KAAE,cAAxB;AAAA,MAAwBP,6BAAxB;AAAA,MAAwBK,iCAAxB;AAAA,MAAwBP,eAAxB;;MACE,WAAS,CAAGW,QAAK;QACfF,KAAM,GAAGJ,IAAG,SAAW;AACvB,gBAAUA,IAAC,CAAII,KAAJ,CAAX;AACAP,sBAAgB,CAACI,GAAD,EAAMN,QAAN,CAAhB;AACDO;AAAAF;AAAAI;AAAAP;AAAAK;AAAAP;AAAA;WACC;AACDE;AACF;AACF","names":["Observable","Subscription","pairs","obj","scheduler","subscriber","Object","i","keys","key","subscription","dispatch","index","state","closed"],"sources":["D:\\Documents\\EMA\\Mines A3\\NoSQL\\ReseauAchats\\reseau_achats\\node_modules\\rxjs\\src\\internal\\observable\\pairs.ts"],"sourcesContent":["import { Observable } from '../Observable';\r\nimport { SchedulerAction, SchedulerLike } from '../types';\r\nimport { Subscriber } from '../Subscriber';\r\nimport { Subscription } from '../Subscription';\r\n\r\n/**\r\n * Convert an object into an Observable of `[key, value]` pairs.\r\n *\r\n * <span class=\"informal\">Turn entries of an object into a stream.</span>\r\n *\r\n * <img src=\"./img/pairs.png\" width=\"100%\">\r\n *\r\n * `pairs` takes an arbitrary object and returns an Observable that emits arrays. Each\r\n * emitted array has exactly two elements - the first is a key from the object\r\n * and the second is a value corresponding to that key. Keys are extracted from\r\n * an object via `Object.keys` function, which means that they will be only\r\n * enumerable keys that are present on an object directly - not ones inherited\r\n * via prototype chain.\r\n *\r\n * By default these arrays are emitted synchronously. To change that you can\r\n * pass a {@link SchedulerLike} as a second argument to `pairs`.\r\n *\r\n * @example <caption>Converts a javascript object to an Observable</caption>\r\n * ```ts\r\n * import { pairs } from 'rxjs';\r\n *\r\n * const obj = {\r\n *   foo: 42,\r\n *   bar: 56,\r\n *   baz: 78\r\n * };\r\n *\r\n * pairs(obj)\r\n * .subscribe(\r\n *   value => console.log(value),\r\n *   err => {},\r\n *   () => console.log('the end!')\r\n * );\r\n *\r\n * // Logs:\r\n * // [\"foo\", 42],\r\n * // [\"bar\", 56],\r\n * // [\"baz\", 78],\r\n * // \"the end!\"\r\n * ```\r\n *\r\n * @param {Object} obj The object to inspect and turn into an\r\n * Observable sequence.\r\n * @param {Scheduler} [scheduler] An optional IScheduler to schedule\r\n * when resulting Observable will emit values.\r\n * @returns {(Observable<Array<string|T>>)} An observable sequence of\r\n * [key, value] pairs from the object.\r\n */\r\nexport function pairs<T>(obj: Object, scheduler?: SchedulerLike): Observable<[string, T]> {\r\n  if (!scheduler) {\r\n    return new Observable<[string, T]>(subscriber => {\r\n      const keys = Object.keys(obj);\r\n      for (let i = 0; i < keys.length && !subscriber.closed; i++) {\r\n        const key = keys[i];\r\n        if (obj.hasOwnProperty(key)) {\r\n          subscriber.next([key, obj[key]]);\r\n        }\r\n      }\r\n      subscriber.complete();\r\n    });\r\n  } else {\r\n    return new Observable<[string, T]>(subscriber => {\r\n      const keys = Object.keys(obj);\r\n      const subscription = new Subscription();\r\n      subscription.add(\r\n        scheduler.schedule<{ keys: string[], index: number, subscriber: Subscriber<[string, T]>, subscription: Subscription, obj: Object }>\r\n          (dispatch, 0, { keys, index: 0, subscriber, subscription, obj }));\r\n      return subscription;\r\n    });\r\n  }\r\n}\r\n\r\n/** @internal */\r\nexport function dispatch<T>(this: SchedulerAction<any>,\r\n                            state: { keys: string[], index: number, subscriber: Subscriber<[string, T]>, subscription: Subscription, obj: Object }) {\r\n  const { keys, index, subscriber, subscription, obj } = state;\r\n  if (!subscriber.closed) {\r\n    if (index < keys.length) {\r\n      const key = keys[index];\r\n      subscriber.next([key, obj[key]]);\r\n      subscription.add(this.schedule({ keys, index: index + 1, subscriber, subscription, obj }));\r\n    } else {\r\n      subscriber.complete();\r\n    }\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}