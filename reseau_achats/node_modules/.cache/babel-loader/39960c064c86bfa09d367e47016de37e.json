{"ast":null,"code":"/** PURE_IMPORTS_START _observable_empty,_observable_of,_observable_throwError PURE_IMPORTS_END */\nimport { empty } from './observable/empty';\nimport { of } from './observable/of';\nimport { throwError } from './observable/throwError';\nexport var NotificationKind;\n/*@__PURE__*/\n\n(function (NotificationKind) {\n  NotificationKind[\"NEXT\"] = \"N\";\n  NotificationKind[\"ERROR\"] = \"E\";\n  NotificationKind[\"COMPLETE\"] = \"C\";\n})(NotificationKind || (NotificationKind = {}));\n\nvar Notification = /*@__PURE__*/function () {\n  function Notification(kind, value, error) {\n    this.kind = kind;\n    this.value = value;\n    this.error = error;\n    this.hasValue = kind === 'N';\n  }\n\n  Notification.prototype.observe = function (observer) {\n    switch (this.kind) {\n      case 'N':\n        return observer.next && observer.next(this.value);\n\n      case 'E':\n        return observer.error && observer.error(this.error);\n\n      case 'C':\n        return observer.complete && observer.complete();\n    }\n  };\n\n  Notification.prototype.do = function (next, error, complete) {\n    var kind = this.kind;\n\n    switch (kind) {\n      case 'N':\n        return next && next(this.value);\n\n      case 'E':\n        return error && error(this.error);\n\n      case 'C':\n        return complete && complete();\n    }\n  };\n\n  Notification.prototype.accept = function (nextOrObserver, error, complete) {\n    if (nextOrObserver && typeof nextOrObserver.next === 'function') {\n      return this.observe(nextOrObserver);\n    } else {\n      return this.do(nextOrObserver, error, complete);\n    }\n  };\n\n  Notification.prototype.toObservable = function () {\n    var kind = this.kind;\n\n    switch (kind) {\n      case 'N':\n        return of(this.value);\n\n      case 'E':\n        return throwError(this.error);\n\n      case 'C':\n        return empty();\n    }\n\n    throw new Error('unexpected notification kind value');\n  };\n\n  Notification.createNext = function (value) {\n    if (typeof value !== 'undefined') {\n      return new Notification('N', value);\n    }\n\n    return Notification.undefinedValueNotification;\n  };\n\n  Notification.createError = function (err) {\n    return new Notification('E', undefined, err);\n  };\n\n  Notification.createComplete = function () {\n    return Notification.completeNotification;\n  };\n\n  Notification.completeNotification = new Notification('C');\n  Notification.undefinedValueNotification = new Notification('N', undefined);\n  return Notification;\n}();\n\nexport { Notification };","map":{"version":3,"mappings":"AAEA;AACA,SAASA,KAAT,QAAmB,oBAAnB;AACA,SAASC,EAAT,QAAmB,iBAAnB;AAOA,2BAIC,yBAJD;AAAA,WAAYC,gBAAZ;;;AACE,6BAAU;AACVA;AACAA;AAHUA,kBAAgB,YAAhB;AAoBZ,CAnBE,EAmBFA,2CAnBE;;IAsBAC,4BAAiD,YAA6B;WAA3DA,aAAqBC;AAAS,gBAAKA,IAAL;AAAkB;AACjE,SAAKC,KAAL,GAAaA,KAAb;AACD;AAOD;;cACU,WAAWC;YACjB,KAAQF;WACN;AACF,eAAQG,0CAAR;;WACE;AACF,eAAQA,4CAAR;;WACE;AACH;;AAWH;;cACY,WAAQC,KAAK;AACvB,YAAQ,QAAMJ,IAAd;;YACEA;WACE;AACF,eAAQK,wBAAR;;WACE;AACF,eAAQJ,0BAAR;;WACE;AACH;;AAYH;;cACM,WAAcK,SAAI,UAA4BC,cAA5B,EAAqDN,KAArD,EAAqDO,QAArD,EAAiE;QACrFD,cAAY,WAA4BA,cAAgB,KAA5C,KAA4C;AACzD;WACC;AACD;AACF;AAOD;;cACY,WAAQE,eAAK;AACvB,YAAQ,QAAMT,IAAd;;YACEA;WACE;AACF,eAAQH,cAAR;;WACE;AACF,eAAQa,sBAAR;;WACE;AACH;;;AAEF;AAaM;;cACD,cAAiB,UAAWC,KAAX,EAAa;QAChC,OAAOA,KAAP,KAAW,aAAkB;AAC9B;AACD;;AACD;AAUM;;cACE,eAAgB,UAAMC,GAAN,EAAe;AACvC;AAOM;;cACE,kBAAa;AACrB;AArCc;;AACAb,0CAA0BA,YAA1B,CAAoD,GAApD;AAqCjBA,4CAAC,gCAAD;AApHA,SAoHCA,YApHD;CAGmD","names":["empty","of","NotificationKind","Notification","kind","error","observe","observer","do","next","accept","nextOrObserver","complete","toObservable","throwError","value","err"],"sources":["D:\\Documents\\EMA\\Mines A3\\NoSQL\\ReseauAchats\\reseau_achats\\node_modules\\rxjs\\src\\internal\\Notification.ts"],"sourcesContent":["import { PartialObserver } from './types';\r\nimport { Observable } from './Observable';\r\nimport { empty } from './observable/empty';\r\nimport { of } from './observable/of';\r\nimport { throwError } from './observable/throwError';\r\nimport { deprecate } from 'util';\r\n\r\n// TODO: When this enum is removed, replace it with a type alias. See #4556.\r\n/**\r\n * @deprecated NotificationKind is deprecated as const enums are not compatible with isolated modules. Use a string literal instead.\r\n */\r\nexport enum NotificationKind {\r\n  NEXT = 'N',\r\n  ERROR = 'E',\r\n  COMPLETE = 'C',\r\n}\r\n\r\n/**\r\n * Represents a push-based event or value that an {@link Observable} can emit.\r\n * This class is particularly useful for operators that manage notifications,\r\n * like {@link materialize}, {@link dematerialize}, {@link observeOn}, and\r\n * others. Besides wrapping the actual delivered value, it also annotates it\r\n * with metadata of, for instance, what type of push message it is (`next`,\r\n * `error`, or `complete`).\r\n *\r\n * @see {@link materialize}\r\n * @see {@link dematerialize}\r\n * @see {@link observeOn}\r\n *\r\n * @class Notification<T>\r\n */\r\nexport class Notification<T> {\r\n  hasValue: boolean;\r\n\r\n  constructor(public kind: 'N' | 'E' | 'C', public value?: T, public error?: any) {\r\n    this.hasValue = kind === 'N';\r\n  }\r\n\r\n  /**\r\n   * Delivers to the given `observer` the value wrapped by this Notification.\r\n   * @param {Observer} observer\r\n   * @return\r\n   */\r\n  observe(observer: PartialObserver<T>): any {\r\n    switch (this.kind) {\r\n      case 'N':\r\n        return observer.next && observer.next(this.value);\r\n      case 'E':\r\n        return observer.error && observer.error(this.error);\r\n      case 'C':\r\n        return observer.complete && observer.complete();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Given some {@link Observer} callbacks, deliver the value represented by the\r\n   * current Notification to the correctly corresponding callback.\r\n   * @param {function(value: T): void} next An Observer `next` callback.\r\n   * @param {function(err: any): void} [error] An Observer `error` callback.\r\n   * @param {function(): void} [complete] An Observer `complete` callback.\r\n   * @return {any}\r\n   */\r\n  do(next: (value: T) => void, error?: (err: any) => void, complete?: () => void): any {\r\n    const kind = this.kind;\r\n    switch (kind) {\r\n      case 'N':\r\n        return next && next(this.value);\r\n      case 'E':\r\n        return error && error(this.error);\r\n      case 'C':\r\n        return complete && complete();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Takes an Observer or its individual callback functions, and calls `observe`\r\n   * or `do` methods accordingly.\r\n   * @param {Observer|function(value: T): void} nextOrObserver An Observer or\r\n   * the `next` callback.\r\n   * @param {function(err: any): void} [error] An Observer `error` callback.\r\n   * @param {function(): void} [complete] An Observer `complete` callback.\r\n   * @return {any}\r\n   */\r\n  accept(nextOrObserver: PartialObserver<T> | ((value: T) => void), error?: (err: any) => void, complete?: () => void) {\r\n    if (nextOrObserver && typeof (<PartialObserver<T>>nextOrObserver).next === 'function') {\r\n      return this.observe(<PartialObserver<T>>nextOrObserver);\r\n    } else {\r\n      return this.do(<(value: T) => void>nextOrObserver, error, complete);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns a simple Observable that just delivers the notification represented\r\n   * by this Notification instance.\r\n   * @return {any}\r\n   */\r\n  toObservable(): Observable<T> {\r\n    const kind = this.kind;\r\n    switch (kind) {\r\n      case 'N':\r\n        return of(this.value);\r\n      case 'E':\r\n        return throwError(this.error);\r\n      case 'C':\r\n        return empty();\r\n    }\r\n    throw new Error('unexpected notification kind value');\r\n  }\r\n\r\n  private static completeNotification: Notification<any> = new Notification('C');\r\n  private static undefinedValueNotification: Notification<any> = new Notification('N', undefined);\r\n\r\n  /**\r\n   * A shortcut to create a Notification instance of the type `next` from a\r\n   * given value.\r\n   * @param {T} value The `next` value.\r\n   * @return {Notification<T>} The \"next\" Notification representing the\r\n   * argument.\r\n   * @nocollapse\r\n   */\r\n  static createNext<T>(value: T): Notification<T> {\r\n    if (typeof value !== 'undefined') {\r\n      return new Notification('N', value);\r\n    }\r\n    return Notification.undefinedValueNotification;\r\n  }\r\n\r\n  /**\r\n   * A shortcut to create a Notification instance of the type `error` from a\r\n   * given error.\r\n   * @param {any} [err] The `error` error.\r\n   * @return {Notification<T>} The \"error\" Notification representing the\r\n   * argument.\r\n   * @nocollapse\r\n   */\r\n  static createError<T>(err?: any): Notification<T> {\r\n    return new Notification('E', undefined, err);\r\n  }\r\n\r\n  /**\r\n   * A shortcut to create a Notification instance of the type `complete`.\r\n   * @return {Notification<any>} The valueless \"complete\" Notification.\r\n   * @nocollapse\r\n   */\r\n  static createComplete(): Notification<any> {\r\n    return Notification.completeNotification;\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}