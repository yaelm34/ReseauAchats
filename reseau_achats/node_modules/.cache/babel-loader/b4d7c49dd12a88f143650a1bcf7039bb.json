{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ProcedureRouteObserver = exports.RouteObserver = exports.CompletedObserver = exports.FailedObserver = exports.ResetObserver = exports.LoginObserver = exports.ResultStreamObserver = exports.StreamObserver = void 0;\n/**\r\n * Copyright (c) \"Neo4j\"\r\n * Neo4j Sweden AB [http://neo4j.com]\r\n *\r\n * This file is part of Neo4j.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nvar neo4j_driver_core_1 = require(\"neo4j-driver-core\");\n\nvar routing_table_raw_1 = __importDefault(require(\"./routing-table-raw\"));\n\nvar FETCH_ALL = neo4j_driver_core_1.internal.constants.FETCH_ALL;\nvar PROTOCOL_ERROR = neo4j_driver_core_1.error.PROTOCOL_ERROR;\n\nvar StreamObserver =\n/** @class */\nfunction () {\n  function StreamObserver() {}\n\n  StreamObserver.prototype.onNext = function (rawRecord) {};\n\n  StreamObserver.prototype.onError = function (error) {};\n\n  StreamObserver.prototype.onCompleted = function (meta) {};\n\n  return StreamObserver;\n}();\n\nexports.StreamObserver = StreamObserver;\n/**\r\n * Handles a RUN/PULL_ALL, or RUN/DISCARD_ALL requests, maps the responses\r\n * in a way that a user-provided observer can see these as a clean Stream\r\n * of records.\r\n * This class will queue up incoming messages until a user-provided observer\r\n * for the incoming stream is registered. Thus, we keep fields around\r\n * for tracking head/records/tail. These are only used if there is no\r\n * observer registered.\r\n * @access private\r\n */\n\nvar ResultStreamObserver =\n/** @class */\nfunction (_super) {\n  __extends(ResultStreamObserver, _super);\n  /**\r\n   *\r\n   * @param {Object} param\r\n   * @param {Object} param.server\r\n   * @param {boolean} param.reactive\r\n   * @param {function(stmtId: number|Integer, n: number|Integer, observer: StreamObserver)} param.moreFunction -\r\n   * @param {function(stmtId: number|Integer, observer: StreamObserver)} param.discardFunction -\r\n   * @param {number|Integer} param.fetchSize -\r\n   * @param {function(err: Error): Promise|void} param.beforeError -\r\n   * @param {function(err: Error): Promise|void} param.afterError -\r\n   * @param {function(keys: string[]): Promise|void} param.beforeKeys -\r\n   * @param {function(keys: string[]): Promise|void} param.afterKeys -\r\n   * @param {function(metadata: Object): Promise|void} param.beforeComplete -\r\n   * @param {function(metadata: Object): Promise|void} param.afterComplete -\r\n   */\n\n\n  function ResultStreamObserver(_a) {\n    var _b = _a === void 0 ? {} : _a,\n        _c = _b.reactive,\n        reactive = _c === void 0 ? false : _c,\n        moreFunction = _b.moreFunction,\n        discardFunction = _b.discardFunction,\n        _d = _b.fetchSize,\n        fetchSize = _d === void 0 ? FETCH_ALL : _d,\n        beforeError = _b.beforeError,\n        afterError = _b.afterError,\n        beforeKeys = _b.beforeKeys,\n        afterKeys = _b.afterKeys,\n        beforeComplete = _b.beforeComplete,\n        afterComplete = _b.afterComplete,\n        server = _b.server;\n\n    var _this = _super.call(this) || this;\n\n    _this._fieldKeys = null;\n    _this._fieldLookup = null;\n    _this._head = null;\n    _this._queuedRecords = [];\n    _this._tail = null;\n    _this._error = null;\n    _this._observers = [];\n    _this._meta = {};\n    _this._server = server;\n    _this._beforeError = beforeError;\n    _this._afterError = afterError;\n    _this._beforeKeys = beforeKeys;\n    _this._afterKeys = afterKeys;\n    _this._beforeComplete = beforeComplete;\n    _this._afterComplete = afterComplete;\n    _this._queryId = null;\n    _this._moreFunction = moreFunction;\n    _this._discardFunction = discardFunction;\n    _this._discard = false;\n    _this._fetchSize = fetchSize;\n\n    _this._setState(reactive ? _states.READY : _states.READY_STREAMING);\n\n    _this._setupAuoPull(fetchSize);\n\n    return _this;\n  }\n  /**\r\n   * Will be called on every record that comes in and transform a raw record\r\n   * to a Object. If user-provided observer is present, pass transformed record\r\n   * to it's onNext method, otherwise, push to record que.\r\n   * @param {Array} rawRecord - An array with the raw record\r\n   */\n\n\n  ResultStreamObserver.prototype.onNext = function (rawRecord) {\n    var record = new neo4j_driver_core_1.Record(this._fieldKeys, rawRecord, this._fieldLookup);\n\n    if (this._observers.some(function (o) {\n      return o.onNext;\n    })) {\n      this._observers.forEach(function (o) {\n        if (o.onNext) {\n          o.onNext(record);\n        }\n      });\n    } else {\n      this._queuedRecords.push(record);\n\n      if (this._queuedRecords.length > this._highRecordWatermark) {\n        this._autoPull = false;\n      }\n    }\n  };\n\n  ResultStreamObserver.prototype.onCompleted = function (meta) {\n    this._state.onSuccess(this, meta);\n  };\n  /**\r\n   * Will be called on errors.\r\n   * If user-provided observer is present, pass the error\r\n   * to it's onError method, otherwise set instance variable _error.\r\n   * @param {Object} error - An error object\r\n   */\n\n\n  ResultStreamObserver.prototype.onError = function (error) {\n    this._state.onError(this, error);\n  };\n  /**\r\n   * Cancel pending record stream\r\n   */\n\n\n  ResultStreamObserver.prototype.cancel = function () {\n    this._discard = true;\n  };\n  /**\r\n   * Stream observer defaults to handling responses for two messages: RUN + PULL_ALL or RUN + DISCARD_ALL.\r\n   * Response for RUN initializes query keys. Response for PULL_ALL / DISCARD_ALL exposes the result stream.\r\n   *\r\n   * However, some operations can be represented as a single message which receives full metadata in a single response.\r\n   * For example, operations to begin, commit and rollback an explicit transaction use two messages in Bolt V1 but a single message in Bolt V3.\r\n   * Messages are `RUN \"BEGIN\" {}` + `PULL_ALL` in Bolt V1 and `BEGIN` in Bolt V3.\r\n   *\r\n   * This function prepares the observer to only handle a single response message.\r\n   */\n\n\n  ResultStreamObserver.prototype.prepareToHandleSingleResponse = function () {\n    this._head = [];\n    this._fieldKeys = [];\n\n    this._setState(_states.STREAMING);\n  };\n  /**\r\n   * Mark this observer as if it has completed with no metadata.\r\n   */\n\n\n  ResultStreamObserver.prototype.markCompleted = function () {\n    this._head = [];\n    this._fieldKeys = [];\n    this._tail = {};\n\n    this._setState(_states.SUCCEEDED);\n  };\n  /**\r\n   * Subscribe to events with provided observer.\r\n   * @param {Object} observer - Observer object\r\n   * @param {function(keys: String[])} observer.onKeys - Handle stream header, field keys.\r\n   * @param {function(record: Object)} observer.onNext - Handle records, one by one.\r\n   * @param {function(metadata: Object)} observer.onCompleted - Handle stream tail, the metadata.\r\n   * @param {function(error: Object)} observer.onError - Handle errors, should always be provided.\r\n   */\n\n\n  ResultStreamObserver.prototype.subscribe = function (observer) {\n    if (this._error) {\n      observer.onError(this._error);\n      return;\n    }\n\n    if (this._head && observer.onKeys) {\n      observer.onKeys(this._head);\n    }\n\n    if (this._queuedRecords.length > 0 && observer.onNext) {\n      for (var i = 0; i < this._queuedRecords.length; i++) {\n        observer.onNext(this._queuedRecords[i]);\n\n        if (this._queuedRecords.length - i - 1 <= this._lowRecordWatermark) {\n          this._autoPull = true;\n\n          if (this._state === _states.READY) {\n            this._handleStreaming();\n          }\n        }\n      }\n    }\n\n    if (this._tail && observer.onCompleted) {\n      observer.onCompleted(this._tail);\n    }\n\n    this._observers.push(observer);\n\n    if (this._state === _states.READY) {\n      this._handleStreaming();\n    }\n  };\n\n  ResultStreamObserver.prototype._handleHasMore = function (meta) {\n    // We've consumed current batch and server notified us that there're more\n    // records to stream. Let's invoke more or discard function based on whether\n    // the user wants to discard streaming or not\n    this._setState(_states.READY); // we've done streaming\n\n\n    this._handleStreaming();\n\n    delete meta.has_more;\n  };\n\n  ResultStreamObserver.prototype._handlePullSuccess = function (meta) {\n    var _this = this;\n\n    this._setState(_states.SUCCEEDED);\n\n    var completionMetadata = Object.assign(this._server ? {\n      server: this._server\n    } : {}, this._meta, meta);\n    var beforeHandlerResult = null;\n\n    if (this._beforeComplete) {\n      beforeHandlerResult = this._beforeComplete(completionMetadata);\n    }\n\n    var continuation = function () {\n      // End of stream\n      _this._tail = completionMetadata;\n\n      if (_this._observers.some(function (o) {\n        return o.onCompleted;\n      })) {\n        _this._observers.forEach(function (o) {\n          if (o.onCompleted) {\n            o.onCompleted(completionMetadata);\n          }\n        });\n      }\n\n      if (_this._afterComplete) {\n        _this._afterComplete(completionMetadata);\n      }\n    };\n\n    if (beforeHandlerResult) {\n      Promise.resolve(beforeHandlerResult).then(function () {\n        return continuation();\n      });\n    } else {\n      continuation();\n    }\n  };\n\n  ResultStreamObserver.prototype._handleRunSuccess = function (meta, afterSuccess) {\n    var _this = this;\n\n    if (this._fieldKeys === null) {\n      // Stream header, build a name->index field lookup table\n      // to be used by records. This is an optimization to make it\n      // faster to look up fields in a record by name, rather than by index.\n      // Since the records we get back via Bolt are just arrays of values.\n      this._fieldKeys = [];\n      this._fieldLookup = {};\n\n      if (meta.fields && meta.fields.length > 0) {\n        this._fieldKeys = meta.fields;\n\n        for (var i = 0; i < meta.fields.length; i++) {\n          this._fieldLookup[meta.fields[i]] = i;\n        } // remove fields key from metadata object\n\n\n        delete meta.fields;\n      } // Extract server generated query id for use in requestMore and discard\n      // functions\n\n\n      if (meta.qid !== null && meta.qid !== undefined) {\n        this._queryId = meta.qid; // remove qid from metadata object\n\n        delete meta.qid;\n      }\n\n      this._storeMetadataForCompletion(meta);\n\n      var beforeHandlerResult = null;\n\n      if (this._beforeKeys) {\n        beforeHandlerResult = this._beforeKeys(this._fieldKeys);\n      }\n\n      var continuation_1 = function () {\n        _this._head = _this._fieldKeys;\n\n        if (_this._observers.some(function (o) {\n          return o.onKeys;\n        })) {\n          _this._observers.forEach(function (o) {\n            if (o.onKeys) {\n              o.onKeys(_this._fieldKeys);\n            }\n          });\n        }\n\n        if (_this._afterKeys) {\n          _this._afterKeys(_this._fieldKeys);\n        }\n\n        afterSuccess();\n      };\n\n      if (beforeHandlerResult) {\n        Promise.resolve(beforeHandlerResult).then(function () {\n          return continuation_1();\n        });\n      } else {\n        continuation_1();\n      }\n    }\n  };\n\n  ResultStreamObserver.prototype._handleError = function (error) {\n    var _this = this;\n\n    this._setState(_states.FAILED);\n\n    this._error = error;\n    var beforeHandlerResult = null;\n\n    if (this._beforeError) {\n      beforeHandlerResult = this._beforeError(error);\n    }\n\n    var continuation = function () {\n      if (_this._observers.some(function (o) {\n        return o.onError;\n      })) {\n        _this._observers.forEach(function (o) {\n          if (o.onError) {\n            o.onError(error);\n          }\n        });\n      }\n\n      if (_this._afterError) {\n        _this._afterError(error);\n      }\n    };\n\n    if (beforeHandlerResult) {\n      Promise.resolve(beforeHandlerResult).then(function () {\n        return continuation();\n      });\n    } else {\n      continuation();\n    }\n  };\n\n  ResultStreamObserver.prototype._handleStreaming = function () {\n    if (this._head && this._observers.some(function (o) {\n      return o.onNext || o.onCompleted;\n    })) {\n      if (this._discard) {\n        this._discardFunction(this._queryId, this);\n\n        this._setState(_states.STREAMING);\n      } else if (this._autoPull) {\n        this._moreFunction(this._queryId, this._fetchSize, this);\n\n        this._setState(_states.STREAMING);\n      }\n    }\n  };\n\n  ResultStreamObserver.prototype._storeMetadataForCompletion = function (meta) {\n    var keys = Object.keys(meta);\n    var index = keys.length;\n    var key = '';\n\n    while (index--) {\n      key = keys[index];\n      this._meta[key] = meta[key];\n    }\n  };\n\n  ResultStreamObserver.prototype._setState = function (state) {\n    this._state = state;\n  };\n\n  ResultStreamObserver.prototype._setupAuoPull = function (fetchSize) {\n    this._autoPull = true;\n\n    if (fetchSize === FETCH_ALL) {\n      this._lowRecordWatermark = Number.MAX_VALUE; // we shall always lower than this number to enable auto pull\n\n      this._highRecordWatermark = Number.MAX_VALUE; // we shall never reach this number to disable auto pull\n    } else {\n      this._lowRecordWatermark = 0.3 * fetchSize;\n      this._highRecordWatermark = 0.7 * fetchSize;\n    }\n  };\n\n  return ResultStreamObserver;\n}(StreamObserver);\n\nexports.ResultStreamObserver = ResultStreamObserver;\n\nvar LoginObserver =\n/** @class */\nfunction (_super) {\n  __extends(LoginObserver, _super);\n  /**\r\n   *\r\n   * @param {Object} param -\r\n   * @param {function(err: Error)} param.onError\r\n   * @param {function(metadata)} param.onCompleted\r\n   */\n\n\n  function LoginObserver(_a) {\n    var _b = _a === void 0 ? {} : _a,\n        onError = _b.onError,\n        onCompleted = _b.onCompleted;\n\n    var _this = _super.call(this) || this;\n\n    _this._onError = onError;\n    _this._onCompleted = onCompleted;\n    return _this;\n  }\n\n  LoginObserver.prototype.onNext = function (record) {\n    this.onError((0, neo4j_driver_core_1.newError)('Received RECORD when initializing ' + neo4j_driver_core_1.json.stringify(record)));\n  };\n\n  LoginObserver.prototype.onError = function (error) {\n    if (this._onError) {\n      this._onError(error);\n    }\n  };\n\n  LoginObserver.prototype.onCompleted = function (metadata) {\n    if (this._onCompleted) {\n      this._onCompleted(metadata);\n    }\n  };\n\n  return LoginObserver;\n}(StreamObserver);\n\nexports.LoginObserver = LoginObserver;\n\nvar ResetObserver =\n/** @class */\nfunction (_super) {\n  __extends(ResetObserver, _super);\n  /**\r\n   *\r\n   * @param {Object} param -\r\n   * @param {function(err: String)} param.onProtocolError\r\n   * @param {function(err: Error)} param.onError\r\n   * @param {function(metadata)} param.onComplete\r\n   */\n\n\n  function ResetObserver(_a) {\n    var _b = _a === void 0 ? {} : _a,\n        onProtocolError = _b.onProtocolError,\n        onError = _b.onError,\n        onComplete = _b.onComplete;\n\n    var _this = _super.call(this) || this;\n\n    _this._onProtocolError = onProtocolError;\n    _this._onError = onError;\n    _this._onComplete = onComplete;\n    return _this;\n  }\n\n  ResetObserver.prototype.onNext = function (record) {\n    this.onError((0, neo4j_driver_core_1.newError)('Received RECORD when resetting: received record is: ' + neo4j_driver_core_1.json.stringify(record), PROTOCOL_ERROR));\n  };\n\n  ResetObserver.prototype.onError = function (error) {\n    if (error.code === PROTOCOL_ERROR && this._onProtocolError) {\n      this._onProtocolError(error.message);\n    }\n\n    if (this._onError) {\n      this._onError(error);\n    }\n  };\n\n  ResetObserver.prototype.onCompleted = function (metadata) {\n    if (this._onComplete) {\n      this._onComplete(metadata);\n    }\n  };\n\n  return ResetObserver;\n}(StreamObserver);\n\nexports.ResetObserver = ResetObserver;\n\nvar FailedObserver =\n/** @class */\nfunction (_super) {\n  __extends(FailedObserver, _super);\n\n  function FailedObserver(_a) {\n    var error = _a.error,\n        onError = _a.onError;\n\n    var _this = _super.call(this, {\n      beforeError: onError\n    }) || this;\n\n    _this.onError(error);\n\n    return _this;\n  }\n\n  return FailedObserver;\n}(ResultStreamObserver);\n\nexports.FailedObserver = FailedObserver;\n\nvar CompletedObserver =\n/** @class */\nfunction (_super) {\n  __extends(CompletedObserver, _super);\n\n  function CompletedObserver() {\n    var _this = _super.call(this) || this;\n\n    _super.prototype.markCompleted.call(_this);\n\n    return _this;\n  }\n\n  return CompletedObserver;\n}(ResultStreamObserver);\n\nexports.CompletedObserver = CompletedObserver;\n\nvar ProcedureRouteObserver =\n/** @class */\nfunction (_super) {\n  __extends(ProcedureRouteObserver, _super);\n\n  function ProcedureRouteObserver(_a) {\n    var resultObserver = _a.resultObserver,\n        onProtocolError = _a.onProtocolError,\n        onError = _a.onError,\n        onCompleted = _a.onCompleted;\n\n    var _this = _super.call(this) || this;\n\n    _this._resultObserver = resultObserver;\n    _this._onError = onError;\n    _this._onCompleted = onCompleted;\n    _this._records = [];\n    _this._onProtocolError = onProtocolError;\n    resultObserver.subscribe(_this);\n    return _this;\n  }\n\n  ProcedureRouteObserver.prototype.onNext = function (record) {\n    this._records.push(record);\n  };\n\n  ProcedureRouteObserver.prototype.onError = function (error) {\n    if (error.code === PROTOCOL_ERROR && this._onProtocolError) {\n      this._onProtocolError(error.message);\n    }\n\n    if (this._onError) {\n      this._onError(error);\n    }\n  };\n\n  ProcedureRouteObserver.prototype.onCompleted = function () {\n    if (this._records !== null && this._records.length !== 1) {\n      this.onError((0, neo4j_driver_core_1.newError)('Illegal response from router. Received ' + this._records.length + ' records but expected only one.\\n' + neo4j_driver_core_1.json.stringify(this._records), PROTOCOL_ERROR));\n      return;\n    }\n\n    if (this._onCompleted) {\n      this._onCompleted(routing_table_raw_1.default.ofRecord(this._records[0]));\n    }\n  };\n\n  return ProcedureRouteObserver;\n}(StreamObserver);\n\nexports.ProcedureRouteObserver = ProcedureRouteObserver;\n\nvar RouteObserver =\n/** @class */\nfunction (_super) {\n  __extends(RouteObserver, _super);\n  /**\r\n   *\r\n   * @param {Object} param -\r\n   * @param {function(err: String)} param.onProtocolError\r\n   * @param {function(err: Error)} param.onError\r\n   * @param {function(RawRoutingTable)} param.onCompleted\r\n   */\n\n\n  function RouteObserver(_a) {\n    var _b = _a === void 0 ? {} : _a,\n        onProtocolError = _b.onProtocolError,\n        onError = _b.onError,\n        onCompleted = _b.onCompleted;\n\n    var _this = _super.call(this) || this;\n\n    _this._onProtocolError = onProtocolError;\n    _this._onError = onError;\n    _this._onCompleted = onCompleted;\n    return _this;\n  }\n\n  RouteObserver.prototype.onNext = function (record) {\n    this.onError((0, neo4j_driver_core_1.newError)('Received RECORD when resetting: received record is: ' + neo4j_driver_core_1.json.stringify(record), PROTOCOL_ERROR));\n  };\n\n  RouteObserver.prototype.onError = function (error) {\n    if (error.code === PROTOCOL_ERROR && this._onProtocolError) {\n      this._onProtocolError(error.message);\n    }\n\n    if (this._onError) {\n      this._onError(error);\n    }\n  };\n\n  RouteObserver.prototype.onCompleted = function (metadata) {\n    if (this._onCompleted) {\n      this._onCompleted(routing_table_raw_1.default.ofMessageResponse(metadata));\n    }\n  };\n\n  return RouteObserver;\n}(StreamObserver);\n\nexports.RouteObserver = RouteObserver;\nvar _states = {\n  READY_STREAMING: {\n    // async start state\n    onSuccess: function (streamObserver, meta) {\n      streamObserver._handleRunSuccess(meta, function () {\n        streamObserver._setState(_states.STREAMING);\n      } // after run succeeded, async directly move to streaming\n      // state\n      );\n    },\n    onError: function (streamObserver, error) {\n      streamObserver._handleError(error);\n    },\n    name: function () {\n      return 'READY_STREAMING';\n    }\n  },\n  READY: {\n    // reactive start state\n    onSuccess: function (streamObserver, meta) {\n      streamObserver._handleRunSuccess(meta, function () {\n        return streamObserver._handleStreaming();\n      } // after run succeeded received, reactive shall start pulling\n      );\n    },\n    onError: function (streamObserver, error) {\n      streamObserver._handleError(error);\n    },\n    name: function () {\n      return 'READY';\n    }\n  },\n  STREAMING: {\n    onSuccess: function (streamObserver, meta) {\n      if (meta.has_more) {\n        streamObserver._handleHasMore(meta);\n      } else {\n        streamObserver._handlePullSuccess(meta);\n      }\n    },\n    onError: function (streamObserver, error) {\n      streamObserver._handleError(error);\n    },\n    name: function () {\n      return 'STREAMING';\n    }\n  },\n  FAILED: {\n    onError: function (error) {// more errors are ignored\n    },\n    name: function () {\n      return 'FAILED';\n    }\n  },\n  SUCCEEDED: {\n    name: function () {\n      return 'SUCCEEDED';\n    }\n  }\n};","map":{"version":3,"sources":["D:/Documents/EMA/Mines A3/NoSQL/ReseauAchats/reseau_achats/node_modules/neo4j-driver-bolt-connection/lib/bolt/stream-observers.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","prototype","hasOwnProperty","call","TypeError","String","__","constructor","create","__importDefault","mod","__esModule","defineProperty","exports","value","ProcedureRouteObserver","RouteObserver","CompletedObserver","FailedObserver","ResetObserver","LoginObserver","ResultStreamObserver","StreamObserver","neo4j_driver_core_1","require","routing_table_raw_1","FETCH_ALL","internal","constants","PROTOCOL_ERROR","error","onNext","rawRecord","onError","onCompleted","meta","_super","_a","_b","_c","reactive","moreFunction","discardFunction","_d","fetchSize","beforeError","afterError","beforeKeys","afterKeys","beforeComplete","afterComplete","server","_this","_fieldKeys","_fieldLookup","_head","_queuedRecords","_tail","_error","_observers","_meta","_server","_beforeError","_afterError","_beforeKeys","_afterKeys","_beforeComplete","_afterComplete","_queryId","_moreFunction","_discardFunction","_discard","_fetchSize","_setState","_states","READY","READY_STREAMING","_setupAuoPull","record","Record","some","o","forEach","push","length","_highRecordWatermark","_autoPull","_state","onSuccess","cancel","prepareToHandleSingleResponse","STREAMING","markCompleted","SUCCEEDED","subscribe","observer","onKeys","i","_lowRecordWatermark","_handleStreaming","_handleHasMore","has_more","_handlePullSuccess","completionMetadata","assign","beforeHandlerResult","continuation","Promise","resolve","then","_handleRunSuccess","afterSuccess","fields","qid","undefined","_storeMetadataForCompletion","continuation_1","_handleError","FAILED","keys","index","key","state","Number","MAX_VALUE","_onError","_onCompleted","newError","json","stringify","metadata","onProtocolError","onComplete","_onProtocolError","_onComplete","code","message","resultObserver","_resultObserver","_records","default","ofRecord","ofMessageResponse","streamObserver","name"],"mappings":"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","sourcesContent":["\"use strict\";\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        if (typeof b !== \"function\" && b !== null)\r\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.ProcedureRouteObserver = exports.RouteObserver = exports.CompletedObserver = exports.FailedObserver = exports.ResetObserver = exports.LoginObserver = exports.ResultStreamObserver = exports.StreamObserver = void 0;\r\n/**\r\n * Copyright (c) \"Neo4j\"\r\n * Neo4j Sweden AB [http://neo4j.com]\r\n *\r\n * This file is part of Neo4j.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar neo4j_driver_core_1 = require(\"neo4j-driver-core\");\r\nvar routing_table_raw_1 = __importDefault(require(\"./routing-table-raw\"));\r\nvar FETCH_ALL = neo4j_driver_core_1.internal.constants.FETCH_ALL;\r\nvar PROTOCOL_ERROR = neo4j_driver_core_1.error.PROTOCOL_ERROR;\r\nvar StreamObserver = /** @class */ (function () {\r\n    function StreamObserver() {\r\n    }\r\n    StreamObserver.prototype.onNext = function (rawRecord) { };\r\n    StreamObserver.prototype.onError = function (error) { };\r\n    StreamObserver.prototype.onCompleted = function (meta) { };\r\n    return StreamObserver;\r\n}());\r\nexports.StreamObserver = StreamObserver;\r\n/**\r\n * Handles a RUN/PULL_ALL, or RUN/DISCARD_ALL requests, maps the responses\r\n * in a way that a user-provided observer can see these as a clean Stream\r\n * of records.\r\n * This class will queue up incoming messages until a user-provided observer\r\n * for the incoming stream is registered. Thus, we keep fields around\r\n * for tracking head/records/tail. These are only used if there is no\r\n * observer registered.\r\n * @access private\r\n */\r\nvar ResultStreamObserver = /** @class */ (function (_super) {\r\n    __extends(ResultStreamObserver, _super);\r\n    /**\r\n     *\r\n     * @param {Object} param\r\n     * @param {Object} param.server\r\n     * @param {boolean} param.reactive\r\n     * @param {function(stmtId: number|Integer, n: number|Integer, observer: StreamObserver)} param.moreFunction -\r\n     * @param {function(stmtId: number|Integer, observer: StreamObserver)} param.discardFunction -\r\n     * @param {number|Integer} param.fetchSize -\r\n     * @param {function(err: Error): Promise|void} param.beforeError -\r\n     * @param {function(err: Error): Promise|void} param.afterError -\r\n     * @param {function(keys: string[]): Promise|void} param.beforeKeys -\r\n     * @param {function(keys: string[]): Promise|void} param.afterKeys -\r\n     * @param {function(metadata: Object): Promise|void} param.beforeComplete -\r\n     * @param {function(metadata: Object): Promise|void} param.afterComplete -\r\n     */\r\n    function ResultStreamObserver(_a) {\r\n        var _b = _a === void 0 ? {} : _a, _c = _b.reactive, reactive = _c === void 0 ? false : _c, moreFunction = _b.moreFunction, discardFunction = _b.discardFunction, _d = _b.fetchSize, fetchSize = _d === void 0 ? FETCH_ALL : _d, beforeError = _b.beforeError, afterError = _b.afterError, beforeKeys = _b.beforeKeys, afterKeys = _b.afterKeys, beforeComplete = _b.beforeComplete, afterComplete = _b.afterComplete, server = _b.server;\r\n        var _this = _super.call(this) || this;\r\n        _this._fieldKeys = null;\r\n        _this._fieldLookup = null;\r\n        _this._head = null;\r\n        _this._queuedRecords = [];\r\n        _this._tail = null;\r\n        _this._error = null;\r\n        _this._observers = [];\r\n        _this._meta = {};\r\n        _this._server = server;\r\n        _this._beforeError = beforeError;\r\n        _this._afterError = afterError;\r\n        _this._beforeKeys = beforeKeys;\r\n        _this._afterKeys = afterKeys;\r\n        _this._beforeComplete = beforeComplete;\r\n        _this._afterComplete = afterComplete;\r\n        _this._queryId = null;\r\n        _this._moreFunction = moreFunction;\r\n        _this._discardFunction = discardFunction;\r\n        _this._discard = false;\r\n        _this._fetchSize = fetchSize;\r\n        _this._setState(reactive ? _states.READY : _states.READY_STREAMING);\r\n        _this._setupAuoPull(fetchSize);\r\n        return _this;\r\n    }\r\n    /**\r\n     * Will be called on every record that comes in and transform a raw record\r\n     * to a Object. If user-provided observer is present, pass transformed record\r\n     * to it's onNext method, otherwise, push to record que.\r\n     * @param {Array} rawRecord - An array with the raw record\r\n     */\r\n    ResultStreamObserver.prototype.onNext = function (rawRecord) {\r\n        var record = new neo4j_driver_core_1.Record(this._fieldKeys, rawRecord, this._fieldLookup);\r\n        if (this._observers.some(function (o) { return o.onNext; })) {\r\n            this._observers.forEach(function (o) {\r\n                if (o.onNext) {\r\n                    o.onNext(record);\r\n                }\r\n            });\r\n        }\r\n        else {\r\n            this._queuedRecords.push(record);\r\n            if (this._queuedRecords.length > this._highRecordWatermark) {\r\n                this._autoPull = false;\r\n            }\r\n        }\r\n    };\r\n    ResultStreamObserver.prototype.onCompleted = function (meta) {\r\n        this._state.onSuccess(this, meta);\r\n    };\r\n    /**\r\n     * Will be called on errors.\r\n     * If user-provided observer is present, pass the error\r\n     * to it's onError method, otherwise set instance variable _error.\r\n     * @param {Object} error - An error object\r\n     */\r\n    ResultStreamObserver.prototype.onError = function (error) {\r\n        this._state.onError(this, error);\r\n    };\r\n    /**\r\n     * Cancel pending record stream\r\n     */\r\n    ResultStreamObserver.prototype.cancel = function () {\r\n        this._discard = true;\r\n    };\r\n    /**\r\n     * Stream observer defaults to handling responses for two messages: RUN + PULL_ALL or RUN + DISCARD_ALL.\r\n     * Response for RUN initializes query keys. Response for PULL_ALL / DISCARD_ALL exposes the result stream.\r\n     *\r\n     * However, some operations can be represented as a single message which receives full metadata in a single response.\r\n     * For example, operations to begin, commit and rollback an explicit transaction use two messages in Bolt V1 but a single message in Bolt V3.\r\n     * Messages are `RUN \"BEGIN\" {}` + `PULL_ALL` in Bolt V1 and `BEGIN` in Bolt V3.\r\n     *\r\n     * This function prepares the observer to only handle a single response message.\r\n     */\r\n    ResultStreamObserver.prototype.prepareToHandleSingleResponse = function () {\r\n        this._head = [];\r\n        this._fieldKeys = [];\r\n        this._setState(_states.STREAMING);\r\n    };\r\n    /**\r\n     * Mark this observer as if it has completed with no metadata.\r\n     */\r\n    ResultStreamObserver.prototype.markCompleted = function () {\r\n        this._head = [];\r\n        this._fieldKeys = [];\r\n        this._tail = {};\r\n        this._setState(_states.SUCCEEDED);\r\n    };\r\n    /**\r\n     * Subscribe to events with provided observer.\r\n     * @param {Object} observer - Observer object\r\n     * @param {function(keys: String[])} observer.onKeys - Handle stream header, field keys.\r\n     * @param {function(record: Object)} observer.onNext - Handle records, one by one.\r\n     * @param {function(metadata: Object)} observer.onCompleted - Handle stream tail, the metadata.\r\n     * @param {function(error: Object)} observer.onError - Handle errors, should always be provided.\r\n     */\r\n    ResultStreamObserver.prototype.subscribe = function (observer) {\r\n        if (this._error) {\r\n            observer.onError(this._error);\r\n            return;\r\n        }\r\n        if (this._head && observer.onKeys) {\r\n            observer.onKeys(this._head);\r\n        }\r\n        if (this._queuedRecords.length > 0 && observer.onNext) {\r\n            for (var i = 0; i < this._queuedRecords.length; i++) {\r\n                observer.onNext(this._queuedRecords[i]);\r\n                if (this._queuedRecords.length - i - 1 <= this._lowRecordWatermark) {\r\n                    this._autoPull = true;\r\n                    if (this._state === _states.READY) {\r\n                        this._handleStreaming();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if (this._tail && observer.onCompleted) {\r\n            observer.onCompleted(this._tail);\r\n        }\r\n        this._observers.push(observer);\r\n        if (this._state === _states.READY) {\r\n            this._handleStreaming();\r\n        }\r\n    };\r\n    ResultStreamObserver.prototype._handleHasMore = function (meta) {\r\n        // We've consumed current batch and server notified us that there're more\r\n        // records to stream. Let's invoke more or discard function based on whether\r\n        // the user wants to discard streaming or not\r\n        this._setState(_states.READY); // we've done streaming\r\n        this._handleStreaming();\r\n        delete meta.has_more;\r\n    };\r\n    ResultStreamObserver.prototype._handlePullSuccess = function (meta) {\r\n        var _this = this;\r\n        this._setState(_states.SUCCEEDED);\r\n        var completionMetadata = Object.assign(this._server ? { server: this._server } : {}, this._meta, meta);\r\n        var beforeHandlerResult = null;\r\n        if (this._beforeComplete) {\r\n            beforeHandlerResult = this._beforeComplete(completionMetadata);\r\n        }\r\n        var continuation = function () {\r\n            // End of stream\r\n            _this._tail = completionMetadata;\r\n            if (_this._observers.some(function (o) { return o.onCompleted; })) {\r\n                _this._observers.forEach(function (o) {\r\n                    if (o.onCompleted) {\r\n                        o.onCompleted(completionMetadata);\r\n                    }\r\n                });\r\n            }\r\n            if (_this._afterComplete) {\r\n                _this._afterComplete(completionMetadata);\r\n            }\r\n        };\r\n        if (beforeHandlerResult) {\r\n            Promise.resolve(beforeHandlerResult).then(function () { return continuation(); });\r\n        }\r\n        else {\r\n            continuation();\r\n        }\r\n    };\r\n    ResultStreamObserver.prototype._handleRunSuccess = function (meta, afterSuccess) {\r\n        var _this = this;\r\n        if (this._fieldKeys === null) {\r\n            // Stream header, build a name->index field lookup table\r\n            // to be used by records. This is an optimization to make it\r\n            // faster to look up fields in a record by name, rather than by index.\r\n            // Since the records we get back via Bolt are just arrays of values.\r\n            this._fieldKeys = [];\r\n            this._fieldLookup = {};\r\n            if (meta.fields && meta.fields.length > 0) {\r\n                this._fieldKeys = meta.fields;\r\n                for (var i = 0; i < meta.fields.length; i++) {\r\n                    this._fieldLookup[meta.fields[i]] = i;\r\n                }\r\n                // remove fields key from metadata object\r\n                delete meta.fields;\r\n            }\r\n            // Extract server generated query id for use in requestMore and discard\r\n            // functions\r\n            if (meta.qid !== null && meta.qid !== undefined) {\r\n                this._queryId = meta.qid;\r\n                // remove qid from metadata object\r\n                delete meta.qid;\r\n            }\r\n            this._storeMetadataForCompletion(meta);\r\n            var beforeHandlerResult = null;\r\n            if (this._beforeKeys) {\r\n                beforeHandlerResult = this._beforeKeys(this._fieldKeys);\r\n            }\r\n            var continuation_1 = function () {\r\n                _this._head = _this._fieldKeys;\r\n                if (_this._observers.some(function (o) { return o.onKeys; })) {\r\n                    _this._observers.forEach(function (o) {\r\n                        if (o.onKeys) {\r\n                            o.onKeys(_this._fieldKeys);\r\n                        }\r\n                    });\r\n                }\r\n                if (_this._afterKeys) {\r\n                    _this._afterKeys(_this._fieldKeys);\r\n                }\r\n                afterSuccess();\r\n            };\r\n            if (beforeHandlerResult) {\r\n                Promise.resolve(beforeHandlerResult).then(function () { return continuation_1(); });\r\n            }\r\n            else {\r\n                continuation_1();\r\n            }\r\n        }\r\n    };\r\n    ResultStreamObserver.prototype._handleError = function (error) {\r\n        var _this = this;\r\n        this._setState(_states.FAILED);\r\n        this._error = error;\r\n        var beforeHandlerResult = null;\r\n        if (this._beforeError) {\r\n            beforeHandlerResult = this._beforeError(error);\r\n        }\r\n        var continuation = function () {\r\n            if (_this._observers.some(function (o) { return o.onError; })) {\r\n                _this._observers.forEach(function (o) {\r\n                    if (o.onError) {\r\n                        o.onError(error);\r\n                    }\r\n                });\r\n            }\r\n            if (_this._afterError) {\r\n                _this._afterError(error);\r\n            }\r\n        };\r\n        if (beforeHandlerResult) {\r\n            Promise.resolve(beforeHandlerResult).then(function () { return continuation(); });\r\n        }\r\n        else {\r\n            continuation();\r\n        }\r\n    };\r\n    ResultStreamObserver.prototype._handleStreaming = function () {\r\n        if (this._head && this._observers.some(function (o) { return o.onNext || o.onCompleted; })) {\r\n            if (this._discard) {\r\n                this._discardFunction(this._queryId, this);\r\n                this._setState(_states.STREAMING);\r\n            }\r\n            else if (this._autoPull) {\r\n                this._moreFunction(this._queryId, this._fetchSize, this);\r\n                this._setState(_states.STREAMING);\r\n            }\r\n        }\r\n    };\r\n    ResultStreamObserver.prototype._storeMetadataForCompletion = function (meta) {\r\n        var keys = Object.keys(meta);\r\n        var index = keys.length;\r\n        var key = '';\r\n        while (index--) {\r\n            key = keys[index];\r\n            this._meta[key] = meta[key];\r\n        }\r\n    };\r\n    ResultStreamObserver.prototype._setState = function (state) {\r\n        this._state = state;\r\n    };\r\n    ResultStreamObserver.prototype._setupAuoPull = function (fetchSize) {\r\n        this._autoPull = true;\r\n        if (fetchSize === FETCH_ALL) {\r\n            this._lowRecordWatermark = Number.MAX_VALUE; // we shall always lower than this number to enable auto pull\r\n            this._highRecordWatermark = Number.MAX_VALUE; // we shall never reach this number to disable auto pull\r\n        }\r\n        else {\r\n            this._lowRecordWatermark = 0.3 * fetchSize;\r\n            this._highRecordWatermark = 0.7 * fetchSize;\r\n        }\r\n    };\r\n    return ResultStreamObserver;\r\n}(StreamObserver));\r\nexports.ResultStreamObserver = ResultStreamObserver;\r\nvar LoginObserver = /** @class */ (function (_super) {\r\n    __extends(LoginObserver, _super);\r\n    /**\r\n     *\r\n     * @param {Object} param -\r\n     * @param {function(err: Error)} param.onError\r\n     * @param {function(metadata)} param.onCompleted\r\n     */\r\n    function LoginObserver(_a) {\r\n        var _b = _a === void 0 ? {} : _a, onError = _b.onError, onCompleted = _b.onCompleted;\r\n        var _this = _super.call(this) || this;\r\n        _this._onError = onError;\r\n        _this._onCompleted = onCompleted;\r\n        return _this;\r\n    }\r\n    LoginObserver.prototype.onNext = function (record) {\r\n        this.onError((0, neo4j_driver_core_1.newError)('Received RECORD when initializing ' + neo4j_driver_core_1.json.stringify(record)));\r\n    };\r\n    LoginObserver.prototype.onError = function (error) {\r\n        if (this._onError) {\r\n            this._onError(error);\r\n        }\r\n    };\r\n    LoginObserver.prototype.onCompleted = function (metadata) {\r\n        if (this._onCompleted) {\r\n            this._onCompleted(metadata);\r\n        }\r\n    };\r\n    return LoginObserver;\r\n}(StreamObserver));\r\nexports.LoginObserver = LoginObserver;\r\nvar ResetObserver = /** @class */ (function (_super) {\r\n    __extends(ResetObserver, _super);\r\n    /**\r\n     *\r\n     * @param {Object} param -\r\n     * @param {function(err: String)} param.onProtocolError\r\n     * @param {function(err: Error)} param.onError\r\n     * @param {function(metadata)} param.onComplete\r\n     */\r\n    function ResetObserver(_a) {\r\n        var _b = _a === void 0 ? {} : _a, onProtocolError = _b.onProtocolError, onError = _b.onError, onComplete = _b.onComplete;\r\n        var _this = _super.call(this) || this;\r\n        _this._onProtocolError = onProtocolError;\r\n        _this._onError = onError;\r\n        _this._onComplete = onComplete;\r\n        return _this;\r\n    }\r\n    ResetObserver.prototype.onNext = function (record) {\r\n        this.onError((0, neo4j_driver_core_1.newError)('Received RECORD when resetting: received record is: ' +\r\n            neo4j_driver_core_1.json.stringify(record), PROTOCOL_ERROR));\r\n    };\r\n    ResetObserver.prototype.onError = function (error) {\r\n        if (error.code === PROTOCOL_ERROR && this._onProtocolError) {\r\n            this._onProtocolError(error.message);\r\n        }\r\n        if (this._onError) {\r\n            this._onError(error);\r\n        }\r\n    };\r\n    ResetObserver.prototype.onCompleted = function (metadata) {\r\n        if (this._onComplete) {\r\n            this._onComplete(metadata);\r\n        }\r\n    };\r\n    return ResetObserver;\r\n}(StreamObserver));\r\nexports.ResetObserver = ResetObserver;\r\nvar FailedObserver = /** @class */ (function (_super) {\r\n    __extends(FailedObserver, _super);\r\n    function FailedObserver(_a) {\r\n        var error = _a.error, onError = _a.onError;\r\n        var _this = _super.call(this, { beforeError: onError }) || this;\r\n        _this.onError(error);\r\n        return _this;\r\n    }\r\n    return FailedObserver;\r\n}(ResultStreamObserver));\r\nexports.FailedObserver = FailedObserver;\r\nvar CompletedObserver = /** @class */ (function (_super) {\r\n    __extends(CompletedObserver, _super);\r\n    function CompletedObserver() {\r\n        var _this = _super.call(this) || this;\r\n        _super.prototype.markCompleted.call(_this);\r\n        return _this;\r\n    }\r\n    return CompletedObserver;\r\n}(ResultStreamObserver));\r\nexports.CompletedObserver = CompletedObserver;\r\nvar ProcedureRouteObserver = /** @class */ (function (_super) {\r\n    __extends(ProcedureRouteObserver, _super);\r\n    function ProcedureRouteObserver(_a) {\r\n        var resultObserver = _a.resultObserver, onProtocolError = _a.onProtocolError, onError = _a.onError, onCompleted = _a.onCompleted;\r\n        var _this = _super.call(this) || this;\r\n        _this._resultObserver = resultObserver;\r\n        _this._onError = onError;\r\n        _this._onCompleted = onCompleted;\r\n        _this._records = [];\r\n        _this._onProtocolError = onProtocolError;\r\n        resultObserver.subscribe(_this);\r\n        return _this;\r\n    }\r\n    ProcedureRouteObserver.prototype.onNext = function (record) {\r\n        this._records.push(record);\r\n    };\r\n    ProcedureRouteObserver.prototype.onError = function (error) {\r\n        if (error.code === PROTOCOL_ERROR && this._onProtocolError) {\r\n            this._onProtocolError(error.message);\r\n        }\r\n        if (this._onError) {\r\n            this._onError(error);\r\n        }\r\n    };\r\n    ProcedureRouteObserver.prototype.onCompleted = function () {\r\n        if (this._records !== null && this._records.length !== 1) {\r\n            this.onError((0, neo4j_driver_core_1.newError)('Illegal response from router. Received ' +\r\n                this._records.length +\r\n                ' records but expected only one.\\n' +\r\n                neo4j_driver_core_1.json.stringify(this._records), PROTOCOL_ERROR));\r\n            return;\r\n        }\r\n        if (this._onCompleted) {\r\n            this._onCompleted(routing_table_raw_1.default.ofRecord(this._records[0]));\r\n        }\r\n    };\r\n    return ProcedureRouteObserver;\r\n}(StreamObserver));\r\nexports.ProcedureRouteObserver = ProcedureRouteObserver;\r\nvar RouteObserver = /** @class */ (function (_super) {\r\n    __extends(RouteObserver, _super);\r\n    /**\r\n     *\r\n     * @param {Object} param -\r\n     * @param {function(err: String)} param.onProtocolError\r\n     * @param {function(err: Error)} param.onError\r\n     * @param {function(RawRoutingTable)} param.onCompleted\r\n     */\r\n    function RouteObserver(_a) {\r\n        var _b = _a === void 0 ? {} : _a, onProtocolError = _b.onProtocolError, onError = _b.onError, onCompleted = _b.onCompleted;\r\n        var _this = _super.call(this) || this;\r\n        _this._onProtocolError = onProtocolError;\r\n        _this._onError = onError;\r\n        _this._onCompleted = onCompleted;\r\n        return _this;\r\n    }\r\n    RouteObserver.prototype.onNext = function (record) {\r\n        this.onError((0, neo4j_driver_core_1.newError)('Received RECORD when resetting: received record is: ' +\r\n            neo4j_driver_core_1.json.stringify(record), PROTOCOL_ERROR));\r\n    };\r\n    RouteObserver.prototype.onError = function (error) {\r\n        if (error.code === PROTOCOL_ERROR && this._onProtocolError) {\r\n            this._onProtocolError(error.message);\r\n        }\r\n        if (this._onError) {\r\n            this._onError(error);\r\n        }\r\n    };\r\n    RouteObserver.prototype.onCompleted = function (metadata) {\r\n        if (this._onCompleted) {\r\n            this._onCompleted(routing_table_raw_1.default.ofMessageResponse(metadata));\r\n        }\r\n    };\r\n    return RouteObserver;\r\n}(StreamObserver));\r\nexports.RouteObserver = RouteObserver;\r\nvar _states = {\r\n    READY_STREAMING: {\r\n        // async start state\r\n        onSuccess: function (streamObserver, meta) {\r\n            streamObserver._handleRunSuccess(meta, function () {\r\n                streamObserver._setState(_states.STREAMING);\r\n            } // after run succeeded, async directly move to streaming\r\n            // state\r\n            );\r\n        },\r\n        onError: function (streamObserver, error) {\r\n            streamObserver._handleError(error);\r\n        },\r\n        name: function () {\r\n            return 'READY_STREAMING';\r\n        }\r\n    },\r\n    READY: {\r\n        // reactive start state\r\n        onSuccess: function (streamObserver, meta) {\r\n            streamObserver._handleRunSuccess(meta, function () { return streamObserver._handleStreaming(); } // after run succeeded received, reactive shall start pulling\r\n            );\r\n        },\r\n        onError: function (streamObserver, error) {\r\n            streamObserver._handleError(error);\r\n        },\r\n        name: function () {\r\n            return 'READY';\r\n        }\r\n    },\r\n    STREAMING: {\r\n        onSuccess: function (streamObserver, meta) {\r\n            if (meta.has_more) {\r\n                streamObserver._handleHasMore(meta);\r\n            }\r\n            else {\r\n                streamObserver._handlePullSuccess(meta);\r\n            }\r\n        },\r\n        onError: function (streamObserver, error) {\r\n            streamObserver._handleError(error);\r\n        },\r\n        name: function () {\r\n            return 'STREAMING';\r\n        }\r\n    },\r\n    FAILED: {\r\n        onError: function (error) {\r\n            // more errors are ignored\r\n        },\r\n        name: function () {\r\n            return 'FAILED';\r\n        }\r\n    },\r\n    SUCCEEDED: {\r\n        name: function () {\r\n            return 'SUCCEEDED';\r\n        }\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"script"}