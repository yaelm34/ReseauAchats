{"ast":null,"code":"/** PURE_IMPORTS_START _concatMap PURE_IMPORTS_END */\nimport { concatMap } from './concatMap';\nexport function concatMapTo(innerObservable, resultSelector) {\n  return concatMap(function () {\n    return innerObservable;\n  }, resultSelector);\n}","map":{"version":3,"mappings":"AAAA;AAmEA,SAAMA,SAAN,QAAgB,aAAhB;OAIE,SAAOC,WAAP,CAAiBC,eAAjB,EAAuBC,cAAvB,EAAsC;AACvC;AAAA;AAAA","names":["concatMap","concatMapTo","innerObservable","resultSelector"],"sources":["D:\\Documents\\EMA\\Mines A3\\NoSQL\\ReseauAchats\\reseau_achats\\node_modules\\rxjs\\src\\internal\\operators\\concatMapTo.ts"],"sourcesContent":["import { concatMap } from './concatMap';\r\nimport { ObservableInput, OperatorFunction, ObservedValueOf } from '../types';\r\n\r\n/* tslint:disable:max-line-length */\r\nexport function concatMapTo<T, O extends ObservableInput<any>>(observable: O): OperatorFunction<T, ObservedValueOf<O>>;\r\n/** @deprecated */\r\nexport function concatMapTo<T, O extends ObservableInput<any>>(observable: O, resultSelector: undefined): OperatorFunction<T, ObservedValueOf<O>>;\r\n/** @deprecated */\r\nexport function concatMapTo<T, R, O extends ObservableInput<any>>(observable: O, resultSelector: (outerValue: T, innerValue: ObservedValueOf<O>, outerIndex: number, innerIndex: number) => R): OperatorFunction<T, R>;\r\n/* tslint:enable:max-line-length */\r\n\r\n/**\r\n * Projects each source value to the same Observable which is merged multiple\r\n * times in a serialized fashion on the output Observable.\r\n *\r\n * <span class=\"informal\">It's like {@link concatMap}, but maps each value\r\n * always to the same inner Observable.</span>\r\n *\r\n * ![](concatMapTo.png)\r\n *\r\n * Maps each source value to the given Observable `innerObservable` regardless\r\n * of the source value, and then flattens those resulting Observables into one\r\n * single Observable, which is the output Observable. Each new `innerObservable`\r\n * instance emitted on the output Observable is concatenated with the previous\r\n * `innerObservable` instance.\r\n *\r\n * __Warning:__ if source values arrive endlessly and faster than their\r\n * corresponding inner Observables can complete, it will result in memory issues\r\n * as inner Observables amass in an unbounded buffer waiting for their turn to\r\n * be subscribed to.\r\n *\r\n * Note: `concatMapTo` is equivalent to `mergeMapTo` with concurrency parameter\r\n * set to `1`.\r\n *\r\n * ## Example\r\n * For each click event, tick every second from 0 to 3, with no concurrency\r\n * ```ts\r\n * import { fromEvent, interval } from 'rxjs';\r\n * import { concatMapTo, take } from 'rxjs/operators';\r\n *\r\n * const clicks = fromEvent(document, 'click');\r\n * const result = clicks.pipe(\r\n *   concatMapTo(interval(1000).pipe(take(4))),\r\n * );\r\n * result.subscribe(x => console.log(x));\r\n *\r\n * // Results in the following:\r\n * // (results are not concurrent)\r\n * // For every click on the \"document\" it will emit values 0 to 3 spaced\r\n * // on a 1000ms interval\r\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\r\n * ```\r\n *\r\n * @see {@link concat}\r\n * @see {@link concatAll}\r\n * @see {@link concatMap}\r\n * @see {@link mergeMapTo}\r\n * @see {@link switchMapTo}\r\n *\r\n * @param {ObservableInput} innerObservable An Observable to replace each value from\r\n * the source Observable.\r\n * @return {Observable} An observable of values merged together by joining the\r\n * passed observable with itself, one after the other, for each value emitted\r\n * from the source.\r\n * @method concatMapTo\r\n * @owner Observable\r\n */\r\nexport function concatMapTo<T, R, O extends ObservableInput<any>>(\r\n  innerObservable: O,\r\n  resultSelector?: (outerValue: T, innerValue: ObservedValueOf<O>, outerIndex: number, innerIndex: number) => R\r\n): OperatorFunction<T, ObservedValueOf<O>|R> {\r\n  return concatMap(() => innerObservable, resultSelector);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}