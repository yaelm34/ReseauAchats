{"ast":null,"code":"/** PURE_IMPORTS_START _subscribeToArray,_subscribeToPromise,_subscribeToIterable,_subscribeToObservable,_isArrayLike,_isPromise,_isObject,_symbol_iterator,_symbol_observable PURE_IMPORTS_END */\nimport { subscribeToArray } from './subscribeToArray';\nimport { subscribeToPromise } from './subscribeToPromise';\nimport { subscribeToIterable } from './subscribeToIterable';\nimport { subscribeToObservable } from './subscribeToObservable';\nimport { isArrayLike } from './isArrayLike';\nimport { isPromise } from './isPromise';\nimport { isObject } from './isObject';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { observable as Symbol_observable } from '../symbol/observable';\nexport var subscribeTo = function (result) {\n  if (!!result && typeof result[Symbol_observable] === 'function') {\n    return subscribeToObservable(result);\n  } else if (isArrayLike(result)) {\n    return subscribeToArray(result);\n  } else if (isPromise(result)) {\n    return subscribeToPromise(result);\n  } else if (!!result && typeof result[Symbol_iterator] === 'function') {\n    return subscribeToIterable(result);\n  } else {\n    var value = isObject(result) ? 'an invalid object' : \"'\" + result + \"'\";\n    var msg = \"You provided \" + value + \" where a stream was expected.\" + ' You can provide an Observable, Promise, Array, or Iterable.';\n    throw new TypeError(msg);\n  }\n};","map":{"version":3,"mappings":"AACA;AACA,SAASA,gBAAT,QAA6B,oBAA7B;AACA,SAASC,kBAAT,QAA8B,sBAA9B;AACA,SAASC,mBAAT,QAAgC,uBAAhC;AACA,SAASC,qBAAT,QAA4B,yBAA5B;AACA,SAASC,WAAT,QAA0B,eAA1B;AACA,SAASC,SAAT,QAAyB,aAAzB;AACA,SAASC,QAAT,QAAqB,YAArB;AACA,SAASC,YAAUC,eAAnB,QAA0C,oBAA1C;AAIA,SAAOC,UAAM,IAAWC,iBAAxB,QAAyD,sBAAzD;OACE,IAAMC,WAAU,aAAcC,MAAd,EAAc;MAC5B,YAAO,qCAAqC;AAC7C;SACC,eAAO,QAAP,EAAwB;AACzB;GADC,MAEA,aAAO,QAAP,EAAO;AACR;GADC,MAEA,MAAOA,MAAP,IAAO,aAAoB,iBAApB,KAAmC,UAA1C,EAA0C;AAC3C;GADC,MAEA;AACA,QAAMC,KAAG,GAAGP,mBAAgB,mBAAhB,GAAqB,eAA+B,GAAhE;WACI,+DACE;AACP;AACD;CAdA","names":["subscribeToArray","subscribeToPromise","subscribeToIterable","subscribeToObservable","isArrayLike","isPromise","isObject","iterator","Symbol_iterator","observable","Symbol_observable","subscribeTo","result","value"],"sources":["D:\\Documents\\EMA\\Mines A3\\NoSQL\\ReseauAchats\\reseau_achats\\node_modules\\rxjs\\src\\internal\\util\\subscribeTo.ts"],"sourcesContent":["import { ObservableInput } from '../types';\r\nimport { subscribeToArray } from './subscribeToArray';\r\nimport { subscribeToPromise } from './subscribeToPromise';\r\nimport { subscribeToIterable } from './subscribeToIterable';\r\nimport { subscribeToObservable } from './subscribeToObservable';\r\nimport { isArrayLike } from './isArrayLike';\r\nimport { isPromise } from './isPromise';\r\nimport { isObject } from './isObject';\r\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\r\nimport { observable as Symbol_observable } from '../symbol/observable';\r\nimport { Subscription } from '../Subscription';\r\nimport { Subscriber } from '../Subscriber';\r\n\r\nexport const subscribeTo = <T>(result: ObservableInput<T>): (subscriber: Subscriber<T>) => Subscription | void => {\r\n  if (!!result && typeof result[Symbol_observable] === 'function') {\r\n    return subscribeToObservable(result as any);\r\n  } else if (isArrayLike(result)) {\r\n    return subscribeToArray(result);\r\n  } else if (isPromise(result)) {\r\n    return subscribeToPromise(result as Promise<any>);\r\n  } else if (!!result && typeof result[Symbol_iterator] === 'function') {\r\n    return subscribeToIterable(result as any);\r\n  } else {\r\n    const value = isObject(result) ? 'an invalid object' : `'${result}'`;\r\n    const msg = `You provided ${value} where a stream was expected.`\r\n      + ' You can provide an Observable, Promise, Array, or Iterable.';\r\n    throw new TypeError(msg);\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}