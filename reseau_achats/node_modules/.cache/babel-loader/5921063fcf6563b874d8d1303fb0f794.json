{"ast":null,"code":"\"use strict\";\n/**\r\n * Copyright (c) \"Neo4j\"\r\n * Neo4j Sweden AB [http://neo4j.com]\r\n *\r\n * This file is part of Neo4j.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\r\n * Interface which defines the raw connection with the database\r\n * @private\r\n */\n\nvar Connection =\n/** @class */\nfunction () {\n  function Connection() {\n    this.id = \"\";\n    this.databaseId = \"\";\n  }\n  /**\r\n   * @returns {boolean} whether this connection is in a working condition\r\n   */\n\n\n  Connection.prototype.isOpen = function () {\n    return false;\n  };\n  /**\r\n   * @todo be removed and internalize the methods\r\n   * @returns {any} the underlying bolt protocol assigned to this connection\r\n   */\n\n\n  Connection.prototype.protocol = function () {\n    throw Error('Not implemented');\n  };\n  /**\r\n   * Connect to the target address, negotiate Bolt protocol and send initialization message.\r\n   * @param {string} userAgent the user agent for this driver.\r\n   * @param {Object} authToken the object containing auth information.\r\n   * @return {Promise<Connection>} promise resolved with the current connection if connection is successful. Rejected promise otherwise.\r\n   */\n\n\n  Connection.prototype.connect = function (userAgent, authToken) {\n    throw Error('Not implemented');\n  };\n  /**\r\n   * Write a message to the network channel.\r\n   * @param {RequestMessage} message the message to write.\r\n   * @param {ResultStreamObserver} observer the response observer.\r\n   * @param {boolean} flush `true` if flush should happen after the message is written to the buffer.\r\n   */\n\n\n  Connection.prototype.write = function (message, observer, flush) {\n    throw Error('Not implemented');\n  };\n  /**\r\n   * Send a RESET-message to the database. Message is immediately flushed to the network.\r\n   * @return {Promise<void>} promise resolved when SUCCESS-message response arrives, or failed when other response messages arrives.\r\n   */\n\n\n  Connection.prototype.resetAndFlush = function () {\n    throw Error('Not implemented');\n  };\n  /**\r\n   * Call close on the channel.\r\n   * @returns {Promise<void>} - A promise that will be resolved when the connection is closed.\r\n   *\r\n   */\n\n\n  Connection.prototype.close = function () {\n    throw Error('Not implemented');\n  };\n  /**\r\n   * Called to release the connection\r\n   */\n\n\n  Connection.prototype._release = function () {\n    return Promise.resolve();\n  };\n\n  return Connection;\n}();\n\nexports.default = Connection;","map":{"version":3,"sources":["D:/Documents/EMA/Mines A3/NoSQL/ReseauAchats/reseau_achats/node_modules/neo4j-driver-core/lib/connection.js"],"names":["Object","defineProperty","exports","value","Connection","id","databaseId","prototype","isOpen","protocol","Error","connect","userAgent","authToken","write","message","observer","flush","resetAndFlush","close","_release","Promise","resolve","default"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACA;AACA;AACA;AACA;;AACA,IAAIC,UAAU;AAAG;AAAe,YAAY;AACxC,WAASA,UAAT,GAAsB;AAClB,SAAKC,EAAL,GAAU,EAAV;AACA,SAAKC,UAAL,GAAkB,EAAlB;AACH;AACD;AACJ;AACA;;;AACIF,EAAAA,UAAU,CAACG,SAAX,CAAqBC,MAArB,GAA8B,YAAY;AACtC,WAAO,KAAP;AACH,GAFD;AAGA;AACJ;AACA;AACA;;;AACIJ,EAAAA,UAAU,CAACG,SAAX,CAAqBE,QAArB,GAAgC,YAAY;AACxC,UAAMC,KAAK,CAAC,iBAAD,CAAX;AACH,GAFD;AAGA;AACJ;AACA;AACA;AACA;AACA;;;AACIN,EAAAA,UAAU,CAACG,SAAX,CAAqBI,OAArB,GAA+B,UAAUC,SAAV,EAAqBC,SAArB,EAAgC;AAC3D,UAAMH,KAAK,CAAC,iBAAD,CAAX;AACH,GAFD;AAGA;AACJ;AACA;AACA;AACA;AACA;;;AACIN,EAAAA,UAAU,CAACG,SAAX,CAAqBO,KAArB,GAA6B,UAAUC,OAAV,EAAmBC,QAAnB,EAA6BC,KAA7B,EAAoC;AAC7D,UAAMP,KAAK,CAAC,iBAAD,CAAX;AACH,GAFD;AAGA;AACJ;AACA;AACA;;;AACIN,EAAAA,UAAU,CAACG,SAAX,CAAqBW,aAArB,GAAqC,YAAY;AAC7C,UAAMR,KAAK,CAAC,iBAAD,CAAX;AACH,GAFD;AAGA;AACJ;AACA;AACA;AACA;;;AACIN,EAAAA,UAAU,CAACG,SAAX,CAAqBY,KAArB,GAA6B,YAAY;AACrC,UAAMT,KAAK,CAAC,iBAAD,CAAX;AACH,GAFD;AAGA;AACJ;AACA;;;AACIN,EAAAA,UAAU,CAACG,SAAX,CAAqBa,QAArB,GAAgC,YAAY;AACxC,WAAOC,OAAO,CAACC,OAAR,EAAP;AACH,GAFD;;AAGA,SAAOlB,UAAP;AACH,CA1D+B,EAAhC;;AA2DAF,OAAO,CAACqB,OAAR,GAAkBnB,UAAlB","sourcesContent":["\"use strict\";\r\n/**\r\n * Copyright (c) \"Neo4j\"\r\n * Neo4j Sweden AB [http://neo4j.com]\r\n *\r\n * This file is part of Neo4j.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n * Interface which defines the raw connection with the database\r\n * @private\r\n */\r\nvar Connection = /** @class */ (function () {\r\n    function Connection() {\r\n        this.id = \"\";\r\n        this.databaseId = \"\";\r\n    }\r\n    /**\r\n     * @returns {boolean} whether this connection is in a working condition\r\n     */\r\n    Connection.prototype.isOpen = function () {\r\n        return false;\r\n    };\r\n    /**\r\n     * @todo be removed and internalize the methods\r\n     * @returns {any} the underlying bolt protocol assigned to this connection\r\n     */\r\n    Connection.prototype.protocol = function () {\r\n        throw Error('Not implemented');\r\n    };\r\n    /**\r\n     * Connect to the target address, negotiate Bolt protocol and send initialization message.\r\n     * @param {string} userAgent the user agent for this driver.\r\n     * @param {Object} authToken the object containing auth information.\r\n     * @return {Promise<Connection>} promise resolved with the current connection if connection is successful. Rejected promise otherwise.\r\n     */\r\n    Connection.prototype.connect = function (userAgent, authToken) {\r\n        throw Error('Not implemented');\r\n    };\r\n    /**\r\n     * Write a message to the network channel.\r\n     * @param {RequestMessage} message the message to write.\r\n     * @param {ResultStreamObserver} observer the response observer.\r\n     * @param {boolean} flush `true` if flush should happen after the message is written to the buffer.\r\n     */\r\n    Connection.prototype.write = function (message, observer, flush) {\r\n        throw Error('Not implemented');\r\n    };\r\n    /**\r\n     * Send a RESET-message to the database. Message is immediately flushed to the network.\r\n     * @return {Promise<void>} promise resolved when SUCCESS-message response arrives, or failed when other response messages arrives.\r\n     */\r\n    Connection.prototype.resetAndFlush = function () {\r\n        throw Error('Not implemented');\r\n    };\r\n    /**\r\n     * Call close on the channel.\r\n     * @returns {Promise<void>} - A promise that will be resolved when the connection is closed.\r\n     *\r\n     */\r\n    Connection.prototype.close = function () {\r\n        throw Error('Not implemented');\r\n    };\r\n    /**\r\n     * Called to release the connection\r\n     */\r\n    Connection.prototype._release = function () {\r\n        return Promise.resolve();\r\n    };\r\n    return Connection;\r\n}());\r\nexports.default = Connection;\r\n"]},"metadata":{},"sourceType":"script"}