{"ast":null,"code":"/** PURE_IMPORTS_START _defer,_empty PURE_IMPORTS_END */\nimport { defer } from './defer';\nimport { EMPTY } from './empty';\nexport function iif(condition, trueResult, falseResult) {\n  if (trueResult === void 0) {\n    trueResult = EMPTY;\n  }\n\n  if (falseResult === void 0) {\n    falseResult = EMPTY;\n  }\n\n  return defer(function () {\n    return condition() ? trueResult : falseResult;\n  });\n}","map":{"version":3,"mappings":"AACA;AACA,SAASA,KAAT,QAAsB,SAAtB;AA2FA,SAAMC,KAAN,QACE,SADF;OAEE,iDAA4C;AAC5C;AAEAC,cAAa,QAAb;AACD","names":["defer","EMPTY","trueResult"],"sources":["D:\\Documents\\EMA\\Mines A3\\NoSQL\\ReseauAchats\\reseau_achats\\node_modules\\rxjs\\src\\internal\\observable\\iif.ts"],"sourcesContent":["import { Observable } from '../Observable';\r\nimport { defer } from './defer';\r\nimport { EMPTY } from './empty';\r\nimport { SubscribableOrPromise } from '../types';\r\n\r\n/**\r\n * Decides at subscription time which Observable will actually be subscribed.\r\n *\r\n * <span class=\"informal\">`If` statement for Observables.</span>\r\n *\r\n * `iif` accepts a condition function and two Observables. When\r\n * an Observable returned by the operator is subscribed, condition function will be called.\r\n * Based on what boolean it returns at that moment, consumer will subscribe either to\r\n * the first Observable (if condition was true) or to the second (if condition was false). Condition\r\n * function may also not return anything - in that case condition will be evaluated as false and\r\n * second Observable will be subscribed.\r\n *\r\n * Note that Observables for both cases (true and false) are optional. If condition points to an Observable that\r\n * was left undefined, resulting stream will simply complete immediately. That allows you to, rather\r\n * than controlling which Observable will be subscribed, decide at runtime if consumer should have access\r\n * to given Observable or not.\r\n *\r\n * If you have more complex logic that requires decision between more than two Observables, {@link defer}\r\n * will probably be a better choice. Actually `iif` can be easily implemented with {@link defer}\r\n * and exists only for convenience and readability reasons.\r\n *\r\n *\r\n * ## Examples\r\n * ### Change at runtime which Observable will be subscribed\r\n * ```ts\r\n * import { iif, of } from 'rxjs';\r\n *\r\n * let subscribeToFirst;\r\n * const firstOrSecond = iif(\r\n *   () => subscribeToFirst,\r\n *   of('first'),\r\n *   of('second'),\r\n * );\r\n *\r\n * subscribeToFirst = true;\r\n * firstOrSecond.subscribe(value => console.log(value));\r\n *\r\n * // Logs:\r\n * // \"first\"\r\n *\r\n * subscribeToFirst = false;\r\n * firstOrSecond.subscribe(value => console.log(value));\r\n *\r\n * // Logs:\r\n * // \"second\"\r\n *\r\n * ```\r\n *\r\n * ### Control an access to an Observable\r\n * ```ts\r\n * let accessGranted;\r\n * const observableIfYouHaveAccess = iif(\r\n *   () => accessGranted,\r\n *   of('It seems you have an access...'), // Note that only one Observable is passed to the operator.\r\n * );\r\n *\r\n * accessGranted = true;\r\n * observableIfYouHaveAccess.subscribe(\r\n *   value => console.log(value),\r\n *   err => {},\r\n *   () => console.log('The end'),\r\n * );\r\n *\r\n * // Logs:\r\n * // \"It seems you have an access...\"\r\n * // \"The end\"\r\n *\r\n * accessGranted = false;\r\n * observableIfYouHaveAccess.subscribe(\r\n *   value => console.log(value),\r\n *   err => {},\r\n *   () => console.log('The end'),\r\n * );\r\n *\r\n * // Logs:\r\n * // \"The end\"\r\n * ```\r\n *\r\n * @see {@link defer}\r\n *\r\n * @param {function(): boolean} condition Condition which Observable should be chosen.\r\n * @param {Observable} [trueObservable] An Observable that will be subscribed if condition is true.\r\n * @param {Observable} [falseObservable] An Observable that will be subscribed if condition is false.\r\n * @return {Observable} Either first or second Observable, depending on condition.\r\n * @static true\r\n * @name iif\r\n * @owner Observable\r\n*/\r\nexport function iif<T = never, F = never>(\r\n  condition: () => boolean,\r\n  trueResult: SubscribableOrPromise<T> = EMPTY,\r\n  falseResult: SubscribableOrPromise<F> = EMPTY\r\n): Observable<T|F> {\r\n  return defer(() => condition() ? trueResult : falseResult);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}