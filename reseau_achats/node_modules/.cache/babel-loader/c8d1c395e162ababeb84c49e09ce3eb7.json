{"ast":null,"code":"/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nexport function find(predicate, thisArg) {\n  if (typeof predicate !== 'function') {\n    throw new TypeError('predicate is not a function');\n  }\n\n  return function (source) {\n    return source.lift(new FindValueOperator(predicate, source, false, thisArg));\n  };\n}\n\nvar FindValueOperator = /*@__PURE__*/function () {\n  function FindValueOperator(predicate, source, yieldIndex, thisArg) {\n    this.predicate = predicate;\n    this.source = source;\n    this.yieldIndex = yieldIndex;\n    this.thisArg = thisArg;\n  }\n\n  FindValueOperator.prototype.call = function (observer, source) {\n    return source.subscribe(new FindValueSubscriber(observer, this.predicate, this.source, this.yieldIndex, this.thisArg));\n  };\n\n  return FindValueOperator;\n}();\n\nexport { FindValueOperator };\n\nvar FindValueSubscriber = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(FindValueSubscriber, _super);\n\n  function FindValueSubscriber(destination, predicate, source, yieldIndex, thisArg) {\n    var _this = _super.call(this, destination) || this;\n\n    _this.predicate = predicate;\n    _this.source = source;\n    _this.yieldIndex = yieldIndex;\n    _this.thisArg = thisArg;\n    _this.index = 0;\n    return _this;\n  }\n\n  FindValueSubscriber.prototype.notifyComplete = function (value) {\n    var destination = this.destination;\n    destination.next(value);\n    destination.complete();\n    this.unsubscribe();\n  };\n\n  FindValueSubscriber.prototype._next = function (value) {\n    var _a = this,\n        predicate = _a.predicate,\n        thisArg = _a.thisArg;\n\n    var index = this.index++;\n\n    try {\n      var result = predicate.call(thisArg || this, value, index, this.source);\n\n      if (result) {\n        this.notifyComplete(this.yieldIndex ? index : value);\n      }\n    } catch (err) {\n      this.destination.error(err);\n    }\n  };\n\n  FindValueSubscriber.prototype._complete = function () {\n    this.notifyComplete(this.yieldIndex ? -1 : undefined);\n  };\n\n  return FindValueSubscriber;\n}(Subscriber);\n\nexport { FindValueSubscriber };","map":{"version":3,"mappings":";AAEA,OAAO,KAACA,OAAR,MAAmB,OAAnB;AA8CA,SAAMC,UAAN,QAAwB,eAAxB;OAEE,SAAWC,IAAX,CAAWC,SAAX,EAAyBC,OAAzB,EAAqC;MACnC,OAAMD,SAAN,KAAoB;AACrB;AACD;;AACD;AAAA;AAAA;AAED;;IACEE,iCAAoB,YAEA;WAFAA,6BAAsEC;AACtE;AACA;AACA;AACnB;AAED;;mBACe,CAACC,UAAUC,OAAI,oBAAoBF,MAApB,EAA8B;AAC3D;AACH;;AAVA,SAUCD,iBAVD;CACsB;;AAgBtB;;IAA4CI,6CAAaC,MAAb,EAAa;AAGvDV,yCAAYU,MAAZ;;WAAAD,oBAKEE,aAAMR,WAAYG,QACnBM;AALmB,kCAAsED,WAAtE,KAAsE,IAAtE;;AACAE;AACAA;AACAA;AANZA,oBAAkBT,OAAlB;;AAQP;AAEO;;qBACW,WAAQU,iBAAY;AAErC,mBAAY,GAAK,KAAMH,WAAvB;AACAA,eAAW,CAACI,IAAZ,CAAYC,KAAZ;AACAL,eAAK,SAAL;AACD;AAES;;qBACD,6BAAWK,KAAX,EAAW;AAClB,QAAMC,KAAK,IAAX;AAAA,QAAcd,SAAY,GAACc,YAA3B;AAAA,QAA2Bb,oBAA3B;;AACA,QAAIc,oBAAJ;;QACE;AACA,UAAIC,MAAM,GAAEhB,0DAAZ;;UACEgB,QAAK;AACN;AACF;AAAC,aACAC,KAAK;AACN;AACF;AAES;;qBACH,WAAoBC,YAAa,YAAK;AAC5C;AACH;;AAnC4C;CAAA","names":["tslib_1","Subscriber","find","predicate","thisArg","FindValueOperator","source","prototype","call","FindValueSubscriber","_super","destination","yieldIndex","_this","notifyComplete","next","value","_a","index","result","err","_complete"],"sources":["D:\\Documents\\EMA\\Mines A3\\NoSQL\\ReseauAchats\\reseau_achats\\node_modules\\rxjs\\src\\internal\\operators\\find.ts"],"sourcesContent":["import {Observable} from '../Observable';\r\nimport {Operator} from '../Operator';\r\nimport {Subscriber} from '../Subscriber';\r\nimport {OperatorFunction} from '../types';\r\n\r\nexport function find<T, S extends T>(predicate: (value: T, index: number, source: Observable<T>) => value is S,\r\n                                     thisArg?: any): OperatorFunction<T, S | undefined>;\r\nexport function find<T>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\r\n                        thisArg?: any): OperatorFunction<T, T | undefined>;\r\n/**\r\n * Emits only the first value emitted by the source Observable that meets some\r\n * condition.\r\n *\r\n * <span class=\"informal\">Finds the first value that passes some test and emits\r\n * that.</span>\r\n *\r\n * ![](find.png)\r\n *\r\n * `find` searches for the first item in the source Observable that matches the\r\n * specified condition embodied by the `predicate`, and returns the first\r\n * occurrence in the source. Unlike {@link first}, the `predicate` is required\r\n * in `find`, and does not emit an error if a valid value is not found.\r\n *\r\n * ## Example\r\n * Find and emit the first click that happens on a DIV element\r\n * ```ts\r\n * import { fromEvent } from 'rxjs';\r\n * import { find } from 'rxjs/operators';\r\n *\r\n * const clicks = fromEvent(document, 'click');\r\n * const result = clicks.pipe(find(ev => ev.target.tagName === 'DIV'));\r\n * result.subscribe(x => console.log(x));\r\n * ```\r\n *\r\n * @see {@link filter}\r\n * @see {@link first}\r\n * @see {@link findIndex}\r\n * @see {@link take}\r\n *\r\n * @param {function(value: T, index: number, source: Observable<T>): boolean} predicate\r\n * A function called with each item to test for condition matching.\r\n * @param {any} [thisArg] An optional argument to determine the value of `this`\r\n * in the `predicate` function.\r\n * @return {Observable<T>} An Observable of the first item that matches the\r\n * condition.\r\n * @method find\r\n * @owner Observable\r\n */\r\nexport function find<T>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\r\n                        thisArg?: any): OperatorFunction<T, T | undefined> {\r\n  if (typeof predicate !== 'function') {\r\n    throw new TypeError('predicate is not a function');\r\n  }\r\n  return (source: Observable<T>) => source.lift(new FindValueOperator(predicate, source, false, thisArg)) as Observable<T | undefined>;\r\n}\r\n\r\nexport class FindValueOperator<T> implements Operator<T, T | number | undefined> {\r\n  constructor(private predicate: (value: T, index: number, source: Observable<T>) => boolean,\r\n              private source: Observable<T>,\r\n              private yieldIndex: boolean,\r\n              private thisArg?: any) {\r\n  }\r\n\r\n  call(observer: Subscriber<T>, source: any): any {\r\n    return source.subscribe(new FindValueSubscriber(observer, this.predicate, this.source, this.yieldIndex, this.thisArg));\r\n  }\r\n}\r\n\r\n/**\r\n * We need this JSDoc comment for affecting ESDoc.\r\n * @ignore\r\n * @extends {Ignored}\r\n */\r\nexport class FindValueSubscriber<T> extends Subscriber<T> {\r\n  private index: number = 0;\r\n\r\n  constructor(destination: Subscriber<T>,\r\n              private predicate: (value: T, index: number, source: Observable<T>) => boolean,\r\n              private source: Observable<T>,\r\n              private yieldIndex: boolean,\r\n              private thisArg?: any) {\r\n    super(destination);\r\n  }\r\n\r\n  private notifyComplete(value: any): void {\r\n    const destination = this.destination;\r\n\r\n    destination.next(value);\r\n    destination.complete();\r\n    this.unsubscribe();\r\n  }\r\n\r\n  protected _next(value: T): void {\r\n    const {predicate, thisArg} = this;\r\n    const index = this.index++;\r\n    try {\r\n      const result = predicate.call(thisArg || this, value, index, this.source);\r\n      if (result) {\r\n        this.notifyComplete(this.yieldIndex ? index : value);\r\n      }\r\n    } catch (err) {\r\n      this.destination.error(err);\r\n    }\r\n  }\r\n\r\n  protected _complete(): void {\r\n    this.notifyComplete(this.yieldIndex ? -1 : undefined);\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}