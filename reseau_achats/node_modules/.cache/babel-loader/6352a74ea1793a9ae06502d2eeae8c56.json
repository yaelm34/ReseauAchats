{"ast":null,"code":"/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nexport function map(project, thisArg) {\n  return function mapOperation(source) {\n    if (typeof project !== 'function') {\n      throw new TypeError('argument is not a function. Are you looking for `mapTo()`?');\n    }\n\n    return source.lift(new MapOperator(project, thisArg));\n  };\n}\n\nvar MapOperator = /*@__PURE__*/function () {\n  function MapOperator(project, thisArg) {\n    this.project = project;\n    this.thisArg = thisArg;\n  }\n\n  MapOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new MapSubscriber(subscriber, this.project, this.thisArg));\n  };\n\n  return MapOperator;\n}();\n\nexport { MapOperator };\n\nvar MapSubscriber = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(MapSubscriber, _super);\n\n  function MapSubscriber(destination, project, thisArg) {\n    var _this = _super.call(this, destination) || this;\n\n    _this.project = project;\n    _this.count = 0;\n    _this.thisArg = thisArg || _this;\n    return _this;\n  }\n\n  MapSubscriber.prototype._next = function (value) {\n    var result;\n\n    try {\n      result = this.project.call(this.thisArg, value, this.count++);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n\n    this.destination.next(result);\n  };\n\n  return MapSubscriber;\n}(Subscriber);","map":{"version":3,"mappings":";AACA,OAAO,KAAEA,OAAT,MAAqB,OAArB;AA2CA,SAAMC,UAAN,QAAiE,eAAjE;OACE,SAAOC,GAAP,CAAgBC,OAAhB,EAAgBC,OAAhB,EAA6B;SAC3B,SAAWC,YAAX,CAAuBC,MAAvB,EAAiC;QAC/B,OAAMH,OAAN,KAAmB,YAAC;AACrB;AACD;;AACA;AACH;AAED;;IACEI,2BAA2D,YAAsB;WAA7DA,qBAAuCH;AAAU;AACpE;AAED;;aACS,WAAOI,OAAU,UAAIC,UAAJ,EAAkBH,MAAlB,EAA8B;AACvD;AACH;;AAPA,SAOCC,WAPD;CAC6D;;AAa7D;;IAAkCG,uCAAaC,MAAb,EAAa;AAI7CX,mCAAYW,MAAZ;;WAAAD,cAGEE,aAAMT,SAAWC,SAAC;AAFA,4BAAuC,IAAvC,EAAuCQ,WAAvC,KAAuC,IAAvC;;AAJpBC,oBAAkBV,OAAlB;AAOEU,SAAI,CAACC,KAAL,GAAY,CAAZ;;AACD;AAIS;;eACJ,CAASC,UAACC;AACd,QAAIC,MAAJ;;QACE;AACDA;AAAC,aACAC,KAAK;AACL,uBAAOC,KAAP,CAAOD,GAAP;AACD;AACD;;AACD;AACH;;AAvBkC;CAAA","names":["tslib_1","Subscriber","map","project","thisArg","mapOperation","source","MapOperator","call","subscriber","MapSubscriber","_super","destination","_this","count","prototype","_next","result","err","error"],"sources":["D:\\Documents\\EMA\\Mines A3\\NoSQL\\ReseauAchats\\reseau_achats\\node_modules\\rxjs\\src\\internal\\operators\\map.ts"],"sourcesContent":["import { Operator } from '../Operator';\r\nimport { Subscriber } from '../Subscriber';\r\nimport { Observable } from '../Observable';\r\nimport { OperatorFunction } from '../types';\r\n\r\n/**\r\n * Applies a given `project` function to each value emitted by the source\r\n * Observable, and emits the resulting values as an Observable.\r\n *\r\n * <span class=\"informal\">Like [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map),\r\n * it passes each source value through a transformation function to get\r\n * corresponding output values.</span>\r\n *\r\n * ![](map.png)\r\n *\r\n * Similar to the well known `Array.prototype.map` function, this operator\r\n * applies a projection to each value and emits that projection in the output\r\n * Observable.\r\n *\r\n * ## Example\r\n * Map every click to the clientX position of that click\r\n * ```ts\r\n * import { fromEvent } from 'rxjs';\r\n * import { map } from 'rxjs/operators';\r\n *\r\n * const clicks = fromEvent(document, 'click');\r\n * const positions = clicks.pipe(map(ev => ev.clientX));\r\n * positions.subscribe(x => console.log(x));\r\n * ```\r\n *\r\n * @see {@link mapTo}\r\n * @see {@link pluck}\r\n *\r\n * @param {function(value: T, index: number): R} project The function to apply\r\n * to each `value` emitted by the source Observable. The `index` parameter is\r\n * the number `i` for the i-th emission that has happened since the\r\n * subscription, starting from the number `0`.\r\n * @param {any} [thisArg] An optional argument to define what `this` is in the\r\n * `project` function.\r\n * @return {Observable<R>} An Observable that emits the values from the source\r\n * Observable transformed by the given `project` function.\r\n * @method map\r\n * @owner Observable\r\n */\r\nexport function map<T, R>(project: (value: T, index: number) => R, thisArg?: any): OperatorFunction<T, R> {\r\n  return function mapOperation(source: Observable<T>): Observable<R> {\r\n    if (typeof project !== 'function') {\r\n      throw new TypeError('argument is not a function. Are you looking for `mapTo()`?');\r\n    }\r\n    return source.lift(new MapOperator(project, thisArg));\r\n  };\r\n}\r\n\r\nexport class MapOperator<T, R> implements Operator<T, R> {\r\n  constructor(private project: (value: T, index: number) => R, private thisArg: any) {\r\n  }\r\n\r\n  call(subscriber: Subscriber<R>, source: any): any {\r\n    return source.subscribe(new MapSubscriber(subscriber, this.project, this.thisArg));\r\n  }\r\n}\r\n\r\n/**\r\n * We need this JSDoc comment for affecting ESDoc.\r\n * @ignore\r\n * @extends {Ignored}\r\n */\r\nclass MapSubscriber<T, R> extends Subscriber<T> {\r\n  count: number = 0;\r\n  private thisArg: any;\r\n\r\n  constructor(destination: Subscriber<R>,\r\n              private project: (value: T, index: number) => R,\r\n              thisArg: any) {\r\n    super(destination);\r\n    this.thisArg = thisArg || this;\r\n  }\r\n\r\n  // NOTE: This looks unoptimized, but it's actually purposefully NOT\r\n  // using try/catch optimizations.\r\n  protected _next(value: T) {\r\n    let result: R;\r\n    try {\r\n      result = this.project.call(this.thisArg, value, this.count++);\r\n    } catch (err) {\r\n      this.destination.error(err);\r\n      return;\r\n    }\r\n    this.destination.next(result);\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}