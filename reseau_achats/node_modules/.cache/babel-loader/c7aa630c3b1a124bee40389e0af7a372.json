{"ast":null,"code":"/** PURE_IMPORTS_START tslib,_map,_observable_from,_innerSubscribe PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { map } from './map';\nimport { from } from '../observable/from';\nimport { SimpleOuterSubscriber, SimpleInnerSubscriber, innerSubscribe } from '../innerSubscribe';\nexport function exhaustMap(project, resultSelector) {\n  if (resultSelector) {\n    return function (source) {\n      return source.pipe(exhaustMap(function (a, i) {\n        return from(project(a, i)).pipe(map(function (b, ii) {\n          return resultSelector(a, b, i, ii);\n        }));\n      }));\n    };\n  }\n\n  return function (source) {\n    return source.lift(new ExhaustMapOperator(project));\n  };\n}\n\nvar ExhaustMapOperator = /*@__PURE__*/function () {\n  function ExhaustMapOperator(project) {\n    this.project = project;\n  }\n\n  ExhaustMapOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new ExhaustMapSubscriber(subscriber, this.project));\n  };\n\n  return ExhaustMapOperator;\n}();\n\nvar ExhaustMapSubscriber = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(ExhaustMapSubscriber, _super);\n\n  function ExhaustMapSubscriber(destination, project) {\n    var _this = _super.call(this, destination) || this;\n\n    _this.project = project;\n    _this.hasSubscription = false;\n    _this.hasCompleted = false;\n    _this.index = 0;\n    return _this;\n  }\n\n  ExhaustMapSubscriber.prototype._next = function (value) {\n    if (!this.hasSubscription) {\n      this.tryNext(value);\n    }\n  };\n\n  ExhaustMapSubscriber.prototype.tryNext = function (value) {\n    var result;\n    var index = this.index++;\n\n    try {\n      result = this.project(value, index);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n\n    this.hasSubscription = true;\n\n    this._innerSub(result);\n  };\n\n  ExhaustMapSubscriber.prototype._innerSub = function (result) {\n    var innerSubscriber = new SimpleInnerSubscriber(this);\n    var destination = this.destination;\n    destination.add(innerSubscriber);\n    var innerSubscription = innerSubscribe(result, innerSubscriber);\n\n    if (innerSubscription !== innerSubscriber) {\n      destination.add(innerSubscription);\n    }\n  };\n\n  ExhaustMapSubscriber.prototype._complete = function () {\n    this.hasCompleted = true;\n\n    if (!this.hasSubscription) {\n      this.destination.complete();\n    }\n\n    this.unsubscribe();\n  };\n\n  ExhaustMapSubscriber.prototype.notifyNext = function (innerValue) {\n    this.destination.next(innerValue);\n  };\n\n  ExhaustMapSubscriber.prototype.notifyError = function (err) {\n    this.destination.error(err);\n  };\n\n  ExhaustMapSubscriber.prototype.notifyComplete = function () {\n    this.hasSubscription = false;\n\n    if (this.hasCompleted) {\n      this.destination.complete();\n    }\n  };\n\n  return ExhaustMapSubscriber;\n}(SimpleOuterSubscriber);","map":{"version":3,"mappings":";AAKA,OAAO,KAAKA,OAAZ,MAAoB,OAApB;AACA,SAASC,GAAT,QAAe,OAAf;AACA,SAASC,IAAT,QAAS,oBAAT;AAuDA,SAAMC,qBAAN,EACEC,qBADF,EAE+GC,cAF/G,QAE+G,mBAF/G;OAIE,SAAIC,UAAJ,CAAoBC,OAApB,EAAoBC,cAApB,EAAoB;MAElBA,gBAAO;AAKR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACD;;SACE,UAAMC,MAAN,EAAY;AAAiC;AAChD;AAED;;IACEC,kCAA4E;WAAxDA,mBAAwDH;AAC3E;AAED;;oBACgB,WAAUI,OAAI,sBAAqBF,MAArB,EAAiC;AAC9D;AACH;;AAPA,SAOCC,kBAPD;AAcA,CAb8E;;IAarCE,8CAA2BC,MAA3B,EAA2B;AAKlEb,0CAAYa,MAAZ;;WAAAD,qBAEEE,aAAMP,SAAY;AADA,4BAAwD,IAAxD,EAAwDO,WAAxD,KAAwD,IAAxD;;AALZC;AACAA,4BAAe,KAAf;AACAA,yBAAU,KAAV;;AAKP;AAES;;sBACE,WAAiBC;QACzB,MAAKC,iBAAe;AACrB;AACF;AAEO;;sBACyB;AAC/B,QAAMC,MAAN;AACA,QAAIC,oBAAJ;;QACE;AACDD;AAAC,aACAE,KAAK;AACL,uBAAOC,KAAP,CAAOD,GAAP;AACD;AACD;;AACA,SAAKH,eAAL,GAAuB,IAAvB;;AACD;AAEO;;sBACA,WAAsBK,sBAAsBJ,MAAtB,EAA4B;AACxD,QAAMK,eAAc,GAAI,IAACnB,qBAAD,CAA6B,IAA7B,CAAxB;AACA,mBAAe,GAAC,gBAAhB;AACAU,eAAM,IAAN,CAAMS,eAAN;AAIA,QAAIC,iBAAiB,iBAAK,SAAiBD,eAAjB,CAA1B;;QACEC,iBAAgB,sBAAmB;AACpCV;AACF;AAES;;sBACH,CAAYW,UAAQC;AACzB,SAAKC,YAAL,GAAU,IAAV;;QACE,MAAKV,iBAAY;AAClB;AACD;;AACD;AAED;;sBACkB,CAACQ,UAAMG,aAAY;AACpC;AAED;;sBACkB,CAACH,UAAWI,cAAC;AAC9B;AAED;;sBACO,WAAkBC,iBAAM;AAC7B,SAAIb,eAAJ,GAAuB,KAAvB;;QACE,KAAKU,cAAY;AAClB;AACF;AACH;;AAhEyC;CAAA","names":["tslib_1","map","from","SimpleOuterSubscriber","SimpleInnerSubscriber","innerSubscribe","exhaustMap","project","resultSelector","source","ExhaustMapOperator","call","ExhaustMapSubscriber","_super","destination","_this","_next","hasSubscription","result","index","err","error","_innerSub","innerSubscriber","innerSubscription","prototype","_complete","hasCompleted","notifyNext","notifyError","notifyComplete"],"sources":["D:\\Documents\\EMA\\Mines A3\\NoSQL\\ReseauAchats\\reseau_achats\\node_modules\\rxjs\\src\\internal\\operators\\exhaustMap.ts"],"sourcesContent":["import { Operator } from '../Operator';\r\nimport { Observable } from '../Observable';\r\nimport { Subscriber } from '../Subscriber';\r\nimport { Subscription } from '../Subscription';\r\nimport { ObservableInput, OperatorFunction, ObservedValueOf } from '../types';\r\nimport { map } from './map';\r\nimport { from } from '../observable/from';\r\nimport { SimpleOuterSubscriber, SimpleInnerSubscriber, innerSubscribe } from '../innerSubscribe';\r\n\r\n/* tslint:disable:max-line-length */\r\nexport function exhaustMap<T, O extends ObservableInput<any>>(project: (value: T, index: number) => O): OperatorFunction<T, ObservedValueOf<O>>;\r\n/** @deprecated resultSelector is no longer supported. Use inner map instead. */\r\nexport function exhaustMap<T, O extends ObservableInput<any>>(project: (value: T, index: number) => O, resultSelector: undefined): OperatorFunction<T, ObservedValueOf<O>>;\r\n/** @deprecated resultSelector is no longer supported. Use inner map instead. */\r\nexport function exhaustMap<T, I, R>(project: (value: T, index: number) => ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): OperatorFunction<T, R>;\r\n/* tslint:enable:max-line-length */\r\n\r\n/**\r\n * Projects each source value to an Observable which is merged in the output\r\n * Observable only if the previous projected Observable has completed.\r\n *\r\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\r\n * these inner Observables using {@link exhaust}.</span>\r\n *\r\n * ![](exhaustMap.png)\r\n *\r\n * Returns an Observable that emits items based on applying a function that you\r\n * supply to each item emitted by the source Observable, where that function\r\n * returns an (so-called \"inner\") Observable. When it projects a source value to\r\n * an Observable, the output Observable begins emitting the items emitted by\r\n * that projected Observable. However, `exhaustMap` ignores every new projected\r\n * Observable if the previous projected Observable has not yet completed. Once\r\n * that one completes, it will accept and flatten the next projected Observable\r\n * and repeat this process.\r\n *\r\n * ## Example\r\n * Run a finite timer for each click, only if there is no currently active timer\r\n * ```ts\r\n * import { fromEvent, interval } from 'rxjs';\r\n * import { exhaustMap, take } from 'rxjs/operators';\r\n *\r\n * const clicks = fromEvent(document, 'click');\r\n * const result = clicks.pipe(\r\n *   exhaustMap(ev => interval(1000).pipe(take(5)))\r\n * );\r\n * result.subscribe(x => console.log(x));\r\n * ```\r\n *\r\n * @see {@link concatMap}\r\n * @see {@link exhaust}\r\n * @see {@link mergeMap}\r\n * @see {@link switchMap}\r\n *\r\n * @param {function(value: T, ?index: number): ObservableInput} project A function\r\n * that, when applied to an item emitted by the source Observable, returns an\r\n * Observable.\r\n * @return {Observable} An Observable containing projected Observables\r\n * of each item of the source, ignoring projected Observables that start before\r\n * their preceding Observable has completed.\r\n * @method exhaustMap\r\n * @owner Observable\r\n */\r\nexport function exhaustMap<T, R, O extends ObservableInput<any>>(\r\n  project: (value: T, index: number) => O,\r\n  resultSelector?: (outerValue: T, innerValue: ObservedValueOf<O>, outerIndex: number, innerIndex: number) => R,\r\n): OperatorFunction<T, ObservedValueOf<O>|R> {\r\n  if (resultSelector) {\r\n    // DEPRECATED PATH\r\n    return (source: Observable<T>) => source.pipe(\r\n      exhaustMap((a, i) => from(project(a, i)).pipe(\r\n        map((b: any, ii: any) => resultSelector(a, b, i, ii)),\r\n      )),\r\n    );\r\n  }\r\n  return (source: Observable<T>) =>\r\n    source.lift(new ExhaustMapOperator(project));\r\n}\r\n\r\nclass ExhaustMapOperator<T, R> implements Operator<T, R> {\r\n  constructor(private project: (value: T, index: number) => ObservableInput<R>) {\r\n  }\r\n\r\n  call(subscriber: Subscriber<R>, source: any): any {\r\n    return source.subscribe(new ExhaustMapSubscriber(subscriber, this.project));\r\n  }\r\n}\r\n\r\n/**\r\n * We need this JSDoc comment for affecting ESDoc.\r\n * @ignore\r\n * @extends {Ignored}\r\n */\r\nclass ExhaustMapSubscriber<T, R> extends SimpleOuterSubscriber<T, R> {\r\n  private hasSubscription = false;\r\n  private hasCompleted = false;\r\n  private index = 0;\r\n\r\n  constructor(destination: Subscriber<R>,\r\n              private project: (value: T, index: number) => ObservableInput<R>) {\r\n    super(destination);\r\n  }\r\n\r\n  protected _next(value: T): void {\r\n    if (!this.hasSubscription) {\r\n      this.tryNext(value);\r\n    }\r\n  }\r\n\r\n  private tryNext(value: T): void {\r\n    let result: ObservableInput<R>;\r\n    const index = this.index++;\r\n    try {\r\n      result = this.project(value, index);\r\n    } catch (err) {\r\n      this.destination.error!(err);\r\n      return;\r\n    }\r\n    this.hasSubscription = true;\r\n    this._innerSub(result);\r\n  }\r\n\r\n  private _innerSub(result: ObservableInput<R>): void {\r\n    const innerSubscriber = new SimpleInnerSubscriber(this);\r\n    const destination = this.destination as Subscription;\r\n    destination.add(innerSubscriber);\r\n    const innerSubscription = innerSubscribe(result, innerSubscriber);\r\n    // The returned subscription will usually be the subscriber that was\r\n    // passed. However, interop subscribers will be wrapped and for\r\n    // unsubscriptions to chain correctly, the wrapper needs to be added, too.\r\n    if (innerSubscription !== innerSubscriber) {\r\n      destination.add(innerSubscription);\r\n    }\r\n  }\r\n\r\n  protected _complete(): void {\r\n    this.hasCompleted = true;\r\n    if (!this.hasSubscription) {\r\n      this.destination.complete!();\r\n    }\r\n    this.unsubscribe();\r\n  }\r\n\r\n  notifyNext(innerValue: R): void {\r\n    this.destination.next!(innerValue);\r\n  }\r\n\r\n  notifyError(err: any): void {\r\n    this.destination.error!(err);\r\n  }\r\n\r\n  notifyComplete(): void {\r\n    this.hasSubscription = false;\r\n    if (this.hasCompleted) {\r\n      this.destination.complete!();\r\n    }\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}