{"ast":null,"code":"/** PURE_IMPORTS_START _Subject,_multicast PURE_IMPORTS_END */\nimport { Subject } from '../Subject';\nimport { multicast } from './multicast';\nexport function publish(selector) {\n  return selector ? multicast(function () {\n    return new Subject();\n  }, selector) : multicast(new Subject());\n}","map":{"version":3,"mappings":"AACA;AACA,SAASA,OAAT,QAAoB,YAApB;AA4DA,SAAMC,SAAN,QAA8B,aAA9B;OACE,SAAOC,OAAP,CAAiBC,QAAjB,EAAiB;SACfA,QAAU,GACVF,SAAS,CAAC,YAAW;AAAM,WAAC,aAAD;AAAC,GAAnB,EAAmBE,QAAnB,CADC,GAEbF","names":["Subject","multicast","publish","selector"],"sources":["D:\\Documents\\EMA\\Mines A3\\NoSQL\\ReseauAchats\\reseau_achats\\node_modules\\rxjs\\src\\internal\\operators\\publish.ts"],"sourcesContent":["import { Observable } from '../Observable';\r\nimport { Subject } from '../Subject';\r\nimport { multicast } from './multicast';\r\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\r\nimport { MonoTypeOperatorFunction, OperatorFunction, UnaryFunction, ObservableInput, ObservedValueOf } from '../types';\r\n\r\n/* tslint:disable:max-line-length */\r\nexport function publish<T>(): UnaryFunction<Observable<T>, ConnectableObservable<T>>;\r\nexport function publish<T, O extends ObservableInput<any>>(selector: (shared: Observable<T>) => O): OperatorFunction<T, ObservedValueOf<O>>;\r\nexport function publish<T>(selector: MonoTypeOperatorFunction<T>): MonoTypeOperatorFunction<T>;\r\n/* tslint:enable:max-line-length */\r\n\r\n/**\r\n * Returns a ConnectableObservable, which is a variety of Observable that waits until its connect method is called\r\n * before it begins emitting items to those Observers that have subscribed to it.\r\n *\r\n * <span class=\"informal\">Makes a cold Observable hot</span>\r\n *\r\n * ![](publish.png)\r\n *\r\n * ## Examples\r\n * Make source$ hot by applying publish operator, then merge each inner observable into a single one\r\n * and subscribe.\r\n * ```ts\r\n * import { of, zip, interval, merge } from \"rxjs\";\r\n * import { map, publish, tap } from \"rxjs/operators\";\r\n *\r\n * const source$ = zip(interval(2000), of(1, 2, 3, 4, 5, 6, 7, 8, 9)).pipe(\r\n *   map(values => values[1])\r\n * );\r\n *\r\n * source$\r\n *   .pipe(\r\n *     publish(multicasted$ =>\r\n *       merge(\r\n *         multicasted$.pipe(tap(x => console.log('Stream 1:', x))),\r\n *         multicasted$.pipe(tap(x => console.log('Stream 2:', x))),\r\n *         multicasted$.pipe(tap(x => console.log('Stream 3:', x))),\r\n *       )\r\n *     )\r\n *   )\r\n *   .subscribe();\r\n *\r\n * // Results every two seconds\r\n * // Stream 1: 1\r\n * // Stream 2: 1\r\n * // Stream 3: 1\r\n * // ...\r\n * // Stream 1: 9\r\n * // Stream 2: 9\r\n * // Stream 3: 9\r\n * ```\r\n *\r\n * @param {Function} [selector] - Optional selector function which can use the multicasted source sequence as many times\r\n * as needed, without causing multiple subscriptions to the source sequence.\r\n * Subscribers to the given source will receive all notifications of the source from the time of the subscription on.\r\n * @return A ConnectableObservable that upon connection causes the source Observable to emit items to its Observers.\r\n * @method publish\r\n * @owner Observable\r\n *\r\n *\r\n */\r\nexport function publish<T, R>(selector?: OperatorFunction<T, R>): MonoTypeOperatorFunction<T> | OperatorFunction<T, R> {\r\n  return selector ?\r\n    multicast(() => new Subject<T>(), selector) :\r\n    multicast(new Subject<T>());\r\n}\r\n"]},"metadata":{},"sourceType":"module"}