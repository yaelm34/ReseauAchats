{"ast":null,"code":"/** PURE_IMPORTS_START _util_canReportError,_util_toSubscriber,_symbol_observable,_util_pipe,_config PURE_IMPORTS_END */\nimport { canReportError } from './util/canReportError';\nimport { toSubscriber } from './util/toSubscriber';\nimport { observable as Symbol_observable } from './symbol/observable';\nimport { pipeFromArray } from './util/pipe';\nimport { config } from './config';\n\nvar Observable = /*@__PURE__*/function () {\n  function Observable(subscribe) {\n    this._isScalar = false;\n\n    if (subscribe) {\n      this._subscribe = subscribe;\n    }\n  }\n\n  Observable.prototype.lift = function (operator) {\n    var observable = new Observable();\n    observable.source = this;\n    observable.operator = operator;\n    return observable;\n  };\n\n  Observable.prototype.subscribe = function (observerOrNext, error, complete) {\n    var operator = this.operator;\n    var sink = toSubscriber(observerOrNext, error, complete);\n\n    if (operator) {\n      sink.add(operator.call(sink, this.source));\n    } else {\n      sink.add(this.source || config.useDeprecatedSynchronousErrorHandling && !sink.syncErrorThrowable ? this._subscribe(sink) : this._trySubscribe(sink));\n    }\n\n    if (config.useDeprecatedSynchronousErrorHandling) {\n      if (sink.syncErrorThrowable) {\n        sink.syncErrorThrowable = false;\n\n        if (sink.syncErrorThrown) {\n          throw sink.syncErrorValue;\n        }\n      }\n    }\n\n    return sink;\n  };\n\n  Observable.prototype._trySubscribe = function (sink) {\n    try {\n      return this._subscribe(sink);\n    } catch (err) {\n      if (config.useDeprecatedSynchronousErrorHandling) {\n        sink.syncErrorThrown = true;\n        sink.syncErrorValue = err;\n      }\n\n      if (canReportError(sink)) {\n        sink.error(err);\n      } else {\n        console.warn(err);\n      }\n    }\n  };\n\n  Observable.prototype.forEach = function (next, promiseCtor) {\n    var _this = this;\n\n    promiseCtor = getPromiseCtor(promiseCtor);\n    return new promiseCtor(function (resolve, reject) {\n      var subscription;\n      subscription = _this.subscribe(function (value) {\n        try {\n          next(value);\n        } catch (err) {\n          reject(err);\n\n          if (subscription) {\n            subscription.unsubscribe();\n          }\n        }\n      }, reject, resolve);\n    });\n  };\n\n  Observable.prototype._subscribe = function (subscriber) {\n    var source = this.source;\n    return source && source.subscribe(subscriber);\n  };\n\n  Observable.prototype[Symbol_observable] = function () {\n    return this;\n  };\n\n  Observable.prototype.pipe = function () {\n    var operations = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      operations[_i] = arguments[_i];\n    }\n\n    if (operations.length === 0) {\n      return this;\n    }\n\n    return pipeFromArray(operations)(this);\n  };\n\n  Observable.prototype.toPromise = function (promiseCtor) {\n    var _this = this;\n\n    promiseCtor = getPromiseCtor(promiseCtor);\n    return new promiseCtor(function (resolve, reject) {\n      var value;\n\n      _this.subscribe(function (x) {\n        return value = x;\n      }, function (err) {\n        return reject(err);\n      }, function () {\n        return resolve(value);\n      });\n    });\n  };\n\n  Observable.create = function (subscribe) {\n    return new Observable(subscribe);\n  };\n\n  return Observable;\n}();\n\nexport { Observable };\n\nfunction getPromiseCtor(promiseCtor) {\n  if (!promiseCtor) {\n    promiseCtor = config.Promise || Promise;\n  }\n\n  if (!promiseCtor) {\n    throw new Error('no Promise impl found');\n  }\n\n  return promiseCtor;\n}","map":{"version":3,"mappings":"AAIA;AACA,SAASA,cAAT,QAA6B,uBAA7B;AAGA,SAASC,YAAT,QAAuB,qBAAvB;AACA,SAASC,cAAaC,iBAAtB,QAA4C,qBAA5C;AACA,SAASC,aAAT,QAAuB,aAAvB;AAQA;;IAkBEC,0BAAY,YAA6E;WAflFA,WAASC,WAAkB;AAgBhC,SAAIC,SAAJ,GAAe,KAAf;;QACED,WAAK;AACN;AACF;AAyBD;;YACQ,WAAaE,OAAI,UAAgBC,QAAhB,EAAgB;AACvC,kBAAW,GAAM,IAAGJ,UAAH,EAAjB;AACAH,cAAU,CAACQ,MAAX,GAAmB,IAAnB;AACAR,cAAO,SAAP,GAAkBO,QAAlB;AACD;AAuID;;YAIU,uBAAkB;AAC1B,QAAMA,QAAO,gBAAb;AAEA,QAAIE,mBAAU,iCAAd;;QACEF,UAAS;AACVE;WACC;UAEE,KAAK,eAAgBC,MAAE,sCAAF,IAAE,wBAAlB,GACL,KAAKC,UAAL,CAAKF,IAAL,CADK,GAGR;AAED;;QACEC,MAAI,wCAAyB;UAC3BD,IAAI,CAACG,oBAAkB;AACvBH,YAAI,mBAAJ,GAA0B,KAA1B;;YACEA,sBAAW;AACZ;AACF;AACF;AAED;;AACD;AAGD;;YACM;QACF;AACD;AAAC,aACAI,KAAI;UACFH,MAAK,wCAAuB;AAC5BD,YAAI,CAACK,eAAL,GAAsB,IAAtB;AACDL;AACD;;UACEX,cAAc,CAACW,IAAD,GAAE;AACjBA;aACC;AACDM;AACF;AACF;AASD;;YAAA,WAkBCC;AAjBC,gBAAW,IAAX;;AAEAC,eAAW,iBAAkB,aAA7B;WAGE,IAAIA,WAAJ,CAA+B;AAC/B;kBACM;YACF;AACDC;AAAC,iBACAL,KAAO;AACPM,gBAAI,KAAJ;;cACEC,cAAa;AACdA;AACF;AACA;AACe,OATZ,EASYD,MATZ,EASYE,OATZ;AAUT,KAZG;AAeJ;;YACU,wBAAgB;AACxB,cAAO,GAAM,KAAIb,MAAjB;AACD;AAoBD;;YACE,CAAOc,UAAKrB;AACb;AAoCD;;YAAK,kBAA2C;kBAA3C;;SAAA,mCAA2CsB;;AAC9C;;QACEC,UAAO,CAAWC,MAAlB,KAAmB;AACpB;AAED;;AACD;AAQD;;YAAA,WAOCC;AANC,gBAAW,IAAX;;AAEAT,eAAW,iBAAY,aAAvB;WACE,IAAIA,WAAJ,CAAe;AACf;;AACeU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAClB,KAHG;AAhTG;;YACL,CAAOC,SAAI,UAAcxB,SAAd,EAAyB;AACrC;AAkTH;;AAxVA,SAwVCD,UAxVD;CAkBc;;AA+Ud,SAASA,UAAT;;SACO0B,eAAaZ;MAChB,cAAc;AACfA;AAED;;MACE,cAAU;AACX;AAED;;AACD","names":["canReportError","toSubscriber","observable","Symbol_observable","pipeFromArray","Observable","subscribe","_isScalar","lift","operator","source","sink","config","_subscribe","syncErrorThrowable","err","syncErrorThrown","console","forEach","promiseCtor","next","reject","subscription","resolve","prototype","_i","operations","length","toPromise","_this","create","getPromiseCtor"],"sources":["D:\\Documents\\EMA\\Mines A3\\NoSQL\\ReseauAchats\\reseau_achats\\node_modules\\rxjs\\src\\internal\\Observable.ts"],"sourcesContent":["import { Operator } from './Operator';\r\nimport { Subscriber } from './Subscriber';\r\nimport { Subscription } from './Subscription';\r\nimport { TeardownLogic, OperatorFunction, PartialObserver, Subscribable } from './types';\r\nimport { canReportError } from './util/canReportError';\r\nimport { toSubscriber } from './util/toSubscriber';\r\nimport { iif } from './observable/iif';\r\nimport { throwError } from './observable/throwError';\r\nimport { observable as Symbol_observable } from './symbol/observable';\r\nimport { pipeFromArray } from './util/pipe';\r\nimport { config } from './config';\r\n\r\n/**\r\n * A representation of any set of values over any amount of time. This is the most basic building block\r\n * of RxJS.\r\n *\r\n * @class Observable<T>\r\n */\r\nexport class Observable<T> implements Subscribable<T> {\r\n\r\n  /** Internal implementation detail, do not use directly. */\r\n  public _isScalar: boolean = false;\r\n\r\n  /** @deprecated This is an internal implementation detail, do not use. */\r\n  source: Observable<any>;\r\n\r\n  /** @deprecated This is an internal implementation detail, do not use. */\r\n  operator: Operator<any, T>;\r\n\r\n  /**\r\n   * @constructor\r\n   * @param {Function} subscribe the function that is called when the Observable is\r\n   * initially subscribed to. This function is given a Subscriber, to which new values\r\n   * can be `next`ed, or an `error` method can be called to raise an error, or\r\n   * `complete` can be called to notify of a successful completion.\r\n   */\r\n  constructor(subscribe?: (this: Observable<T>, subscriber: Subscriber<T>) => TeardownLogic) {\r\n    if (subscribe) {\r\n      this._subscribe = subscribe;\r\n    }\r\n  }\r\n\r\n  // HACK: Since TypeScript inherits static properties too, we have to\r\n  // fight against TypeScript here so Subject can have a different static create signature\r\n  /**\r\n   * Creates a new cold Observable by calling the Observable constructor\r\n   * @static true\r\n   * @owner Observable\r\n   * @method create\r\n   * @param {Function} subscribe? the subscriber function to be passed to the Observable constructor\r\n   * @return {Observable} a new cold observable\r\n   * @nocollapse\r\n   * @deprecated use new Observable() instead\r\n   */\r\n  static create: Function = <T>(subscribe?: (subscriber: Subscriber<T>) => TeardownLogic) => {\r\n    return new Observable<T>(subscribe);\r\n  }\r\n\r\n  /**\r\n   * Creates a new Observable, with this Observable as the source, and the passed\r\n   * operator defined as the new observable's operator.\r\n   * @method lift\r\n   * @param {Operator} operator the operator defining the operation to take on the observable\r\n   * @return {Observable} a new observable with the Operator applied\r\n   */\r\n  lift<R>(operator: Operator<T, R>): Observable<R> {\r\n    const observable = new Observable<R>();\r\n    observable.source = this;\r\n    observable.operator = operator;\r\n    return observable;\r\n  }\r\n\r\n  subscribe(observer?: PartialObserver<T>): Subscription;\r\n  /** @deprecated Use an observer instead of a complete callback */\r\n  subscribe(next: null | undefined, error: null | undefined, complete: () => void): Subscription;\r\n  /** @deprecated Use an observer instead of an error callback */\r\n  subscribe(next: null | undefined, error: (error: any) => void, complete?: () => void): Subscription;\r\n  /** @deprecated Use an observer instead of a complete callback */\r\n  subscribe(next: (value: T) => void, error: null | undefined, complete: () => void): Subscription;\r\n  subscribe(next?: (value: T) => void, error?: (error: any) => void, complete?: () => void): Subscription;\r\n  /**\r\n   * Invokes an execution of an Observable and registers Observer handlers for notifications it will emit.\r\n   *\r\n   * <span class=\"informal\">Use it when you have all these Observables, but still nothing is happening.</span>\r\n   *\r\n   * `subscribe` is not a regular operator, but a method that calls Observable's internal `subscribe` function. It\r\n   * might be for example a function that you passed to Observable's constructor, but most of the time it is\r\n   * a library implementation, which defines what will be emitted by an Observable, and when it be will emitted. This means\r\n   * that calling `subscribe` is actually the moment when Observable starts its work, not when it is created, as it is often\r\n   * the thought.\r\n   *\r\n   * Apart from starting the execution of an Observable, this method allows you to listen for values\r\n   * that an Observable emits, as well as for when it completes or errors. You can achieve this in two\r\n   * of the following ways.\r\n   *\r\n   * The first way is creating an object that implements {@link Observer} interface. It should have methods\r\n   * defined by that interface, but note that it should be just a regular JavaScript object, which you can create\r\n   * yourself in any way you want (ES6 class, classic function constructor, object literal etc.). In particular do\r\n   * not attempt to use any RxJS implementation details to create Observers - you don't need them. Remember also\r\n   * that your object does not have to implement all methods. If you find yourself creating a method that doesn't\r\n   * do anything, you can simply omit it. Note however, if the `error` method is not provided, all errors will\r\n   * be left uncaught.\r\n   *\r\n   * The second way is to give up on Observer object altogether and simply provide callback functions in place of its methods.\r\n   * This means you can provide three functions as arguments to `subscribe`, where the first function is equivalent\r\n   * of a `next` method, the second of an `error` method and the third of a `complete` method. Just as in case of Observer,\r\n   * if you do not need to listen for something, you can omit a function, preferably by passing `undefined` or `null`,\r\n   * since `subscribe` recognizes these functions by where they were placed in function call. When it comes\r\n   * to `error` function, just as before, if not provided, errors emitted by an Observable will be thrown.\r\n   *\r\n   * Whichever style of calling `subscribe` you use, in both cases it returns a Subscription object.\r\n   * This object allows you to call `unsubscribe` on it, which in turn will stop the work that an Observable does and will clean\r\n   * up all resources that an Observable used. Note that cancelling a subscription will not call `complete` callback\r\n   * provided to `subscribe` function, which is reserved for a regular completion signal that comes from an Observable.\r\n   *\r\n   * Remember that callbacks provided to `subscribe` are not guaranteed to be called asynchronously.\r\n   * It is an Observable itself that decides when these functions will be called. For example {@link of}\r\n   * by default emits all its values synchronously. Always check documentation for how given Observable\r\n   * will behave when subscribed and if its default behavior can be modified with a `scheduler`.\r\n   *\r\n   * ## Example\r\n   * ### Subscribe with an Observer\r\n   * ```ts\r\n   * import { of } from 'rxjs';\r\n   *\r\n   * const sumObserver = {\r\n   *   sum: 0,\r\n   *   next(value) {\r\n   *     console.log('Adding: ' + value);\r\n   *     this.sum = this.sum + value;\r\n   *   },\r\n   *   error() {\r\n   *     // We actually could just remove this method,\r\n   *     // since we do not really care about errors right now.\r\n   *   },\r\n   *   complete() {\r\n   *     console.log('Sum equals: ' + this.sum);\r\n   *   }\r\n   * };\r\n   *\r\n   * of(1, 2, 3) // Synchronously emits 1, 2, 3 and then completes.\r\n   *   .subscribe(sumObserver);\r\n   *\r\n   * // Logs:\r\n   * // \"Adding: 1\"\r\n   * // \"Adding: 2\"\r\n   * // \"Adding: 3\"\r\n   * // \"Sum equals: 6\"\r\n   * ```\r\n   *\r\n   * ### Subscribe with functions\r\n   * ```ts\r\n   * import { of } from 'rxjs'\r\n   *\r\n   * let sum = 0;\r\n   *\r\n   * of(1, 2, 3).subscribe(\r\n   *   value => {\r\n   *     console.log('Adding: ' + value);\r\n   *     sum = sum + value;\r\n   *   },\r\n   *   undefined,\r\n   *   () => console.log('Sum equals: ' + sum)\r\n   * );\r\n   *\r\n   * // Logs:\r\n   * // \"Adding: 1\"\r\n   * // \"Adding: 2\"\r\n   * // \"Adding: 3\"\r\n   * // \"Sum equals: 6\"\r\n   * ```\r\n   *\r\n   * ### Cancel a subscription\r\n   * ```ts\r\n   * import { interval } from 'rxjs';\r\n   *\r\n   * const subscription = interval(1000).subscribe(\r\n   *   num => console.log(num),\r\n   *   undefined,\r\n   *   () => {\r\n   *     // Will not be called, even when cancelling subscription.\r\n   *     console.log('completed!');\r\n   *   }\r\n   * );\r\n   *\r\n   * setTimeout(() => {\r\n   *   subscription.unsubscribe();\r\n   *   console.log('unsubscribed!');\r\n   * }, 2500);\r\n   *\r\n   * // Logs:\r\n   * // 0 after 1s\r\n   * // 1 after 2s\r\n   * // \"unsubscribed!\" after 2.5s\r\n   * ```\r\n   *\r\n   * @param {Observer|Function} observerOrNext (optional) Either an observer with methods to be called,\r\n   *  or the first of three possible handlers, which is the handler for each value emitted from the subscribed\r\n   *  Observable.\r\n   * @param {Function} error (optional) A handler for a terminal event resulting from an error. If no error handler is provided,\r\n   *  the error will be thrown as unhandled.\r\n   * @param {Function} complete (optional) A handler for a terminal event resulting from successful completion.\r\n   * @return {ISubscription} a subscription reference to the registered handlers\r\n   * @method subscribe\r\n   */\r\n  subscribe(observerOrNext?: PartialObserver<T> | ((value: T) => void),\r\n            error?: (error: any) => void,\r\n            complete?: () => void): Subscription {\r\n\r\n    const { operator } = this;\r\n    const sink = toSubscriber(observerOrNext, error, complete);\r\n\r\n    if (operator) {\r\n      sink.add(operator.call(sink, this.source));\r\n    } else {\r\n      sink.add(\r\n        this.source || (config.useDeprecatedSynchronousErrorHandling && !sink.syncErrorThrowable) ?\r\n        this._subscribe(sink) :\r\n        this._trySubscribe(sink)\r\n      );\r\n    }\r\n\r\n    if (config.useDeprecatedSynchronousErrorHandling) {\r\n      if (sink.syncErrorThrowable) {\r\n        sink.syncErrorThrowable = false;\r\n        if (sink.syncErrorThrown) {\r\n          throw sink.syncErrorValue;\r\n        }\r\n      }\r\n    }\r\n\r\n    return sink;\r\n  }\r\n\r\n  /** @deprecated This is an internal implementation detail, do not use. */\r\n  _trySubscribe(sink: Subscriber<T>): TeardownLogic {\r\n    try {\r\n      return this._subscribe(sink);\r\n    } catch (err) {\r\n      if (config.useDeprecatedSynchronousErrorHandling) {\r\n        sink.syncErrorThrown = true;\r\n        sink.syncErrorValue = err;\r\n      }\r\n      if (canReportError(sink)) {\r\n        sink.error(err);\r\n      } else {\r\n        console.warn(err);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @method forEach\r\n   * @param {Function} next a handler for each value emitted by the observable\r\n   * @param {PromiseConstructor} [promiseCtor] a constructor function used to instantiate the Promise\r\n   * @return {Promise} a promise that either resolves on observable completion or\r\n   *  rejects with the handled error\r\n   */\r\n  forEach(next: (value: T) => void, promiseCtor?: PromiseConstructorLike): Promise<void> {\r\n    promiseCtor = getPromiseCtor(promiseCtor);\r\n\r\n    return new promiseCtor<void>((resolve, reject) => {\r\n      // Must be declared in a separate statement to avoid a ReferenceError when\r\n      // accessing subscription below in the closure due to Temporal Dead Zone.\r\n      let subscription: Subscription;\r\n      subscription = this.subscribe((value) => {\r\n        try {\r\n          next(value);\r\n        } catch (err) {\r\n          reject(err);\r\n          if (subscription) {\r\n            subscription.unsubscribe();\r\n          }\r\n        }\r\n      }, reject, resolve);\r\n    }) as Promise<void>;\r\n  }\r\n\r\n  /** @internal This is an internal implementation detail, do not use. */\r\n  _subscribe(subscriber: Subscriber<any>): TeardownLogic {\r\n    const { source } = this;\r\n    return source && source.subscribe(subscriber);\r\n  }\r\n\r\n  // `if` and `throw` are special snow flakes, the compiler sees them as reserved words. Deprecated in\r\n  // favor of iif and throwError functions.\r\n  /**\r\n   * @nocollapse\r\n   * @deprecated In favor of iif creation function: import { iif } from 'rxjs';\r\n   */\r\n  static if: typeof iif;\r\n  /**\r\n   * @nocollapse\r\n   * @deprecated In favor of throwError creation function: import { throwError } from 'rxjs';\r\n   */\r\n  static throw: typeof throwError;\r\n\r\n  /**\r\n   * An interop point defined by the es7-observable spec https://github.com/zenparsing/es-observable\r\n   * @method Symbol.observable\r\n   * @return {Observable} this instance of the observable\r\n   */\r\n  [Symbol_observable]() {\r\n    return this;\r\n  }\r\n\r\n  /* tslint:disable:max-line-length */\r\n  pipe(): Observable<T>;\r\n  pipe<A>(op1: OperatorFunction<T, A>): Observable<A>;\r\n  pipe<A, B>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>): Observable<B>;\r\n  pipe<A, B, C>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>): Observable<C>;\r\n  pipe<A, B, C, D>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>): Observable<D>;\r\n  pipe<A, B, C, D, E>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>): Observable<E>;\r\n  pipe<A, B, C, D, E, F>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>): Observable<F>;\r\n  pipe<A, B, C, D, E, F, G>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>, op7: OperatorFunction<F, G>): Observable<G>;\r\n  pipe<A, B, C, D, E, F, G, H>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>, op7: OperatorFunction<F, G>, op8: OperatorFunction<G, H>): Observable<H>;\r\n  pipe<A, B, C, D, E, F, G, H, I>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>, op7: OperatorFunction<F, G>, op8: OperatorFunction<G, H>, op9: OperatorFunction<H, I>): Observable<I>;\r\n  pipe<A, B, C, D, E, F, G, H, I>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>, op7: OperatorFunction<F, G>, op8: OperatorFunction<G, H>, op9: OperatorFunction<H, I>, ...operations: OperatorFunction<any, any>[]): Observable<{}>;\r\n  /* tslint:enable:max-line-length */\r\n\r\n  /**\r\n   * Used to stitch together functional operators into a chain.\r\n   * @method pipe\r\n   * @return {Observable} the Observable result of all of the operators having\r\n   * been called in the order they were passed in.\r\n   *\r\n   * ### Example\r\n   * ```ts\r\n   * import { interval } from 'rxjs';\r\n   * import { map, filter, scan } from 'rxjs/operators';\r\n   *\r\n   * interval(1000)\r\n   *   .pipe(\r\n   *     filter(x => x % 2 === 0),\r\n   *     map(x => x + x),\r\n   *     scan((acc, x) => acc + x)\r\n   *   )\r\n   *   .subscribe(x => console.log(x))\r\n   * ```\r\n   */\r\n  pipe(...operations: OperatorFunction<any, any>[]): Observable<any> {\r\n    if (operations.length === 0) {\r\n      return this as any;\r\n    }\r\n\r\n    return pipeFromArray(operations)(this);\r\n  }\r\n\r\n  /* tslint:disable:max-line-length */\r\n  toPromise<T>(this: Observable<T>): Promise<T>;\r\n  toPromise<T>(this: Observable<T>, PromiseCtor: typeof Promise): Promise<T>;\r\n  toPromise<T>(this: Observable<T>, PromiseCtor: PromiseConstructorLike): Promise<T>;\r\n  /* tslint:enable:max-line-length */\r\n\r\n  toPromise(promiseCtor?: PromiseConstructorLike): Promise<T> {\r\n    promiseCtor = getPromiseCtor(promiseCtor);\r\n\r\n    return new promiseCtor((resolve, reject) => {\r\n      let value: any;\r\n      this.subscribe((x: T) => value = x, (err: any) => reject(err), () => resolve(value));\r\n    }) as Promise<T>;\r\n  }\r\n}\r\n\r\n/**\r\n * Decides between a passed promise constructor from consuming code,\r\n * A default configured promise constructor, and the native promise\r\n * constructor and returns it. If nothing can be found, it will throw\r\n * an error.\r\n * @param promiseCtor The optional promise constructor to passed by consuming code\r\n */\r\nfunction getPromiseCtor(promiseCtor: PromiseConstructorLike | undefined) {\r\n  if (!promiseCtor) {\r\n    promiseCtor = config.Promise || Promise;\r\n  }\r\n\r\n  if (!promiseCtor) {\r\n    throw new Error('no Promise impl found');\r\n  }\r\n\r\n  return promiseCtor;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}