{"ast":null,"code":"/** PURE_IMPORTS_START tslib,_util_Immediate,_AsyncAction PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Immediate } from '../util/Immediate';\nimport { AsyncAction } from './AsyncAction';\n\nvar AsapAction = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(AsapAction, _super);\n\n  function AsapAction(scheduler, work) {\n    var _this = _super.call(this, scheduler, work) || this;\n\n    _this.scheduler = scheduler;\n    _this.work = work;\n    return _this;\n  }\n\n  AsapAction.prototype.requestAsyncId = function (scheduler, id, delay) {\n    if (delay === void 0) {\n      delay = 0;\n    }\n\n    if (delay !== null && delay > 0) {\n      return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);\n    }\n\n    scheduler.actions.push(this);\n    return scheduler.scheduled || (scheduler.scheduled = Immediate.setImmediate(scheduler.flush.bind(scheduler, null)));\n  };\n\n  AsapAction.prototype.recycleAsyncId = function (scheduler, id, delay) {\n    if (delay === void 0) {\n      delay = 0;\n    }\n\n    if (delay !== null && delay > 0 || delay === null && this.delay > 0) {\n      return _super.prototype.recycleAsyncId.call(this, scheduler, id, delay);\n    }\n\n    if (scheduler.actions.length === 0) {\n      Immediate.clearImmediate(id);\n      scheduler.scheduled = undefined;\n    }\n\n    return undefined;\n  };\n\n  return AsapAction;\n}(AsyncAction);\n\nexport { AsapAction };","map":{"version":3,"mappings":";AAAA,OAAO,KAAEA,OAAT,MAAoB,OAApB;AACA,SAASC,SAAT,QAAsB,mBAAtB;AAQA;;IAAmCC,oCAAcC,MAAd,EAAc;AAE/CH,gCAA8CG,MAA9C;;WAAAD,WAEEE,iBAAM;AAFc,kCAAwBA,SAAxB,EAAwBC,IAAxB,KAAwB,IAAxB;;AACAC,sBAAmDF,SAAnD;;AAErB;AAES;;YAAmD,4BAAiB;AAE5E,QAAIG,KAAK,KAAK,KAAI,CAAlB,EAAsB;AACpBA,cAAO,CAAP;AACD;;AAED,aAAS,KAAC,IAAV,IAAsBA,KAAK,GAAE,CAA7B,EAA6B;AAI7B,aAAOJ,MAAU,UAAV,CAAmBK,cAAnB,CAAkCC,IAAlC,CAAkC,IAAlC,EAA8CL,SAA9C,EAAwDM,EAAxD,EAAwDH,KAAxD,CAAP;AAGD;;AACSH;AAAmD,4CAAiB,UAAjB,GAAiBH,6DAAjB;;;YAKzD,WAAOU,iBAAM,UAAcP,SAAd,EAAeM,EAAf,EAAeH,KAAf,EAA0B;QACxCA;AAIGA;;;QAEFA,UAAU,IAAV,IAAmBA,KAAG,IAAtB,IAAgCA;AACjC;AAED;;AACD;AACHN,eAAC,eAAD,CAACS,EAAD;AAtCmCN,eAsClC,UAtCkC,GAsClCQ,SAtCkC;;;;;;;CAAA","names":["tslib_1","Immediate","AsapAction","_super","scheduler","work","_this","delay","requestAsyncId","call","id","recycleAsyncId","undefined"],"sources":["D:\\Documents\\EMA\\Mines A3\\NoSQL\\ReseauAchats\\reseau_achats\\node_modules\\rxjs\\src\\internal\\scheduler\\AsapAction.ts"],"sourcesContent":["import { Immediate } from '../util/Immediate';\nimport { AsyncAction } from './AsyncAction';\nimport { AsapScheduler } from './AsapScheduler';\nimport { SchedulerAction } from '../types';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class AsapAction<T> extends AsyncAction<T> {\n\n  constructor(protected scheduler: AsapScheduler,\n              protected work: (this: SchedulerAction<T>, state?: T) => void) {\n    super(scheduler, work);\n  }\n\n  protected requestAsyncId(scheduler: AsapScheduler, id?: any, delay: number = 0): any {\n    // If delay is greater than 0, request as an async action.\n    if (delay !== null && delay > 0) {\n      return super.requestAsyncId(scheduler, id, delay);\n    }\n    // Push the action to the end of the scheduler queue.\n    scheduler.actions.push(this);\n    // If a microtask has already been scheduled, don't schedule another\n    // one. If a microtask hasn't been scheduled yet, schedule one now. Return\n    // the current scheduled microtask id.\n    return scheduler.scheduled || (scheduler.scheduled = Immediate.setImmediate(\n      scheduler.flush.bind(scheduler, null)\n    ));\n  }\n  protected recycleAsyncId(scheduler: AsapScheduler, id?: any, delay: number = 0): any {\n    // If delay exists and is greater than 0, or if the delay is null (the\n    // action wasn't rescheduled) but was originally scheduled as an async\n    // action, then recycle as an async action.\n    if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {\n      return super.recycleAsyncId(scheduler, id, delay);\n    }\n    // If the scheduler queue is empty, cancel the requested microtask and\n    // set the scheduled flag to undefined so the next AsapAction will schedule\n    // its own.\n    if (scheduler.actions.length === 0) {\n      Immediate.clearImmediate(id);\n      scheduler.scheduled = undefined;\n    }\n    // Return undefined so the action knows to request a new async id if it's rescheduled.\n    return undefined;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}