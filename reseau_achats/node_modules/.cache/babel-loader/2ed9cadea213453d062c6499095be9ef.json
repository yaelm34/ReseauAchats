{"ast":null,"code":"/** PURE_IMPORTS_START _reduce PURE_IMPORTS_END */\nimport { reduce } from './reduce';\nexport function max(comparer) {\n  var max = typeof comparer === 'function' ? function (x, y) {\n    return comparer(x, y) > 0 ? x : y;\n  } : function (x, y) {\n    return x > y ? x : y;\n  };\n  return reduce(max);\n}","map":{"version":3,"mappings":"AAAA;AAgDA,SAAMA,MAAN,QAAuB,UAAvB;OACE,SAAgCC,GAAhC,CAAgCC,QAAhC,EAA+C;MAC7CD,GAAE,UAAEC,QAAF,KAAU,UAAV,GACA,UAACC,CAAD,EAAIC,CAAJ,EAAK;AAAK,mBAAQ,CAACD,CAAD,EAAIC,CAAJ,CAAR,GAAc,CAAd,GAAcD,CAAd,GAAcC,CAAd;AAAc,GADxB,GAGJ,UAAcD,CAAd,EAAmBC,CAAnB,EAAmB;AAAA;AAAA;AACpB","names":["reduce","max","comparer","x","y"],"sources":["D:\\Documents\\EMA\\Mines A3\\NoSQL\\ReseauAchats\\reseau_achats\\node_modules\\rxjs\\src\\internal\\operators\\max.ts"],"sourcesContent":["import { reduce } from './reduce';\r\nimport { MonoTypeOperatorFunction } from '../types';\r\n\r\n/**\r\n * The Max operator operates on an Observable that emits numbers (or items that can be compared with a provided function),\r\n * and when source Observable completes it emits a single item: the item with the largest value.\r\n *\r\n * ![](max.png)\r\n *\r\n * ## Examples\r\n * Get the maximal value of a series of numbers\r\n * ```ts\r\n * import { of } from 'rxjs';\r\n * import { max } from 'rxjs/operators';\r\n *\r\n * of(5, 4, 7, 2, 8).pipe(\r\n *   max(),\r\n * )\r\n * .subscribe(x => console.log(x)); // -> 8\r\n * ```\r\n *\r\n * Use a comparer function to get the maximal item\r\n * ```typescript\r\n * import { of } from 'rxjs';\r\n * import { max } from 'rxjs/operators';\r\n *\r\n * interface Person {\r\n *   age: number,\r\n *   name: string\r\n * }\r\n * of<Person>(\r\n *   {age: 7, name: 'Foo'},\r\n *   {age: 5, name: 'Bar'},\r\n *   {age: 9, name: 'Beer'},\r\n * ).pipe(\r\n *   max<Person>((a: Person, b: Person) => a.age < b.age ? -1 : 1),\r\n * )\r\n * .subscribe((x: Person) => console.log(x.name)); // -> 'Beer'\r\n * ```\r\n *\r\n * @see {@link min}\r\n *\r\n * @param {Function} [comparer] - Optional comparer function that it will use instead of its default to compare the\r\n * value of two items.\r\n * @return {Observable} An Observable that emits item with the largest value.\r\n * @method max\r\n * @owner Observable\r\n */\r\nexport function max<T>(comparer?: (x: T, y: T) => number): MonoTypeOperatorFunction<T> {\r\n  const max: (x: T, y: T) => T = (typeof comparer === 'function')\r\n    ? (x, y) => comparer(x, y) > 0 ? x : y\r\n    : (x, y) => x > y ? x : y;\r\n\r\n  return reduce(max);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}