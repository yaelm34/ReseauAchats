{"ast":null,"code":"/** PURE_IMPORTS_START tslib,_innerSubscribe PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { SimpleOuterSubscriber, innerSubscribe, SimpleInnerSubscriber } from '../innerSubscribe';\nexport function buffer(closingNotifier) {\n  return function bufferOperatorFunction(source) {\n    return source.lift(new BufferOperator(closingNotifier));\n  };\n}\n\nvar BufferOperator = /*@__PURE__*/function () {\n  function BufferOperator(closingNotifier) {\n    this.closingNotifier = closingNotifier;\n  }\n\n  BufferOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new BufferSubscriber(subscriber, this.closingNotifier));\n  };\n\n  return BufferOperator;\n}();\n\nvar BufferSubscriber = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(BufferSubscriber, _super);\n\n  function BufferSubscriber(destination, closingNotifier) {\n    var _this = _super.call(this, destination) || this;\n\n    _this.buffer = [];\n\n    _this.add(innerSubscribe(closingNotifier, new SimpleInnerSubscriber(_this)));\n\n    return _this;\n  }\n\n  BufferSubscriber.prototype._next = function (value) {\n    this.buffer.push(value);\n  };\n\n  BufferSubscriber.prototype.notifyNext = function () {\n    var buffer = this.buffer;\n    this.buffer = [];\n    this.destination.next(buffer);\n  };\n\n  return BufferSubscriber;\n}(SimpleOuterSubscriber);","map":{"version":3,"mappings":";AAIA,OAAO,KAAEA,OAAT,MAAS,OAAT;AA0CA,SAAMC,qBAAN,EAA0BC,cAA1B,EAA0DC,qBAA1D,QAA0D,mBAA1D;OACE,SAAOC,MAAP,CAAgBC,eAAhB,EAAgB;SACd,SAAOC,sBAAP,CAAuBC,MAAvB,EAAyC;AACzC;AACH;AAED;;IAEEC,8BAAoB,YAAgC;WAAhCA,eAAeH,iBAAf;AACnB;AAED;;gBACS,WAAOI,OAAc,sBAAiBF,MAAjB,EAA6B;AAC1D;AACH;;AARA,SAQCC,cARD;AAeA,CAbsB;;IAaYE,0CAA6BC,MAA7B,EAA6B;AAG7DX,sCAAYW,MAAZ;;WAAAD,iBACEE,aAAMP,iBAEP;AALO,gBAAMM,MAAW,KAAX,CAAW,IAAX,EAAWC,WAAX,KAAW,IAAjB;;AAINC,SAAI,CAACT,MAAL,GAAS,EAAT;;;;AACD;AAES;;kBACI,WAAWU,QAAC;AACzB;AAED;;kBACc,CAAGC,UAAKC,aAAO;AAC3B,QAAIZ,MAAC,GAAM,KAAMA,MAAjB;AACA,SAAKA,MAAL,GAAK,EAAL;AACD;AACH;;AAjBkC;CAAA","names":["tslib_1","SimpleOuterSubscriber","innerSubscribe","SimpleInnerSubscriber","buffer","closingNotifier","bufferOperatorFunction","source","BufferOperator","call","BufferSubscriber","_super","destination","_this","_next","prototype","notifyNext"],"sources":["D:\\Documents\\EMA\\Mines A3\\NoSQL\\ReseauAchats\\reseau_achats\\node_modules\\rxjs\\src\\internal\\operators\\buffer.ts"],"sourcesContent":["import { Operator } from '../Operator';\r\nimport { Subscriber } from '../Subscriber';\r\nimport { Observable } from '../Observable';\r\nimport { OperatorFunction } from '../types';\r\nimport { SimpleOuterSubscriber, innerSubscribe, SimpleInnerSubscriber } from '../innerSubscribe';\r\n\r\n/**\r\n * Buffers the source Observable values until `closingNotifier` emits.\r\n *\r\n * <span class=\"informal\">Collects values from the past as an array, and emits\r\n * that array only when another Observable emits.</span>\r\n *\r\n * ![](buffer.png)\r\n *\r\n * Buffers the incoming Observable values until the given `closingNotifier`\r\n * Observable emits a value, at which point it emits the buffer on the output\r\n * Observable and starts a new buffer internally, awaiting the next time\r\n * `closingNotifier` emits.\r\n *\r\n * ## Example\r\n *\r\n * On every click, emit array of most recent interval events\r\n *\r\n * ```ts\r\n * import { fromEvent, interval } from 'rxjs';\r\n * import { buffer } from 'rxjs/operators';\r\n *\r\n * const clicks = fromEvent(document, 'click');\r\n * const intervalEvents = interval(1000);\r\n * const buffered = intervalEvents.pipe(buffer(clicks));\r\n * buffered.subscribe(x => console.log(x));\r\n * ```\r\n *\r\n * @see {@link bufferCount}\r\n * @see {@link bufferTime}\r\n * @see {@link bufferToggle}\r\n * @see {@link bufferWhen}\r\n * @see {@link window}\r\n *\r\n * @param {Observable<any>} closingNotifier An Observable that signals the\r\n * buffer to be emitted on the output Observable.\r\n * @return {Observable<T[]>} An Observable of buffers, which are arrays of\r\n * values.\r\n * @method buffer\r\n * @owner Observable\r\n */\r\nexport function buffer<T>(closingNotifier: Observable<any>): OperatorFunction<T, T[]> {\r\n  return function bufferOperatorFunction(source: Observable<T>) {\r\n    return source.lift(new BufferOperator<T>(closingNotifier));\r\n  };\r\n}\r\n\r\nclass BufferOperator<T> implements Operator<T, T[]> {\r\n\r\n  constructor(private closingNotifier: Observable<any>) {\r\n  }\r\n\r\n  call(subscriber: Subscriber<T[]>, source: any): any {\r\n    return source.subscribe(new BufferSubscriber(subscriber, this.closingNotifier));\r\n  }\r\n}\r\n\r\n/**\r\n * We need this JSDoc comment for affecting ESDoc.\r\n * @ignore\r\n * @extends {Ignored}\r\n */\r\nclass BufferSubscriber<T> extends SimpleOuterSubscriber<T, any> {\r\n  private buffer: T[] = [];\r\n\r\n  constructor(destination: Subscriber<T[]>, closingNotifier: Observable<any>) {\r\n    super(destination);\r\n    this.add(innerSubscribe(closingNotifier, new SimpleInnerSubscriber(this)));\r\n  }\r\n\r\n  protected _next(value: T) {\r\n    this.buffer.push(value);\r\n  }\r\n\r\n  notifyNext(): void {\r\n    const buffer = this.buffer;\r\n    this.buffer = [];\r\n    this.destination.next!(buffer);\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}