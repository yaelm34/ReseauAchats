{"ast":null,"code":"/** PURE_IMPORTS_START tslib,_Subscription,_innerSubscribe PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscription } from '../Subscription';\nimport { SimpleOuterSubscriber, innerSubscribe, SimpleInnerSubscriber } from '../innerSubscribe';\nexport function bufferWhen(closingSelector) {\n  return function (source) {\n    return source.lift(new BufferWhenOperator(closingSelector));\n  };\n}\n\nvar BufferWhenOperator = /*@__PURE__*/function () {\n  function BufferWhenOperator(closingSelector) {\n    this.closingSelector = closingSelector;\n  }\n\n  BufferWhenOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new BufferWhenSubscriber(subscriber, this.closingSelector));\n  };\n\n  return BufferWhenOperator;\n}();\n\nvar BufferWhenSubscriber = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(BufferWhenSubscriber, _super);\n\n  function BufferWhenSubscriber(destination, closingSelector) {\n    var _this = _super.call(this, destination) || this;\n\n    _this.closingSelector = closingSelector;\n    _this.subscribing = false;\n\n    _this.openBuffer();\n\n    return _this;\n  }\n\n  BufferWhenSubscriber.prototype._next = function (value) {\n    this.buffer.push(value);\n  };\n\n  BufferWhenSubscriber.prototype._complete = function () {\n    var buffer = this.buffer;\n\n    if (buffer) {\n      this.destination.next(buffer);\n    }\n\n    _super.prototype._complete.call(this);\n  };\n\n  BufferWhenSubscriber.prototype._unsubscribe = function () {\n    this.buffer = undefined;\n    this.subscribing = false;\n  };\n\n  BufferWhenSubscriber.prototype.notifyNext = function () {\n    this.openBuffer();\n  };\n\n  BufferWhenSubscriber.prototype.notifyComplete = function () {\n    if (this.subscribing) {\n      this.complete();\n    } else {\n      this.openBuffer();\n    }\n  };\n\n  BufferWhenSubscriber.prototype.openBuffer = function () {\n    var closingSubscription = this.closingSubscription;\n\n    if (closingSubscription) {\n      this.remove(closingSubscription);\n      closingSubscription.unsubscribe();\n    }\n\n    var buffer = this.buffer;\n\n    if (this.buffer) {\n      this.destination.next(buffer);\n    }\n\n    this.buffer = [];\n    var closingNotifier;\n\n    try {\n      var closingSelector = this.closingSelector;\n      closingNotifier = closingSelector();\n    } catch (err) {\n      return this.error(err);\n    }\n\n    closingSubscription = new Subscription();\n    this.closingSubscription = closingSubscription;\n    this.add(closingSubscription);\n    this.subscribing = true;\n    closingSubscription.add(innerSubscribe(closingNotifier, new SimpleInnerSubscriber(this)));\n    this.subscribing = false;\n  };\n\n  return BufferWhenSubscriber;\n}(SimpleOuterSubscriber);","map":{"version":3,"mappings":";AAGA,OAAO,KAAEA,OAAT,MAAuB,OAAvB;AAEA,SAASC,YAAT,QAAS,iBAAT;AA4CA,SAAMC,qBAAN,EAA8BC,cAA9B,EAAoEC,qBAApE,QAAoE,mBAApE;OACE,SAAOC,UAAP,CAAsCC,eAAtC,EAAsC;SACpC,UAAaC,MAAb,EAAmB;AACnB;AACH;AAED;;IAEEC,kCAAoB,YAAsC;WAAtCA,oCAAsC;AACzD;AAED;;oBACgB,WAAUC,OAAI,sBAAqBF,MAArB,EAAiC;AAC9D;AACH;;AARA,SAQCC,kBARD;AAeA,CAbsB;;IAagBE,8CAA6BC,MAA7B,EAA6B;AAKjEX,0CAAYW,MAAZ;;WAAAD,qBACEE,aAAMN,iBAEP;AAHiD,kDAAsC,IAAtC;;AAH1CO,4BAAuBP,eAAvB;AAKNO,SAAI,CAACC,WAAL,GAAkB,KAAlB;;;;AACD;AAES;;sBACS,CAACC,UAAOC;AAC1B;AAES;;sBACO,CAAID,UAAQE;AAC3B,QAAIC,MAAM,GAAE,WAAZ;;QACEA,QAAK;AACN;AACD;;AACDP;AAGD;;sBACgB,WAAUQ;AACxB,SAAKD,MAAL,GAAKE,SAAL;AACD;AAED;;sBACiB,CAAEL,UAACM;AACnB;AAED;;sBACW,WAAaC;QACpB,KAAKR,aAAW;AACjB;WACC;AACD;AACF;AAED;;sBACQ,oCAA6B;AAEnC,QAAIS,mBAAmB,GAAE,wBAAzB;;QACEA,qBAAY;AACZ;AACDA;AAED;;AACA,QAAIL,MAAK,QAAQA,MAAjB;;QACE,KAAKA;AACN;AAED;;AAEA,SAAIA,MAAJ,GAAI,EAAJ;AACA,QAAIM,eAAJ;;QACU;AACR,yBAAkB,uBAAlB;AACDA;AAAC,aACAC,KAAO;AACR;AACD;;AACAF,uBAAK,OAAmBtB,YAAnB,EAAL;AACA,SAAKsB,mBAAL,GAASA,mBAAT;AACA,SAAKG,GAAL,CAAKH,mBAAL;AACA,uBAAmB,IAAnB;AACAA,uBAAmB,IAAnB,CAAwBpB,cAAC,kDAAzB;AACD;AACH;;AArEsC;CAAA","names":["tslib_1","Subscription","SimpleOuterSubscriber","innerSubscribe","SimpleInnerSubscriber","bufferWhen","closingSelector","source","BufferWhenOperator","call","BufferWhenSubscriber","_super","destination","_this","subscribing","prototype","_next","_complete","buffer","_unsubscribe","undefined","notifyNext","notifyComplete","closingSubscription","closingNotifier","err","add"],"sources":["D:\\Documents\\EMA\\Mines A3\\NoSQL\\ReseauAchats\\reseau_achats\\node_modules\\rxjs\\src\\internal\\operators\\bufferWhen.ts"],"sourcesContent":["import { Operator } from '../Operator';\r\nimport { Subscriber } from '../Subscriber';\r\nimport { Observable } from '../Observable';\r\nimport { Subscription } from '../Subscription';\r\nimport { OperatorFunction } from '../types';\r\nimport { SimpleOuterSubscriber, innerSubscribe, SimpleInnerSubscriber } from '../innerSubscribe';\r\n\r\n/**\r\n * Buffers the source Observable values, using a factory function of closing\r\n * Observables to determine when to close, emit, and reset the buffer.\r\n *\r\n * <span class=\"informal\">Collects values from the past as an array. When it\r\n * starts collecting values, it calls a function that returns an Observable that\r\n * tells when to close the buffer and restart collecting.</span>\r\n *\r\n * ![](bufferWhen.png)\r\n *\r\n * Opens a buffer immediately, then closes the buffer when the observable\r\n * returned by calling `closingSelector` function emits a value. When it closes\r\n * the buffer, it immediately opens a new buffer and repeats the process.\r\n *\r\n * ## Example\r\n *\r\n * Emit an array of the last clicks every [1-5] random seconds\r\n *\r\n * ```ts\r\n * import { fromEvent, interval } from 'rxjs';\r\n * import { bufferWhen } from 'rxjs/operators';\r\n *\r\n * const clicks = fromEvent(document, 'click');\r\n * const buffered = clicks.pipe(bufferWhen(() =>\r\n *   interval(1000 + Math.random() * 4000)\r\n * ));\r\n * buffered.subscribe(x => console.log(x));\r\n * ```\r\n *\r\n *\r\n * @see {@link buffer}\r\n * @see {@link bufferCount}\r\n * @see {@link bufferTime}\r\n * @see {@link bufferToggle}\r\n * @see {@link windowWhen}\r\n *\r\n * @param {function(): Observable} closingSelector A function that takes no\r\n * arguments and returns an Observable that signals buffer closure.\r\n * @return {Observable<T[]>} An observable of arrays of buffered values.\r\n * @method bufferWhen\r\n * @owner Observable\r\n */\r\nexport function bufferWhen<T>(closingSelector: () => Observable<any>): OperatorFunction<T, T[]> {\r\n  return function (source: Observable<T>) {\r\n    return source.lift(new BufferWhenOperator(closingSelector));\r\n  };\r\n}\r\n\r\nclass BufferWhenOperator<T> implements Operator<T, T[]> {\r\n\r\n  constructor(private closingSelector: () => Observable<any>) {\r\n  }\r\n\r\n  call(subscriber: Subscriber<T[]>, source: any): any {\r\n    return source.subscribe(new BufferWhenSubscriber(subscriber, this.closingSelector));\r\n  }\r\n}\r\n\r\n/**\r\n * We need this JSDoc comment for affecting ESDoc.\r\n * @ignore\r\n * @extends {Ignored}\r\n */\r\nclass BufferWhenSubscriber<T> extends SimpleOuterSubscriber<T, any> {\r\n  private buffer?: T[];\r\n  private subscribing: boolean = false;\r\n  private closingSubscription?: Subscription;\r\n\r\n  constructor(destination: Subscriber<T[]>, private closingSelector: () => Observable<any>) {\r\n    super(destination);\r\n    this.openBuffer();\r\n  }\r\n\r\n  protected _next(value: T) {\r\n    this.buffer!.push(value);\r\n  }\r\n\r\n  protected _complete() {\r\n    const buffer = this.buffer;\r\n    if (buffer) {\r\n      this.destination.next!(buffer);\r\n    }\r\n    super._complete();\r\n  }\r\n\r\n  /** @deprecated This is an internal implementation detail, do not use. */\r\n  _unsubscribe() {\r\n    this.buffer = undefined;\r\n    this.subscribing = false;\r\n  }\r\n\r\n  notifyNext(): void {\r\n    this.openBuffer();\r\n  }\r\n\r\n  notifyComplete(): void {\r\n    if (this.subscribing) {\r\n      this.complete();\r\n    } else {\r\n      this.openBuffer();\r\n    }\r\n  }\r\n\r\n  openBuffer() {\r\n    let { closingSubscription } = this;\r\n\r\n    if (closingSubscription) {\r\n      this.remove(closingSubscription);\r\n      closingSubscription.unsubscribe();\r\n    }\r\n\r\n    const buffer = this.buffer;\r\n    if (this.buffer) {\r\n      this.destination.next!(buffer);\r\n    }\r\n\r\n    this.buffer = [];\r\n\r\n    let closingNotifier;\r\n    try {\r\n      const { closingSelector } = this;\r\n      closingNotifier = closingSelector();\r\n    } catch (err) {\r\n      return this.error(err);\r\n    }\r\n    closingSubscription = new Subscription();\r\n    this.closingSubscription = closingSubscription;\r\n    this.add(closingSubscription);\r\n    this.subscribing = true;\r\n    closingSubscription.add(innerSubscribe(closingNotifier, new SimpleInnerSubscriber(this)));\r\n    this.subscribing = false;\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}