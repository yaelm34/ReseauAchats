{"ast":null,"code":"/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nexport function count(predicate) {\n  return function (source) {\n    return source.lift(new CountOperator(predicate, source));\n  };\n}\n\nvar CountOperator = /*@__PURE__*/function () {\n  function CountOperator(predicate, source) {\n    this.predicate = predicate;\n    this.source = source;\n  }\n\n  CountOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new CountSubscriber(subscriber, this.predicate, this.source));\n  };\n\n  return CountOperator;\n}();\n\nvar CountSubscriber = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(CountSubscriber, _super);\n\n  function CountSubscriber(destination, predicate, source) {\n    var _this = _super.call(this, destination) || this;\n\n    _this.predicate = predicate;\n    _this.source = source;\n    _this.count = 0;\n    _this.index = 0;\n    return _this;\n  }\n\n  CountSubscriber.prototype._next = function (value) {\n    if (this.predicate) {\n      this._tryPredicate(value);\n    } else {\n      this.count++;\n    }\n  };\n\n  CountSubscriber.prototype._tryPredicate = function (value) {\n    var result;\n\n    try {\n      result = this.predicate(value, this.index++, this.source);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n\n    if (result) {\n      this.count++;\n    }\n  };\n\n  CountSubscriber.prototype._complete = function () {\n    this.destination.next(this.count);\n    this.destination.complete();\n  };\n\n  return CountSubscriber;\n}(Subscriber);","map":{"version":3,"mappings":";AAGA,OAAO,KAAEA,OAAT,MAAqB,OAArB;AA6DA,SAAMC,UAAN,QAAyB,eAAzB;OACE,SAAOC,KAAP,CAAQC,SAAR,EAAkC;AACnC;AAAA;AAAA;AAED;;IACEC,6BAAoB,YACsB;WADtBA,yBAAuEC;AACvE;AACnB;AAED;;eACS,WAAOC,OAAU,UAAIC,UAAJ,EAAoBF,MAApB,EAAgC;AACzD;AACH;;AARA,SAQCD,aARD;AAeA,CAdsB;;IAcWI,yCAAaC,MAAb,EAAa;AAI5CT,qCAAYS,MAAZ;;WAAAD,gBAGEE,aAAMP,WAAYE,QACnB;AAHmB,kCAAuEK,WAAvE,KAAuE,IAAvE;;AACAC;AALZA,mBAAiBN,MAAjB;AACAM,kBAAgB,CAAhB;;AAMP;AAES;;iBACC,WAAWC;QAClB,KAAKT;AACN;WACC;AACD;AACF;AAEO;;iBACU;AAEhB,QAAIU,MAAJ;;QACE;AACDA;AAAC,aACAC,KAAK;AACL,uBAAOC,KAAP,CAAOD,GAAP;AACD;AAED;;QACED,QAAK;AACN;AACF;AAES;;iBACH,WAAiBG,YAAY;AAClC,SAAKN,WAAL,CAAiBO,IAAjB,CAAiB,KAAUf,KAA3B;AACD;AACH;;AArCiC;CAAA","names":["tslib_1","Subscriber","count","predicate","CountOperator","source","call","subscriber","CountSubscriber","_super","destination","_this","_next","result","err","error","_complete","next"],"sources":["D:\\Documents\\EMA\\Mines A3\\NoSQL\\ReseauAchats\\reseau_achats\\node_modules\\rxjs\\src\\internal\\operators\\count.ts"],"sourcesContent":["import { Observable } from '../Observable';\r\nimport { Operator } from '../Operator';\r\nimport { Observer, OperatorFunction } from '../types';\r\nimport { Subscriber } from '../Subscriber';\r\n/**\r\n * Counts the number of emissions on the source and emits that number when the\r\n * source completes.\r\n *\r\n * <span class=\"informal\">Tells how many values were emitted, when the source\r\n * completes.</span>\r\n *\r\n * ![](count.png)\r\n *\r\n * `count` transforms an Observable that emits values into an Observable that\r\n * emits a single value that represents the number of values emitted by the\r\n * source Observable. If the source Observable terminates with an error, `count`\r\n * will pass this error notification along without emitting a value first. If\r\n * the source Observable does not terminate at all, `count` will neither emit\r\n * a value nor terminate. This operator takes an optional `predicate` function\r\n * as argument, in which case the output emission will represent the number of\r\n * source values that matched `true` with the `predicate`.\r\n *\r\n * ## Examples\r\n *\r\n * Counts how many seconds have passed before the first click happened\r\n * ```ts\r\n * import { fromEvent, interval } from 'rxjs';\r\n * import { count, takeUntil } from 'rxjs/operators';\r\n *\r\n * const seconds = interval(1000);\r\n * const clicks = fromEvent(document, 'click');\r\n * const secondsBeforeClick = seconds.pipe(takeUntil(clicks));\r\n * const result = secondsBeforeClick.pipe(count());\r\n * result.subscribe(x => console.log(x));\r\n * ```\r\n *\r\n * Counts how many odd numbers are there between 1 and 7\r\n * ```ts\r\n * import { range } from 'rxjs';\r\n * import { count } from 'rxjs/operators';\r\n *\r\n * const numbers = range(1, 7);\r\n * const result = numbers.pipe(count(i => i % 2 === 1));\r\n * result.subscribe(x => console.log(x));\r\n * // Results in:\r\n * // 4\r\n * ```\r\n *\r\n * @see {@link max}\r\n * @see {@link min}\r\n * @see {@link reduce}\r\n *\r\n * @param {function(value: T, i: number, source: Observable<T>): boolean} [predicate] A\r\n * boolean function to select what values are to be counted. It is provided with\r\n * arguments of:\r\n * - `value`: the value from the source Observable.\r\n * - `index`: the (zero-based) \"index\" of the value from the source Observable.\r\n * - `source`: the source Observable instance itself.\r\n * @return {Observable} An Observable of one number that represents the count as\r\n * described above.\r\n * @method count\r\n * @owner Observable\r\n */\r\n\r\nexport function count<T>(predicate?: (value: T, index: number, source: Observable<T>) => boolean): OperatorFunction<T, number> {\r\n  return (source: Observable<T>) => source.lift(new CountOperator(predicate, source));\r\n}\r\n\r\nclass CountOperator<T> implements Operator<T, number> {\r\n  constructor(private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\r\n              private source?: Observable<T>) {\r\n  }\r\n\r\n  call(subscriber: Subscriber<number>, source: any): any {\r\n    return source.subscribe(new CountSubscriber(subscriber, this.predicate, this.source));\r\n  }\r\n}\r\n\r\n/**\r\n * We need this JSDoc comment for affecting ESDoc.\r\n * @ignore\r\n * @extends {Ignored}\r\n */\r\nclass CountSubscriber<T> extends Subscriber<T> {\r\n  private count: number = 0;\r\n  private index: number = 0;\r\n\r\n  constructor(destination: Observer<number>,\r\n              private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\r\n              private source?: Observable<T>) {\r\n    super(destination);\r\n  }\r\n\r\n  protected _next(value: T): void {\r\n    if (this.predicate) {\r\n      this._tryPredicate(value);\r\n    } else {\r\n      this.count++;\r\n    }\r\n  }\r\n\r\n  private _tryPredicate(value: T) {\r\n    let result: any;\r\n\r\n    try {\r\n      result = this.predicate(value, this.index++, this.source);\r\n    } catch (err) {\r\n      this.destination.error(err);\r\n      return;\r\n    }\r\n\r\n    if (result) {\r\n      this.count++;\r\n    }\r\n  }\r\n\r\n  protected _complete(): void {\r\n    this.destination.next(this.count);\r\n    this.destination.complete();\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}