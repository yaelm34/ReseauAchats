{"ast":null,"code":"/** PURE_IMPORTS_START _scheduler_async,_map PURE_IMPORTS_END */\nimport { async } from '../scheduler/async';\nimport { map } from './map';\nexport function timestamp(scheduler) {\n  if (scheduler === void 0) {\n    scheduler = async;\n  }\n\n  return map(function (value) {\n    return new Timestamp(value, scheduler.now());\n  });\n}\n\nvar Timestamp = /*@__PURE__*/function () {\n  function Timestamp(value, timestamp) {\n    this.value = value;\n    this.timestamp = timestamp;\n  }\n\n  return Timestamp;\n}();\n\nexport { Timestamp };","map":{"version":3,"mappings":"AACA;AAEA,SAASA,KAAT,QAAoB,oBAApB;AAoCA,SAAMC,GAAN,QAAgB,OAAhB;OAA6B;AAC3B,eAAW,UAAC,CAAZ,EAAoB;AAErBC;AAED;;AACE,uBAAmBC,KAAnB,EAAoC;AAAA,WAAiB,qCAAjB;AAAiB,GAArD;;;aAAoC,4BAAiB;AACrD,WAACC,SAAD,CAACD,KAAD,EAACE,SAAD,EAAC;AACH,iBAACF,KAAD;AAAC;;;;CAFqC","names":["async","map","scheduler","value","Timestamp","timestamp"],"sources":["D:\\Documents\\EMA\\Mines A3\\NoSQL\\ReseauAchats\\reseau_achats\\node_modules\\rxjs\\src\\internal\\operators\\timestamp.ts"],"sourcesContent":["\r\nimport { async } from '../scheduler/async';\r\nimport { OperatorFunction, SchedulerLike, Timestamp as TimestampInterface } from '../types';\r\nimport { map } from './map';\r\n\r\n/**\r\n * Attaches a timestamp to each item emitted by an observable indicating when it was emitted\r\n *\r\n * The `timestamp` operator maps the *source* observable stream to an object of type\r\n * `{value: T, timestamp: R}`. The properties are generically typed. The `value` property contains the value\r\n * and type of the *source* observable. The `timestamp` is generated by the schedulers `now` function. By\r\n * default it uses the *async* scheduler which simply returns `Date.now()` (milliseconds since 1970/01/01\r\n * 00:00:00:000) and therefore is of type `number`.\r\n *\r\n * ![](timestamp.png)\r\n *\r\n * ## Example\r\n *\r\n * In this example there is a timestamp attached to the documents click event.\r\n *\r\n * ```ts\r\n * import { fromEvent } from 'rxjs';\r\n * import { timestamp } from 'rxjs/operators';\r\n *\r\n * const clickWithTimestamp = fromEvent(document, 'click').pipe(\r\n *   timestamp()\r\n * );\r\n *\r\n * // Emits data of type {value: MouseEvent, timestamp: number}\r\n * clickWithTimestamp.subscribe(data => {\r\n *   console.log(data);\r\n * });\r\n * ```\r\n *\r\n * @param scheduler\r\n * @return {Observable<Timestamp<any>>|WebSocketSubject<T>|Observable<T>}\r\n * @method timestamp\r\n * @owner Observable\r\n */\r\nexport function timestamp<T>(scheduler: SchedulerLike = async): OperatorFunction<T, Timestamp<T>> {\r\n  return map((value: T) => new Timestamp(value, scheduler.now()));\r\n  // return (source: Observable<T>) => source.lift(new TimestampOperator(scheduler));\r\n}\r\n\r\nexport class Timestamp<T> implements TimestampInterface<T> {\r\n  constructor(public value: T, public timestamp: number) {\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}