{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isPoint = exports.Point = void 0;\n/**\r\n * Copyright (c) \"Neo4j\"\r\n * Neo4j Sweden AB [http://neo4j.com]\r\n *\r\n * This file is part of Neo4j.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nvar util_1 = require(\"./internal/util\");\n\nvar POINT_IDENTIFIER_PROPERTY = '__isPoint__';\n/**\r\n * Represents a single two or three-dimensional point in a particular coordinate reference system.\r\n * Created `Point` objects are frozen with `Object.freeze()` in constructor and thus immutable.\r\n */\n\nvar Point =\n/** @class */\nfunction () {\n  /**\r\n   * @constructor\r\n   * @param {T} srid - The coordinate reference system identifier.\r\n   * @param {number} x - The `x` coordinate of the point.\r\n   * @param {number} y - The `y` coordinate of the point.\r\n   * @param {number} [z=undefined] - The `z` coordinate of the point or `undefined` if point has 2 dimensions.\r\n   */\n  function Point(srid, x, y, z) {\n    /**\r\n     * The coordinate reference system identifier.\r\n     * @type {T}\r\n     */\n    this.srid = (0, util_1.assertNumberOrInteger)(srid, 'SRID');\n    /**\r\n     * The `x` coordinate of the point.\r\n     * @type {number}\r\n     */\n\n    this.x = (0, util_1.assertNumber)(x, 'X coordinate');\n    /**\r\n     * The `y` coordinate of the point.\r\n     * @type {number}\r\n     */\n\n    this.y = (0, util_1.assertNumber)(y, 'Y coordinate');\n    /**\r\n     * The `z` coordinate of the point or `undefined` if point is 2-dimensional.\r\n     * @type {number}\r\n     */\n\n    this.z = z === null || z === undefined ? z : (0, util_1.assertNumber)(z, 'Z coordinate');\n    Object.freeze(this);\n  }\n  /**\r\n   * @ignore\r\n   */\n\n\n  Point.prototype.toString = function () {\n    return this.z || this.z === 0 ? \"Point{srid=\" + formatAsFloat(this.srid) + \", x=\" + formatAsFloat(this.x) + \", y=\" + formatAsFloat(this.y) + \", z=\" + formatAsFloat(this.z) + \"}\" : \"Point{srid=\" + formatAsFloat(this.srid) + \", x=\" + formatAsFloat(this.x) + \", y=\" + formatAsFloat(this.y) + \"}\";\n  };\n\n  return Point;\n}();\n\nexports.Point = Point;\n\nfunction formatAsFloat(number) {\n  return Number.isInteger(number) ? number + '.0' : number.toString();\n}\n\nObject.defineProperty(Point.prototype, POINT_IDENTIFIER_PROPERTY, {\n  value: true,\n  enumerable: false,\n  configurable: false,\n  writable: false\n});\n/**\r\n * Test if given object is an instance of {@link Point} class.\r\n * @param {Object} obj the object to test.\r\n * @return {boolean} `true` if given object is a {@link Point}, `false` otherwise.\r\n */\n\nfunction isPoint(obj) {\n  return (obj && obj[POINT_IDENTIFIER_PROPERTY]) === true;\n}\n\nexports.isPoint = isPoint;","map":{"version":3,"sources":["D:/Documents/EMA/Mines A3/NoSQL/ReseauAchats/reseau_achats/node_modules/neo4j-driver-core/lib/spatial-types.js"],"names":["Object","defineProperty","exports","value","isPoint","Point","util_1","require","POINT_IDENTIFIER_PROPERTY","srid","x","y","z","assertNumberOrInteger","assertNumber","undefined","freeze","prototype","toString","formatAsFloat","number","Number","isInteger","enumerable","configurable","writable","obj"],"mappings":"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","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.isPoint = exports.Point = void 0;\r\n/**\r\n * Copyright (c) \"Neo4j\"\r\n * Neo4j Sweden AB [http://neo4j.com]\r\n *\r\n * This file is part of Neo4j.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar util_1 = require(\"./internal/util\");\r\nvar POINT_IDENTIFIER_PROPERTY = '__isPoint__';\r\n/**\r\n * Represents a single two or three-dimensional point in a particular coordinate reference system.\r\n * Created `Point` objects are frozen with `Object.freeze()` in constructor and thus immutable.\r\n */\r\nvar Point = /** @class */ (function () {\r\n    /**\r\n     * @constructor\r\n     * @param {T} srid - The coordinate reference system identifier.\r\n     * @param {number} x - The `x` coordinate of the point.\r\n     * @param {number} y - The `y` coordinate of the point.\r\n     * @param {number} [z=undefined] - The `z` coordinate of the point or `undefined` if point has 2 dimensions.\r\n     */\r\n    function Point(srid, x, y, z) {\r\n        /**\r\n         * The coordinate reference system identifier.\r\n         * @type {T}\r\n         */\r\n        this.srid = (0, util_1.assertNumberOrInteger)(srid, 'SRID');\r\n        /**\r\n         * The `x` coordinate of the point.\r\n         * @type {number}\r\n         */\r\n        this.x = (0, util_1.assertNumber)(x, 'X coordinate');\r\n        /**\r\n         * The `y` coordinate of the point.\r\n         * @type {number}\r\n         */\r\n        this.y = (0, util_1.assertNumber)(y, 'Y coordinate');\r\n        /**\r\n         * The `z` coordinate of the point or `undefined` if point is 2-dimensional.\r\n         * @type {number}\r\n         */\r\n        this.z = z === null || z === undefined ? z : (0, util_1.assertNumber)(z, 'Z coordinate');\r\n        Object.freeze(this);\r\n    }\r\n    /**\r\n     * @ignore\r\n     */\r\n    Point.prototype.toString = function () {\r\n        return this.z || this.z === 0\r\n            ? \"Point{srid=\" + formatAsFloat(this.srid) + \", x=\" + formatAsFloat(this.x) + \", y=\" + formatAsFloat(this.y) + \", z=\" + formatAsFloat(this.z) + \"}\"\r\n            : \"Point{srid=\" + formatAsFloat(this.srid) + \", x=\" + formatAsFloat(this.x) + \", y=\" + formatAsFloat(this.y) + \"}\";\r\n    };\r\n    return Point;\r\n}());\r\nexports.Point = Point;\r\nfunction formatAsFloat(number) {\r\n    return Number.isInteger(number) ? number + '.0' : number.toString();\r\n}\r\nObject.defineProperty(Point.prototype, POINT_IDENTIFIER_PROPERTY, {\r\n    value: true,\r\n    enumerable: false,\r\n    configurable: false,\r\n    writable: false\r\n});\r\n/**\r\n * Test if given object is an instance of {@link Point} class.\r\n * @param {Object} obj the object to test.\r\n * @return {boolean} `true` if given object is a {@link Point}, `false` otherwise.\r\n */\r\nfunction isPoint(obj) {\r\n    return (obj && obj[POINT_IDENTIFIER_PROPERTY]) === true;\r\n}\r\nexports.isPoint = isPoint;\r\n"]},"metadata":{},"sourceType":"script"}