{"ast":null,"code":"/** PURE_IMPORTS_START _operators_find PURE_IMPORTS_END */\nimport { FindValueOperator } from '../operators/find';\nexport function findIndex(predicate, thisArg) {\n  return function (source) {\n    return source.lift(new FindValueOperator(predicate, source, true, thisArg));\n  };\n}","map":{"version":3,"mappings":"AACA;AA0CA,SAAMA,iBAAN,QAA6B,mBAA7B;OAEE,SAAOC,SAAP,CAAQC,SAAR,EAAkCC,OAAlC,EAAyC;AAC1C;AAAA;AAAA","names":["FindValueOperator","findIndex","predicate","thisArg"],"sources":["D:\\Documents\\EMA\\Mines A3\\NoSQL\\ReseauAchats\\reseau_achats\\node_modules\\rxjs\\src\\internal\\operators\\findIndex.ts"],"sourcesContent":["import { Observable } from '../Observable';\r\nimport { FindValueOperator } from '../operators/find';\r\nimport { OperatorFunction } from '../types';\r\n/**\r\n * Emits only the index of the first value emitted by the source Observable that\r\n * meets some condition.\r\n *\r\n * <span class=\"informal\">It's like {@link find}, but emits the index of the\r\n * found value, not the value itself.</span>\r\n *\r\n * ![](findIndex.png)\r\n *\r\n * `findIndex` searches for the first item in the source Observable that matches\r\n * the specified condition embodied by the `predicate`, and returns the\r\n * (zero-based) index of the first occurrence in the source. Unlike\r\n * {@link first}, the `predicate` is required in `findIndex`, and does not emit\r\n * an error if a valid value is not found.\r\n *\r\n * ## Example\r\n * Emit the index of first click that happens on a DIV element\r\n * ```ts\r\n * import { fromEvent } from 'rxjs';\r\n * import { findIndex } from 'rxjs/operators';\r\n *\r\n * const clicks = fromEvent(document, 'click');\r\n * const result = clicks.pipe(findIndex(ev => ev.target.tagName === 'DIV'));\r\n * result.subscribe(x => console.log(x));\r\n * ```\r\n *\r\n * @see {@link filter}\r\n * @see {@link find}\r\n * @see {@link first}\r\n * @see {@link take}\r\n *\r\n * @param {function(value: T, index: number, source: Observable<T>): boolean} predicate\r\n * A function called with each item to test for condition matching.\r\n * @param {any} [thisArg] An optional argument to determine the value of `this`\r\n * in the `predicate` function.\r\n * @return {Observable} An Observable of the index of the first item that\r\n * matches the condition.\r\n * @method find\r\n * @owner Observable\r\n */\r\nexport function findIndex<T>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\r\n                             thisArg?: any): OperatorFunction<T, number> {\r\n  return (source: Observable<T>) => source.lift(new FindValueOperator(predicate, source, true, thisArg)) as Observable<any>;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}