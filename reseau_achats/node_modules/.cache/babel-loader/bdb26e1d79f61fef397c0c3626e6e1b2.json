{"ast":null,"code":"\"use strict\";\n/**\n * Copyright (c) \"Neo4j\"\n * Neo4j Sweden AB [http://neo4j.com]\n *\n * This file is part of Neo4j.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Url = exports.formatIPv6Address = exports.formatIPv4Address = exports.defaultPortForScheme = exports.parseDatabaseUrl = void 0;\n\nvar util_1 = require(\"./util\");\n\nvar DEFAULT_BOLT_PORT = 7687;\nvar DEFAULT_HTTP_PORT = 7474;\nvar DEFAULT_HTTPS_PORT = 7473;\n\nvar Url =\n/** @class */\nfunction () {\n  function Url(scheme, host, port, hostAndPort, query) {\n    /**\n     * Nullable scheme (protocol) of the URL.\n     * Example: 'bolt', 'neo4j', 'http', 'https', etc.\n     * @type {string}\n     */\n    this.scheme = scheme;\n    /**\n     * Nonnull host name or IP address. IPv6 not wrapped in square brackets.\n     * Example: 'neo4j.com', 'localhost', '127.0.0.1', '192.168.10.15', '::1', '2001:4860:4860::8844', etc.\n     * @type {string}\n     */\n\n    this.host = host;\n    /**\n     * Nonnull number representing port. Default port for the given scheme is used if given URL string\n     * does not contain port. Example: 7687 for bolt, 7474 for HTTP and 7473 for HTTPS.\n     * @type {number}\n     */\n\n    this.port = port;\n    /**\n     * Nonnull host name or IP address plus port, separated by ':'. IPv6 wrapped in square brackets.\n     * Example: 'neo4j.com', 'neo4j.com:7687', '127.0.0.1', '127.0.0.1:8080', '[2001:4860:4860::8844]',\n     * '[2001:4860:4860::8844]:9090', etc.\n     * @type {string}\n     */\n\n    this.hostAndPort = hostAndPort;\n    /**\n     * Nonnull object representing parsed query string key-value pairs. Duplicated keys not supported.\n     * Example: '{}', '{'key1': 'value1', 'key2': 'value2'}', etc.\n     * @type {Object}\n     */\n\n    this.query = query;\n  }\n\n  return Url;\n}();\n\nexports.Url = Url;\n\nfunction parseDatabaseUrl(url) {\n  (0, util_1.assertString)(url, 'URL');\n  var sanitized = sanitizeUrl(url);\n  var parsedUrl = uriJsParse(sanitized.url);\n  var scheme = sanitized.schemeMissing ? null : extractScheme(parsedUrl.scheme);\n  var host = extractHost(parsedUrl.host); // no square brackets for IPv6\n\n  var formattedHost = formatHost(host); // has square brackets for IPv6\n\n  var port = extractPort(parsedUrl.port, scheme);\n  var hostAndPort = formattedHost + \":\" + port;\n  var query = extractQuery( // @ts-ignore\n  parsedUrl.query || extractResourceQueryString(parsedUrl.resourceName), url);\n  return new Url(scheme, host, port, hostAndPort, query);\n}\n\nexports.parseDatabaseUrl = parseDatabaseUrl;\n\nfunction extractResourceQueryString(resource) {\n  if (typeof resource !== 'string') {\n    return null;\n  }\n\n  var _a = __read(resource.split('?'), 2),\n      _ = _a[0],\n      query = _a[1];\n\n  return query;\n}\n\nfunction sanitizeUrl(url) {\n  url = url.trim();\n\n  if (url.indexOf('://') === -1) {\n    // url does not contain scheme, add dummy 'none://' to make parser work correctly\n    return {\n      schemeMissing: true,\n      url: \"none://\" + url\n    };\n  }\n\n  return {\n    schemeMissing: false,\n    url: url\n  };\n}\n\nfunction extractScheme(scheme) {\n  if (scheme) {\n    scheme = scheme.trim();\n\n    if (scheme.charAt(scheme.length - 1) === ':') {\n      scheme = scheme.substring(0, scheme.length - 1);\n    }\n\n    return scheme;\n  }\n\n  return null;\n}\n\nfunction extractHost(host, url) {\n  if (!host) {\n    throw new Error(\"Unable to extract host from \" + url);\n  }\n\n  return host.trim();\n}\n\nfunction extractPort(portString, scheme) {\n  var port = typeof portString === 'string' ? parseInt(portString, 10) : portString;\n  return port === 0 || port ? port : defaultPortForScheme(scheme);\n}\n\nfunction extractQuery(queryString, url) {\n  var query = queryString ? trimAndSanitizeQuery(queryString) : null;\n  var context = {};\n\n  if (query) {\n    query.split('&').forEach(function (pair) {\n      var keyValue = pair.split('=');\n\n      if (keyValue.length !== 2) {\n        throw new Error(\"Invalid parameters: '\" + keyValue + \"' in URL '\" + url + \"'.\");\n      }\n\n      var key = trimAndVerifyQueryElement(keyValue[0], 'key', url);\n      var value = trimAndVerifyQueryElement(keyValue[1], 'value', url);\n\n      if (context[key]) {\n        throw new Error(\"Duplicated query parameters with key '\" + key + \"' in URL '\" + url + \"'\");\n      }\n\n      context[key] = value;\n    });\n  }\n\n  return context;\n}\n\nfunction trimAndSanitizeQuery(query) {\n  query = (query || '').trim();\n\n  if (query && query.charAt(0) === '?') {\n    query = query.substring(1, query.length);\n  }\n\n  return query;\n}\n\nfunction trimAndVerifyQueryElement(element, name, url) {\n  element = (element || '').trim();\n\n  if (!element) {\n    throw new Error(\"Illegal empty \" + name + \" in URL query '\" + url + \"'\");\n  }\n\n  return element;\n}\n\nfunction escapeIPv6Address(address) {\n  var startsWithSquareBracket = address.charAt(0) === '[';\n  var endsWithSquareBracket = address.charAt(address.length - 1) === ']';\n\n  if (!startsWithSquareBracket && !endsWithSquareBracket) {\n    return \"[\" + address + \"]\";\n  } else if (startsWithSquareBracket && endsWithSquareBracket) {\n    return address;\n  } else {\n    throw new Error(\"Illegal IPv6 address \" + address);\n  }\n}\n\nfunction formatHost(host) {\n  if (!host) {\n    throw new Error(\"Illegal host \" + host);\n  }\n\n  var isIPv6Address = host.indexOf(':') >= 0;\n  return isIPv6Address ? escapeIPv6Address(host) : host;\n}\n\nfunction formatIPv4Address(address, port) {\n  return address + \":\" + port;\n}\n\nexports.formatIPv4Address = formatIPv4Address;\n\nfunction formatIPv6Address(address, port) {\n  var escapedAddress = escapeIPv6Address(address);\n  return escapedAddress + \":\" + port;\n}\n\nexports.formatIPv6Address = formatIPv6Address;\n\nfunction defaultPortForScheme(scheme) {\n  if (scheme === 'http') {\n    return DEFAULT_HTTP_PORT;\n  } else if (scheme === 'https') {\n    return DEFAULT_HTTPS_PORT;\n  } else {\n    return DEFAULT_BOLT_PORT;\n  }\n}\n\nexports.defaultPortForScheme = defaultPortForScheme;\n\nfunction uriJsParse(value) {\n  // JS version of Python partition function\n  function partition(s, delimiter) {\n    var i = s.indexOf(delimiter);\n    if (i >= 0) return [s.substring(0, i), s[i], s.substring(i + 1)];else return [s, '', ''];\n  } // JS version of Python rpartition function\n\n\n  function rpartition(s, delimiter) {\n    var i = s.lastIndexOf(delimiter);\n    if (i >= 0) return [s.substring(0, i), s[i], s.substring(i + 1)];else return ['', '', s];\n  }\n\n  function between(s, ldelimiter, rdelimiter) {\n    var lpartition = partition(s, ldelimiter);\n    var rpartition = partition(lpartition[2], rdelimiter);\n    return [rpartition[0], rpartition[2]];\n  } // Parse an authority string into an object\n  // with the following keys:\n  // - userInfo (optional, might contain both user name and password)\n  // - host\n  // - port (optional, included only as a string)\n\n\n  function parseAuthority(value) {\n    var parsed = {},\n        parts; // Parse user info\n\n    parts = rpartition(value, '@');\n\n    if (parts[1] === '@') {\n      parsed.userInfo = decodeURIComponent(parts[0]);\n      value = parts[2];\n    } // Parse host and port\n\n\n    var _a = __read(between(value, \"[\", \"]\"), 2),\n        ipv6Host = _a[0],\n        rest = _a[1];\n\n    if (ipv6Host !== '') {\n      parsed.host = ipv6Host;\n      parts = partition(rest, ':');\n    } else {\n      parts = partition(value, ':');\n      parsed.host = parts[0];\n    }\n\n    if (parts[1] === ':') {\n      parsed.port = parts[2];\n    }\n\n    return parsed;\n  }\n\n  var parsed = {},\n      parts; // Parse scheme\n\n  parts = partition(value, ':');\n\n  if (parts[1] === ':') {\n    parsed.scheme = decodeURIComponent(parts[0]);\n    value = parts[2];\n  } // Parse fragment\n\n\n  parts = partition(value, '#');\n\n  if (parts[1] === '#') {\n    parsed.fragment = decodeURIComponent(parts[2]);\n    value = parts[0];\n  } // Parse query\n\n\n  parts = partition(value, '?');\n\n  if (parts[1] === '?') {\n    parsed.query = parts[2];\n    value = parts[0];\n  } // Parse authority and path\n\n\n  if (value.startsWith('//')) {\n    parts = partition(value.substr(2), '/');\n    parsed = __assign(__assign({}, parsed), parseAuthority(parts[0]));\n    parsed.path = parts[1] + parts[2];\n  } else {\n    parsed.path = value;\n  }\n\n  return parsed;\n}","map":{"version":3,"sources":["D:/Documents/EMA/Mines A3/NoSQL/ReseauAchats/reseau_achats/node_modules/neo4j-driver-core/lib/internal/url-util.js"],"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","__read","o","m","Symbol","iterator","r","ar","e","next","done","push","value","error","defineProperty","exports","Url","formatIPv6Address","formatIPv4Address","defaultPortForScheme","parseDatabaseUrl","util_1","require","DEFAULT_BOLT_PORT","DEFAULT_HTTP_PORT","DEFAULT_HTTPS_PORT","scheme","host","port","hostAndPort","query","url","assertString","sanitized","sanitizeUrl","parsedUrl","uriJsParse","schemeMissing","extractScheme","extractHost","formattedHost","formatHost","extractPort","extractQuery","extractResourceQueryString","resourceName","resource","_a","split","_","trim","indexOf","charAt","substring","Error","portString","parseInt","queryString","trimAndSanitizeQuery","context","forEach","pair","keyValue","key","trimAndVerifyQueryElement","element","name","escapeIPv6Address","address","startsWithSquareBracket","endsWithSquareBracket","isIPv6Address","escapedAddress","partition","delimiter","rpartition","lastIndexOf","between","ldelimiter","rdelimiter","lpartition","parseAuthority","parsed","parts","userInfo","decodeURIComponent","ipv6Host","rest","fragment","startsWith","substr","path"],"mappings":"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","sourcesContent":["\"use strict\";\n/**\n * Copyright (c) \"Neo4j\"\n * Neo4j Sweden AB [http://neo4j.com]\n *\n * This file is part of Neo4j.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Url = exports.formatIPv6Address = exports.formatIPv4Address = exports.defaultPortForScheme = exports.parseDatabaseUrl = void 0;\nvar util_1 = require(\"./util\");\nvar DEFAULT_BOLT_PORT = 7687;\nvar DEFAULT_HTTP_PORT = 7474;\nvar DEFAULT_HTTPS_PORT = 7473;\nvar Url = /** @class */ (function () {\n    function Url(scheme, host, port, hostAndPort, query) {\n        /**\n         * Nullable scheme (protocol) of the URL.\n         * Example: 'bolt', 'neo4j', 'http', 'https', etc.\n         * @type {string}\n         */\n        this.scheme = scheme;\n        /**\n         * Nonnull host name or IP address. IPv6 not wrapped in square brackets.\n         * Example: 'neo4j.com', 'localhost', '127.0.0.1', '192.168.10.15', '::1', '2001:4860:4860::8844', etc.\n         * @type {string}\n         */\n        this.host = host;\n        /**\n         * Nonnull number representing port. Default port for the given scheme is used if given URL string\n         * does not contain port. Example: 7687 for bolt, 7474 for HTTP and 7473 for HTTPS.\n         * @type {number}\n         */\n        this.port = port;\n        /**\n         * Nonnull host name or IP address plus port, separated by ':'. IPv6 wrapped in square brackets.\n         * Example: 'neo4j.com', 'neo4j.com:7687', '127.0.0.1', '127.0.0.1:8080', '[2001:4860:4860::8844]',\n         * '[2001:4860:4860::8844]:9090', etc.\n         * @type {string}\n         */\n        this.hostAndPort = hostAndPort;\n        /**\n         * Nonnull object representing parsed query string key-value pairs. Duplicated keys not supported.\n         * Example: '{}', '{'key1': 'value1', 'key2': 'value2'}', etc.\n         * @type {Object}\n         */\n        this.query = query;\n    }\n    return Url;\n}());\nexports.Url = Url;\nfunction parseDatabaseUrl(url) {\n    (0, util_1.assertString)(url, 'URL');\n    var sanitized = sanitizeUrl(url);\n    var parsedUrl = uriJsParse(sanitized.url);\n    var scheme = sanitized.schemeMissing\n        ? null\n        : extractScheme(parsedUrl.scheme);\n    var host = extractHost(parsedUrl.host); // no square brackets for IPv6\n    var formattedHost = formatHost(host); // has square brackets for IPv6\n    var port = extractPort(parsedUrl.port, scheme);\n    var hostAndPort = formattedHost + \":\" + port;\n    var query = extractQuery(\n    // @ts-ignore\n    parsedUrl.query || extractResourceQueryString(parsedUrl.resourceName), url);\n    return new Url(scheme, host, port, hostAndPort, query);\n}\nexports.parseDatabaseUrl = parseDatabaseUrl;\nfunction extractResourceQueryString(resource) {\n    if (typeof resource !== 'string') {\n        return null;\n    }\n    var _a = __read(resource.split('?'), 2), _ = _a[0], query = _a[1];\n    return query;\n}\nfunction sanitizeUrl(url) {\n    url = url.trim();\n    if (url.indexOf('://') === -1) {\n        // url does not contain scheme, add dummy 'none://' to make parser work correctly\n        return { schemeMissing: true, url: \"none://\" + url };\n    }\n    return { schemeMissing: false, url: url };\n}\nfunction extractScheme(scheme) {\n    if (scheme) {\n        scheme = scheme.trim();\n        if (scheme.charAt(scheme.length - 1) === ':') {\n            scheme = scheme.substring(0, scheme.length - 1);\n        }\n        return scheme;\n    }\n    return null;\n}\nfunction extractHost(host, url) {\n    if (!host) {\n        throw new Error(\"Unable to extract host from \" + url);\n    }\n    return host.trim();\n}\nfunction extractPort(portString, scheme) {\n    var port = typeof portString === 'string' ? parseInt(portString, 10) : portString;\n    return port === 0 || port ? port : defaultPortForScheme(scheme);\n}\nfunction extractQuery(queryString, url) {\n    var query = queryString ? trimAndSanitizeQuery(queryString) : null;\n    var context = {};\n    if (query) {\n        query.split('&').forEach(function (pair) {\n            var keyValue = pair.split('=');\n            if (keyValue.length !== 2) {\n                throw new Error(\"Invalid parameters: '\" + keyValue + \"' in URL '\" + url + \"'.\");\n            }\n            var key = trimAndVerifyQueryElement(keyValue[0], 'key', url);\n            var value = trimAndVerifyQueryElement(keyValue[1], 'value', url);\n            if (context[key]) {\n                throw new Error(\"Duplicated query parameters with key '\" + key + \"' in URL '\" + url + \"'\");\n            }\n            context[key] = value;\n        });\n    }\n    return context;\n}\nfunction trimAndSanitizeQuery(query) {\n    query = (query || '').trim();\n    if (query && query.charAt(0) === '?') {\n        query = query.substring(1, query.length);\n    }\n    return query;\n}\nfunction trimAndVerifyQueryElement(element, name, url) {\n    element = (element || '').trim();\n    if (!element) {\n        throw new Error(\"Illegal empty \" + name + \" in URL query '\" + url + \"'\");\n    }\n    return element;\n}\nfunction escapeIPv6Address(address) {\n    var startsWithSquareBracket = address.charAt(0) === '[';\n    var endsWithSquareBracket = address.charAt(address.length - 1) === ']';\n    if (!startsWithSquareBracket && !endsWithSquareBracket) {\n        return \"[\" + address + \"]\";\n    }\n    else if (startsWithSquareBracket && endsWithSquareBracket) {\n        return address;\n    }\n    else {\n        throw new Error(\"Illegal IPv6 address \" + address);\n    }\n}\nfunction formatHost(host) {\n    if (!host) {\n        throw new Error(\"Illegal host \" + host);\n    }\n    var isIPv6Address = host.indexOf(':') >= 0;\n    return isIPv6Address ? escapeIPv6Address(host) : host;\n}\nfunction formatIPv4Address(address, port) {\n    return address + \":\" + port;\n}\nexports.formatIPv4Address = formatIPv4Address;\nfunction formatIPv6Address(address, port) {\n    var escapedAddress = escapeIPv6Address(address);\n    return escapedAddress + \":\" + port;\n}\nexports.formatIPv6Address = formatIPv6Address;\nfunction defaultPortForScheme(scheme) {\n    if (scheme === 'http') {\n        return DEFAULT_HTTP_PORT;\n    }\n    else if (scheme === 'https') {\n        return DEFAULT_HTTPS_PORT;\n    }\n    else {\n        return DEFAULT_BOLT_PORT;\n    }\n}\nexports.defaultPortForScheme = defaultPortForScheme;\nfunction uriJsParse(value) {\n    // JS version of Python partition function\n    function partition(s, delimiter) {\n        var i = s.indexOf(delimiter);\n        if (i >= 0)\n            return [s.substring(0, i), s[i], s.substring(i + 1)];\n        else\n            return [s, '', ''];\n    }\n    // JS version of Python rpartition function\n    function rpartition(s, delimiter) {\n        var i = s.lastIndexOf(delimiter);\n        if (i >= 0)\n            return [s.substring(0, i), s[i], s.substring(i + 1)];\n        else\n            return ['', '', s];\n    }\n    function between(s, ldelimiter, rdelimiter) {\n        var lpartition = partition(s, ldelimiter);\n        var rpartition = partition(lpartition[2], rdelimiter);\n        return [rpartition[0], rpartition[2]];\n    }\n    // Parse an authority string into an object\n    // with the following keys:\n    // - userInfo (optional, might contain both user name and password)\n    // - host\n    // - port (optional, included only as a string)\n    function parseAuthority(value) {\n        var parsed = {}, parts;\n        // Parse user info\n        parts = rpartition(value, '@');\n        if (parts[1] === '@') {\n            parsed.userInfo = decodeURIComponent(parts[0]);\n            value = parts[2];\n        }\n        // Parse host and port\n        var _a = __read(between(value, \"[\", \"]\"), 2), ipv6Host = _a[0], rest = _a[1];\n        if (ipv6Host !== '') {\n            parsed.host = ipv6Host;\n            parts = partition(rest, ':');\n        }\n        else {\n            parts = partition(value, ':');\n            parsed.host = parts[0];\n        }\n        if (parts[1] === ':') {\n            parsed.port = parts[2];\n        }\n        return parsed;\n    }\n    var parsed = {}, parts;\n    // Parse scheme\n    parts = partition(value, ':');\n    if (parts[1] === ':') {\n        parsed.scheme = decodeURIComponent(parts[0]);\n        value = parts[2];\n    }\n    // Parse fragment\n    parts = partition(value, '#');\n    if (parts[1] === '#') {\n        parsed.fragment = decodeURIComponent(parts[2]);\n        value = parts[0];\n    }\n    // Parse query\n    parts = partition(value, '?');\n    if (parts[1] === '?') {\n        parsed.query = parts[2];\n        value = parts[0];\n    }\n    // Parse authority and path\n    if (value.startsWith('//')) {\n        parts = partition(value.substr(2), '/');\n        parsed = __assign(__assign({}, parsed), parseAuthority(parts[0]));\n        parsed.path = parts[1] + parts[2];\n    }\n    else {\n        parsed.path = value;\n    }\n    return parsed;\n}\n"]},"metadata":{},"sourceType":"script"}