{"ast":null,"code":"\"use strict\";\n/**\r\n * Copyright (c) \"Neo4j\"\r\n * Neo4j Sweden AB [http://neo4j.com]\r\n *\r\n * This file is part of Neo4j.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar RoundRobinArrayIndex =\n/** @class */\nfunction () {\n  /**\r\n   * @constructor\r\n   * @param {number} [initialOffset=0] the initial offset for round robin.\r\n   */\n  function RoundRobinArrayIndex(initialOffset) {\n    this._offset = initialOffset || 0;\n  }\n  /**\r\n   * Get next index for an array with given length.\r\n   * @param {number} arrayLength the array length.\r\n   * @return {number} index in the array.\r\n   */\n\n\n  RoundRobinArrayIndex.prototype.next = function (arrayLength) {\n    if (arrayLength === 0) {\n      return -1;\n    }\n\n    var nextOffset = this._offset;\n    this._offset += 1;\n\n    if (this._offset === Number.MAX_SAFE_INTEGER) {\n      this._offset = 0;\n    }\n\n    return nextOffset % arrayLength;\n  };\n\n  return RoundRobinArrayIndex;\n}();\n\nexports.default = RoundRobinArrayIndex;","map":{"version":3,"sources":["D:/Documents/EMA/Mines A3/NoSQL/ReseauAchats/reseau_achats/node_modules/neo4j-driver-bolt-connection/lib/load-balancing/round-robin-array-index.js"],"names":["Object","defineProperty","exports","value","RoundRobinArrayIndex","initialOffset","_offset","prototype","next","arrayLength","nextOffset","Number","MAX_SAFE_INTEGER","default"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,IAAIC,oBAAoB;AAAG;AAAe,YAAY;AAClD;AACJ;AACA;AACA;AACI,WAASA,oBAAT,CAA8BC,aAA9B,EAA6C;AACzC,SAAKC,OAAL,GAAeD,aAAa,IAAI,CAAhC;AACH;AACD;AACJ;AACA;AACA;AACA;;;AACID,EAAAA,oBAAoB,CAACG,SAArB,CAA+BC,IAA/B,GAAsC,UAAUC,WAAV,EAAuB;AACzD,QAAIA,WAAW,KAAK,CAApB,EAAuB;AACnB,aAAO,CAAC,CAAR;AACH;;AACD,QAAIC,UAAU,GAAG,KAAKJ,OAAtB;AACA,SAAKA,OAAL,IAAgB,CAAhB;;AACA,QAAI,KAAKA,OAAL,KAAiBK,MAAM,CAACC,gBAA5B,EAA8C;AAC1C,WAAKN,OAAL,GAAe,CAAf;AACH;;AACD,WAAOI,UAAU,GAAGD,WAApB;AACH,GAVD;;AAWA,SAAOL,oBAAP;AACH,CAzByC,EAA1C;;AA0BAF,OAAO,CAACW,OAAR,GAAkBT,oBAAlB","sourcesContent":["\"use strict\";\r\n/**\r\n * Copyright (c) \"Neo4j\"\r\n * Neo4j Sweden AB [http://neo4j.com]\r\n *\r\n * This file is part of Neo4j.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar RoundRobinArrayIndex = /** @class */ (function () {\r\n    /**\r\n     * @constructor\r\n     * @param {number} [initialOffset=0] the initial offset for round robin.\r\n     */\r\n    function RoundRobinArrayIndex(initialOffset) {\r\n        this._offset = initialOffset || 0;\r\n    }\r\n    /**\r\n     * Get next index for an array with given length.\r\n     * @param {number} arrayLength the array length.\r\n     * @return {number} index in the array.\r\n     */\r\n    RoundRobinArrayIndex.prototype.next = function (arrayLength) {\r\n        if (arrayLength === 0) {\r\n            return -1;\r\n        }\r\n        var nextOffset = this._offset;\r\n        this._offset += 1;\r\n        if (this._offset === Number.MAX_SAFE_INTEGER) {\r\n            this._offset = 0;\r\n        }\r\n        return nextOffset % arrayLength;\r\n    };\r\n    return RoundRobinArrayIndex;\r\n}());\r\nexports.default = RoundRobinArrayIndex;\r\n"]},"metadata":{},"sourceType":"script"}