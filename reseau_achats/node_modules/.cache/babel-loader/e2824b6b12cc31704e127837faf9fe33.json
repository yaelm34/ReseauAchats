{"ast":null,"code":"/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nexport function distinctUntilChanged(compare, keySelector) {\n  return function (source) {\n    return source.lift(new DistinctUntilChangedOperator(compare, keySelector));\n  };\n}\n\nvar DistinctUntilChangedOperator = /*@__PURE__*/function () {\n  function DistinctUntilChangedOperator(compare, keySelector) {\n    this.compare = compare;\n    this.keySelector = keySelector;\n  }\n\n  DistinctUntilChangedOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new DistinctUntilChangedSubscriber(subscriber, this.compare, this.keySelector));\n  };\n\n  return DistinctUntilChangedOperator;\n}();\n\nvar DistinctUntilChangedSubscriber = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(DistinctUntilChangedSubscriber, _super);\n\n  function DistinctUntilChangedSubscriber(destination, compare, keySelector) {\n    var _this = _super.call(this, destination) || this;\n\n    _this.keySelector = keySelector;\n    _this.hasKey = false;\n\n    if (typeof compare === 'function') {\n      _this.compare = compare;\n    }\n\n    return _this;\n  }\n\n  DistinctUntilChangedSubscriber.prototype.compare = function (x, y) {\n    return x === y;\n  };\n\n  DistinctUntilChangedSubscriber.prototype._next = function (value) {\n    var key;\n\n    try {\n      var keySelector = this.keySelector;\n      key = keySelector ? keySelector(value) : value;\n    } catch (err) {\n      return this.destination.error(err);\n    }\n\n    var result = false;\n\n    if (this.hasKey) {\n      try {\n        var compare = this.compare;\n        result = compare(this.key, key);\n      } catch (err) {\n        return this.destination.error(err);\n      }\n    } else {\n      this.hasKey = true;\n    }\n\n    if (!result) {\n      this.key = key;\n      this.destination.next(value);\n    }\n  };\n\n  return DistinctUntilChangedSubscriber;\n}(Subscriber);","map":{"version":3,"mappings":";AACA,OAAO,KAAEA,OAAT,MAAqB,OAArB;AA8DA,SAAMC,UAAN,QAAgB,eAAhB;OACE,SAAOC,oBAAP,CAAkCC,OAAlC,EAAyCC,WAAzC,EAAkD;AACnD;AAAA;AAAA;AAED;;IACEC,4CAAoD,YACR;WADxBA,6BAAgCF;AAChC;AACnB;AAED;;8BAC0B,WAAIG,6BAA+BC,MAA/B,EAA2C;AACxE;AACH;;AARA,SAQCF,4BARD;AAeA,CAdsD;;IAcHG,wDAAaC,MAAb,EAAa;AAI9DT,oDAAYS,MAAZ;;WAAAD,+BAGQE,aAAYP,SAInBC;AALmB,sBAAW,KAAX,uBAAwB,IAAxB;;AAJZO,wBAAuBP,WAAvB;AAMNO,SAAI,OAAJ,GAAW,KAAX;;QACE,OAAKR,OAAL,KAAe,YAAQ;AACxBQ;;;AACF;AAEO;;gCACS;AAChB;AAES;;gCACK;AACb,QAAIC,GAAJ;;QACU;AACR,UAAGR,WAAG,GAAY,KAAEA,WAApB;AACDQ;AAAC,aACAC,KAAO;AACR;AACD;;AACA,QAAIC,MAAK,QAAT;;QACE,KAAIC;UACM;AACR,mBAAS,QAAQZ,OAAjB;AACDW;AAAC,eACAD,KAAO;AACR;AACF;WACC;AACD;AACD;;QACE,SAAQ;AACR,WAAKD,GAAL,GAAKA,GAAL;AACD;AACF;AACH;;AAzCmD;CAAA","names":["tslib_1","Subscriber","distinctUntilChanged","compare","keySelector","DistinctUntilChangedOperator","call","source","DistinctUntilChangedSubscriber","_super","destination","_this","key","err","result","hasKey"],"sources":["D:\\Documents\\EMA\\Mines A3\\NoSQL\\ReseauAchats\\reseau_achats\\node_modules\\rxjs\\src\\internal\\operators\\distinctUntilChanged.ts"],"sourcesContent":["import { Operator } from '../Operator';\r\nimport { Subscriber } from '../Subscriber';\r\nimport { Observable } from '../Observable';\r\nimport { MonoTypeOperatorFunction, TeardownLogic } from '../types';\r\n\r\n/* tslint:disable:max-line-length */\r\nexport function distinctUntilChanged<T>(compare?: (x: T, y: T) => boolean): MonoTypeOperatorFunction<T>;\r\nexport function distinctUntilChanged<T, K>(compare: (x: K, y: K) => boolean, keySelector: (x: T) => K): MonoTypeOperatorFunction<T>;\r\n/* tslint:enable:max-line-length */\r\n\r\n/**\r\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from the previous item.\r\n *\r\n * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.\r\n *\r\n * If a comparator function is not provided, an equality check is used by default.\r\n *\r\n * ## Example\r\n * A simple example with numbers\r\n * ```ts\r\n * import { of } from 'rxjs';\r\n * import { distinctUntilChanged } from 'rxjs/operators';\r\n *\r\n * of(1, 1, 2, 2, 2, 1, 1, 2, 3, 3, 4).pipe(\r\n *     distinctUntilChanged(),\r\n *   )\r\n *   .subscribe(x => console.log(x)); // 1, 2, 1, 2, 3, 4\r\n * ```\r\n *\r\n * An example using a compare function\r\n * ```typescript\r\n * import { of } from 'rxjs';\r\n * import { distinctUntilChanged } from 'rxjs/operators';\r\n *\r\n * interface Person {\r\n *    age: number,\r\n *    name: string\r\n * }\r\n *\r\n * of<Person>(\r\n *     { age: 4, name: 'Foo'},\r\n *     { age: 7, name: 'Bar'},\r\n *     { age: 5, name: 'Foo'},\r\n *     { age: 6, name: 'Foo'},\r\n *   ).pipe(\r\n *     distinctUntilChanged((p: Person, q: Person) => p.name === q.name),\r\n *   )\r\n *   .subscribe(x => console.log(x));\r\n *\r\n * // displays:\r\n * // { age: 4, name: 'Foo' }\r\n * // { age: 7, name: 'Bar' }\r\n * // { age: 5, name: 'Foo' }\r\n * ```\r\n *\r\n * @see {@link distinct}\r\n * @see {@link distinctUntilKeyChanged}\r\n *\r\n * @param {function} [compare] Optional comparison function called to test if an item is distinct from the previous item in the source.\r\n * @return {Observable} An Observable that emits items from the source Observable with distinct values.\r\n * @method distinctUntilChanged\r\n * @owner Observable\r\n */\r\nexport function distinctUntilChanged<T, K>(compare?: (x: K, y: K) => boolean, keySelector?: (x: T) => K): MonoTypeOperatorFunction<T> {\r\n  return (source: Observable<T>) => source.lift(new DistinctUntilChangedOperator<T, K>(compare, keySelector));\r\n}\r\n\r\nclass DistinctUntilChangedOperator<T, K> implements Operator<T, T> {\r\n  constructor(private compare: (x: K, y: K) => boolean,\r\n              private keySelector: (x: T) => K) {\r\n  }\r\n\r\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\r\n    return source.subscribe(new DistinctUntilChangedSubscriber(subscriber, this.compare, this.keySelector));\r\n  }\r\n}\r\n\r\n/**\r\n * We need this JSDoc comment for affecting ESDoc.\r\n * @ignore\r\n * @extends {Ignored}\r\n */\r\nclass DistinctUntilChangedSubscriber<T, K> extends Subscriber<T> {\r\n  private key: K;\r\n  private hasKey: boolean = false;\r\n\r\n  constructor(destination: Subscriber<T>,\r\n              compare: (x: K, y: K) => boolean,\r\n              private keySelector: (x: T) => K) {\r\n    super(destination);\r\n    if (typeof compare === 'function') {\r\n      this.compare = compare;\r\n    }\r\n  }\r\n\r\n  private compare(x: any, y: any): boolean {\r\n    return x === y;\r\n  }\r\n\r\n  protected _next(value: T): void {\r\n    let key: any;\r\n    try {\r\n      const { keySelector } = this;\r\n      key = keySelector ? keySelector(value) : value;\r\n    } catch (err) {\r\n      return this.destination.error(err);\r\n    }\r\n    let result = false;\r\n    if (this.hasKey) {\r\n      try {\r\n        const { compare } = this;\r\n        result = compare(this.key, key);\r\n      } catch (err) {\r\n        return this.destination.error(err);\r\n      }\r\n    } else {\r\n      this.hasKey = true;\r\n    }\r\n    if (!result) {\r\n      this.key = key;\r\n      this.destination.next(value);\r\n    }\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}