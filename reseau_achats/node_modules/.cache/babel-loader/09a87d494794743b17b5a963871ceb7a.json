{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _rxjs = require(\"rxjs\");\n\nvar _operators = require(\"rxjs/operators\");\n\nvar _resultRx = _interopRequireDefault(require(\"./result-rx\"));\n\nvar _neo4jDriverCore = require(\"neo4j-driver-core\");\n\nvar _transactionRx = _interopRequireDefault(require(\"./transaction-rx\"));\n\nvar _retryLogicRx = _interopRequireDefault(require(\"./internal/retry-logic-rx\"));\n/**\n * Copyright (c) \"Neo4j\"\n * Neo4j Sweden AB [http://neo4j.com]\n *\n * This file is part of Neo4j.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nvar _internal$constants = _neo4jDriverCore.internal.constants,\n    ACCESS_MODE_READ = _internal$constants.ACCESS_MODE_READ,\n    ACCESS_MODE_WRITE = _internal$constants.ACCESS_MODE_WRITE,\n    TxConfig = _neo4jDriverCore.internal.txConfig.TxConfig;\n/**\n * A Reactive session, which provides the same functionality as {@link Session} but through a Reactive API.\n */\n\nvar RxSession = /*#__PURE__*/function () {\n  /**\n   * Constructs a reactive session with given default session instance and provided driver configuration.\n   *\n   * @protected\n   * @param {Object} param - Object parameter\n   * @param {Session} param.session - The underlying session instance to relay requests\n   */\n  function RxSession() {\n    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        session = _ref.session,\n        config = _ref.config;\n\n    (0, _classCallCheck2[\"default\"])(this, RxSession);\n    this._session = session;\n    this._retryLogic = _createRetryLogic(config);\n  }\n  /**\n   * Creates a reactive result that will execute the  query with the provided parameters and the provided\n   * transaction configuration that applies to the underlying auto-commit transaction.\n   *\n   * @public\n   * @param {string} query - Query to be executed.\n   * @param {Object} parameters - Parameter values to use in query execution.\n   * @param {TransactionConfig} transactionConfig - Configuration for the new auto-commit transaction.\n   * @returns {RxResult} - A reactive result\n   */\n\n\n  (0, _createClass2[\"default\"])(RxSession, [{\n    key: \"run\",\n    value: function run(query, parameters, transactionConfig) {\n      var _this = this;\n\n      return new _resultRx[\"default\"](new _rxjs.Observable(function (observer) {\n        try {\n          observer.next(_this._session.run(query, parameters, transactionConfig));\n          observer.complete();\n        } catch (err) {\n          observer.error(err);\n        }\n\n        return function () {};\n      }));\n    }\n    /**\n     * Starts a new explicit transaction with the provided transaction configuration.\n     *\n     * @public\n     * @param {TransactionConfig} transactionConfig - Configuration for the new transaction.\n     * @returns {Observable<RxTransaction>} - A reactive stream that will generate at most **one** RxTransaction instance.\n     */\n\n  }, {\n    key: \"beginTransaction\",\n    value: function beginTransaction(transactionConfig) {\n      return this._beginTransaction(this._session._mode, transactionConfig);\n    }\n    /**\n     * Executes the provided unit of work in a {@link READ} reactive transaction which is created with the provided\n     * transaction configuration.\n     * @public\n     * @param {function(txc: RxTransaction): Observable} work - A unit of work to be executed.\n     * @param {TransactionConfig} transactionConfig - Configuration for the enclosing transaction created by the driver.\n     * @returns {Observable} - A reactive stream returned by the unit of work.\n     */\n\n  }, {\n    key: \"readTransaction\",\n    value: function readTransaction(work, transactionConfig) {\n      return this._runTransaction(ACCESS_MODE_READ, work, transactionConfig);\n    }\n    /**\n     * Executes the provided unit of work in a {@link WRITE} reactive transaction which is created with the provided\n     * transaction configuration.\n     * @public\n     * @param {function(txc: RxTransaction): Observable} work - A unit of work to be executed.\n     * @param {TransactionConfig} transactionConfig - Configuration for the enclosing transaction created by the driver.\n     * @returns {Observable} - A reactive stream returned by the unit of work.\n     */\n\n  }, {\n    key: \"writeTransaction\",\n    value: function writeTransaction(work, transactionConfig) {\n      return this._runTransaction(ACCESS_MODE_WRITE, work, transactionConfig);\n    }\n    /**\n     * Closes this reactive session.\n     *\n     * @public\n     * @returns {Observable} - An empty reactive stream\n     */\n\n  }, {\n    key: \"close\",\n    value: function close() {\n      var _this2 = this;\n\n      return new _rxjs.Observable(function (observer) {\n        _this2._session.close().then(function () {\n          observer.complete();\n        })[\"catch\"](function (err) {\n          return observer.error(err);\n        });\n      });\n    }\n    /**\n     * Returns the bookmark received following the last successfully completed query, which is executed\n     * either in an {@link RxTransaction} obtained from this session instance or directly through one of\n     * the {@link RxSession#run} method of this session instance.\n     *\n     * If no bookmark was received or if this transaction was rolled back, the bookmark value will not be\n     * changed.\n     *\n     * @public\n     * @returns {string}\n     */\n\n  }, {\n    key: \"lastBookmark\",\n    value: function lastBookmark() {\n      return this._session.lastBookmark();\n    }\n    /**\n     * @private\n     */\n\n  }, {\n    key: \"_beginTransaction\",\n    value: function _beginTransaction(accessMode, transactionConfig) {\n      var _this3 = this;\n\n      var txConfig = TxConfig.empty();\n\n      if (transactionConfig) {\n        txConfig = new TxConfig(transactionConfig);\n      }\n\n      return new _rxjs.Observable(function (observer) {\n        try {\n          observer.next(new _transactionRx[\"default\"](_this3._session._beginTransaction(accessMode, txConfig)));\n          observer.complete();\n        } catch (err) {\n          observer.error(err);\n        }\n\n        return function () {};\n      });\n    }\n    /**\n     * @private\n     */\n\n  }, {\n    key: \"_runTransaction\",\n    value: function _runTransaction(accessMode, work, transactionConfig) {\n      var txConfig = TxConfig.empty();\n\n      if (transactionConfig) {\n        txConfig = new TxConfig(transactionConfig);\n      }\n\n      return this._retryLogic.retry(this._beginTransaction(accessMode, transactionConfig).pipe((0, _operators.flatMap)(function (txc) {\n        return (0, _rxjs.defer)(function () {\n          try {\n            return work(txc);\n          } catch (err) {\n            return (0, _rxjs.throwError)(err);\n          }\n        }).pipe((0, _operators.catchError)(function (err) {\n          return txc.rollback().pipe((0, _operators.concat)((0, _rxjs.throwError)(err)));\n        }), (0, _operators.concat)(txc.commit()));\n      })));\n    }\n  }]);\n  return RxSession;\n}();\n\nexports[\"default\"] = RxSession;\n\nfunction _createRetryLogic(config) {\n  var maxRetryTimeout = config && config.maxTransactionRetryTime ? config.maxTransactionRetryTime : null;\n  return new _retryLogicRx[\"default\"]({\n    maxRetryTimeout: maxRetryTimeout\n  });\n}","map":{"version":3,"sources":["D:/Documents/EMA/Mines A3/NoSQL/ReseauAchats/reseau_achats/node_modules/neo4j-driver/lib/session-rx.js"],"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","_classCallCheck2","_createClass2","_rxjs","_operators","_resultRx","_neo4jDriverCore","_transactionRx","_retryLogicRx","_internal$constants","internal","constants","ACCESS_MODE_READ","ACCESS_MODE_WRITE","TxConfig","txConfig","RxSession","_ref","arguments","length","undefined","session","config","_session","_retryLogic","_createRetryLogic","key","run","query","parameters","transactionConfig","_this","Observable","observer","next","complete","err","error","beginTransaction","_beginTransaction","_mode","readTransaction","work","_runTransaction","writeTransaction","close","_this2","then","lastBookmark","accessMode","_this3","empty","retry","pipe","flatMap","txc","defer","throwError","catchError","rollback","concat","commit","maxRetryTimeout","maxTransactionRetryTime"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _rxjs = require(\"rxjs\");\n\nvar _operators = require(\"rxjs/operators\");\n\nvar _resultRx = _interopRequireDefault(require(\"./result-rx\"));\n\nvar _neo4jDriverCore = require(\"neo4j-driver-core\");\n\nvar _transactionRx = _interopRequireDefault(require(\"./transaction-rx\"));\n\nvar _retryLogicRx = _interopRequireDefault(require(\"./internal/retry-logic-rx\"));\n\n/**\n * Copyright (c) \"Neo4j\"\n * Neo4j Sweden AB [http://neo4j.com]\n *\n * This file is part of Neo4j.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar _internal$constants = _neo4jDriverCore.internal.constants,\n    ACCESS_MODE_READ = _internal$constants.ACCESS_MODE_READ,\n    ACCESS_MODE_WRITE = _internal$constants.ACCESS_MODE_WRITE,\n    TxConfig = _neo4jDriverCore.internal.txConfig.TxConfig;\n/**\n * A Reactive session, which provides the same functionality as {@link Session} but through a Reactive API.\n */\n\nvar RxSession = /*#__PURE__*/function () {\n  /**\n   * Constructs a reactive session with given default session instance and provided driver configuration.\n   *\n   * @protected\n   * @param {Object} param - Object parameter\n   * @param {Session} param.session - The underlying session instance to relay requests\n   */\n  function RxSession() {\n    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        session = _ref.session,\n        config = _ref.config;\n\n    (0, _classCallCheck2[\"default\"])(this, RxSession);\n    this._session = session;\n    this._retryLogic = _createRetryLogic(config);\n  }\n  /**\n   * Creates a reactive result that will execute the  query with the provided parameters and the provided\n   * transaction configuration that applies to the underlying auto-commit transaction.\n   *\n   * @public\n   * @param {string} query - Query to be executed.\n   * @param {Object} parameters - Parameter values to use in query execution.\n   * @param {TransactionConfig} transactionConfig - Configuration for the new auto-commit transaction.\n   * @returns {RxResult} - A reactive result\n   */\n\n\n  (0, _createClass2[\"default\"])(RxSession, [{\n    key: \"run\",\n    value: function run(query, parameters, transactionConfig) {\n      var _this = this;\n\n      return new _resultRx[\"default\"](new _rxjs.Observable(function (observer) {\n        try {\n          observer.next(_this._session.run(query, parameters, transactionConfig));\n          observer.complete();\n        } catch (err) {\n          observer.error(err);\n        }\n\n        return function () {};\n      }));\n    }\n    /**\n     * Starts a new explicit transaction with the provided transaction configuration.\n     *\n     * @public\n     * @param {TransactionConfig} transactionConfig - Configuration for the new transaction.\n     * @returns {Observable<RxTransaction>} - A reactive stream that will generate at most **one** RxTransaction instance.\n     */\n\n  }, {\n    key: \"beginTransaction\",\n    value: function beginTransaction(transactionConfig) {\n      return this._beginTransaction(this._session._mode, transactionConfig);\n    }\n    /**\n     * Executes the provided unit of work in a {@link READ} reactive transaction which is created with the provided\n     * transaction configuration.\n     * @public\n     * @param {function(txc: RxTransaction): Observable} work - A unit of work to be executed.\n     * @param {TransactionConfig} transactionConfig - Configuration for the enclosing transaction created by the driver.\n     * @returns {Observable} - A reactive stream returned by the unit of work.\n     */\n\n  }, {\n    key: \"readTransaction\",\n    value: function readTransaction(work, transactionConfig) {\n      return this._runTransaction(ACCESS_MODE_READ, work, transactionConfig);\n    }\n    /**\n     * Executes the provided unit of work in a {@link WRITE} reactive transaction which is created with the provided\n     * transaction configuration.\n     * @public\n     * @param {function(txc: RxTransaction): Observable} work - A unit of work to be executed.\n     * @param {TransactionConfig} transactionConfig - Configuration for the enclosing transaction created by the driver.\n     * @returns {Observable} - A reactive stream returned by the unit of work.\n     */\n\n  }, {\n    key: \"writeTransaction\",\n    value: function writeTransaction(work, transactionConfig) {\n      return this._runTransaction(ACCESS_MODE_WRITE, work, transactionConfig);\n    }\n    /**\n     * Closes this reactive session.\n     *\n     * @public\n     * @returns {Observable} - An empty reactive stream\n     */\n\n  }, {\n    key: \"close\",\n    value: function close() {\n      var _this2 = this;\n\n      return new _rxjs.Observable(function (observer) {\n        _this2._session.close().then(function () {\n          observer.complete();\n        })[\"catch\"](function (err) {\n          return observer.error(err);\n        });\n      });\n    }\n    /**\n     * Returns the bookmark received following the last successfully completed query, which is executed\n     * either in an {@link RxTransaction} obtained from this session instance or directly through one of\n     * the {@link RxSession#run} method of this session instance.\n     *\n     * If no bookmark was received or if this transaction was rolled back, the bookmark value will not be\n     * changed.\n     *\n     * @public\n     * @returns {string}\n     */\n\n  }, {\n    key: \"lastBookmark\",\n    value: function lastBookmark() {\n      return this._session.lastBookmark();\n    }\n    /**\n     * @private\n     */\n\n  }, {\n    key: \"_beginTransaction\",\n    value: function _beginTransaction(accessMode, transactionConfig) {\n      var _this3 = this;\n\n      var txConfig = TxConfig.empty();\n\n      if (transactionConfig) {\n        txConfig = new TxConfig(transactionConfig);\n      }\n\n      return new _rxjs.Observable(function (observer) {\n        try {\n          observer.next(new _transactionRx[\"default\"](_this3._session._beginTransaction(accessMode, txConfig)));\n          observer.complete();\n        } catch (err) {\n          observer.error(err);\n        }\n\n        return function () {};\n      });\n    }\n    /**\n     * @private\n     */\n\n  }, {\n    key: \"_runTransaction\",\n    value: function _runTransaction(accessMode, work, transactionConfig) {\n      var txConfig = TxConfig.empty();\n\n      if (transactionConfig) {\n        txConfig = new TxConfig(transactionConfig);\n      }\n\n      return this._retryLogic.retry(this._beginTransaction(accessMode, transactionConfig).pipe((0, _operators.flatMap)(function (txc) {\n        return (0, _rxjs.defer)(function () {\n          try {\n            return work(txc);\n          } catch (err) {\n            return (0, _rxjs.throwError)(err);\n          }\n        }).pipe((0, _operators.catchError)(function (err) {\n          return txc.rollback().pipe((0, _operators.concat)((0, _rxjs.throwError)(err)));\n        }), (0, _operators.concat)(txc.commit()));\n      })));\n    }\n  }]);\n  return RxSession;\n}();\n\nexports[\"default\"] = RxSession;\n\nfunction _createRetryLogic(config) {\n  var maxRetryTimeout = config && config.maxTransactionRetryTime ? config.maxTransactionRetryTime : null;\n  return new _retryLogicRx[\"default\"]({\n    maxRetryTimeout: maxRetryTimeout\n  });\n}"]},"metadata":{},"sourceType":"script"}