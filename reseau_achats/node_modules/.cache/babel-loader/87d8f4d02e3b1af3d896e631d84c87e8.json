{"ast":null,"code":"/** PURE_IMPORTS_START tslib,_innerSubscribe PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { SimpleOuterSubscriber, innerSubscribe, SimpleInnerSubscriber } from '../innerSubscribe';\nexport function sample(notifier) {\n  return function (source) {\n    return source.lift(new SampleOperator(notifier));\n  };\n}\n\nvar SampleOperator = /*@__PURE__*/function () {\n  function SampleOperator(notifier) {\n    this.notifier = notifier;\n  }\n\n  SampleOperator.prototype.call = function (subscriber, source) {\n    var sampleSubscriber = new SampleSubscriber(subscriber);\n    var subscription = source.subscribe(sampleSubscriber);\n    subscription.add(innerSubscribe(this.notifier, new SimpleInnerSubscriber(sampleSubscriber)));\n    return subscription;\n  };\n\n  return SampleOperator;\n}();\n\nvar SampleSubscriber = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(SampleSubscriber, _super);\n\n  function SampleSubscriber() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.hasValue = false;\n    return _this;\n  }\n\n  SampleSubscriber.prototype._next = function (value) {\n    this.value = value;\n    this.hasValue = true;\n  };\n\n  SampleSubscriber.prototype.notifyNext = function () {\n    this.emitValue();\n  };\n\n  SampleSubscriber.prototype.notifyComplete = function () {\n    this.emitValue();\n  };\n\n  SampleSubscriber.prototype.emitValue = function () {\n    if (this.hasValue) {\n      this.hasValue = false;\n      this.destination.next(this.value);\n    }\n  };\n\n  return SampleSubscriber;\n}(SimpleOuterSubscriber);","map":{"version":3,"mappings":";AAKA,OAAO,KAAEA,OAAT,MAAS,OAAT;AA0CA,SAAMC,qBAAN,EAAmDC,cAAnD,EAAmDC,qBAAnD,QAAmD,mBAAnD;OACE,SAAOC,MAAP,CAAQC,QAAR,EAAkC;AACnC;AAAA;AAAA;AAED;;IACEC,8BAA6C;WAAzBA,yBAAyB;AAC5C;AAED;;gBACQ,WAAgBC,OAAO,sBAAiBC,MAAjB,EAA6B;AAC1D,QAAMC,gBAAe,OAAOC,gBAAP,CAAiBC,UAAjB,CAArB;AACA,oBAAgB,GAACH,iBAAmBC,gBAAnB,CAAjB;AACAG,gBAAO,IAAP,CAAOV,cAAa,4DAApB;AACD;AACH;;AAVA,SAUCI,cAVD;AAiBA,CAhB+C;;IAgBVI,0CAA2BG,MAA3B,EAA2B;AAAhEb;;WAAAU;AAEU,sBAAoB,KAAM,IAA1B,IAA0BG,6BAA1B,IAA0B,IAA1B;;;AAqBT;AAnBW;;kBACE,CAAGC,UAAMC;AACnB,SAAKC,KAAL,GAAaA,KAAb;AACD;AAED;;kBACO,WAAYC;AAClB;AAED;;kBACO,WAAYC;AAClB;AAED;;kBACW,WAAUC;QACjB,KAAKC,UAAQ;AACb,WAAKA,QAAL,GAAgB,KAAhB;AACD;AACF;AACH;;AAvBqC;CAAA","names":["tslib_1","SimpleOuterSubscriber","innerSubscribe","SimpleInnerSubscriber","sample","notifier","SampleOperator","call","source","sampleSubscriber","SampleSubscriber","subscriber","subscription","_super","prototype","_next","value","notifyNext","notifyComplete","emitValue","hasValue"],"sources":["D:\\Documents\\EMA\\Mines A3\\NoSQL\\ReseauAchats\\reseau_achats\\node_modules\\rxjs\\src\\internal\\operators\\sample.ts"],"sourcesContent":["import { Operator } from '../Operator';\r\nimport { Observable } from '../Observable';\r\nimport { Subscriber } from '../Subscriber';\r\n\r\nimport { MonoTypeOperatorFunction, TeardownLogic } from '../types';\r\nimport { SimpleOuterSubscriber, innerSubscribe, SimpleInnerSubscriber } from '../innerSubscribe';\r\n\r\n/**\r\n * Emits the most recently emitted value from the source Observable whenever\r\n * another Observable, the `notifier`, emits.\r\n *\r\n * <span class=\"informal\">It's like {@link sampleTime}, but samples whenever\r\n * the `notifier` Observable emits something.</span>\r\n *\r\n * ![](sample.png)\r\n *\r\n * Whenever the `notifier` Observable emits a value or completes, `sample`\r\n * looks at the source Observable and emits whichever value it has most recently\r\n * emitted since the previous sampling, unless the source has not emitted\r\n * anything since the previous sampling. The `notifier` is subscribed to as soon\r\n * as the output Observable is subscribed.\r\n *\r\n * ## Example\r\n * On every click, sample the most recent \"seconds\" timer\r\n * ```ts\r\n * import { fromEvent, interval } from 'rxjs';\r\n * import { sample } from 'rxjs/operators';\r\n *\r\n * const seconds = interval(1000);\r\n * const clicks = fromEvent(document, 'click');\r\n * const result = seconds.pipe(sample(clicks));\r\n * result.subscribe(x => console.log(x));\r\n * ```\r\n *\r\n * @see {@link audit}\r\n * @see {@link debounce}\r\n * @see {@link sampleTime}\r\n * @see {@link throttle}\r\n *\r\n * @param {Observable<any>} notifier The Observable to use for sampling the\r\n * source Observable.\r\n * @return {Observable<T>} An Observable that emits the results of sampling the\r\n * values emitted by the source Observable whenever the notifier Observable\r\n * emits value or completes.\r\n * @method sample\r\n * @owner Observable\r\n */\r\nexport function sample<T>(notifier: Observable<any>): MonoTypeOperatorFunction<T> {\r\n  return (source: Observable<T>) => source.lift(new SampleOperator(notifier));\r\n}\r\n\r\nclass SampleOperator<T> implements Operator<T, T> {\r\n  constructor(private notifier: Observable<any>) {\r\n  }\r\n\r\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\r\n    const sampleSubscriber = new SampleSubscriber(subscriber);\r\n    const subscription = source.subscribe(sampleSubscriber);\r\n    subscription.add(innerSubscribe(this.notifier, new SimpleInnerSubscriber(sampleSubscriber)));\r\n    return subscription;\r\n  }\r\n}\r\n\r\n/**\r\n * We need this JSDoc comment for affecting ESDoc.\r\n * @ignore\r\n * @extends {Ignored}\r\n */\r\nclass SampleSubscriber<T, R> extends SimpleOuterSubscriber<T, R> {\r\n  private value?: T;\r\n  private hasValue: boolean = false;\r\n\r\n  protected _next(value: T) {\r\n    this.value = value;\r\n    this.hasValue = true;\r\n  }\r\n\r\n  notifyNext(): void {\r\n    this.emitValue();\r\n  }\r\n\r\n  notifyComplete(): void {\r\n    this.emitValue();\r\n  }\r\n\r\n  emitValue() {\r\n    if (this.hasValue) {\r\n      this.hasValue = false;\r\n      this.destination.next!(this.value!);\r\n    }\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}