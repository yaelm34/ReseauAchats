{"ast":null,"code":"/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nexport function refCount() {\n  return function refCountOperatorFunction(source) {\n    return source.lift(new RefCountOperator(source));\n  };\n}\n\nvar RefCountOperator = /*@__PURE__*/function () {\n  function RefCountOperator(connectable) {\n    this.connectable = connectable;\n  }\n\n  RefCountOperator.prototype.call = function (subscriber, source) {\n    var connectable = this.connectable;\n    connectable._refCount++;\n    var refCounter = new RefCountSubscriber(subscriber, connectable);\n    var subscription = source.subscribe(refCounter);\n\n    if (!refCounter.closed) {\n      refCounter.connection = connectable.connect();\n    }\n\n    return subscription;\n  };\n\n  return RefCountOperator;\n}();\n\nvar RefCountSubscriber = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(RefCountSubscriber, _super);\n\n  function RefCountSubscriber(destination, connectable) {\n    var _this = _super.call(this, destination) || this;\n\n    _this.connectable = connectable;\n    return _this;\n  }\n\n  RefCountSubscriber.prototype._unsubscribe = function () {\n    var connectable = this.connectable;\n\n    if (!connectable) {\n      this.connection = null;\n      return;\n    }\n\n    this.connectable = null;\n    var refCount = connectable._refCount;\n\n    if (refCount <= 0) {\n      this.connection = null;\n      return;\n    }\n\n    connectable._refCount = refCount - 1;\n\n    if (refCount > 1) {\n      this.connection = null;\n      return;\n    }\n\n    var connection = this.connection;\n    var sharedConnection = connectable._connection;\n    this.connection = null;\n\n    if (sharedConnection && (!connection || sharedConnection === connection)) {\n      sharedConnection.unsubscribe();\n    }\n  };\n\n  return RefCountSubscriber;\n}(Subscriber);","map":{"version":3,"mappings":";AACA,OAAO,KAAEA,OAAT,MAAqB,OAArB;AA2DA,SAAMC,UAAN,QAAwB,eAAxB;OACE,SAAOC,QAAP,GAAgB;SACd,SAAOC,wBAAP,CAAuBC,MAAvB,EAAwC;AACT;AAClC;AAED;;IACEC,gCAAoB,YAAqC;WAArCA,8BAAqC;AACxD;AACD;;kBAEU,4BAAqBC,UAArB,EAAqBF,MAArB,EAAqB;AACtB,mBAAa,QAAWG,WAAxB;AAEPA,eAAM,UAAN;AACA,QAAMC,aAAY,IAAGC,kBAAH,CAAoBH,UAApB,EAAgCC,WAAhC,CAAlB;AAEA,QAAIG,YAAY,SAAQ,UAAR,CAAQF,UAAR,CAAhB;;QACS,WAAY;AACpBA;AAED;;AACD;AACH;;AAjBA,SAiBCH,gBAjBD;AAmBA,CAlBsB;;IAkBcI,4CAAaE,MAAb,EAAa;AAI/CX,wCAAYW,MAAZ;;WAAAF,mBAEEG,aAAML,aAAY;AADA,sBAAW,KAAX,uBAAqC,IAArC;;;AAEnB;AAES;;oBAEA,0BAAqB;AAC7B,QAAIA,WAAC,GAAa,gBAAlB;;QACE,cAAK;AACL,wBAAO,IAAP;AACD;AAED;;AACA,SAAMA,WAAN,GAAwB,IAAxB;AACA,QAAIL,QAAQ,cAAO,UAAnB;;QACEA,QAAK,OAAU;AACf,wBAAO,IAAP;AACD;AAEM;;AACPK,eAAI,CAAQM,SAAZ,GAAkBX,YAAlB;;QACEA,QAAK;AACL,wBAAO,IAAP;AACD;AA0BO;;AACR,QAAMY,kBAAgBA,UAAtB;AACA,QAAIC,gBAAc,GAAKR,uBAAvB;AAEA,SAAIO,UAAJ,GAAI,IAAJ;;QACEC,gBAAgB,KAAC,eAAcA,+BAAf,GAAe;AAChCA;AACF;AACH;;AA9DoC;CAAA","names":["tslib_1","Subscriber","refCount","refCountOperatorFunction","source","RefCountOperator","subscriber","connectable","refCounter","RefCountSubscriber","subscription","_super","destination","_refCount","connection","sharedConnection"],"sources":["D:\\Documents\\EMA\\Mines A3\\NoSQL\\ReseauAchats\\reseau_achats\\node_modules\\rxjs\\src\\internal\\operators\\refCount.ts"],"sourcesContent":["import { Operator } from '../Operator';\r\nimport { Subscriber } from '../Subscriber';\r\nimport { Subscription } from '../Subscription';\r\nimport { MonoTypeOperatorFunction, TeardownLogic } from '../types';\r\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\r\nimport { Observable } from '../Observable';\r\n\r\n/**\r\n * Make a {@link ConnectableObservable} behave like a ordinary observable and automates the way\r\n * you can connect to it.\r\n *\r\n * Internally it counts the subscriptions to the observable and subscribes (only once) to the source if\r\n * the number of subscriptions is larger than 0. If the number of subscriptions is smaller than 1, it\r\n * unsubscribes from the source. This way you can make sure that everything before the *published*\r\n * refCount has only a single subscription independently of the number of subscribers to the target\r\n * observable.\r\n *\r\n * Note that using the {@link share} operator is exactly the same as using the *publish* operator\r\n * (making the observable hot) and the *refCount* operator in a sequence.\r\n *\r\n * ![](refCount.png)\r\n *\r\n * ## Example\r\n *\r\n * In the following example there are two intervals turned into connectable observables\r\n * by using the *publish* operator. The first one uses the *refCount* operator, the\r\n * second one does not use it. You will notice that a connectable observable does nothing\r\n * until you call its connect function.\r\n *\r\n * ```ts\r\n * import { interval } from 'rxjs';\r\n * import { tap, publish, refCount } from 'rxjs/operators';\r\n *\r\n * // Turn the interval observable into a ConnectableObservable (hot)\r\n * const refCountInterval = interval(400).pipe(\r\n *   tap((num) => console.log(`refCount ${num}`)),\r\n *   publish(),\r\n *   refCount()\r\n * );\r\n *\r\n * const publishedInterval = interval(400).pipe(\r\n *   tap((num) => console.log(`publish ${num}`)),\r\n *   publish()\r\n * );\r\n *\r\n * refCountInterval.subscribe();\r\n * refCountInterval.subscribe();\r\n * // 'refCount 0' -----> 'refCount 1' -----> etc\r\n * // All subscriptions will receive the same value and the tap (and\r\n * // every other operator) before the publish operator will be executed\r\n * // only once per event independently of the number of subscriptions.\r\n *\r\n * publishedInterval.subscribe();\r\n * // Nothing happens until you call .connect() on the observable.\r\n * ```\r\n *\r\n * @see {@link ConnectableObservable}\r\n * @see {@link share}\r\n * @see {@link publish}\r\n */\r\nexport function refCount<T>(): MonoTypeOperatorFunction<T> {\r\n  return function refCountOperatorFunction(source: ConnectableObservable<T>): Observable<T> {\r\n    return source.lift(new RefCountOperator(source));\r\n  } as MonoTypeOperatorFunction<T>;\r\n}\r\n\r\nclass RefCountOperator<T> implements Operator<T, T> {\r\n  constructor(private connectable: ConnectableObservable<T>) {\r\n  }\r\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\r\n\r\n    const { connectable } = this;\r\n    (<any> connectable)._refCount++;\r\n\r\n    const refCounter = new RefCountSubscriber(subscriber, connectable);\r\n    const subscription = source.subscribe(refCounter);\r\n\r\n    if (!refCounter.closed) {\r\n      (<any> refCounter).connection = connectable.connect();\r\n    }\r\n\r\n    return subscription;\r\n  }\r\n}\r\n\r\nclass RefCountSubscriber<T> extends Subscriber<T> {\r\n\r\n  private connection: Subscription;\r\n\r\n  constructor(destination: Subscriber<T>,\r\n              private connectable: ConnectableObservable<T>) {\r\n    super(destination);\r\n  }\r\n\r\n  protected _unsubscribe() {\r\n\r\n    const { connectable } = this;\r\n    if (!connectable) {\r\n      this.connection = null;\r\n      return;\r\n    }\r\n\r\n    this.connectable = null;\r\n    const refCount = (<any> connectable)._refCount;\r\n    if (refCount <= 0) {\r\n      this.connection = null;\r\n      return;\r\n    }\r\n\r\n    (<any> connectable)._refCount = refCount - 1;\r\n    if (refCount > 1) {\r\n      this.connection = null;\r\n      return;\r\n    }\r\n\r\n    ///\r\n    // Compare the local RefCountSubscriber's connection Subscription to the\r\n    // connection Subscription on the shared ConnectableObservable. In cases\r\n    // where the ConnectableObservable source synchronously emits values, and\r\n    // the RefCountSubscriber's downstream Observers synchronously unsubscribe,\r\n    // execution continues to here before the RefCountOperator has a chance to\r\n    // supply the RefCountSubscriber with the shared connection Subscription.\r\n    // For example:\r\n    // ```\r\n    // range(0, 10).pipe(\r\n    //   publish(),\r\n    //   refCount(),\r\n    //   take(5),\r\n    // )\r\n    // .subscribe();\r\n    // ```\r\n    // In order to account for this case, RefCountSubscriber should only dispose\r\n    // the ConnectableObservable's shared connection Subscription if the\r\n    // connection Subscription exists, *and* either:\r\n    //   a. RefCountSubscriber doesn't have a reference to the shared connection\r\n    //      Subscription yet, or,\r\n    //   b. RefCountSubscriber's connection Subscription reference is identical\r\n    //      to the shared connection Subscription\r\n    ///\r\n    const { connection } = this;\r\n    const sharedConnection = (<any> connectable)._connection;\r\n    this.connection = null;\r\n\r\n    if (sharedConnection && (!connection || sharedConnection === connection)) {\r\n      sharedConnection.unsubscribe();\r\n    }\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}