{"ast":null,"code":"/** PURE_IMPORTS_START tslib,_Observable,_Subscriber,_Subscription,_util_ObjectUnsubscribedError,_SubjectSubscription,_internal_symbol_rxSubscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Observable } from './Observable';\nimport { Subscriber } from './Subscriber';\nimport { Subscription } from './Subscription';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\nimport { SubjectSubscription } from './SubjectSubscription';\nimport { rxSubscriber as rxSubscriberSymbol } from '../internal/symbol/rxSubscriber';\n\nvar SubjectSubscriber = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(SubjectSubscriber, _super);\n\n  function SubjectSubscriber(destination) {\n    var _this = _super.call(this, destination) || this;\n\n    _this.destination = destination;\n    return _this;\n  }\n\n  return SubjectSubscriber;\n}(Subscriber);\n\nexport { SubjectSubscriber };\n\nvar Subject = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(Subject, _super);\n\n  function Subject() {\n    var _this = _super.call(this) || this;\n\n    _this.observers = [];\n    _this.closed = false;\n    _this.isStopped = false;\n    _this.hasError = false;\n    _this.thrownError = null;\n    return _this;\n  }\n\n  Subject.prototype[rxSubscriberSymbol] = function () {\n    return new SubjectSubscriber(this);\n  };\n\n  Subject.prototype.lift = function (operator) {\n    var subject = new AnonymousSubject(this, this);\n    subject.operator = operator;\n    return subject;\n  };\n\n  Subject.prototype.next = function (value) {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n\n    if (!this.isStopped) {\n      var observers = this.observers;\n      var len = observers.length;\n      var copy = observers.slice();\n\n      for (var i = 0; i < len; i++) {\n        copy[i].next(value);\n      }\n    }\n  };\n\n  Subject.prototype.error = function (err) {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n\n    this.hasError = true;\n    this.thrownError = err;\n    this.isStopped = true;\n    var observers = this.observers;\n    var len = observers.length;\n    var copy = observers.slice();\n\n    for (var i = 0; i < len; i++) {\n      copy[i].error(err);\n    }\n\n    this.observers.length = 0;\n  };\n\n  Subject.prototype.complete = function () {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n\n    this.isStopped = true;\n    var observers = this.observers;\n    var len = observers.length;\n    var copy = observers.slice();\n\n    for (var i = 0; i < len; i++) {\n      copy[i].complete();\n    }\n\n    this.observers.length = 0;\n  };\n\n  Subject.prototype.unsubscribe = function () {\n    this.isStopped = true;\n    this.closed = true;\n    this.observers = null;\n  };\n\n  Subject.prototype._trySubscribe = function (subscriber) {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else {\n      return _super.prototype._trySubscribe.call(this, subscriber);\n    }\n  };\n\n  Subject.prototype._subscribe = function (subscriber) {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else if (this.hasError) {\n      subscriber.error(this.thrownError);\n      return Subscription.EMPTY;\n    } else if (this.isStopped) {\n      subscriber.complete();\n      return Subscription.EMPTY;\n    } else {\n      this.observers.push(subscriber);\n      return new SubjectSubscription(this, subscriber);\n    }\n  };\n\n  Subject.prototype.asObservable = function () {\n    var observable = new Observable();\n    observable.source = this;\n    return observable;\n  };\n\n  Subject.create = function (destination, source) {\n    return new AnonymousSubject(destination, source);\n  };\n\n  return Subject;\n}(Observable);\n\nexport { Subject };\n\nvar AnonymousSubject = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(AnonymousSubject, _super);\n\n  function AnonymousSubject(destination, source) {\n    var _this = _super.call(this) || this;\n\n    _this.destination = destination;\n    _this.source = source;\n    return _this;\n  }\n\n  AnonymousSubject.prototype.next = function (value) {\n    var destination = this.destination;\n\n    if (destination && destination.next) {\n      destination.next(value);\n    }\n  };\n\n  AnonymousSubject.prototype.error = function (err) {\n    var destination = this.destination;\n\n    if (destination && destination.error) {\n      this.destination.error(err);\n    }\n  };\n\n  AnonymousSubject.prototype.complete = function () {\n    var destination = this.destination;\n\n    if (destination && destination.complete) {\n      this.destination.complete();\n    }\n  };\n\n  AnonymousSubject.prototype._subscribe = function (subscriber) {\n    var source = this.source;\n\n    if (source) {\n      return this.source.subscribe(subscriber);\n    } else {\n      return Subscription.EMPTY;\n    }\n  };\n\n  return AnonymousSubject;\n}(Subject);\n\nexport { AnonymousSubject };","map":{"version":3,"mappings":"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","names":["tslib_1","Observable","Subscriber","Subscription","ObjectUnsubscribedError","SubjectSubscription","SubjectSubscriber","_super","destination","Subject","_this","rxSubscriberSymbol","prototype","lift","AnonymousSubject","subject","operator","next","observers","len","length","i","copy","error","hasError","thrownError","err","complete","unsubscribe","isStopped","closed","_trySubscribe","_subscribe","subscriber","push","asObservable","observable","source","value"],"sources":["D:\\Documents\\EMA\\Mines A3\\NoSQL\\ReseauAchats\\reseau_achats\\node_modules\\rxjs\\src\\internal\\Subject.ts"],"sourcesContent":["import { Operator } from './Operator';\r\nimport { Observable } from './Observable';\r\nimport { Subscriber } from './Subscriber';\r\nimport { Subscription } from './Subscription';\r\nimport { Observer, SubscriptionLike, TeardownLogic } from './types';\r\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\r\nimport { SubjectSubscription } from './SubjectSubscription';\r\nimport { rxSubscriber as rxSubscriberSymbol } from '../internal/symbol/rxSubscriber';\r\n\r\n/**\r\n * @class SubjectSubscriber<T>\r\n */\r\nexport class SubjectSubscriber<T> extends Subscriber<T> {\r\n  constructor(protected destination: Subject<T>) {\r\n    super(destination);\r\n  }\r\n}\r\n\r\n/**\r\n * A Subject is a special type of Observable that allows values to be\r\n * multicasted to many Observers. Subjects are like EventEmitters.\r\n *\r\n * Every Subject is an Observable and an Observer. You can subscribe to a\r\n * Subject, and you can call next to feed values as well as error and complete.\r\n *\r\n * @class Subject<T>\r\n */\r\nexport class Subject<T> extends Observable<T> implements SubscriptionLike {\r\n\r\n  [rxSubscriberSymbol]() {\r\n    return new SubjectSubscriber(this);\r\n  }\r\n\r\n  observers: Observer<T>[] = [];\r\n\r\n  closed = false;\r\n\r\n  isStopped = false;\r\n\r\n  hasError = false;\r\n\r\n  thrownError: any = null;\r\n\r\n  constructor() {\r\n    super();\r\n  }\r\n\r\n  /**@nocollapse\r\n   * @deprecated use new Subject() instead\r\n  */\r\n  static create: Function = <T>(destination: Observer<T>, source: Observable<T>): AnonymousSubject<T> => {\r\n    return new AnonymousSubject<T>(destination, source);\r\n  }\r\n\r\n  lift<R>(operator: Operator<T, R>): Observable<R> {\r\n    const subject = new AnonymousSubject(this, this);\r\n    subject.operator = <any>operator;\r\n    return <any>subject;\r\n  }\r\n\r\n  next(value?: T) {\r\n    if (this.closed) {\r\n      throw new ObjectUnsubscribedError();\r\n    }\r\n    if (!this.isStopped) {\r\n      const { observers } = this;\r\n      const len = observers.length;\r\n      const copy = observers.slice();\r\n      for (let i = 0; i < len; i++) {\r\n        copy[i].next(value);\r\n      }\r\n    }\r\n  }\r\n\r\n  error(err: any) {\r\n    if (this.closed) {\r\n      throw new ObjectUnsubscribedError();\r\n    }\r\n    this.hasError = true;\r\n    this.thrownError = err;\r\n    this.isStopped = true;\r\n    const { observers } = this;\r\n    const len = observers.length;\r\n    const copy = observers.slice();\r\n    for (let i = 0; i < len; i++) {\r\n      copy[i].error(err);\r\n    }\r\n    this.observers.length = 0;\r\n  }\r\n\r\n  complete() {\r\n    if (this.closed) {\r\n      throw new ObjectUnsubscribedError();\r\n    }\r\n    this.isStopped = true;\r\n    const { observers } = this;\r\n    const len = observers.length;\r\n    const copy = observers.slice();\r\n    for (let i = 0; i < len; i++) {\r\n      copy[i].complete();\r\n    }\r\n    this.observers.length = 0;\r\n  }\r\n\r\n  unsubscribe() {\r\n    this.isStopped = true;\r\n    this.closed = true;\r\n    this.observers = null;\r\n  }\r\n\r\n  /** @deprecated This is an internal implementation detail, do not use. */\r\n  _trySubscribe(subscriber: Subscriber<T>): TeardownLogic {\r\n    if (this.closed) {\r\n      throw new ObjectUnsubscribedError();\r\n    } else {\r\n      return super._trySubscribe(subscriber);\r\n    }\r\n  }\r\n\r\n  /** @deprecated This is an internal implementation detail, do not use. */\r\n  _subscribe(subscriber: Subscriber<T>): Subscription {\r\n    if (this.closed) {\r\n      throw new ObjectUnsubscribedError();\r\n    } else if (this.hasError) {\r\n      subscriber.error(this.thrownError);\r\n      return Subscription.EMPTY;\r\n    } else if (this.isStopped) {\r\n      subscriber.complete();\r\n      return Subscription.EMPTY;\r\n    } else {\r\n      this.observers.push(subscriber);\r\n      return new SubjectSubscription(this, subscriber);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Creates a new Observable with this Subject as the source. You can do this\r\n   * to create customize Observer-side logic of the Subject and conceal it from\r\n   * code that uses the Observable.\r\n   * @return {Observable} Observable that the Subject casts to\r\n   */\r\n  asObservable(): Observable<T> {\r\n    const observable = new Observable<T>();\r\n    (<any>observable).source = this;\r\n    return observable;\r\n  }\r\n}\r\n\r\n/**\r\n * @class AnonymousSubject<T>\r\n */\r\nexport class AnonymousSubject<T> extends Subject<T> {\r\n  constructor(protected destination?: Observer<T>, source?: Observable<T>) {\r\n    super();\r\n    this.source = source;\r\n  }\r\n\r\n  next(value: T) {\r\n    const { destination } = this;\r\n    if (destination && destination.next) {\r\n      destination.next(value);\r\n    }\r\n  }\r\n\r\n  error(err: any) {\r\n    const { destination } = this;\r\n    if (destination && destination.error) {\r\n      this.destination.error(err);\r\n    }\r\n  }\r\n\r\n  complete() {\r\n    const { destination } = this;\r\n    if (destination && destination.complete) {\r\n      this.destination.complete();\r\n    }\r\n  }\r\n\r\n  /** @deprecated This is an internal implementation detail, do not use. */\r\n  _subscribe(subscriber: Subscriber<T>): Subscription {\r\n    const { source } = this;\r\n    if (source) {\r\n      return this.source.subscribe(subscriber);\r\n    } else {\r\n      return Subscription.EMPTY;\r\n    }\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}