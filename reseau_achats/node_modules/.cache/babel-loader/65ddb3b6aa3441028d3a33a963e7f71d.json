{"ast":null,"code":"/** PURE_IMPORTS_START _mergeMap,_util_identity PURE_IMPORTS_END */\nimport { mergeMap } from './mergeMap';\nimport { identity } from '../util/identity';\nexport function mergeAll(concurrent) {\n  if (concurrent === void 0) {\n    concurrent = Number.POSITIVE_INFINITY;\n  }\n\n  return mergeMap(identity, concurrent);\n}","map":{"version":3,"mappings":"AACA;AACA,SAASA,QAAT,QAAyB,YAAzB;AA6DA,SAAMC,QAAN,QAA4B,kBAA5B;OAA4B;AAC1B,gBAAO,KAAS,KAAQ,CAAxB,EAA0B;AAC3BC","names":["mergeMap","identity","concurrent"],"sources":["D:\\Documents\\EMA\\Mines A3\\NoSQL\\ReseauAchats\\reseau_achats\\node_modules\\rxjs\\src\\internal\\operators\\mergeAll.ts"],"sourcesContent":["\r\nimport { mergeMap } from './mergeMap';\r\nimport { identity } from '../util/identity';\r\nimport { OperatorFunction, ObservableInput } from '../types';\r\n\r\n/**\r\n * Converts a higher-order Observable into a first-order Observable which\r\n * concurrently delivers all values that are emitted on the inner Observables.\r\n *\r\n * <span class=\"informal\">Flattens an Observable-of-Observables.</span>\r\n *\r\n * ![](mergeAll.png)\r\n *\r\n * `mergeAll` subscribes to an Observable that emits Observables, also known as\r\n * a higher-order Observable. Each time it observes one of these emitted inner\r\n * Observables, it subscribes to that and delivers all the values from the\r\n * inner Observable on the output Observable. The output Observable only\r\n * completes once all inner Observables have completed. Any error delivered by\r\n * a inner Observable will be immediately emitted on the output Observable.\r\n *\r\n * ## Examples\r\n * Spawn a new interval Observable for each click event, and blend their outputs as one Observable\r\n * ```ts\r\n * import { fromEvent, interval } from 'rxjs';\r\n * import { map, mergeAll } from 'rxjs/operators';\r\n *\r\n * const clicks = fromEvent(document, 'click');\r\n * const higherOrder = clicks.pipe(map((ev) => interval(1000)));\r\n * const firstOrder = higherOrder.pipe(mergeAll());\r\n * firstOrder.subscribe(x => console.log(x));\r\n * ```\r\n *\r\n * Count from 0 to 9 every second for each click, but only allow 2 concurrent timers\r\n * ```ts\r\n * import { fromEvent, interval } from 'rxjs';\r\n * import { take, map, mergeAll } from 'rxjs/operators';\r\n *\r\n * const clicks = fromEvent(document, 'click');\r\n * const higherOrder = clicks.pipe(\r\n *   map((ev) => interval(1000).pipe(take(10))),\r\n * );\r\n * const firstOrder = higherOrder.pipe(mergeAll(2));\r\n * firstOrder.subscribe(x => console.log(x));\r\n * ```\r\n *\r\n * @see {@link combineAll}\r\n * @see {@link concatAll}\r\n * @see {@link exhaust}\r\n * @see {@link merge}\r\n * @see {@link mergeMap}\r\n * @see {@link mergeMapTo}\r\n * @see {@link mergeScan}\r\n * @see {@link switchAll}\r\n * @see {@link switchMap}\r\n * @see {@link zipAll}\r\n *\r\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of inner\r\n * Observables being subscribed to concurrently.\r\n * @return {Observable} An Observable that emits values coming from all the\r\n * inner Observables emitted by the source Observable.\r\n * @method mergeAll\r\n * @owner Observable\r\n */\r\nexport function mergeAll<T>(concurrent: number = Number.POSITIVE_INFINITY): OperatorFunction<ObservableInput<T>, T> {\r\n  return mergeMap(identity, concurrent);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}