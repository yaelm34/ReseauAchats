{"ast":null,"code":"/** PURE_IMPORTS_START tslib,_util_isFunction,_Observer,_Subscription,_internal_symbol_rxSubscriber,_config,_util_hostReportError PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { isFunction } from './util/isFunction';\nimport { empty as emptyObserver } from './Observer';\nimport { Subscription } from './Subscription';\nimport { rxSubscriber as rxSubscriberSymbol } from '../internal/symbol/rxSubscriber';\nimport { config } from './config';\nimport { hostReportError } from './util/hostReportError';\n\nvar Subscriber = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(Subscriber, _super);\n\n  function Subscriber(destinationOrNext, error, complete) {\n    var _this = _super.call(this) || this;\n\n    _this.syncErrorValue = null;\n    _this.syncErrorThrown = false;\n    _this.syncErrorThrowable = false;\n    _this.isStopped = false;\n\n    switch (arguments.length) {\n      case 0:\n        _this.destination = emptyObserver;\n        break;\n\n      case 1:\n        if (!destinationOrNext) {\n          _this.destination = emptyObserver;\n          break;\n        }\n\n        if (typeof destinationOrNext === 'object') {\n          if (destinationOrNext instanceof Subscriber) {\n            _this.syncErrorThrowable = destinationOrNext.syncErrorThrowable;\n            _this.destination = destinationOrNext;\n            destinationOrNext.add(_this);\n          } else {\n            _this.syncErrorThrowable = true;\n            _this.destination = new SafeSubscriber(_this, destinationOrNext);\n          }\n\n          break;\n        }\n\n      default:\n        _this.syncErrorThrowable = true;\n        _this.destination = new SafeSubscriber(_this, destinationOrNext, error, complete);\n        break;\n    }\n\n    return _this;\n  }\n\n  Subscriber.prototype[rxSubscriberSymbol] = function () {\n    return this;\n  };\n\n  Subscriber.create = function (next, error, complete) {\n    var subscriber = new Subscriber(next, error, complete);\n    subscriber.syncErrorThrowable = false;\n    return subscriber;\n  };\n\n  Subscriber.prototype.next = function (value) {\n    if (!this.isStopped) {\n      this._next(value);\n    }\n  };\n\n  Subscriber.prototype.error = function (err) {\n    if (!this.isStopped) {\n      this.isStopped = true;\n\n      this._error(err);\n    }\n  };\n\n  Subscriber.prototype.complete = function () {\n    if (!this.isStopped) {\n      this.isStopped = true;\n\n      this._complete();\n    }\n  };\n\n  Subscriber.prototype.unsubscribe = function () {\n    if (this.closed) {\n      return;\n    }\n\n    this.isStopped = true;\n\n    _super.prototype.unsubscribe.call(this);\n  };\n\n  Subscriber.prototype._next = function (value) {\n    this.destination.next(value);\n  };\n\n  Subscriber.prototype._error = function (err) {\n    this.destination.error(err);\n    this.unsubscribe();\n  };\n\n  Subscriber.prototype._complete = function () {\n    this.destination.complete();\n    this.unsubscribe();\n  };\n\n  Subscriber.prototype._unsubscribeAndRecycle = function () {\n    var _parentOrParents = this._parentOrParents;\n    this._parentOrParents = null;\n    this.unsubscribe();\n    this.closed = false;\n    this.isStopped = false;\n    this._parentOrParents = _parentOrParents;\n    return this;\n  };\n\n  return Subscriber;\n}(Subscription);\n\nexport { Subscriber };\n\nvar SafeSubscriber = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(SafeSubscriber, _super);\n\n  function SafeSubscriber(_parentSubscriber, observerOrNext, error, complete) {\n    var _this = _super.call(this) || this;\n\n    _this._parentSubscriber = _parentSubscriber;\n    var next;\n    var context = _this;\n\n    if (isFunction(observerOrNext)) {\n      next = observerOrNext;\n    } else if (observerOrNext) {\n      next = observerOrNext.next;\n      error = observerOrNext.error;\n      complete = observerOrNext.complete;\n\n      if (observerOrNext !== emptyObserver) {\n        context = Object.create(observerOrNext);\n\n        if (isFunction(context.unsubscribe)) {\n          _this.add(context.unsubscribe.bind(context));\n        }\n\n        context.unsubscribe = _this.unsubscribe.bind(_this);\n      }\n    }\n\n    _this._context = context;\n    _this._next = next;\n    _this._error = error;\n    _this._complete = complete;\n    return _this;\n  }\n\n  SafeSubscriber.prototype.next = function (value) {\n    if (!this.isStopped && this._next) {\n      var _parentSubscriber = this._parentSubscriber;\n\n      if (!config.useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {\n        this.__tryOrUnsub(this._next, value);\n      } else if (this.__tryOrSetError(_parentSubscriber, this._next, value)) {\n        this.unsubscribe();\n      }\n    }\n  };\n\n  SafeSubscriber.prototype.error = function (err) {\n    if (!this.isStopped) {\n      var _parentSubscriber = this._parentSubscriber;\n      var useDeprecatedSynchronousErrorHandling = config.useDeprecatedSynchronousErrorHandling;\n\n      if (this._error) {\n        if (!useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {\n          this.__tryOrUnsub(this._error, err);\n\n          this.unsubscribe();\n        } else {\n          this.__tryOrSetError(_parentSubscriber, this._error, err);\n\n          this.unsubscribe();\n        }\n      } else if (!_parentSubscriber.syncErrorThrowable) {\n        this.unsubscribe();\n\n        if (useDeprecatedSynchronousErrorHandling) {\n          throw err;\n        }\n\n        hostReportError(err);\n      } else {\n        if (useDeprecatedSynchronousErrorHandling) {\n          _parentSubscriber.syncErrorValue = err;\n          _parentSubscriber.syncErrorThrown = true;\n        } else {\n          hostReportError(err);\n        }\n\n        this.unsubscribe();\n      }\n    }\n  };\n\n  SafeSubscriber.prototype.complete = function () {\n    var _this = this;\n\n    if (!this.isStopped) {\n      var _parentSubscriber = this._parentSubscriber;\n\n      if (this._complete) {\n        var wrappedComplete = function () {\n          return _this._complete.call(_this._context);\n        };\n\n        if (!config.useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {\n          this.__tryOrUnsub(wrappedComplete);\n\n          this.unsubscribe();\n        } else {\n          this.__tryOrSetError(_parentSubscriber, wrappedComplete);\n\n          this.unsubscribe();\n        }\n      } else {\n        this.unsubscribe();\n      }\n    }\n  };\n\n  SafeSubscriber.prototype.__tryOrUnsub = function (fn, value) {\n    try {\n      fn.call(this._context, value);\n    } catch (err) {\n      this.unsubscribe();\n\n      if (config.useDeprecatedSynchronousErrorHandling) {\n        throw err;\n      } else {\n        hostReportError(err);\n      }\n    }\n  };\n\n  SafeSubscriber.prototype.__tryOrSetError = function (parent, fn, value) {\n    if (!config.useDeprecatedSynchronousErrorHandling) {\n      throw new Error('bad call');\n    }\n\n    try {\n      fn.call(this._context, value);\n    } catch (err) {\n      if (config.useDeprecatedSynchronousErrorHandling) {\n        parent.syncErrorValue = err;\n        parent.syncErrorThrown = true;\n        return true;\n      } else {\n        hostReportError(err);\n        return true;\n      }\n    }\n\n    return false;\n  };\n\n  SafeSubscriber.prototype._unsubscribe = function () {\n    var _parentSubscriber = this._parentSubscriber;\n    this._context = null;\n    this._parentSubscriber = null;\n\n    _parentSubscriber.unsubscribe();\n  };\n\n  return SafeSubscriber;\n}(Subscriber);\n\nexport { SafeSubscriber };","map":{"version":3,"mappings":"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","names":["tslib_1","isFunction","empty","Subscription","rxSubscriber","rxSubscriberSymbol","config","Subscriber","_super","destinationOrNext","error","complete","_this","arguments","destination","emptyObserver","syncErrorThrowable","next","subscriber","isStopped","unsubscribe","_next","value","_error","err","_complete","_parentOrParents","closed","SafeSubscriber","_parentSubscriber","observerOrNext","context","_context","useDeprecatedSynchronousErrorHandling","__tryOrUnsub","__tryOrSetError","hostReportError","syncErrorValue","wrappedComplete","call","fn","prototype","parent","syncErrorThrown"],"sources":["D:\\Documents\\EMA\\Mines A3\\NoSQL\\ReseauAchats\\reseau_achats\\node_modules\\rxjs\\src\\internal\\Subscriber.ts"],"sourcesContent":["import { isFunction } from './util/isFunction';\r\nimport { empty as emptyObserver } from './Observer';\r\nimport { Observer, PartialObserver, TeardownLogic } from './types';\r\nimport { Subscription } from './Subscription';\r\nimport { rxSubscriber as rxSubscriberSymbol } from '../internal/symbol/rxSubscriber';\r\nimport { config } from './config';\r\nimport { hostReportError } from './util/hostReportError';\r\n\r\n/**\r\n * Implements the {@link Observer} interface and extends the\r\n * {@link Subscription} class. While the {@link Observer} is the public API for\r\n * consuming the values of an {@link Observable}, all Observers get converted to\r\n * a Subscriber, in order to provide Subscription-like capabilities such as\r\n * `unsubscribe`. Subscriber is a common type in RxJS, and crucial for\r\n * implementing operators, but it is rarely used as a public API.\r\n *\r\n * @class Subscriber<T>\r\n */\r\nexport class Subscriber<T> extends Subscription implements Observer<T> {\r\n\r\n  [rxSubscriberSymbol]() { return this; }\r\n\r\n  /**\r\n   * A static factory for a Subscriber, given a (potentially partial) definition\r\n   * of an Observer.\r\n   * @param {function(x: ?T): void} [next] The `next` callback of an Observer.\r\n   * @param {function(e: ?any): void} [error] The `error` callback of an\r\n   * Observer.\r\n   * @param {function(): void} [complete] The `complete` callback of an\r\n   * Observer.\r\n   * @return {Subscriber<T>} A Subscriber wrapping the (partially defined)\r\n   * Observer represented by the given arguments.\r\n   * @nocollapse\r\n   */\r\n  static create<T>(next?: (x?: T) => void,\r\n                   error?: (e?: any) => void,\r\n                   complete?: () => void): Subscriber<T> {\r\n    const subscriber = new Subscriber(next, error, complete);\r\n    subscriber.syncErrorThrowable = false;\r\n    return subscriber;\r\n  }\r\n\r\n  /** @internal */ syncErrorValue: any = null;\r\n  /** @internal */ syncErrorThrown: boolean = false;\r\n  /** @internal */ syncErrorThrowable: boolean = false;\r\n\r\n  protected isStopped: boolean = false;\r\n  protected destination: PartialObserver<any> | Subscriber<any>; // this `any` is the escape hatch to erase extra type param (e.g. R)\r\n\r\n  /**\r\n   * @param {Observer|function(value: T): void} [destinationOrNext] A partially\r\n   * defined Observer or a `next` callback function.\r\n   * @param {function(e: ?any): void} [error] The `error` callback of an\r\n   * Observer.\r\n   * @param {function(): void} [complete] The `complete` callback of an\r\n   * Observer.\r\n   */\r\n  constructor(destinationOrNext?: PartialObserver<any> | ((value: T) => void),\r\n              error?: (e?: any) => void,\r\n              complete?: () => void) {\r\n    super();\r\n\r\n    switch (arguments.length) {\r\n      case 0:\r\n        this.destination = emptyObserver;\r\n        break;\r\n      case 1:\r\n        if (!destinationOrNext) {\r\n          this.destination = emptyObserver;\r\n          break;\r\n        }\r\n        if (typeof destinationOrNext === 'object') {\r\n          if (destinationOrNext instanceof Subscriber) {\r\n            this.syncErrorThrowable = destinationOrNext.syncErrorThrowable;\r\n            this.destination = destinationOrNext;\r\n            destinationOrNext.add(this);\r\n          } else {\r\n            this.syncErrorThrowable = true;\r\n            this.destination = new SafeSubscriber<T>(this, <PartialObserver<any>> destinationOrNext);\r\n          }\r\n          break;\r\n        }\r\n      default:\r\n        this.syncErrorThrowable = true;\r\n        this.destination = new SafeSubscriber<T>(this, <((value: T) => void)> destinationOrNext, error, complete);\r\n        break;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * The {@link Observer} callback to receive notifications of type `next` from\r\n   * the Observable, with a value. The Observable may call this method 0 or more\r\n   * times.\r\n   * @param {T} [value] The `next` value.\r\n   * @return {void}\r\n   */\r\n  next(value?: T): void {\r\n    if (!this.isStopped) {\r\n      this._next(value);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * The {@link Observer} callback to receive notifications of type `error` from\r\n   * the Observable, with an attached `Error`. Notifies the Observer that\r\n   * the Observable has experienced an error condition.\r\n   * @param {any} [err] The `error` exception.\r\n   * @return {void}\r\n   */\r\n  error(err?: any): void {\r\n    if (!this.isStopped) {\r\n      this.isStopped = true;\r\n      this._error(err);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * The {@link Observer} callback to receive a valueless notification of type\r\n   * `complete` from the Observable. Notifies the Observer that the Observable\r\n   * has finished sending push-based notifications.\r\n   * @return {void}\r\n   */\r\n  complete(): void {\r\n    if (!this.isStopped) {\r\n      this.isStopped = true;\r\n      this._complete();\r\n    }\r\n  }\r\n\r\n  unsubscribe(): void {\r\n    if (this.closed) {\r\n      return;\r\n    }\r\n    this.isStopped = true;\r\n    super.unsubscribe();\r\n  }\r\n\r\n  protected _next(value: T): void {\r\n    this.destination.next(value);\r\n  }\r\n\r\n  protected _error(err: any): void {\r\n    this.destination.error(err);\r\n    this.unsubscribe();\r\n  }\r\n\r\n  protected _complete(): void {\r\n    this.destination.complete();\r\n    this.unsubscribe();\r\n  }\r\n\r\n  /** @deprecated This is an internal implementation detail, do not use. */\r\n  _unsubscribeAndRecycle(): Subscriber<T> {\r\n    const {  _parentOrParents } = this;\r\n    this._parentOrParents = null;\r\n    this.unsubscribe();\r\n    this.closed = false;\r\n    this.isStopped = false;\r\n    this._parentOrParents = _parentOrParents;\r\n    return this;\r\n  }\r\n}\r\n\r\n/**\r\n * We need this JSDoc comment for affecting ESDoc.\r\n * @ignore\r\n * @extends {Ignored}\r\n */\r\nexport class SafeSubscriber<T> extends Subscriber<T> {\r\n\r\n  private _context: any;\r\n\r\n  constructor(private _parentSubscriber: Subscriber<T>,\r\n              observerOrNext?: PartialObserver<T> | ((value: T) => void),\r\n              error?: (e?: any) => void,\r\n              complete?: () => void) {\r\n    super();\r\n\r\n    let next: ((value: T) => void);\r\n    let context: any = this;\r\n\r\n    if (isFunction(observerOrNext)) {\r\n      next = (<((value: T) => void)> observerOrNext);\r\n    } else if (observerOrNext) {\r\n      next = (<PartialObserver<T>> observerOrNext).next;\r\n      error = (<PartialObserver<T>> observerOrNext).error;\r\n      complete = (<PartialObserver<T>> observerOrNext).complete;\r\n      if (observerOrNext !== emptyObserver) {\r\n        context = Object.create(observerOrNext);\r\n        if (isFunction(context.unsubscribe)) {\r\n          this.add(<() => void> context.unsubscribe.bind(context));\r\n        }\r\n        context.unsubscribe = this.unsubscribe.bind(this);\r\n      }\r\n    }\r\n\r\n    this._context = context;\r\n    this._next = next;\r\n    this._error = error;\r\n    this._complete = complete;\r\n  }\r\n\r\n  next(value?: T): void {\r\n    if (!this.isStopped && this._next) {\r\n      const { _parentSubscriber } = this;\r\n      if (!config.useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {\r\n        this.__tryOrUnsub(this._next, value);\r\n      } else if (this.__tryOrSetError(_parentSubscriber, this._next, value)) {\r\n        this.unsubscribe();\r\n      }\r\n    }\r\n  }\r\n\r\n  error(err?: any): void {\r\n    if (!this.isStopped) {\r\n      const { _parentSubscriber } = this;\r\n      const { useDeprecatedSynchronousErrorHandling } = config;\r\n      if (this._error) {\r\n        if (!useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {\r\n          this.__tryOrUnsub(this._error, err);\r\n          this.unsubscribe();\r\n        } else {\r\n          this.__tryOrSetError(_parentSubscriber, this._error, err);\r\n          this.unsubscribe();\r\n        }\r\n      } else if (!_parentSubscriber.syncErrorThrowable) {\r\n        this.unsubscribe();\r\n        if (useDeprecatedSynchronousErrorHandling) {\r\n          throw err;\r\n        }\r\n        hostReportError(err);\r\n      } else {\r\n        if (useDeprecatedSynchronousErrorHandling) {\r\n          _parentSubscriber.syncErrorValue = err;\r\n          _parentSubscriber.syncErrorThrown = true;\r\n        } else {\r\n          hostReportError(err);\r\n        }\r\n        this.unsubscribe();\r\n      }\r\n    }\r\n  }\r\n\r\n  complete(): void {\r\n    if (!this.isStopped) {\r\n      const { _parentSubscriber } = this;\r\n      if (this._complete) {\r\n        const wrappedComplete = () => this._complete.call(this._context);\r\n\r\n        if (!config.useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {\r\n          this.__tryOrUnsub(wrappedComplete);\r\n          this.unsubscribe();\r\n        } else {\r\n          this.__tryOrSetError(_parentSubscriber, wrappedComplete);\r\n          this.unsubscribe();\r\n        }\r\n      } else {\r\n        this.unsubscribe();\r\n      }\r\n    }\r\n  }\r\n\r\n  private __tryOrUnsub(fn: Function, value?: any): void {\r\n    try {\r\n      fn.call(this._context, value);\r\n    } catch (err) {\r\n      this.unsubscribe();\r\n      if (config.useDeprecatedSynchronousErrorHandling) {\r\n        throw err;\r\n      } else {\r\n        hostReportError(err);\r\n      }\r\n    }\r\n  }\r\n\r\n  private __tryOrSetError(parent: Subscriber<T>, fn: Function, value?: any): boolean {\r\n    if (!config.useDeprecatedSynchronousErrorHandling) {\r\n      throw new Error('bad call');\r\n    }\r\n    try {\r\n      fn.call(this._context, value);\r\n    } catch (err) {\r\n      if (config.useDeprecatedSynchronousErrorHandling) {\r\n        parent.syncErrorValue = err;\r\n        parent.syncErrorThrown = true;\r\n        return true;\r\n      } else {\r\n        hostReportError(err);\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /** @internal This is an internal implementation detail, do not use. */\r\n  _unsubscribe(): void {\r\n    const { _parentSubscriber } = this;\r\n    this._context = null;\r\n    this._parentSubscriber = null;\r\n    _parentSubscriber.unsubscribe();\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}