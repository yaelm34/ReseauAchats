{"ast":null,"code":"/** PURE_IMPORTS_START tslib,_innerSubscribe PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { SimpleOuterSubscriber, innerSubscribe, SimpleInnerSubscriber } from '../innerSubscribe';\nexport function distinct(keySelector, flushes) {\n  return function (source) {\n    return source.lift(new DistinctOperator(keySelector, flushes));\n  };\n}\n\nvar DistinctOperator = /*@__PURE__*/function () {\n  function DistinctOperator(keySelector, flushes) {\n    this.keySelector = keySelector;\n    this.flushes = flushes;\n  }\n\n  DistinctOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new DistinctSubscriber(subscriber, this.keySelector, this.flushes));\n  };\n\n  return DistinctOperator;\n}();\n\nvar DistinctSubscriber = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(DistinctSubscriber, _super);\n\n  function DistinctSubscriber(destination, keySelector, flushes) {\n    var _this = _super.call(this, destination) || this;\n\n    _this.keySelector = keySelector;\n    _this.values = new Set();\n\n    if (flushes) {\n      _this.add(innerSubscribe(flushes, new SimpleInnerSubscriber(_this)));\n    }\n\n    return _this;\n  }\n\n  DistinctSubscriber.prototype.notifyNext = function () {\n    this.values.clear();\n  };\n\n  DistinctSubscriber.prototype.notifyError = function (error) {\n    this._error(error);\n  };\n\n  DistinctSubscriber.prototype._next = function (value) {\n    if (this.keySelector) {\n      this._useKeySelector(value);\n    } else {\n      this._finalizeNext(value, value);\n    }\n  };\n\n  DistinctSubscriber.prototype._useKeySelector = function (value) {\n    var key;\n    var destination = this.destination;\n\n    try {\n      key = this.keySelector(value);\n    } catch (err) {\n      destination.error(err);\n      return;\n    }\n\n    this._finalizeNext(key, value);\n  };\n\n  DistinctSubscriber.prototype._finalizeNext = function (key, value) {\n    var values = this.values;\n\n    if (!values.has(key)) {\n      values.add(key);\n      this.destination.next(value);\n    }\n  };\n\n  return DistinctSubscriber;\n}(SimpleOuterSubscriber);\n\nexport { DistinctSubscriber };","map":{"version":3,"mappings":";AAIA,OAAO,KAAEA,OAAT,MAAS,OAAT;AA4DA,SAAMC,qBAAN,EAA+BC,cAA/B,EACwDC,qBADxD,QACwD,mBADxD;OAEE,SAAOC,QAAP,CAAQC,WAAR,EAAkCC,OAAlC,EAAyC;AAC1C;AAAA;AAAA;AAED;;IACEC,gCAAoB,YAAgE;WAAhEA,8BAA6BD;AAAU;AAC1D;AAED;;kBACS,CAAME,UAAUC,OAAK,sBAAmBC,MAAnB,EAA+B;AAC5D;AACH;;AAPA,SAOCH,gBAPD;AAcA,CAbsB;;IAawBI,4CAA2BC,MAA3B,EAA2B;AAGvEZ,wCAAYY,MAAZ;;WAAAD,mBACEE,aAAMR,aAAYC,SAKnB;AAN+C,sBAAW,KAAX,uBAA6B,IAA7B;;AAFxCQ,wBAAaT,WAAb;AAKNS,SAAI,OAAJ,GAAa,SAAb;;QACER,SAAQ;AACTQ;;;AACF;AAED;;oBACc,WAAQC;AACrB;AAED;;oBACc,WAAOC;AACpB;AAES;;oBACC,WAAaC;QACpB,KAAKZ;AACN;WACC;AACD;AACF;AAEO;;oBACK;AACH;AACR,QAAIQ,8BAAJ;;QACE;AACDK;AAAC,aACAC;AACAN,iBAAO,MAAP,CAAOM,GAAP;AACD;AACD;;AACD;AAEO;;oBACE,WAAgBC;AACxB,QAAIC,MAAC,GAAO,KAAOA,MAAnB;;QACE,OAAO,IAAP,CAAcH,GAAd,GAAmB;AACnBG,YAAK,IAAL,CAAKH,GAAL;AACD;AACF;AAEH;;AA/C8C;CAAA","names":["tslib_1","SimpleOuterSubscriber","innerSubscribe","SimpleInnerSubscriber","distinct","keySelector","flushes","DistinctOperator","prototype","call","source","DistinctSubscriber","_super","destination","_this","notifyNext","notifyError","_next","key","err","_finalizeNext","values"],"sources":["D:\\Documents\\EMA\\Mines A3\\NoSQL\\ReseauAchats\\reseau_achats\\node_modules\\rxjs\\src\\internal\\operators\\distinct.ts"],"sourcesContent":["import { Observable } from '../Observable';\r\nimport { Operator } from '../Operator';\r\nimport { Subscriber } from '../Subscriber';\r\nimport { MonoTypeOperatorFunction, TeardownLogic } from '../types';\r\nimport { SimpleOuterSubscriber, innerSubscribe, SimpleInnerSubscriber } from '../innerSubscribe';\r\n\r\n/**\r\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from previous items.\r\n *\r\n * If a keySelector function is provided, then it will project each value from the source observable into a new value that it will\r\n * check for equality with previously projected values. If a keySelector function is not provided, it will use each value from the\r\n * source observable directly with an equality check against previous values.\r\n *\r\n * In JavaScript runtimes that support `Set`, this operator will use a `Set` to improve performance of the distinct value checking.\r\n *\r\n * In other runtimes, this operator will use a minimal implementation of `Set` that relies on an `Array` and `indexOf` under the\r\n * hood, so performance will degrade as more values are checked for distinction. Even in newer browsers, a long-running `distinct`\r\n * use might result in memory leaks. To help alleviate this in some scenarios, an optional `flushes` parameter is also provided so\r\n * that the internal `Set` can be \"flushed\", basically clearing it of values.\r\n *\r\n * ## Examples\r\n * A simple example with numbers\r\n * ```ts\r\n * import { of } from 'rxjs';\r\n * import { distinct } from 'rxjs/operators';\r\n *\r\n * of(1, 1, 2, 2, 2, 1, 2, 3, 4, 3, 2, 1).pipe(\r\n *     distinct(),\r\n *   )\r\n *   .subscribe(x => console.log(x)); // 1, 2, 3, 4\r\n * ```\r\n *\r\n * An example using a keySelector function\r\n * ```typescript\r\n * import { of } from 'rxjs';\r\n * import { distinct } from 'rxjs/operators';\r\n *\r\n * interface Person {\r\n *    age: number,\r\n *    name: string\r\n * }\r\n *\r\n * of<Person>(\r\n *     { age: 4, name: 'Foo'},\r\n *     { age: 7, name: 'Bar'},\r\n *     { age: 5, name: 'Foo'},\r\n *   ).pipe(\r\n *     distinct((p: Person) => p.name),\r\n *   )\r\n *   .subscribe(x => console.log(x));\r\n *\r\n * // displays:\r\n * // { age: 4, name: 'Foo' }\r\n * // { age: 7, name: 'Bar' }\r\n * ```\r\n * @see {@link distinctUntilChanged}\r\n * @see {@link distinctUntilKeyChanged}\r\n *\r\n * @param {function} [keySelector] Optional function to select which value you want to check as distinct.\r\n * @param {Observable} [flushes] Optional Observable for flushing the internal HashSet of the operator.\r\n * @return {Observable} An Observable that emits items from the source Observable with distinct values.\r\n * @method distinct\r\n * @owner Observable\r\n */\r\nexport function distinct<T, K>(keySelector?: (value: T) => K,\r\n                               flushes?: Observable<any>): MonoTypeOperatorFunction<T> {\r\n  return (source: Observable<T>) => source.lift(new DistinctOperator(keySelector, flushes));\r\n}\r\n\r\nclass DistinctOperator<T, K> implements Operator<T, T> {\r\n  constructor(private keySelector?: (value: T) => K, private flushes?: Observable<any>) {\r\n  }\r\n\r\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\r\n    return source.subscribe(new DistinctSubscriber(subscriber, this.keySelector, this.flushes));\r\n  }\r\n}\r\n\r\n/**\r\n * We need this JSDoc comment for affecting ESDoc.\r\n * @ignore\r\n * @extends {Ignored}\r\n */\r\nexport class DistinctSubscriber<T, K> extends SimpleOuterSubscriber<T, T> {\r\n  private values = new Set<K>();\r\n\r\n  constructor(destination: Subscriber<T>, private keySelector?: (value: T) => K, flushes?: Observable<any>) {\r\n    super(destination);\r\n\r\n    if (flushes) {\r\n      this.add(innerSubscribe(flushes, new SimpleInnerSubscriber(this)));\r\n    }\r\n  }\r\n\r\n  notifyNext(): void {\r\n    this.values.clear();\r\n  }\r\n\r\n  notifyError(error: any): void {\r\n    this._error(error);\r\n  }\r\n\r\n  protected _next(value: T): void {\r\n    if (this.keySelector) {\r\n      this._useKeySelector(value);\r\n    } else {\r\n      this._finalizeNext(value, value);\r\n    }\r\n  }\r\n\r\n  private _useKeySelector(value: T): void {\r\n    let key: K;\r\n    const { destination } = this;\r\n    try {\r\n      key = this.keySelector!(value);\r\n    } catch (err) {\r\n      destination.error!(err);\r\n      return;\r\n    }\r\n    this._finalizeNext(key, value);\r\n  }\r\n\r\n  private _finalizeNext(key: K|T, value: T) {\r\n    const { values } = this;\r\n    if (!values.has(<K>key)) {\r\n      values.add(<K>key);\r\n      this.destination.next!(value);\r\n    }\r\n  }\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module"}