{"ast":null,"code":"/** PURE_IMPORTS_START tslib,_Subscription,_util_subscribeToResult,_OuterSubscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscription } from '../Subscription';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nexport function bufferToggle(openings, closingSelector) {\n  return function bufferToggleOperatorFunction(source) {\n    return source.lift(new BufferToggleOperator(openings, closingSelector));\n  };\n}\n\nvar BufferToggleOperator = /*@__PURE__*/function () {\n  function BufferToggleOperator(openings, closingSelector) {\n    this.openings = openings;\n    this.closingSelector = closingSelector;\n  }\n\n  BufferToggleOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new BufferToggleSubscriber(subscriber, this.openings, this.closingSelector));\n  };\n\n  return BufferToggleOperator;\n}();\n\nvar BufferToggleSubscriber = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(BufferToggleSubscriber, _super);\n\n  function BufferToggleSubscriber(destination, openings, closingSelector) {\n    var _this = _super.call(this, destination) || this;\n\n    _this.closingSelector = closingSelector;\n    _this.contexts = [];\n\n    _this.add(subscribeToResult(_this, openings));\n\n    return _this;\n  }\n\n  BufferToggleSubscriber.prototype._next = function (value) {\n    var contexts = this.contexts;\n    var len = contexts.length;\n\n    for (var i = 0; i < len; i++) {\n      contexts[i].buffer.push(value);\n    }\n  };\n\n  BufferToggleSubscriber.prototype._error = function (err) {\n    var contexts = this.contexts;\n\n    while (contexts.length > 0) {\n      var context_1 = contexts.shift();\n      context_1.subscription.unsubscribe();\n      context_1.buffer = null;\n      context_1.subscription = null;\n    }\n\n    this.contexts = null;\n\n    _super.prototype._error.call(this, err);\n  };\n\n  BufferToggleSubscriber.prototype._complete = function () {\n    var contexts = this.contexts;\n\n    while (contexts.length > 0) {\n      var context_2 = contexts.shift();\n      this.destination.next(context_2.buffer);\n      context_2.subscription.unsubscribe();\n      context_2.buffer = null;\n      context_2.subscription = null;\n    }\n\n    this.contexts = null;\n\n    _super.prototype._complete.call(this);\n  };\n\n  BufferToggleSubscriber.prototype.notifyNext = function (outerValue, innerValue) {\n    outerValue ? this.closeBuffer(outerValue) : this.openBuffer(innerValue);\n  };\n\n  BufferToggleSubscriber.prototype.notifyComplete = function (innerSub) {\n    this.closeBuffer(innerSub.context);\n  };\n\n  BufferToggleSubscriber.prototype.openBuffer = function (value) {\n    try {\n      var closingSelector = this.closingSelector;\n      var closingNotifier = closingSelector.call(this, value);\n\n      if (closingNotifier) {\n        this.trySubscribe(closingNotifier);\n      }\n    } catch (err) {\n      this._error(err);\n    }\n  };\n\n  BufferToggleSubscriber.prototype.closeBuffer = function (context) {\n    var contexts = this.contexts;\n\n    if (contexts && context) {\n      var buffer = context.buffer,\n          subscription = context.subscription;\n      this.destination.next(buffer);\n      contexts.splice(contexts.indexOf(context), 1);\n      this.remove(subscription);\n      subscription.unsubscribe();\n    }\n  };\n\n  BufferToggleSubscriber.prototype.trySubscribe = function (closingNotifier) {\n    var contexts = this.contexts;\n    var buffer = [];\n    var subscription = new Subscription();\n    var context = {\n      buffer: buffer,\n      subscription: subscription\n    };\n    contexts.push(context);\n    var innerSubscription = subscribeToResult(this, closingNotifier, context);\n\n    if (!innerSubscription || innerSubscription.closed) {\n      this.closeBuffer(context);\n    } else {\n      innerSubscription.context = context;\n      this.add(innerSubscription);\n      subscription.add(innerSubscription);\n    }\n  };\n\n  return BufferToggleSubscriber;\n}(OuterSubscriber);","map":{"version":3,"mappings":";AAGA,OAAO,KAAEA,OAAT,MAAuB,OAAvB;AACA,SAASC,YAAT,QAA4B,iBAA5B;AACA,SAASC,iBAAT,QAAgC,2BAAhC;AAkDA,SAAMC,eAAN,QACE,oBADF;OAIE,SAAOC,YAAP,CAAgBC,QAAhB,EAAgBC,eAAhB,EAAkE;SAChE,SAAOC,4BAAP,CAAuBC,MAAvB,EAAkD;AAClD;AACH;AAED;;IAEEC,oCAAsD,YAClC;WADAA,qBAAkCJ;AAClC;AACnB;AAED;;sBACgB,WAAUK,OAAI,sBAAuBF,MAAvB,EAAmC;AAChE;AACH;;AATA,SASCC,oBATD;AAqBA,CAnBwD;;IAmBbE,gDAAqBC,MAArB,EAAqB;AAG9DZ,4CAAYY,MAAZ;;WAAAD,uBAGEE,aAAiBR,UAElBC;AAHmB,kDAAgE,IAAhE;;AAJZQ,4BAAuCR,eAAvC;AAMNQ,SAAI,CAACC,QAAL,GAAS,EAAT;;;;AACD;AAES;;wBACS,CAAIC,UAAUC;AAC/B,QAAMF,QAAM,QAASA,QAArB;AACA,WAAK,GAAKA,QAAO,OAAjB;;SACE,QAAS,GAAGG,SAAOA,KAAK;AACzBH;AACF;AAES;;wBACS,CAAIC,UAAUG;AAC/B,gBAAO,GAAQ,KAACJ,QAAhB;;WACEA,QAAM,OAAN,GAAgB,GAAQ;AACxB,mBAAQ,WAAa,MAAb,EAAR;AACAK,eAAO,CAACC,YAAR,CAAsBC,WAAtB;AACAF,eAAO,CAACG,MAAR,GAAQ,IAAR;AACDH;AACD;;AACA;;AACDR;AAES;;wBACS,CAAII,UAAUQ;AAC/B,gBAAO,GAAQ,KAACT,QAAhB;;WACEA,QAAM,OAAN,GAAgB,GAAQ;AACxB,UAAIU,SAAC,GAAWV,QAAO,MAAP,EAAhB;AACA,uBAAQW,IAAR,CAAoBD,SAAC,OAArB;AACAA,eAAO,CAACJ,YAAR,CAAsBC,WAAtB;AACAG,eAAO,CAACF,MAAR,GAAQ,IAAR;AACDE;AACD;;AACA;;AACDb;AAED;;wBACoB,WAAWe,aAAa,UAAOC,UAAP,EAAkBC,UAAlB,EAA8B;AACzED;AAED;;wBAC0B,WAAUE,iBAAS;AAC5C;AAEO;;wBACF;QACF;AACA,UAAMxB,eAAe,GAAG,oBAAxB;AACA,UAAIyB,eAAe,GAAEzB,iCAArB;;UACEyB,iBAAiB;AAClB;AACF;AAAC,aACAC,KAAK;AACN;AACF;AAEO;;wBACW,CAAIhB,UAAUiB;AAE/B,QAAIlB,QAAQ,QAAIA,QAAhB;;QACUA;AACR,UAAIQ,MAAC,UAAY,CAAKA,MAAtB;AAAA,UAA8BF,YAAC,uBAA/B;AACA,uBAAgBK,IAAhB,CAAgBH,MAAhB;AACAR,cAAK,OAAL,CAAYA,QAAY,CAACmB,OAAb,CAAcC,OAAd,CAAZ,EAA0B,CAA1B;AACA,kBAAYd,YAAZ;AACDA;AACF;AAEO;;wBACW,CAAIL,UAAUoB;AAE/B,QAAMrB,QAAM,GAAe,KAACA,QAA5B;AACA,QAAMQ,WAAN;AACA,QAAMF,YAAY,OAAMpB,YAAN,EAAlB;AACA,eAAS,GAAK;AAAAsB,YAAQ,EAACA,MAAT;AAASF;AAAT,KAAd;AAEAN,YAAM,KAAN,CAAMoB,OAAN;AAEA,QAAIE,iBAAC,GAAiBnC,iBAAI,OAAkB6B,eAAlB,EAA0BI,OAA1B,CAA1B;;QACE,sBAAiBE,iBAAS;AAC3B;WACE;AAEDA,uBAAS,QAAT,GAA4BF,OAA5B;AACA;AACDd;AACF;AACH;;AA9F2C;CAAA","names":["tslib_1","Subscription","subscribeToResult","OuterSubscriber","bufferToggle","openings","closingSelector","bufferToggleOperatorFunction","source","BufferToggleOperator","call","BufferToggleSubscriber","_super","destination","_this","contexts","prototype","_next","i","_error","context_1","subscription","unsubscribe","buffer","_complete","context_2","next","notifyNext","outerValue","innerValue","notifyComplete","closingNotifier","err","closeBuffer","indexOf","context","trySubscribe","innerSubscription"],"sources":["D:\\Documents\\EMA\\Mines A3\\NoSQL\\ReseauAchats\\reseau_achats\\node_modules\\rxjs\\src\\internal\\operators\\bufferToggle.ts"],"sourcesContent":["import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { OperatorFunction, SubscribableOrPromise } from '../types';\n\n/**\n * Buffers the source Observable values starting from an emission from\n * `openings` and ending when the output of `closingSelector` emits.\n *\n * <span class=\"informal\">Collects values from the past as an array. Starts\n * collecting only when `opening` emits, and calls the `closingSelector`\n * function to get an Observable that tells when to close the buffer.</span>\n *\n * ![](bufferToggle.png)\n *\n * Buffers values from the source by opening the buffer via signals from an\n * Observable provided to `openings`, and closing and sending the buffers when\n * a Subscribable or Promise returned by the `closingSelector` function emits.\n *\n * ## Example\n *\n * Every other second, emit the click events from the next 500ms\n *\n * ```ts\n * import { fromEvent, interval, EMPTY } from 'rxjs';\n * import { bufferToggle } from 'rxjs/operators';\n *\n * const clicks = fromEvent(document, 'click');\n * const openings = interval(1000);\n * const buffered = clicks.pipe(bufferToggle(openings, i =>\n *   i % 2 ? interval(500) : EMPTY\n * ));\n * buffered.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferWhen}\n * @see {@link windowToggle}\n *\n * @param {SubscribableOrPromise<O>} openings A Subscribable or Promise of notifications to start new\n * buffers.\n * @param {function(value: O): SubscribableOrPromise} closingSelector A function that takes\n * the value emitted by the `openings` observable and returns a Subscribable or Promise,\n * which, when it emits, signals that the associated buffer should be emitted\n * and cleared.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferToggle\n * @owner Observable\n */\nexport function bufferToggle<T, O>(\n  openings: SubscribableOrPromise<O>,\n  closingSelector: (value: O) => SubscribableOrPromise<any>\n): OperatorFunction<T, T[]> {\n  return function bufferToggleOperatorFunction(source: Observable<T>) {\n    return source.lift(new BufferToggleOperator<T, O>(openings, closingSelector));\n  };\n}\n\nclass BufferToggleOperator<T, O> implements Operator<T, T[]> {\n\n  constructor(private openings: SubscribableOrPromise<O>,\n              private closingSelector: (value: O) => SubscribableOrPromise<any>) {\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source.subscribe(new BufferToggleSubscriber(subscriber, this.openings, this.closingSelector));\n  }\n}\n\ninterface BufferContext<T> {\n  buffer: T[];\n  subscription: Subscription;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferToggleSubscriber<T, O> extends OuterSubscriber<T, O> {\n  private contexts: Array<BufferContext<T>> = [];\n\n  constructor(destination: Subscriber<T[]>,\n              openings: SubscribableOrPromise<O>,\n              private closingSelector: (value: O) => SubscribableOrPromise<any> | void) {\n    super(destination);\n    this.add(subscribeToResult(this, openings));\n  }\n\n  protected _next(value: T): void {\n    const contexts = this.contexts;\n    const len = contexts.length;\n    for (let i = 0; i < len; i++) {\n      contexts[i].buffer.push(value);\n    }\n  }\n\n  protected _error(err: any): void {\n    const contexts = this.contexts;\n    while (contexts.length > 0) {\n      const context = contexts.shift()!;\n      context.subscription.unsubscribe();\n      context.buffer = null!;\n      context.subscription = null!;\n    }\n    this.contexts = null!;\n    super._error(err);\n  }\n\n  protected _complete(): void {\n    const contexts = this.contexts;\n    while (contexts.length > 0) {\n      const context = contexts.shift()!;\n      this.destination.next!(context.buffer);\n      context.subscription.unsubscribe();\n      context.buffer = null!;\n      context.subscription = null!;\n    }\n    this.contexts = null!;\n    super._complete();\n  }\n\n  notifyNext(outerValue: any, innerValue: O): void {\n    outerValue ? this.closeBuffer(outerValue) : this.openBuffer(innerValue);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, O>): void {\n    this.closeBuffer((<any> innerSub).context);\n  }\n\n  private openBuffer(value: O): void {\n    try {\n      const closingSelector = this.closingSelector;\n      const closingNotifier = closingSelector.call(this, value);\n      if (closingNotifier) {\n        this.trySubscribe(closingNotifier);\n      }\n    } catch (err) {\n      this._error(err);\n    }\n  }\n\n  private closeBuffer(context: BufferContext<T>): void {\n    const contexts = this.contexts;\n\n    if (contexts && context) {\n      const { buffer, subscription } = context;\n      this.destination.next!(buffer);\n      contexts.splice(contexts.indexOf(context), 1);\n      this.remove(subscription);\n      subscription.unsubscribe();\n    }\n  }\n\n  private trySubscribe(closingNotifier: any): void {\n    const contexts = this.contexts;\n\n    const buffer: Array<T> = [];\n    const subscription = new Subscription();\n    const context = { buffer, subscription };\n    contexts.push(context);\n\n    const innerSubscription = subscribeToResult(this, closingNotifier, context as any);\n\n    if (!innerSubscription || innerSubscription.closed) {\n      this.closeBuffer(context);\n    } else {\n      (innerSubscription as any).context = context;\n\n      this.add(innerSubscription);\n      subscription.add(innerSubscription);\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}