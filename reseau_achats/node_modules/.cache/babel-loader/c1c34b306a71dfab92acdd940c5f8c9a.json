{"ast":null,"code":"/** PURE_IMPORTS_START _Observable,_util_isArray,_operators_map,_util_isObject,_from PURE_IMPORTS_END */\nimport { Observable } from '../Observable';\nimport { isArray } from '../util/isArray';\nimport { map } from '../operators/map';\nimport { isObject } from '../util/isObject';\nimport { from } from './from';\nexport function forkJoin() {\n  var sources = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    sources[_i] = arguments[_i];\n  }\n\n  if (sources.length === 1) {\n    var first_1 = sources[0];\n\n    if (isArray(first_1)) {\n      return forkJoinInternal(first_1, null);\n    }\n\n    if (isObject(first_1) && Object.getPrototypeOf(first_1) === Object.prototype) {\n      var keys = Object.keys(first_1);\n      return forkJoinInternal(keys.map(function (key) {\n        return first_1[key];\n      }), keys);\n    }\n  }\n\n  if (typeof sources[sources.length - 1] === 'function') {\n    var resultSelector_1 = sources.pop();\n    sources = sources.length === 1 && isArray(sources[0]) ? sources[0] : sources;\n    return forkJoinInternal(sources, null).pipe(map(function (args) {\n      return resultSelector_1.apply(void 0, args);\n    }));\n  }\n\n  return forkJoinInternal(sources, null);\n}\n\nfunction forkJoinInternal(sources, keys) {\n  return new Observable(function (subscriber) {\n    var len = sources.length;\n\n    if (len === 0) {\n      subscriber.complete();\n      return;\n    }\n\n    var values = new Array(len);\n    var completed = 0;\n    var emitted = 0;\n\n    var _loop_1 = function (i) {\n      var source = from(sources[i]);\n      var hasValue = false;\n      subscriber.add(source.subscribe({\n        next: function (value) {\n          if (!hasValue) {\n            hasValue = true;\n            emitted++;\n          }\n\n          values[i] = value;\n        },\n        error: function (err) {\n          return subscriber.error(err);\n        },\n        complete: function () {\n          completed++;\n\n          if (completed === len || !hasValue) {\n            if (emitted === len) {\n              subscriber.next(keys ? keys.reduce(function (result, key, i) {\n                return result[key] = values[i], result;\n              }, {}) : values);\n            }\n\n            subscriber.complete();\n          }\n        }\n      }));\n    };\n\n    for (var i = 0; i < len; i++) {\n      _loop_1(i);\n    }\n  });\n}","map":{"version":3,"mappings":"AAAA;AAEA,SAASA,UAAT,QAAwB,eAAxB;AACA,SAASC,OAAT,QAAoB,iBAApB;AACA,SAASC,GAAT,QAAmB,kBAAnB;AAEA,SAASC,QAAT,QAAqB,kBAArB;AAsIA,SAAMC,IAAN,QAAgB,QAAhB;OACE,oBAAiB;aAAjB;;OAAA,2BAAiBC;;AAEjB;;MACEC,OAAM,OAAN,KAAc,GAAQ;AACtB,QAAIC,OAAO,GAACD,OAAM,CAAE,CAAF,CAAlB;;QACEL,OAAO;AACR;AAED;;QACEE,QAAU,SAAV,IAAoBK,MAAK,eAAL,CAAYD,OAAZ,MAAYC;AAChC,cAAO,eAAgBD,OAAhB,CAAP;AACD;AAAA;AAAA;AACF;AAGD;;MACE,OAAMD,eAAc,CAAGD,MAAjB,GAAyB,CAAzB,CAAN,KAAiD;AACjD,wBAAmB,UAAW,CAACI,GAAZ,EAAnB;AACAH,WAAO,sBAAiB,CAAjB,IAA0BL,OAAM,CAAIK,OACrC,GADiC,CAAhC,GACAA,OAAW,CAAK,CAAL,CADX,GACgBA,OADvB;AAGD;AAAA;AAAA;AAED;;AACD;AAED;;SACEI,iBAAsBJ;SACpB,IAASN,UAAT,CAAoB,UAAOW,UAAP,EAAO;AAC3B,QAAIC,GAAG,UAAQ,OAAf;;QACEA,WAAW;AACXD,gBAAO,SAAP;AACD;AACD;;AACA,QAAIE,SAAS,IAAIC,KAAJ,CAAKF,GAAL,CAAb;AACA,QAAIG,SAAO,GAAK,CAAhB;;;QAEEC,OAAM,GAAM,UAAQC,CAAR,EAAQ;AACpB,UAAIC,SAAQd,IAAG,QAAM,GAAN,CAAf;AACA,kBAAW,GAAI,KAAf;gBACQ,sBAAK;YACT,YAAKe,KAAL,EAAe;cACb,WAAW;AACXC,oBAAO,GAAG,IAAV;AACDC;AACD;;AACDR;AACD,SAPW;AAQXS,yBAAUC,GAAV,EAAU;AAAA;AAAA,SARC;gBAST,cAAY;AACZR,mBAAI;;cACFA,SAAI,KAAOH,GAAX,IAAqB;gBACnBS,YAAWT,KAAK;wBACT,MAAOY,OACZA,YAAQ;AAAA;AAAA,eAAR,EAAQ,EAAR,CADY,GAEfX;AACD;;AACDF;AACF;AACC;AAnBS,OAAL;AAJV;;iBAAU;AAwBTK;AACA;AACJ,GAlCG","names":["Observable","isArray","map","isObject","from","length","sources","first_1","Object","pop","forkJoinInternal","subscriber","len","values","Array","completed","_loop_1","i","source","value","hasValue","emitted","error","err","keys"],"sources":["D:\\Documents\\EMA\\Mines A3\\NoSQL\\ReseauAchats\\reseau_achats\\node_modules\\rxjs\\src\\internal\\observable\\forkJoin.ts"],"sourcesContent":["import { Observable } from '../Observable';\r\nimport { ObservableInput, ObservedValuesFromArray, ObservedValueOf, SubscribableOrPromise } from '../types';\r\nimport { isArray } from '../util/isArray';\r\nimport { map } from '../operators/map';\r\nimport { isObject } from '../util/isObject';\r\nimport { isObservable } from '../util/isObservable';\r\nimport { from } from './from';\r\n\r\n/* tslint:disable:max-line-length */\r\n\r\n// forkJoin(a$, b$, c$)\r\n/** @deprecated Use the version that takes an array of Observables instead */\r\nexport function forkJoin<T>(v1: SubscribableOrPromise<T>): Observable<[T]>;\r\n/** @deprecated Use the version that takes an array of Observables instead */\r\nexport function forkJoin<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>): Observable<[T, T2]>;\r\n/** @deprecated Use the version that takes an array of Observables instead */\r\nexport function forkJoin<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<[T, T2, T3]>;\r\n/** @deprecated Use the version that takes an array of Observables instead */\r\nexport function forkJoin<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<[T, T2, T3, T4]>;\r\n/** @deprecated Use the version that takes an array of Observables instead */\r\nexport function forkJoin<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<[T, T2, T3, T4, T5]>;\r\n/** @deprecated Use the version that takes an array of Observables instead */\r\nexport function forkJoin<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<[T, T2, T3, T4, T5, T6]>;\r\n\r\n// forkJoin([a$, b$, c$]);\r\n// TODO(benlesh): Uncomment for TS 3.0\r\n// export function forkJoin(sources: []): Observable<never>;\r\nexport function forkJoin<A>(sources: [ObservableInput<A>]): Observable<[A]>;\r\nexport function forkJoin<A, B>(sources: [ObservableInput<A>, ObservableInput<B>]): Observable<[A, B]>;\r\nexport function forkJoin<A, B, C>(sources: [ObservableInput<A>, ObservableInput<B>, ObservableInput<C>]): Observable<[A, B, C]>;\r\nexport function forkJoin<A, B, C, D>(sources: [ObservableInput<A>, ObservableInput<B>, ObservableInput<C>, ObservableInput<D>]): Observable<[A, B, C, D]>;\r\nexport function forkJoin<A, B, C, D, E>(sources: [ObservableInput<A>, ObservableInput<B>, ObservableInput<C>, ObservableInput<D>, ObservableInput<E>]): Observable<[A, B, C, D, E]>;\r\nexport function forkJoin<A, B, C, D, E, F>(sources: [ObservableInput<A>, ObservableInput<B>, ObservableInput<C>, ObservableInput<D>, ObservableInput<E>, ObservableInput<F>]): Observable<[A, B, C, D, E, F]>;\r\nexport function forkJoin<A extends ObservableInput<any>[]>(sources: A): Observable<ObservedValuesFromArray<A>[]>;\r\n\r\n// forkJoin({})\r\nexport function forkJoin(sourcesObject: {}): Observable<never>;\r\nexport function forkJoin<T, K extends keyof T>(sourcesObject: T): Observable<{ [K in keyof T]: ObservedValueOf<T[K]> }>;\r\n\r\n/** @deprecated resultSelector is deprecated, pipe to map instead */\r\nexport function forkJoin(...args: Array<ObservableInput<any>|Function>): Observable<any>;\r\n/** @deprecated Use the version that takes an array of Observables instead */\r\nexport function forkJoin<T>(...sources: ObservableInput<T>[]): Observable<T[]>;\r\n/* tslint:enable:max-line-length */\r\n\r\n/**\r\n * Accepts an `Array` of {@link ObservableInput} or a dictionary `Object` of {@link ObservableInput} and returns\r\n * an {@link Observable} that emits either an array of values in the exact same order as the passed array,\r\n * or a dictionary of values in the same shape as the passed dictionary.\r\n *\r\n * <span class=\"informal\">Wait for Observables to complete and then combine last values they emitted.</span>\r\n *\r\n * ![](forkJoin.png)\r\n *\r\n * `forkJoin` is an operator that takes any number of input observables which can be passed either as an array\r\n * or a dictionary of input observables. If no input observables are provided, resulting stream will complete\r\n * immediately.\r\n *\r\n * `forkJoin` will wait for all passed observables to complete and then it will emit an array or an object with last\r\n * values from corresponding observables.\r\n *\r\n * If you pass an array of `n` observables to the operator, resulting\r\n * array will have `n` values, where first value is the last thing emitted by the first observable,\r\n * second value is the last thing emitted by the second observable and so on.\r\n *\r\n * If you pass a dictionary of observables to the operator, resulting\r\n * objects will have the same keys as the dictionary passed, with their last values they've emitted\r\n * located at the corresponding key.\r\n *\r\n * That means `forkJoin` will not emit more than once and it will complete after that. If you need to emit combined\r\n * values not only at the end of lifecycle of passed observables, but also throughout it, try out {@link combineLatest}\r\n * or {@link zip} instead.\r\n *\r\n * In order for resulting array to have the same length as the number of input observables, whenever any of\r\n * that observables completes without emitting any value, `forkJoin` will complete at that moment as well\r\n * and it will not emit anything either, even if it already has some last values from other observables.\r\n * Conversely, if there is an observable that never completes, `forkJoin` will never complete as well,\r\n * unless at any point some other observable completes without emitting value, which brings us back to\r\n * the previous case. Overall, in order for `forkJoin` to emit a value, all observables passed as arguments\r\n * have to emit something at least once and complete.\r\n *\r\n * If any input observable errors at some point, `forkJoin` will error as well and all other observables\r\n * will be immediately unsubscribed.\r\n *\r\n * Optionally `forkJoin` accepts project function, that will be called with values which normally\r\n * would land in emitted array. Whatever is returned by project function, will appear in output\r\n * observable instead. This means that default project can be thought of as a function that takes\r\n * all its arguments and puts them into an array. Note that project function will be called only\r\n * when output observable is supposed to emit a result.\r\n *\r\n * ## Examples\r\n *\r\n * ### Use forkJoin with a dictionary of observable inputs\r\n * ```ts\r\n * import { forkJoin, of, timer } from 'rxjs';\r\n *\r\n * const observable = forkJoin({\r\n *   foo: of(1, 2, 3, 4),\r\n *   bar: Promise.resolve(8),\r\n *   baz: timer(4000),\r\n * });\r\n * observable.subscribe({\r\n *  next: value => console.log(value),\r\n *  complete: () => console.log('This is how it ends!'),\r\n * });\r\n *\r\n * // Logs:\r\n * // { foo: 4, bar: 8, baz: 0 } after 4 seconds\r\n * // \"This is how it ends!\" immediately after\r\n * ```\r\n *\r\n * ### Use forkJoin with an array of observable inputs\r\n * ```ts\r\n * import { forkJoin, of } from 'rxjs';\r\n *\r\n * const observable = forkJoin([\r\n *   of(1, 2, 3, 4),\r\n *   Promise.resolve(8),\r\n *   timer(4000),\r\n * ]);\r\n * observable.subscribe({\r\n *  next: value => console.log(value),\r\n *  complete: () => console.log('This is how it ends!'),\r\n * });\r\n *\r\n * // Logs:\r\n * // [4, 8, 0] after 4 seconds\r\n * // \"This is how it ends!\" immediately after\r\n * ```\r\n *\r\n * @see {@link combineLatest}\r\n * @see {@link zip}\r\n *\r\n * @param {...ObservableInput} sources Any number of Observables provided either as an array or as an arguments\r\n * passed directly to the operator.\r\n * @param {function} [project] Function that takes values emitted by input Observables and returns value\r\n * that will appear in resulting Observable instead of default array.\r\n * @return {Observable} Observable emitting either an array of last values emitted by passed Observables\r\n * or value from project function.\r\n */\r\nexport function forkJoin(\r\n  ...sources: any[]\r\n): Observable<any> {\r\n  if (sources.length === 1) {\r\n    const first = sources[0];\r\n    if (isArray(first)) {\r\n      return forkJoinInternal(first, null);\r\n    }\r\n    // TODO(benlesh): isObservable check will not be necessary when deprecated path is removed.\r\n    if (isObject(first) && Object.getPrototypeOf(first) === Object.prototype) {\r\n      const keys = Object.keys(first);\r\n      return forkJoinInternal(keys.map(key => first[key]), keys);\r\n    }\r\n  }\r\n\r\n  // DEPRECATED PATHS BELOW HERE\r\n  if (typeof sources[sources.length - 1] === 'function') {\r\n    const resultSelector = sources.pop() as Function;\r\n    sources = (sources.length === 1 && isArray(sources[0])) ? sources[0] : sources;\r\n    return forkJoinInternal(sources, null).pipe(\r\n      map((args: any[]) => resultSelector(...args))\r\n    );\r\n  }\r\n\r\n  return forkJoinInternal(sources, null);\r\n}\r\n\r\nfunction forkJoinInternal(sources: ObservableInput<any>[], keys: string[] | null): Observable<any> {\r\n  return new Observable(subscriber => {\r\n    const len = sources.length;\r\n    if (len === 0) {\r\n      subscriber.complete();\r\n      return;\r\n    }\r\n    const values = new Array(len);\r\n    let completed = 0;\r\n    let emitted = 0;\r\n    for (let i = 0; i < len; i++) {\r\n      const source = from(sources[i]);\r\n      let hasValue = false;\r\n      subscriber.add(source.subscribe({\r\n        next: value => {\r\n          if (!hasValue) {\r\n            hasValue = true;\r\n            emitted++;\r\n          }\r\n          values[i] = value;\r\n        },\r\n        error: err => subscriber.error(err),\r\n        complete: () => {\r\n          completed++;\r\n          if (completed === len || !hasValue) {\r\n            if (emitted === len) {\r\n              subscriber.next(keys ?\r\n                keys.reduce((result, key, i) => (result[key] = values[i], result), {}) :\r\n                values);\r\n            }\r\n            subscriber.complete();\r\n          }\r\n        }\r\n      }));\r\n    }\r\n  });\r\n}\r\n"]},"metadata":{},"sourceType":"module"}