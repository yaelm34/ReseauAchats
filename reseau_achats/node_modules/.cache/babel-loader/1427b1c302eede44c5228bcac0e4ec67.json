{"ast":null,"code":"/** PURE_IMPORTS_START tslib,_Subscriber,_util_ArgumentOutOfRangeError PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nexport function skipLast(count) {\n  return function (source) {\n    return source.lift(new SkipLastOperator(count));\n  };\n}\n\nvar SkipLastOperator = /*@__PURE__*/function () {\n  function SkipLastOperator(_skipCount) {\n    this._skipCount = _skipCount;\n\n    if (this._skipCount < 0) {\n      throw new ArgumentOutOfRangeError();\n    }\n  }\n\n  SkipLastOperator.prototype.call = function (subscriber, source) {\n    if (this._skipCount === 0) {\n      return source.subscribe(new Subscriber(subscriber));\n    } else {\n      return source.subscribe(new SkipLastSubscriber(subscriber, this._skipCount));\n    }\n  };\n\n  return SkipLastOperator;\n}();\n\nvar SkipLastSubscriber = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(SkipLastSubscriber, _super);\n\n  function SkipLastSubscriber(destination, _skipCount) {\n    var _this = _super.call(this, destination) || this;\n\n    _this._skipCount = _skipCount;\n    _this._count = 0;\n    _this._ring = new Array(_skipCount);\n    return _this;\n  }\n\n  SkipLastSubscriber.prototype._next = function (value) {\n    var skipCount = this._skipCount;\n    var count = this._count++;\n\n    if (count < skipCount) {\n      this._ring[count] = value;\n    } else {\n      var currentIndex = count % skipCount;\n      var ring = this._ring;\n      var oldValue = ring[currentIndex];\n      ring[currentIndex] = value;\n      this.destination.next(oldValue);\n    }\n  };\n\n  return SkipLastSubscriber;\n}(Subscriber);","map":{"version":3,"mappings":";AACA,OAAO,KAAEA,OAAT,MAAqB,OAArB;AACA,SAASC,UAAT,QAAS,eAAT;AA0CA,SAAMC,uBAAN,QAAyC,iCAAzC;OACE,SAAOC,QAAP,CAAQC,KAAR,EAAkC;AACnC;AAAA;AAAA;AAED;;IACEC,gCAAoB,YAAkB;WAAlBA,6BAAkB;AACpC,SAAIC,UAAJ,GAASA,UAAT;;QACE,kBAAU;AACX;AACF;AAED;;kBACW,WAAUC,OAAQ;QAGzB,oBAAc,GAAS;AACxB;WACC;AACD;AACF;AACH;;AAhBA,SAgBCF,gBAhBD;AAuBA,CAtBsB;;IAsBcG,4CAAaC,MAAb,EAAa;AAI/CT,wCAAYS,MAAZ;;WAAAD,mBACEE,aAAMJ,YAAY;AAD4B,sBAAU,CAAVC,WAAkBG,WAAlB,KAAkB,IAAlB;;AAFxCC,uBAAmBL,UAAnB;AAINK,SAAI,CAACC,MAAL,GAAa,CAAb;;AACD;AAES;;oBACO,WAAQC,QAAW;AAClC,QAAMC,SAAQ,GAAI,KAACR,UAAnB;AAEA,QAAIF,KAAK,GAAG,aAAZ;;QACEA,KAAK,cAAY;AAClB;WACC;AACA,UAAMW,YAAY,QAAM,YAAxB;AACA,UAAMC,YAAWC,KAAjB;AAEA,UAAIC,QAAC,OAAa,cAAlB;AACAF,UAAI,CAACD,YAAD,CAAJ,GAAqBI,KAArB;AACD;AACF;AACH;;AAxBoC;CAAA","names":["tslib_1","Subscriber","ArgumentOutOfRangeError","skipLast","count","SkipLastOperator","_skipCount","call","SkipLastSubscriber","_super","destination","_this","_count","_next","skipCount","currentIndex","ring","_ring","oldValue","value"],"sources":["D:\\Documents\\EMA\\Mines A3\\NoSQL\\ReseauAchats\\reseau_achats\\node_modules\\rxjs\\src\\internal\\operators\\skipLast.ts"],"sourcesContent":["import { Operator } from '../Operator';\r\nimport { Subscriber } from '../Subscriber';\r\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\r\nimport { Observable } from '../Observable';\r\nimport { MonoTypeOperatorFunction, TeardownLogic } from '../types';\r\n\r\n/**\r\n * Skip the last `count` values emitted by the source Observable.\r\n *\r\n * ![](skipLast.png)\r\n *\r\n * `skipLast` returns an Observable that accumulates a queue with a length\r\n * enough to store the first `count` values. As more values are received,\r\n * values are taken from the front of the queue and produced on the result\r\n * sequence. This causes values to be delayed.\r\n *\r\n * ## Example\r\n * Skip the last 2 values of an Observable with many values\r\n * ```ts\r\n * import { range } from 'rxjs';\r\n * import { skipLast } from 'rxjs/operators';\r\n *\r\n * const many = range(1, 5);\r\n * const skipLastTwo = many.pipe(skipLast(2));\r\n * skipLastTwo.subscribe(x => console.log(x));\r\n *\r\n * // Results in:\r\n * // 1 2 3\r\n * ```\r\n *\r\n * @see {@link skip}\r\n * @see {@link skipUntil}\r\n * @see {@link skipWhile}\r\n * @see {@link take}\r\n *\r\n * @throws {ArgumentOutOfRangeError} When using `skipLast(i)`, it throws\r\n * ArgumentOutOrRangeError if `i < 0`.\r\n *\r\n * @param {number} count Number of elements to skip from the end of the source Observable.\r\n * @returns {Observable<T>} An Observable that skips the last count values\r\n * emitted by the source Observable.\r\n * @method skipLast\r\n * @owner Observable\r\n */\r\nexport function skipLast<T>(count: number): MonoTypeOperatorFunction<T> {\r\n  return (source: Observable<T>) => source.lift(new SkipLastOperator(count));\r\n}\r\n\r\nclass SkipLastOperator<T> implements Operator<T, T> {\r\n  constructor(private _skipCount: number) {\r\n    if (this._skipCount < 0) {\r\n      throw new ArgumentOutOfRangeError;\r\n    }\r\n  }\r\n\r\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\r\n    if (this._skipCount === 0) {\r\n      // If we don't want to skip any values then just subscribe\r\n      // to Subscriber without any further logic.\r\n      return source.subscribe(new Subscriber(subscriber));\r\n    } else {\r\n      return source.subscribe(new SkipLastSubscriber(subscriber, this._skipCount));\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * We need this JSDoc comment for affecting ESDoc.\r\n * @ignore\r\n * @extends {Ignored}\r\n */\r\nclass SkipLastSubscriber<T> extends Subscriber<T> {\r\n  private _ring: T[];\r\n  private _count: number = 0;\r\n\r\n  constructor(destination: Subscriber<T>, private _skipCount: number) {\r\n    super(destination);\r\n    this._ring = new Array<T>(_skipCount);\r\n  }\r\n\r\n  protected _next(value: T): void {\r\n    const skipCount = this._skipCount;\r\n    const count = this._count++;\r\n\r\n    if (count < skipCount) {\r\n      this._ring[count] = value;\r\n    } else {\r\n      const currentIndex = count % skipCount;\r\n      const ring = this._ring;\r\n      const oldValue = ring[currentIndex];\r\n\r\n      ring[currentIndex] = value;\r\n      this.destination.next(oldValue);\r\n    }\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}