{"ast":null,"code":"\"use strict\";\n/**\r\n * Copyright (c) \"Neo4j\"\r\n * Neo4j Sweden AB [http://neo4j.com]\r\n *\r\n * This file is part of Neo4j.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar neo4j_driver_core_1 = require(\"neo4j-driver-core\");\n\nvar _a = neo4j_driver_core_1.internal.util,\n    ENCRYPTION_OFF = _a.ENCRYPTION_OFF,\n    ENCRYPTION_ON = _a.ENCRYPTION_ON;\nvar SERVICE_UNAVAILABLE = neo4j_driver_core_1.error.SERVICE_UNAVAILABLE;\nvar DEFAULT_CONNECTION_TIMEOUT_MILLIS = 30000; // 30 seconds by default\n\nvar ALLOWED_VALUES_ENCRYPTED = [null, undefined, true, false, ENCRYPTION_ON, ENCRYPTION_OFF];\nvar ALLOWED_VALUES_TRUST = [null, undefined, 'TRUST_ALL_CERTIFICATES', 'TRUST_CUSTOM_CA_SIGNED_CERTIFICATES', 'TRUST_SYSTEM_CA_SIGNED_CERTIFICATES'];\n\nvar ChannelConfig =\n/** @class */\nfunction () {\n  /**\r\n   * @constructor\r\n   * @param {ServerAddress} address the address for the channel to connect to.\r\n   * @param {Object} driverConfig the driver config provided by the user when driver is created.\r\n   * @param {string} connectionErrorCode the default error code to use on connection errors.\r\n   */\n  function ChannelConfig(address, driverConfig, connectionErrorCode) {\n    this.address = address;\n    this.encrypted = extractEncrypted(driverConfig);\n    this.trust = extractTrust(driverConfig);\n    this.trustedCertificates = extractTrustedCertificates(driverConfig);\n    this.knownHostsPath = extractKnownHostsPath(driverConfig);\n    this.connectionErrorCode = connectionErrorCode || SERVICE_UNAVAILABLE;\n    this.connectionTimeout = extractConnectionTimeout(driverConfig);\n  }\n\n  return ChannelConfig;\n}();\n\nexports.default = ChannelConfig;\n\nfunction extractEncrypted(driverConfig) {\n  var value = driverConfig.encrypted;\n\n  if (ALLOWED_VALUES_ENCRYPTED.indexOf(value) === -1) {\n    throw (0, neo4j_driver_core_1.newError)(\"Illegal value of the encrypted setting \" + value + \". Expected one of \" + ALLOWED_VALUES_ENCRYPTED);\n  }\n\n  return value;\n}\n\nfunction extractTrust(driverConfig) {\n  var value = driverConfig.trust;\n\n  if (ALLOWED_VALUES_TRUST.indexOf(value) === -1) {\n    throw (0, neo4j_driver_core_1.newError)(\"Illegal value of the trust setting \" + value + \". Expected one of \" + ALLOWED_VALUES_TRUST);\n  }\n\n  return value;\n}\n\nfunction extractTrustedCertificates(driverConfig) {\n  return driverConfig.trustedCertificates || [];\n}\n\nfunction extractKnownHostsPath(driverConfig) {\n  return driverConfig.knownHosts || null;\n}\n\nfunction extractConnectionTimeout(driverConfig) {\n  var configuredTimeout = parseInt(driverConfig.connectionTimeout, 10);\n\n  if (configuredTimeout === 0) {\n    // timeout explicitly configured to 0\n    return null;\n  } else if (configuredTimeout && configuredTimeout < 0) {\n    // timeout explicitly configured to a negative value\n    return null;\n  } else if (!configuredTimeout) {\n    // timeout not configured, use default value\n    return DEFAULT_CONNECTION_TIMEOUT_MILLIS;\n  } else {\n    // timeout configured, use the provided value\n    return configuredTimeout;\n  }\n}","map":{"version":3,"sources":["D:/Documents/EMA/Mines A3/NoSQL/ReseauAchats/reseau_achats/node_modules/neo4j-driver-bolt-connection/lib/channel/channel-config.js"],"names":["Object","defineProperty","exports","value","neo4j_driver_core_1","require","_a","internal","util","ENCRYPTION_OFF","ENCRYPTION_ON","SERVICE_UNAVAILABLE","error","DEFAULT_CONNECTION_TIMEOUT_MILLIS","ALLOWED_VALUES_ENCRYPTED","undefined","ALLOWED_VALUES_TRUST","ChannelConfig","address","driverConfig","connectionErrorCode","encrypted","extractEncrypted","trust","extractTrust","trustedCertificates","extractTrustedCertificates","knownHostsPath","extractKnownHostsPath","connectionTimeout","extractConnectionTimeout","default","indexOf","newError","knownHosts","configuredTimeout","parseInt"],"mappings":"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","sourcesContent":["\"use strict\";\r\n/**\r\n * Copyright (c) \"Neo4j\"\r\n * Neo4j Sweden AB [http://neo4j.com]\r\n *\r\n * This file is part of Neo4j.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar neo4j_driver_core_1 = require(\"neo4j-driver-core\");\r\nvar _a = neo4j_driver_core_1.internal.util, ENCRYPTION_OFF = _a.ENCRYPTION_OFF, ENCRYPTION_ON = _a.ENCRYPTION_ON;\r\nvar SERVICE_UNAVAILABLE = neo4j_driver_core_1.error.SERVICE_UNAVAILABLE;\r\nvar DEFAULT_CONNECTION_TIMEOUT_MILLIS = 30000; // 30 seconds by default\r\nvar ALLOWED_VALUES_ENCRYPTED = [\r\n    null,\r\n    undefined,\r\n    true,\r\n    false,\r\n    ENCRYPTION_ON,\r\n    ENCRYPTION_OFF\r\n];\r\nvar ALLOWED_VALUES_TRUST = [\r\n    null,\r\n    undefined,\r\n    'TRUST_ALL_CERTIFICATES',\r\n    'TRUST_CUSTOM_CA_SIGNED_CERTIFICATES',\r\n    'TRUST_SYSTEM_CA_SIGNED_CERTIFICATES'\r\n];\r\nvar ChannelConfig = /** @class */ (function () {\r\n    /**\r\n     * @constructor\r\n     * @param {ServerAddress} address the address for the channel to connect to.\r\n     * @param {Object} driverConfig the driver config provided by the user when driver is created.\r\n     * @param {string} connectionErrorCode the default error code to use on connection errors.\r\n     */\r\n    function ChannelConfig(address, driverConfig, connectionErrorCode) {\r\n        this.address = address;\r\n        this.encrypted = extractEncrypted(driverConfig);\r\n        this.trust = extractTrust(driverConfig);\r\n        this.trustedCertificates = extractTrustedCertificates(driverConfig);\r\n        this.knownHostsPath = extractKnownHostsPath(driverConfig);\r\n        this.connectionErrorCode = connectionErrorCode || SERVICE_UNAVAILABLE;\r\n        this.connectionTimeout = extractConnectionTimeout(driverConfig);\r\n    }\r\n    return ChannelConfig;\r\n}());\r\nexports.default = ChannelConfig;\r\nfunction extractEncrypted(driverConfig) {\r\n    var value = driverConfig.encrypted;\r\n    if (ALLOWED_VALUES_ENCRYPTED.indexOf(value) === -1) {\r\n        throw (0, neo4j_driver_core_1.newError)(\"Illegal value of the encrypted setting \" + value + \". Expected one of \" + ALLOWED_VALUES_ENCRYPTED);\r\n    }\r\n    return value;\r\n}\r\nfunction extractTrust(driverConfig) {\r\n    var value = driverConfig.trust;\r\n    if (ALLOWED_VALUES_TRUST.indexOf(value) === -1) {\r\n        throw (0, neo4j_driver_core_1.newError)(\"Illegal value of the trust setting \" + value + \". Expected one of \" + ALLOWED_VALUES_TRUST);\r\n    }\r\n    return value;\r\n}\r\nfunction extractTrustedCertificates(driverConfig) {\r\n    return driverConfig.trustedCertificates || [];\r\n}\r\nfunction extractKnownHostsPath(driverConfig) {\r\n    return driverConfig.knownHosts || null;\r\n}\r\nfunction extractConnectionTimeout(driverConfig) {\r\n    var configuredTimeout = parseInt(driverConfig.connectionTimeout, 10);\r\n    if (configuredTimeout === 0) {\r\n        // timeout explicitly configured to 0\r\n        return null;\r\n    }\r\n    else if (configuredTimeout && configuredTimeout < 0) {\r\n        // timeout explicitly configured to a negative value\r\n        return null;\r\n    }\r\n    else if (!configuredTimeout) {\r\n        // timeout not configured, use default value\r\n        return DEFAULT_CONNECTION_TIMEOUT_MILLIS;\r\n    }\r\n    else {\r\n        // timeout configured, use the provided value\r\n        return configuredTimeout;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"script"}