{"ast":null,"code":"var Scheduler = /*@__PURE__*/function () {\n  function Scheduler(SchedulerAction, now) {\n    if (now === void 0) {\n      now = Scheduler.now;\n    }\n\n    this.SchedulerAction = SchedulerAction;\n    this.now = now;\n  }\n\n  Scheduler.prototype.schedule = function (work, delay, state) {\n    if (delay === void 0) {\n      delay = 0;\n    }\n\n    return new this.SchedulerAction(this, work).schedule(state, delay);\n  };\n\n  Scheduler.now = function () {\n    return Date.now();\n  };\n\n  return Scheduler;\n}();\n\nexport { Scheduler };","map":{"version":3,"mappings":"AAuBA;AASE,qBAAoBA,eAApB,EACYC,GADZ,EAC6C;AAAjC;AADQA,sBAAeA,GAAf;AAElB;;AACD;AA6BM;;;WACL,WAAgBC,qBAAuBC,IAAvB,EAA8BC,KAA9B,EAA+BC,KAA/B,EAAwC;AACzD;AApCaD,WAAG,GAAiB,CAApB;AAqChB;;AAAC;;;;;;;;CA5CD","names":["SchedulerAction","now","schedule","work","delay","state"],"sources":["D:\\Documents\\EMA\\Mines A3\\NoSQL\\ReseauAchats\\reseau_achats\\node_modules\\rxjs\\src\\internal\\Scheduler.ts"],"sourcesContent":["import { Action } from './scheduler/Action';\r\nimport { Subscription } from './Subscription';\r\nimport { SchedulerLike, SchedulerAction } from './types';\r\n\r\n/**\r\n * An execution context and a data structure to order tasks and schedule their\r\n * execution. Provides a notion of (potentially virtual) time, through the\r\n * `now()` getter method.\r\n *\r\n * Each unit of work in a Scheduler is called an `Action`.\r\n *\r\n * ```ts\r\n * class Scheduler {\r\n *   now(): number;\r\n *   schedule(work, delay?, state?): Subscription;\r\n * }\r\n * ```\r\n *\r\n * @class Scheduler\r\n * @deprecated Scheduler is an internal implementation detail of RxJS, and\r\n * should not be used directly. Rather, create your own class and implement\r\n * {@link SchedulerLike}\r\n */\r\nexport class Scheduler implements SchedulerLike {\r\n\r\n  /**\r\n   * Note: the extra arrow function wrapper is to make testing by overriding\r\n   * Date.now easier.\r\n   * @nocollapse\r\n   */\r\n  public static now: () => number = () => Date.now();\r\n\r\n  constructor(private SchedulerAction: typeof Action,\r\n              now: () => number = Scheduler.now) {\r\n    this.now = now;\r\n  }\r\n\r\n  /**\r\n   * A getter method that returns a number representing the current time\r\n   * (at the time this function was called) according to the scheduler's own\r\n   * internal clock.\r\n   * @return {number} A number that represents the current time. May or may not\r\n   * have a relation to wall-clock time. May or may not refer to a time unit\r\n   * (e.g. milliseconds).\r\n   */\r\n  public now: () => number;\r\n\r\n  /**\r\n   * Schedules a function, `work`, for execution. May happen at some point in\r\n   * the future, according to the `delay` parameter, if specified. May be passed\r\n   * some context object, `state`, which will be passed to the `work` function.\r\n   *\r\n   * The given arguments will be processed an stored as an Action object in a\r\n   * queue of actions.\r\n   *\r\n   * @param {function(state: ?T): ?Subscription} work A function representing a\r\n   * task, or some unit of work to be executed by the Scheduler.\r\n   * @param {number} [delay] Time to wait before executing the work, where the\r\n   * time unit is implicit and defined by the Scheduler itself.\r\n   * @param {T} [state] Some contextual data that the `work` function uses when\r\n   * called by the Scheduler.\r\n   * @return {Subscription} A subscription in order to be able to unsubscribe\r\n   * the scheduled work.\r\n   */\r\n  public schedule<T>(work: (this: SchedulerAction<T>, state?: T) => void, delay: number = 0, state?: T): Subscription {\r\n    return new this.SchedulerAction<T>(this, work).schedule(state, delay);\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}