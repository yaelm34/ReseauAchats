{"ast":null,"code":"/** PURE_IMPORTS_START _Observable,_AsyncSubject,_operators_map,_util_canReportError,_util_isArray,_util_isScheduler PURE_IMPORTS_END */\nimport { Observable } from '../Observable';\nimport { AsyncSubject } from '../AsyncSubject';\nimport { map } from '../operators/map';\nimport { canReportError } from '../util/canReportError';\nimport { isArray } from '../util/isArray';\nimport { isScheduler } from '../util/isScheduler';\nexport function bindCallback(callbackFunc, resultSelector, scheduler) {\n  if (resultSelector) {\n    if (isScheduler(resultSelector)) {\n      scheduler = resultSelector;\n    } else {\n      return function () {\n        var args = [];\n\n        for (var _i = 0; _i < arguments.length; _i++) {\n          args[_i] = arguments[_i];\n        }\n\n        return bindCallback(callbackFunc, scheduler).apply(void 0, args).pipe(map(function (args) {\n          return isArray(args) ? resultSelector.apply(void 0, args) : resultSelector(args);\n        }));\n      };\n    }\n  }\n\n  return function () {\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n\n    var context = this;\n    var subject;\n    var params = {\n      context: context,\n      subject: subject,\n      callbackFunc: callbackFunc,\n      scheduler: scheduler\n    };\n    return new Observable(function (subscriber) {\n      if (!scheduler) {\n        if (!subject) {\n          subject = new AsyncSubject();\n\n          var handler = function () {\n            var innerArgs = [];\n\n            for (var _i = 0; _i < arguments.length; _i++) {\n              innerArgs[_i] = arguments[_i];\n            }\n\n            subject.next(innerArgs.length <= 1 ? innerArgs[0] : innerArgs);\n            subject.complete();\n          };\n\n          try {\n            callbackFunc.apply(context, args.concat([handler]));\n          } catch (err) {\n            if (canReportError(subject)) {\n              subject.error(err);\n            } else {\n              console.warn(err);\n            }\n          }\n        }\n\n        return subject.subscribe(subscriber);\n      } else {\n        var state = {\n          args: args,\n          subscriber: subscriber,\n          params: params\n        };\n        return scheduler.schedule(dispatch, 0, state);\n      }\n    });\n  };\n}\n\nfunction dispatch(state) {\n  var _this = this;\n\n  var self = this;\n  var args = state.args,\n      subscriber = state.subscriber,\n      params = state.params;\n  var callbackFunc = params.callbackFunc,\n      context = params.context,\n      scheduler = params.scheduler;\n  var subject = params.subject;\n\n  if (!subject) {\n    subject = params.subject = new AsyncSubject();\n\n    var handler = function () {\n      var innerArgs = [];\n\n      for (var _i = 0; _i < arguments.length; _i++) {\n        innerArgs[_i] = arguments[_i];\n      }\n\n      var value = innerArgs.length <= 1 ? innerArgs[0] : innerArgs;\n\n      _this.add(scheduler.schedule(dispatchNext, 0, {\n        value: value,\n        subject: subject\n      }));\n    };\n\n    try {\n      callbackFunc.apply(context, args.concat([handler]));\n    } catch (err) {\n      subject.error(err);\n    }\n  }\n\n  this.add(subject.subscribe(subscriber));\n}\n\nfunction dispatchNext(state) {\n  var value = state.value,\n      subject = state.subject;\n  subject.next(value);\n  subject.complete();\n}\n\nfunction dispatchError(state) {\n  var err = state.err,\n      subject = state.subject;\n  subject.error(err);\n}","map":{"version":3,"mappings":"AACA;AACA,SAASA,UAAT,QAAuB,eAAvB;AAEA,SAASC,YAAT,QAAoB,iBAApB;AACA,SAASC,GAAT,QAAS,kBAAT;AACA,SAASC,cAAT,QAAwB,wBAAxB;AACA,SAASC,OAAT,QAAsB,iBAAtB;AA4KA,SAAMC,WAAN,QAA4B,qBAA5B;OAKE,SAAIC,YAAJ,CAAoBC,YAApB,EAAoBC,cAApB,EAAoBC,SAApB,EAAoB;MAClBD,gBAAgB;QACdH,WAAS,CAAGG,cAAH,GAAkB;AAC5BC;WAEC;aAAQ,YAAc;gBAAd;;aAAA,0BAAc;;AAAK;;AAEzB;AAAA;AAAA;AACH;AACF;AAED;;SAA4B,YAAc;YAAd;;SAAA,0BAAc;;AACxC;;AACA,QAAIC,OAAwB,GAAC,IAA7B;AACA,QAAMC,OAAN;QACEC,SAAO;AACPF,aAAO,SADA;AAEPC,sBAFO;AAGPJ,kBAAS,cAHF;AAIPE;AAJO;WAMP,IAAKT,UAAL,CAAgB;UACd,YAAY;YACV,UAAU;AACVW,iBAAM,OAAUV,YAAV,EAAN;;cAAiBY,sBAAmB;yBAAnB,GAAmB;;iBAAnB,mCAAmBC;;AAClC;;AACAH,mBAAO,CAACI,IAAR,CAAQC,SAAW,OAAX,IAAW,CAAX,GAAWA,YAAX,GAAWA,SAAnB;AACAL;AAEF;;cACE;AACDJ;AAAC,mBACAU,KAAI;gBACFd,cAAc,WAAK;AACpBQ;mBACC;AACDO;AACF;AACF;AACD;;AACD;aACC;YACEC,KAAI;AACJC,oBADI;AACJC,gCADI;AACJT;AADI;AAGP;AACA;AACH,KA1BE;AA2BL;AAeD;;SAAAU,gBAqBC;AApBC,MAAMC,KAAI,GAAG,IAAb;;AACQ;AACA;AAAA,wBAAc,WAAd;AAAA,MAAcX,cAAS,OAAvB;AACF;AAAA,MAAmBF,wBAAnB;AAAA,MAAmBD,4BAAnB;AACN,MAAIE,OAAC,GAASC,cAAd;;MACE,UAAU;AAEVD,WAAM,SAAU,QAAV,GAAU,kBAAhB;;QAAiBE,sBAAmB;mBAAnB,GAAmB;;WAAnB,mCAAmBC;;AAClC;;AACA,eAAQ,GAACE,SAAU,OAAV,IAAiC,CAAjC,GAAiCA,SAAe,CAAE,CAAF,CAAhD,GAAoDA,SAA7D;;AACAO;AAAAC;AAAAb;AAAA;AAEF;;QACE;AACDJ;AAAC,aACAU,KAAQ;AACTN;AACF;AAED;;AACD;AAOD;;SACUc,oBAAO;AACf,WAAQ,GAAIN,KAAC,CAAKK,KAAlB;AAAA,MAAoBb,uBAApB;AACAA,SAAO,CAACI,IAAR,CAAQS,KAAR;AACDb;AAOD;;SACUe,cAAGP,OAAE;AACb,SAAO,GAACA,KAAM,IAAd;AAAA,MAAmBR,uBAAnB;AACDA","names":["Observable","AsyncSubject","map","canReportError","isArray","isScheduler","bindCallback","callbackFunc","resultSelector","scheduler","context","subject","params","handler","_i","next","innerArgs","err","console","state","args","subscriber","dispatch","_this","value","dispatchNext","dispatchError"],"sources":["D:\\Documents\\EMA\\Mines A3\\NoSQL\\ReseauAchats\\reseau_achats\\node_modules\\rxjs\\src\\internal\\observable\\bindCallback.ts"],"sourcesContent":["import { SchedulerLike, SchedulerAction } from '../types';\r\nimport { Observable } from '../Observable';\r\nimport { AsyncSubject } from '../AsyncSubject';\r\nimport { Subscriber } from '../Subscriber';\r\nimport { map } from '../operators/map';\r\nimport { canReportError } from '../util/canReportError';\r\nimport { isArray } from '../util/isArray';\r\nimport { isScheduler } from '../util/isScheduler';\r\n\r\n// tslint:disable:max-line-length\r\n/** @deprecated resultSelector is no longer supported, use a mapping function. */\r\nexport function bindCallback(callbackFunc: Function, resultSelector: Function, scheduler?: SchedulerLike): (...args: any[]) => Observable<any>;\r\n\r\nexport function bindCallback<R1, R2, R3, R4>(callbackFunc: (callback: (res1: R1, res2: R2, res3: R3, res4: R4, ...args: any[]) => any) => any, scheduler?: SchedulerLike): () => Observable<any[]>;\r\nexport function bindCallback<R1, R2, R3>(callbackFunc: (callback: (res1: R1, res2: R2, res3: R3) => any) => any, scheduler?: SchedulerLike): () => Observable<[R1, R2, R3]>;\r\nexport function bindCallback<R1, R2>(callbackFunc: (callback: (res1: R1, res2: R2) => any) => any, scheduler?: SchedulerLike): () => Observable<[R1, R2]>;\r\nexport function bindCallback<R1>(callbackFunc: (callback: (res1: R1) => any) => any, scheduler?: SchedulerLike): () => Observable<R1>;\r\nexport function bindCallback(callbackFunc: (callback: () => any) => any, scheduler?: SchedulerLike): () => Observable<void>;\r\n\r\nexport function bindCallback<A1, R1, R2, R3, R4>(callbackFunc: (arg1: A1, callback: (res1: R1, res2: R2, res3: R3, res4: R4, ...args: any[]) => any) => any, scheduler?: SchedulerLike): (arg1: A1) => Observable<any[]>;\r\nexport function bindCallback<A1, R1, R2, R3>(callbackFunc: (arg1: A1, callback: (res1: R1, res2: R2, res3: R3) => any) => any, scheduler?: SchedulerLike): (arg1: A1) => Observable<[R1, R2, R3]>;\r\nexport function bindCallback<A1, R1, R2>(callbackFunc: (arg1: A1, callback: (res1: R1, res2: R2) => any) => any, scheduler?: SchedulerLike): (arg1: A1) => Observable<[R1, R2]>;\r\nexport function bindCallback<A1, R1>(callbackFunc: (arg1: A1, callback: (res1: R1) => any) => any, scheduler?: SchedulerLike): (arg1: A1) => Observable<R1>;\r\nexport function bindCallback<A1>(callbackFunc: (arg1: A1, callback: () => any) => any, scheduler?: SchedulerLike): (arg1: A1) => Observable<void>;\r\n\r\nexport function bindCallback<A1, A2, R1, R2, R3, R4>(callbackFunc: (arg1: A1, arg2: A2, callback: (res1: R1, res2: R2, res3: R3, res4: R4, ...args: any[]) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2) => Observable<any[]>;\r\nexport function bindCallback<A1, A2, R1, R2, R3>(callbackFunc: (arg1: A1, arg2: A2, callback: (res1: R1, res2: R2, res3: R3) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2) => Observable<[R1, R2, R3]>;\r\nexport function bindCallback<A1, A2, R1, R2>(callbackFunc: (arg1: A1, arg2: A2, callback: (res1: R1, res2: R2) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2) => Observable<[R1, R2]>;\r\nexport function bindCallback<A1, A2, R1>(callbackFunc: (arg1: A1, arg2: A2, callback: (res1: R1) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2) => Observable<R1>;\r\nexport function bindCallback<A1, A2>(callbackFunc: (arg1: A1, arg2: A2, callback: () => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2) => Observable<void>;\r\n\r\nexport function bindCallback<A1, A2, A3, R1, R2, R3, R4>(callbackFunc: (arg1: A1, arg2: A2, arg3: A3, callback: (res1: R1, res2: R2, res3: R3, res4: R4, ...args: any[]) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2, arg3: A3) => Observable<any[]>;\r\nexport function bindCallback<A1, A2, A3, R1, R2, R3>(callbackFunc: (arg1: A1, arg2: A2, arg3: A3, callback: (res1: R1, res2: R2, res3: R3) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2, arg3: A3) => Observable<[R1, R2, R3]>;\r\nexport function bindCallback<A1, A2, A3, R1, R2>(callbackFunc: (arg1: A1, arg2: A2, arg3: A3, callback: (res1: R1, res2: R2) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2, arg3: A3) => Observable<[R1, R2]>;\r\nexport function bindCallback<A1, A2, A3, R1>(callbackFunc: (arg1: A1, arg2: A2, arg3: A3, callback: (res1: R1) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2, arg3: A3) => Observable<R1>;\r\nexport function bindCallback<A1, A2, A3>(callbackFunc: (arg1: A1, arg2: A2, arg3: A3, callback: () => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2, arg3: A3) => Observable<void>;\r\n\r\nexport function bindCallback<A1, A2, A3, A4, R1, R2, R3, R4>(callbackFunc: (arg1: A1, arg2: A2, arg3: A3, arg4: A4, callback: (res1: R1, res2: R2, res3: R3, res4: R4, ...args: any[]) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2, arg3: A3, arg4: A4) => Observable<any[]>;\r\nexport function bindCallback<A1, A2, A3, A4, R1, R2, R3>(callbackFunc: (arg1: A1, arg2: A2, arg3: A3, arg4: A4, callback: (res1: R1, res2: R2, res3: R3) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2, arg3: A3, arg4: A4) => Observable<[R1, R2, R3]>;\r\nexport function bindCallback<A1, A2, A3, A4, R1, R2>(callbackFunc: (arg1: A1, arg2: A2, arg3: A3, arg4: A4, callback: (res1: R1, res2: R2) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2, arg3: A3, arg4: A4) => Observable<[R1, R2]>;\r\nexport function bindCallback<A1, A2, A3, A4, R1>(callbackFunc: (arg1: A1, arg2: A2, arg3: A3, arg4: A4, callback: (res1: R1) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2, arg3: A3, arg4: A4) => Observable<R1>;\r\nexport function bindCallback<A1, A2, A3, A4>(callbackFunc: (arg1: A1, arg2: A2, arg3: A3, arg4: A4, callback: () => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2, arg3: A3, arg4: A4) => Observable<void>;\r\n\r\nexport function bindCallback<A1, A2, A3, A4, A5, R1, R2, R3, R4>(callbackFunc: (arg1: A1, arg2: A2, arg3: A3, arg4: A4, arg5: A5, callback: (res1: R1, res2: R2, res3: R3, res4: R4, ...args: any[]) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2, arg3: A3, arg4: A4, arg5: A5) => Observable<any[]>;\r\nexport function bindCallback<A1, A2, A3, A4, A5, R1, R2, R3>(callbackFunc: (arg1: A1, arg2: A2, arg3: A3, arg4: A4, arg5: A5, callback: (res1: R1, res2: R2, res3: R3) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2, arg3: A3, arg4: A4, arg5: A5) => Observable<[R1, R2, R3]>;\r\nexport function bindCallback<A1, A2, A3, A4, A5, R1, R2>(callbackFunc: (arg1: A1, arg2: A2, arg3: A3, arg4: A4, arg5: A5, callback: (res1: R1, res2: R2) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2, arg3: A3, arg4: A4, arg5: A5) => Observable<[R1, R2]>;\r\nexport function bindCallback<A1, A2, A3, A4, A5, R1>(callbackFunc: (arg1: A1, arg2: A2, arg3: A3, arg4: A4, arg5: A5, callback: (res1: R1) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2, arg3: A3, arg4: A4, arg5: A5) => Observable<R1>;\r\nexport function bindCallback<A1, A2, A3, A4, A5>(callbackFunc: (arg1: A1, arg2: A2, arg3: A3, arg4: A4, arg5: A5, callback: () => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2, arg3: A3, arg4: A4, arg5: A5) => Observable<void>;\r\n\r\nexport function bindCallback<A, R>(callbackFunc: (...args: Array<A | ((result: R) => any)>) => any, scheduler?: SchedulerLike): (...args: A[]) => Observable<R>;\r\nexport function bindCallback<A, R>(callbackFunc: (...args: Array<A | ((...results: R[]) => any)>) => any, scheduler?: SchedulerLike): (...args: A[]) => Observable<R[]>;\r\n\r\nexport function bindCallback(callbackFunc: Function, scheduler?: SchedulerLike): (...args: any[]) => Observable<any>;\r\n\r\n// tslint:enable:max-line-length\r\n\r\n/**\r\n * Converts a callback API to a function that returns an Observable.\r\n *\r\n * <span class=\"informal\">Give it a function `f` of type `f(x, callback)` and\r\n * it will return a function `g` that when called as `g(x)` will output an\r\n * Observable.</span>\r\n *\r\n * `bindCallback` is not an operator because its input and output are not\r\n * Observables. The input is a function `func` with some parameters. The\r\n * last parameter must be a callback function that `func` calls when it is\r\n * done.\r\n *\r\n * The output of `bindCallback` is a function that takes the same parameters\r\n * as `func`, except the last one (the callback). When the output function\r\n * is called with arguments it will return an Observable. If function `func`\r\n * calls its callback with one argument, the Observable will emit that value.\r\n * If on the other hand the callback is called with multiple values the resulting\r\n * Observable will emit an array with said values as arguments.\r\n *\r\n * It is **very important** to remember that input function `func` is not called\r\n * when the output function is, but rather when the Observable returned by the output\r\n * function is subscribed. This means if `func` makes an AJAX request, that request\r\n * will be made every time someone subscribes to the resulting Observable, but not before.\r\n *\r\n * The last optional parameter - `scheduler` - can be used to control when the call\r\n * to `func` happens after someone subscribes to Observable, as well as when results\r\n * passed to callback will be emitted. By default, the subscription to an Observable calls `func`\r\n * synchronously, but using {@link asyncScheduler} as the last parameter will defer the call to `func`,\r\n * just like wrapping the call in `setTimeout` with a timeout of `0` would. If you were to use the async Scheduler\r\n * and call `subscribe` on the output Observable, all function calls that are currently executing\r\n * will end before `func` is invoked.\r\n *\r\n * By default, results passed to the callback are emitted immediately after `func` invokes the callback.\r\n * In particular, if the callback is called synchronously, then the subscription of the resulting Observable\r\n * will call the `next` function synchronously as well.  If you want to defer that call,\r\n * you may use {@link asyncScheduler} just as before.  This means that by using `Scheduler.async` you can\r\n * ensure that `func` always calls its callback asynchronously, thus avoiding terrifying Zalgo.\r\n *\r\n * Note that the Observable created by the output function will always emit a single value\r\n * and then complete immediately. If `func` calls the callback multiple times, values from subsequent\r\n * calls will not appear in the stream. If you need to listen for multiple calls,\r\n *  you probably want to use {@link fromEvent} or {@link fromEventPattern} instead.\r\n *\r\n * If `func` depends on some context (`this` property) and is not already bound, the context of `func`\r\n * will be the context that the output function has at call time. In particular, if `func`\r\n * is called as a method of some objec and if `func` is not already bound, in order to preserve the context\r\n * it is recommended that the context of the output function is set to that object as well.\r\n *\r\n * If the input function calls its callback in the \"node style\" (i.e. first argument to callback is\r\n * optional error parameter signaling whether the call failed or not), {@link bindNodeCallback}\r\n * provides convenient error handling and probably is a better choice.\r\n * `bindCallback` will treat such functions the same as any other and error parameters\r\n * (whether passed or not) will always be interpreted as regular callback argument.\r\n *\r\n * ## Examples\r\n *\r\n * ### Convert jQuery's getJSON to an Observable API\r\n * ```ts\r\n * import { bindCallback } from 'rxjs';\r\n * import * as jQuery from 'jquery';\r\n *\r\n * // Suppose we have jQuery.getJSON('/my/url', callback)\r\n * const getJSONAsObservable = bindCallback(jQuery.getJSON);\r\n * const result = getJSONAsObservable('/my/url');\r\n * result.subscribe(x => console.log(x), e => console.error(e));\r\n * ```\r\n *\r\n * ### Receive an array of arguments passed to a callback\r\n * ```ts\r\n * import { bindCallback } from 'rxjs';\r\n *\r\n * const someFunction = (a, b, c) => {\r\n *   console.log(a); // 5\r\n *   console.log(b); // 'some string'\r\n *   console.log(c); // {someProperty: 'someValue'}\r\n * };\r\n *\r\n * const boundSomeFunction = bindCallback(someFunction);\r\n * boundSomeFunction().subscribe(values => {\r\n *   console.log(values) // [5, 'some string', {someProperty: 'someValue'}]\r\n * });\r\n * ```\r\n *\r\n * ### Compare behaviour with and without async Scheduler\r\n * ```ts\r\n * import { bindCallback } from 'rxjs';\r\n *\r\n * function iCallMyCallbackSynchronously(cb) {\r\n *   cb();\r\n * }\r\n *\r\n * const boundSyncFn = bindCallback(iCallMyCallbackSynchronously);\r\n * const boundAsyncFn = bindCallback(iCallMyCallbackSynchronously, null, Rx.Scheduler.async);\r\n *\r\n * boundSyncFn().subscribe(() => console.log('I was sync!'));\r\n * boundAsyncFn().subscribe(() => console.log('I was async!'));\r\n * console.log('This happened...');\r\n *\r\n * // Logs:\r\n * // I was sync!\r\n * // This happened...\r\n * // I was async!\r\n * ```\r\n *\r\n * ### Use bindCallback on an object method\r\n * ```ts\r\n * import { bindCallback } from 'rxjs';\r\n *\r\n * const boundMethod = bindCallback(someObject.methodWithCallback);\r\n * boundMethod.call(someObject) // make sure methodWithCallback has access to someObject\r\n * .subscribe(subscriber);\r\n * ```\r\n *\r\n * @see {@link bindNodeCallback}\r\n * @see {@link from}\r\n *\r\n * @param {function} func A function with a callback as the last parameter.\r\n * @param {SchedulerLike} [scheduler] The scheduler on which to schedule the\r\n * callbacks.\r\n * @return {function(...params: *): Observable} A function which returns the\r\n * Observable that delivers the same values the callback would deliver.\r\n * @name bindCallback\r\n */\r\nexport function bindCallback<T>(\r\n  callbackFunc: Function,\r\n  resultSelector?: Function|SchedulerLike,\r\n  scheduler?: SchedulerLike\r\n): (...args: any[]) => Observable<T> {\r\n  if (resultSelector) {\r\n    if (isScheduler(resultSelector)) {\r\n      scheduler = resultSelector;\r\n    } else {\r\n      // DEPRECATED PATH\r\n      return (...args: any[]) => bindCallback(callbackFunc, scheduler)(...args).pipe(\r\n        map((args) => isArray(args) ? resultSelector(...args) : resultSelector(args)),\r\n      );\r\n    }\r\n  }\r\n\r\n  return function (this: any, ...args: any[]): Observable<T> {\r\n    const context = this;\r\n    let subject: AsyncSubject<T>;\r\n    const params = {\r\n      context,\r\n      subject,\r\n      callbackFunc,\r\n      scheduler,\r\n    };\r\n    return new Observable<T>(subscriber => {\r\n      if (!scheduler) {\r\n        if (!subject) {\r\n          subject = new AsyncSubject<T>();\r\n          const handler = (...innerArgs: any[]) => {\r\n            subject.next(innerArgs.length <= 1 ? innerArgs[0] : innerArgs);\r\n            subject.complete();\r\n          };\r\n\r\n          try {\r\n            callbackFunc.apply(context, [...args, handler]);\r\n          } catch (err) {\r\n            if (canReportError(subject)) {\r\n              subject.error(err);\r\n            } else {\r\n              console.warn(err);\r\n            }\r\n          }\r\n        }\r\n        return subject.subscribe(subscriber);\r\n      } else {\r\n        const state: DispatchState<T> = {\r\n          args, subscriber, params,\r\n        };\r\n        return scheduler.schedule<DispatchState<T>>(dispatch, 0, state);\r\n      }\r\n    });\r\n  };\r\n}\r\n\r\ninterface DispatchState<T> {\r\n  args: any[];\r\n  subscriber: Subscriber<T>;\r\n  params: ParamsContext<T>;\r\n}\r\n\r\ninterface ParamsContext<T> {\r\n  callbackFunc: Function;\r\n  scheduler: SchedulerLike;\r\n  context: any;\r\n  subject: AsyncSubject<T>;\r\n}\r\n\r\nfunction dispatch<T>(this: SchedulerAction<DispatchState<T>>, state: DispatchState<T>) {\r\n  const self = this;\r\n  const { args, subscriber, params } = state;\r\n  const { callbackFunc, context, scheduler } = params;\r\n  let { subject } = params;\r\n  if (!subject) {\r\n    subject = params.subject = new AsyncSubject<T>();\r\n\r\n    const handler = (...innerArgs: any[]) => {\r\n      const value = innerArgs.length <= 1 ? innerArgs[0] : innerArgs;\r\n      this.add(scheduler.schedule<NextState<T>>(dispatchNext, 0, { value, subject }));\r\n    };\r\n\r\n    try {\r\n      callbackFunc.apply(context, [...args, handler]);\r\n    } catch (err) {\r\n      subject.error(err);\r\n    }\r\n  }\r\n\r\n  this.add(subject.subscribe(subscriber));\r\n}\r\n\r\ninterface NextState<T> {\r\n  subject: AsyncSubject<T>;\r\n  value: T;\r\n}\r\n\r\nfunction dispatchNext<T>(this: SchedulerAction<NextState<T>>, state: NextState<T>) {\r\n  const { value, subject } = state;\r\n  subject.next(value);\r\n  subject.complete();\r\n}\r\n\r\ninterface ErrorState<T> {\r\n  subject: AsyncSubject<T>;\r\n  err: any;\r\n}\r\n\r\nfunction dispatchError<T>(this: SchedulerAction<ErrorState<T>>, state: ErrorState<T>) {\r\n  const { err, subject } = state;\r\n  subject.error(err);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}