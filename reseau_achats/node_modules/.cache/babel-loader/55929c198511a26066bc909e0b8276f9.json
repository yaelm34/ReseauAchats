{"ast":null,"code":"/** PURE_IMPORTS_START tslib,_map,_observable_from,_innerSubscribe PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { map } from './map';\nimport { from } from '../observable/from';\nimport { SimpleOuterSubscriber, SimpleInnerSubscriber, innerSubscribe } from '../innerSubscribe';\nexport function switchMap(project, resultSelector) {\n  if (typeof resultSelector === 'function') {\n    return function (source) {\n      return source.pipe(switchMap(function (a, i) {\n        return from(project(a, i)).pipe(map(function (b, ii) {\n          return resultSelector(a, b, i, ii);\n        }));\n      }));\n    };\n  }\n\n  return function (source) {\n    return source.lift(new SwitchMapOperator(project));\n  };\n}\n\nvar SwitchMapOperator = /*@__PURE__*/function () {\n  function SwitchMapOperator(project) {\n    this.project = project;\n  }\n\n  SwitchMapOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new SwitchMapSubscriber(subscriber, this.project));\n  };\n\n  return SwitchMapOperator;\n}();\n\nvar SwitchMapSubscriber = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(SwitchMapSubscriber, _super);\n\n  function SwitchMapSubscriber(destination, project) {\n    var _this = _super.call(this, destination) || this;\n\n    _this.project = project;\n    _this.index = 0;\n    return _this;\n  }\n\n  SwitchMapSubscriber.prototype._next = function (value) {\n    var result;\n    var index = this.index++;\n\n    try {\n      result = this.project(value, index);\n    } catch (error) {\n      this.destination.error(error);\n      return;\n    }\n\n    this._innerSub(result);\n  };\n\n  SwitchMapSubscriber.prototype._innerSub = function (result) {\n    var innerSubscription = this.innerSubscription;\n\n    if (innerSubscription) {\n      innerSubscription.unsubscribe();\n    }\n\n    var innerSubscriber = new SimpleInnerSubscriber(this);\n    var destination = this.destination;\n    destination.add(innerSubscriber);\n    this.innerSubscription = innerSubscribe(result, innerSubscriber);\n\n    if (this.innerSubscription !== innerSubscriber) {\n      destination.add(this.innerSubscription);\n    }\n  };\n\n  SwitchMapSubscriber.prototype._complete = function () {\n    var innerSubscription = this.innerSubscription;\n\n    if (!innerSubscription || innerSubscription.closed) {\n      _super.prototype._complete.call(this);\n    }\n\n    this.unsubscribe();\n  };\n\n  SwitchMapSubscriber.prototype._unsubscribe = function () {\n    this.innerSubscription = undefined;\n  };\n\n  SwitchMapSubscriber.prototype.notifyComplete = function () {\n    this.innerSubscription = undefined;\n\n    if (this.isStopped) {\n      _super.prototype._complete.call(this);\n    }\n  };\n\n  SwitchMapSubscriber.prototype.notifyNext = function (innerValue) {\n    this.destination.next(innerValue);\n  };\n\n  return SwitchMapSubscriber;\n}(SimpleOuterSubscriber);","map":{"version":3,"mappings":";AAKA,OAAO,KAAKA,OAAZ,MAAoB,OAApB;AACA,SAASC,GAAT,QAAe,OAAf;AACA,SAASC,IAAT,QAAS,oBAAT;AAwEA,SAAMC,qBAAN,EACEC,qBADF,EAE+GC,cAF/G,QAE+G,mBAF/G;OAIE,SAAWC,SAAX,CAAWC,OAAX,EAA8BC,cAA9B,EAA0C;MACxC,OAAOA,cAAP,KAA6B,YAAK;AAKnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACD;;AACD;AAAA;AAAA;AAED;;IACEC,iCAA4E;WAAxDA,kBAAwDF;AAC3E;AAED;;mBACe,CAACG,UAAUC,OAAI,sBAAoBC,MAApB,EAAgC;AAC7D;AACH;;AAPA,SAOCH,iBAPD;AAcA,CAb8E;;IAatCI,6CAA2BC,MAA3B,EAA2B;AAIjEd,yCAAYc,MAAZ;;WAAAD,oBAEEE,aAAMR,SAAY;AADA,4BAAwD,IAAxD,EAAwDQ,WAAxD,KAAwD,IAAxD;;AAJZC,oBAAUT,OAAV;;AAMP;AAES;;qBACuB;AAC/B,QAAMU,MAAN;AACA,QAAIC,oBAAJ;;QACE;AACDD;AAAC,aACAE,OAAK;AACL,uBAAOA,KAAP,CAAOA,KAAP;AACD;AACD;;AACD;AAEO;;qBACA,WAAoBC,YAAK,UAAkBH,MAAlB,EAAkB;AACjD,QAAII,iBAAiB,GAAE,sBAAvB;;QACEA,mBAAkB;AACnBA;AACD;;AACA,QAAMC,eAAc,GAAI,IAAClB,qBAAD,CAA6B,IAA7B,CAAxB;AACA,mBAAe,GAAC,gBAAhB;AACAW,eAAK,IAAL,CAAKO,eAAL;AAIA,SAAID,iBAAJ,GAAShB,cAAsB,SAAiBiB,eAAjB,CAA/B;;QACE,2BAAqBA,iBAAmB;AACzCP;AACF;AAES;;qBACD,mCAA0B;AACjC,QAAIM,iBAAC,GAAiB,KAAIA,iBAA1B;;QACE,sBAAMA,iBAAY;AACnBP;AACD;;AACD;AAES;;qBACH,WAAoBS,eAAU;AACpC;AAED;;qBACO,WAAoBC,iBAAU;AACnC,SAAIH,iBAAJ,GAAoBI,SAApB;;QACE;AACDX;AACF;AAED;;qBACS,CAAWJ,UAAOgB,aAAY;AACtC;AACH;;AA5DwC;CAAA","names":["tslib_1","map","from","SimpleOuterSubscriber","SimpleInnerSubscriber","innerSubscribe","switchMap","project","resultSelector","SwitchMapOperator","prototype","call","source","SwitchMapSubscriber","_super","destination","_this","result","index","error","_innerSub","innerSubscription","innerSubscriber","_unsubscribe","notifyComplete","undefined","notifyNext"],"sources":["D:\\Documents\\EMA\\Mines A3\\NoSQL\\ReseauAchats\\reseau_achats\\node_modules\\rxjs\\src\\internal\\operators\\switchMap.ts"],"sourcesContent":["import { Operator } from '../Operator';\r\nimport { Observable } from '../Observable';\r\nimport { Subscriber } from '../Subscriber';\r\nimport { Subscription } from '../Subscription';\r\nimport { ObservableInput, OperatorFunction, ObservedValueOf } from '../types';\r\nimport { map } from './map';\r\nimport { from } from '../observable/from';\r\nimport { SimpleOuterSubscriber, SimpleInnerSubscriber, innerSubscribe } from '../innerSubscribe';\r\n\r\n/* tslint:disable:max-line-length */\r\nexport function switchMap<T, O extends ObservableInput<any>>(project: (value: T, index: number) => O): OperatorFunction<T, ObservedValueOf<O>>;\r\n/** @deprecated resultSelector is no longer supported, use inner map instead */\r\nexport function switchMap<T, O extends ObservableInput<any>>(project: (value: T, index: number) => O, resultSelector: undefined): OperatorFunction<T, ObservedValueOf<O>>;\r\n/** @deprecated resultSelector is no longer supported, use inner map instead */\r\nexport function switchMap<T, R, O extends ObservableInput<any>>(project: (value: T, index: number) => O, resultSelector: (outerValue: T, innerValue: ObservedValueOf<O>, outerIndex: number, innerIndex: number) => R): OperatorFunction<T, R>;\r\n/* tslint:enable:max-line-length */\r\n\r\n/**\r\n * Projects each source value to an Observable which is merged in the output\r\n * Observable, emitting values only from the most recently projected Observable.\r\n *\r\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\r\n * these inner Observables.</span>\r\n *\r\n * ![](switchMap.png)\r\n *\r\n * Returns an Observable that emits items based on applying a function that you\r\n * supply to each item emitted by the source Observable, where that function\r\n * returns an (so-called \"inner\") Observable. Each time it observes one of these\r\n * inner Observables, the output Observable begins emitting the items emitted by\r\n * that inner Observable. When a new inner Observable is emitted, `switchMap`\r\n * stops emitting items from the earlier-emitted inner Observable and begins\r\n * emitting items from the new one. It continues to behave like this for\r\n * subsequent inner Observables.\r\n *\r\n * ## Example\r\n * Generate new Observable according to source Observable values\r\n * ```typescript\r\n * import { of } from 'rxjs';\r\n * import { switchMap } from 'rxjs/operators';\r\n *\r\n * const switched = of(1, 2, 3).pipe(switchMap((x: number) => of(x, x ** 2, x ** 3)));\r\n * switched.subscribe(x => console.log(x));\r\n * // outputs\r\n * // 1\r\n * // 1\r\n * // 1\r\n * // 2\r\n * // 4\r\n * // 8\r\n * // ... and so on\r\n * ```\r\n *\r\n * Rerun an interval Observable on every click event\r\n * ```ts\r\n * import { fromEvent, interval } from 'rxjs';\r\n * import { switchMap } from 'rxjs/operators';\r\n *\r\n * const clicks = fromEvent(document, 'click');\r\n * const result = clicks.pipe(switchMap((ev) => interval(1000)));\r\n * result.subscribe(x => console.log(x));\r\n * ```\r\n *\r\n * @see {@link concatMap}\r\n * @see {@link exhaustMap}\r\n * @see {@link mergeMap}\r\n * @see {@link switchAll}\r\n * @see {@link switchMapTo}\r\n *\r\n * @param {function(value: T, ?index: number): ObservableInput} project A function\r\n * that, when applied to an item emitted by the source Observable, returns an\r\n * Observable.\r\n * @return {Observable} An Observable that emits the result of applying the\r\n * projection function (and the optional deprecated `resultSelector`) to each item\r\n * emitted by the source Observable and taking only the values from the most recently\r\n * projected inner Observable.\r\n * @method switchMap\r\n * @owner Observable\r\n */\r\nexport function switchMap<T, R, O extends ObservableInput<any>>(\r\n  project: (value: T, index: number) => O,\r\n  resultSelector?: (outerValue: T, innerValue: ObservedValueOf<O>, outerIndex: number, innerIndex: number) => R,\r\n): OperatorFunction<T, ObservedValueOf<O>|R> {\r\n  if (typeof resultSelector === 'function') {\r\n    return (source: Observable<T>) => source.pipe(\r\n      switchMap((a, i) => from(project(a, i)).pipe(\r\n        map((b, ii) => resultSelector(a, b, i, ii))\r\n      ))\r\n    );\r\n  }\r\n  return (source: Observable<T>) => source.lift(new SwitchMapOperator(project));\r\n}\r\n\r\nclass SwitchMapOperator<T, R> implements Operator<T, R> {\r\n  constructor(private project: (value: T, index: number) => ObservableInput<R>) {\r\n  }\r\n\r\n  call(subscriber: Subscriber<R>, source: any): any {\r\n    return source.subscribe(new SwitchMapSubscriber(subscriber, this.project));\r\n  }\r\n}\r\n\r\n/**\r\n * We need this JSDoc comment for affecting ESDoc.\r\n * @ignore\r\n * @extends {Ignored}\r\n */\r\nclass SwitchMapSubscriber<T, R> extends SimpleOuterSubscriber<T, R> {\r\n  private index = 0;\r\n  private innerSubscription?: Subscription;\r\n\r\n  constructor(destination: Subscriber<R>,\r\n              private project: (value: T, index: number) => ObservableInput<R>) {\r\n    super(destination);\r\n  }\r\n\r\n  protected _next(value: T) {\r\n    let result: ObservableInput<R>;\r\n    const index = this.index++;\r\n    try {\r\n      result = this.project(value, index);\r\n    } catch (error) {\r\n      this.destination.error!(error);\r\n      return;\r\n    }\r\n    this._innerSub(result);\r\n  }\r\n\r\n  private _innerSub(result: ObservableInput<R>) {\r\n    const innerSubscription = this.innerSubscription;\r\n    if (innerSubscription) {\r\n      innerSubscription.unsubscribe();\r\n    }\r\n    const innerSubscriber = new SimpleInnerSubscriber(this);\r\n    const destination = this.destination as Subscription;\r\n    destination.add(innerSubscriber);\r\n    this.innerSubscription = innerSubscribe(result, innerSubscriber);\r\n    // The returned subscription will usually be the subscriber that was\r\n    // passed. However, interop subscribers will be wrapped and for\r\n    // unsubscriptions to chain correctly, the wrapper needs to be added, too.\r\n    if (this.innerSubscription !== innerSubscriber) {\r\n      destination.add(this.innerSubscription);\r\n    }\r\n  }\r\n\r\n  protected _complete(): void {\r\n    const {innerSubscription} = this;\r\n    if (!innerSubscription || innerSubscription.closed) {\r\n      super._complete();\r\n    }\r\n    this.unsubscribe();\r\n  }\r\n\r\n  protected _unsubscribe() {\r\n    this.innerSubscription = undefined;\r\n  }\r\n\r\n  notifyComplete(): void {\r\n    this.innerSubscription = undefined;\r\n    if (this.isStopped) {\r\n      super._complete();\r\n    }\r\n  }\r\n\r\n  notifyNext(innerValue: R): void {\r\n      this.destination.next!(innerValue);\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}