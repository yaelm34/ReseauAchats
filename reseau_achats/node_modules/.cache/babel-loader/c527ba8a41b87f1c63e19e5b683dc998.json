{"ast":null,"code":"/** PURE_IMPORTS_START _symbol_iterator PURE_IMPORTS_END */\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nexport var subscribeToIterable = function (iterable) {\n  return function (subscriber) {\n    var iterator = iterable[Symbol_iterator]();\n\n    do {\n      var item = void 0;\n\n      try {\n        item = iterator.next();\n      } catch (err) {\n        subscriber.error(err);\n        return subscriber;\n      }\n\n      if (item.done) {\n        subscriber.complete();\n        break;\n      }\n\n      subscriber.next(item.value);\n\n      if (subscriber.closed) {\n        break;\n      }\n    } while (true);\n\n    if (typeof iterator.return === 'function') {\n      subscriber.add(function () {\n        if (iterator.return) {\n          iterator.return();\n        }\n      });\n    }\n\n    return subscriber;\n  };\n};","map":{"version":3,"mappings":"AACA;AAEA,SAAOA,QAAM,mBAAb,QAAuC,oBAAvC;OACE,IAAMC,mBAA6B,aAAeC,QAAf,EAAmB;AAEtD,SAAG;AACD,QAAIF,QAAI,WAAoB,iBAApB,EAAR;;AACA;AACE,UAAIG,IAAG,QAAS,CAAhB;;AACD;AAAQA,YAAK,kBAAL;AACP,OADD,CAEC,OAAOC,GAAP,EAAO;AACRC;AACO,eAAOA,UAAP;AACN;;AACA,cAAM,KAAN,EAAM;AACPA;AACD;AACI;;AACFA,gBAAM,KAAN,CAAMF,UAAN;;AACD;AACM;AAGL;AACF,KAlBA,QAkBA,IAlBA;;QAmBE,OAAIH,QAAS,OAAb,KAAqB;gBACnB,KAAS,YAAS;AACnB;AACAA;AACJ;AAEM;AACP;;;GA5BA;CAFA","names":["iterator","subscribeToIterable","iterable","item","err","subscriber"],"sources":["D:\\Documents\\EMA\\Mines A3\\NoSQL\\ReseauAchats\\reseau_achats\\node_modules\\rxjs\\src\\internal\\util\\subscribeToIterable.ts"],"sourcesContent":["import { Subscriber } from '../Subscriber';\r\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\r\n\r\nexport const subscribeToIterable = <T>(iterable: Iterable<T>) => (subscriber: Subscriber<T>) => {\r\n  const iterator = (iterable as any)[Symbol_iterator]();\r\n\r\n  do {\r\n    let item: IteratorResult<T>;\r\n    try {\r\n      item = iterator.next();\r\n    } catch (err) {\r\n      subscriber.error(err);\r\n      return subscriber;\r\n    }\r\n    if (item.done) {\r\n      subscriber.complete();\r\n      break;\r\n    }\r\n    subscriber.next(item.value);\r\n    if (subscriber.closed) {\r\n      break;\r\n    }\r\n  } while (true);\r\n\r\n  // Finalize the iterator if it happens to be a Generator\r\n  if (typeof iterator.return === 'function') {\r\n    subscriber.add(() => {\r\n      if (iterator.return) {\r\n        iterator.return();\r\n      }\r\n    });\r\n  }\r\n\r\n  return subscriber;\r\n};\r\n"]},"metadata":{},"sourceType":"module"}