{"ast":null,"code":"/** PURE_IMPORTS_START _Subscriber PURE_IMPORTS_END */\nimport { Subscriber } from '../Subscriber';\nexport function canReportError(observer) {\n  while (observer) {\n    var _a = observer,\n        closed_1 = _a.closed,\n        destination = _a.destination,\n        isStopped = _a.isStopped;\n\n    if (closed_1 || isStopped) {\n      return false;\n    } else if (destination && destination instanceof Subscriber) {\n      observer = destination;\n    } else {\n      observer = null;\n    }\n  }\n\n  return true;\n}","map":{"version":3,"mappings":"AAAA;AASA,SAAMA,UAAN,QAAgB,eAAhB;OACE,SAAOC,cAAP,CAAiBC,QAAjB,EAAiB;SACTA;AACN,QAAIC,aAAJ;AAAA,QAAcC,QAAW,YAAzB;AAAA,QAAyBC,4BAAzB;AAAA,QAAyBC,wBAAzB;;QACEF,QAAO,IAAKE,WAAC;AACd;WACC,eAAW,eAAY,sBAAvB,EAAuB;AACxBJ;KADC,MAEA;AACDA;AACF;AACD;;AACD","names":["Subscriber","canReportError","observer","_a","closed_1","destination","isStopped"],"sources":["D:\\Documents\\EMA\\Mines A3\\NoSQL\\ReseauAchats\\reseau_achats\\node_modules\\rxjs\\src\\internal\\util\\canReportError.ts"],"sourcesContent":["import { Subscriber } from '../Subscriber';\r\nimport { Subject } from '../Subject';\r\n\r\n/**\r\n * Determines whether the ErrorObserver is closed or stopped or has a\r\n * destination that is closed or stopped - in which case errors will\r\n * need to be reported via a different mechanism.\r\n * @param observer the observer\r\n */\r\nexport function canReportError(observer: Subscriber<any> | Subject<any>): boolean {\r\n  while (observer) {\r\n    const { closed, destination, isStopped } = observer as any;\r\n    if (closed || isStopped) {\r\n      return false;\r\n    } else if (destination && destination instanceof Subscriber) {\r\n      observer = destination;\r\n    } else {\r\n      observer = null;\r\n    }\r\n  }\r\n  return true;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}