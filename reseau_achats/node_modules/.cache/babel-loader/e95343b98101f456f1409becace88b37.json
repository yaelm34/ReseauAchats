{"ast":null,"code":"/** PURE_IMPORTS_START tslib,_Subscriber,_util_EmptyError PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nimport { EmptyError } from '../util/EmptyError';\nexport function single(predicate) {\n  return function (source) {\n    return source.lift(new SingleOperator(predicate, source));\n  };\n}\n\nvar SingleOperator = /*@__PURE__*/function () {\n  function SingleOperator(predicate, source) {\n    this.predicate = predicate;\n    this.source = source;\n  }\n\n  SingleOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new SingleSubscriber(subscriber, this.predicate, this.source));\n  };\n\n  return SingleOperator;\n}();\n\nvar SingleSubscriber = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(SingleSubscriber, _super);\n\n  function SingleSubscriber(destination, predicate, source) {\n    var _this = _super.call(this, destination) || this;\n\n    _this.predicate = predicate;\n    _this.source = source;\n    _this.seenValue = false;\n    _this.index = 0;\n    return _this;\n  }\n\n  SingleSubscriber.prototype.applySingleValue = function (value) {\n    if (this.seenValue) {\n      this.destination.error('Sequence contains more than one element');\n    } else {\n      this.seenValue = true;\n      this.singleValue = value;\n    }\n  };\n\n  SingleSubscriber.prototype._next = function (value) {\n    var index = this.index++;\n\n    if (this.predicate) {\n      this.tryNext(value, index);\n    } else {\n      this.applySingleValue(value);\n    }\n  };\n\n  SingleSubscriber.prototype.tryNext = function (value, index) {\n    try {\n      if (this.predicate(value, index, this.source)) {\n        this.applySingleValue(value);\n      }\n    } catch (err) {\n      this.destination.error(err);\n    }\n  };\n\n  SingleSubscriber.prototype._complete = function () {\n    var destination = this.destination;\n\n    if (this.index > 0) {\n      destination.next(this.seenValue ? this.singleValue : undefined);\n      destination.complete();\n    } else {\n      destination.error(new EmptyError());\n    }\n  };\n\n  return SingleSubscriber;\n}(Subscriber);","map":{"version":3,"mappings":";AAEA,OAAO,KAAEA,OAAT,MAAqB,OAArB;AACA,SAASC,UAAT,QAA2B,eAA3B;AAkDA,SAAMC,UAAN,QAA0B,oBAA1B;OACE,SAAOC,MAAP,CAAQC,SAAR,EAAkC;AACnC;AAAA;AAAA;AAED;;IACEC,8BAAoB,YACsB;WADtBA,0BAAuEC;AACvE;AACnB;AAED;;gBACS,WAAOC,OAAc,sBAAiBD,MAAjB,EAA6B;AAC1D;AACH;;AARA,SAQCD,cARD;AAeA,CAdsB;;IAcYG,0CAAaC,MAAb,EAAa;AAK7CT,sCAAYS,MAAZ;;WAAAD,iBAGEE,aAAMN,WAAYE,QACnB;AAHmB,kCAAuEI,WAAvE,KAAuE,IAAvE;;AACAC;AANZA,mBAASL,MAAT;AAEAK,sBAAkB,KAAlB;;AAMP;AAEO;;kBACG,WAAWC;QAClB,KAAKC,WAAW;AACjB;WACC;AACA,WAAKA,SAAL,GAAgB,IAAhB;AACD;AACF;AAES;;kBACM,WAAUC,QAAG;AAE3B,QAAIC,KAAK,eAAT;;QACE,KAAKX,WAAQ;AACd;WACC;AACD;AACF;AAEO;;kBACF;QACF;UACE,KAAKA,SAAL,CAAKY,KAAL,EAAsBD,KAAtB,EAA6B,WAA7B,GAA6B;AAC9B;AACF;AAAC,aACAE,KAAK;AACN;AACF;AAES;;kBACF,WAAmBC,YAAY;AAErC,QAAIR,WAAU,GAAI,KAAEA,WAApB;;QACE,aAAY,GAAI;AAChBA,iBAAW,CAACS,IAAZ,CAAY,KAAUN,SAAV,GAAW,gBAAX,GAAWO,SAAvB;AACDV;WACC;AACDA;AACF;AACH;;AAlDkC;CAAA","names":["tslib_1","Subscriber","EmptyError","single","predicate","SingleOperator","source","call","SingleSubscriber","_super","destination","_this","applySingleValue","seenValue","_next","index","value","err","_complete","next","undefined"],"sources":["D:\\Documents\\EMA\\Mines A3\\NoSQL\\ReseauAchats\\reseau_achats\\node_modules\\rxjs\\src\\internal\\operators\\single.ts"],"sourcesContent":["import { Observable } from '../Observable';\r\nimport { Operator } from '../Operator';\r\nimport { Subscriber } from '../Subscriber';\r\nimport { EmptyError } from '../util/EmptyError';\r\n\r\nimport { Observer, MonoTypeOperatorFunction, TeardownLogic } from '../types';\r\n\r\n/**\r\n * Returns an Observable that emits the single item emitted by the source Observable that matches a specified\r\n * predicate, if that Observable emits one such item. If the source Observable emits more than one such item or no\r\n * items, notify of an IllegalArgumentException or NoSuchElementException respectively. If the source Observable\r\n * emits items but none match the specified predicate then `undefined` is emitted.\r\n *\r\n * <span class=\"informal\">Like {@link first}, but emit with error notification if there is more than one value.</span>\r\n * ![](single.png)\r\n *\r\n * ## Example\r\n * emits 'error'\r\n * ```ts\r\n * import { range } from 'rxjs';\r\n * import { single } from 'rxjs/operators';\r\n *\r\n * const numbers = range(1,5).pipe(single());\r\n * numbers.subscribe(x => console.log('never get called'), e => console.log('error'));\r\n * // result\r\n * // 'error'\r\n * ```\r\n *\r\n * emits 'undefined'\r\n * ```ts\r\n * import { range } from 'rxjs';\r\n * import { single } from 'rxjs/operators';\r\n *\r\n * const numbers = range(1,5).pipe(single(x => x === 10));\r\n * numbers.subscribe(x => console.log(x));\r\n * // result\r\n * // 'undefined'\r\n * ```\r\n *\r\n * @see {@link first}\r\n * @see {@link find}\r\n * @see {@link findIndex}\r\n * @see {@link elementAt}\r\n *\r\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\r\n * callback if the Observable completes before any `next` notification was sent.\r\n * @param {Function} predicate - A predicate function to evaluate items emitted by the source Observable.\r\n * @return {Observable<T>} An Observable that emits the single item emitted by the source Observable that matches\r\n * the predicate or `undefined` when no items match.\r\n *\r\n * @method single\r\n * @owner Observable\r\n */\r\nexport function single<T>(predicate?: (value: T, index: number, source: Observable<T>) => boolean): MonoTypeOperatorFunction<T> {\r\n  return (source: Observable<T>) => source.lift(new SingleOperator(predicate, source));\r\n}\r\n\r\nclass SingleOperator<T> implements Operator<T, T> {\r\n  constructor(private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\r\n              private source?: Observable<T>) {\r\n  }\r\n\r\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\r\n    return source.subscribe(new SingleSubscriber(subscriber, this.predicate, this.source));\r\n  }\r\n}\r\n\r\n/**\r\n * We need this JSDoc comment for affecting ESDoc.\r\n * @ignore\r\n * @extends {Ignored}\r\n */\r\nclass SingleSubscriber<T> extends Subscriber<T> {\r\n  private seenValue: boolean = false;\r\n  private singleValue: T;\r\n  private index: number = 0;\r\n\r\n  constructor(destination: Observer<T>,\r\n              private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\r\n              private source?: Observable<T>) {\r\n    super(destination);\r\n  }\r\n\r\n  private applySingleValue(value: T): void {\r\n    if (this.seenValue) {\r\n      this.destination.error('Sequence contains more than one element');\r\n    } else {\r\n      this.seenValue = true;\r\n      this.singleValue = value;\r\n    }\r\n  }\r\n\r\n  protected _next(value: T): void {\r\n    const index = this.index++;\r\n\r\n    if (this.predicate) {\r\n      this.tryNext(value, index);\r\n    } else {\r\n      this.applySingleValue(value);\r\n    }\r\n  }\r\n\r\n  private tryNext(value: T, index: number): void {\r\n    try {\r\n      if (this.predicate(value, index, this.source)) {\r\n        this.applySingleValue(value);\r\n      }\r\n    } catch (err) {\r\n      this.destination.error(err);\r\n    }\r\n  }\r\n\r\n  protected _complete(): void {\r\n    const destination = this.destination;\r\n\r\n    if (this.index > 0) {\r\n      destination.next(this.seenValue ? this.singleValue : undefined);\r\n      destination.complete();\r\n    } else {\r\n      destination.error(new EmptyError);\r\n    }\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}