{"ast":null,"code":"/** PURE_IMPORTS_START _util_ArgumentOutOfRangeError,_filter,_throwIfEmpty,_defaultIfEmpty,_take PURE_IMPORTS_END */\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { filter } from './filter';\nimport { throwIfEmpty } from './throwIfEmpty';\nimport { defaultIfEmpty } from './defaultIfEmpty';\nimport { take } from './take';\nexport function elementAt(index, defaultValue) {\n  if (index < 0) {\n    throw new ArgumentOutOfRangeError();\n  }\n\n  var hasDefaultValue = arguments.length >= 2;\n  return function (source) {\n    return source.pipe(filter(function (v, i) {\n      return i === index;\n    }), take(1), hasDefaultValue ? defaultIfEmpty(defaultValue) : throwIfEmpty(function () {\n      return new ArgumentOutOfRangeError();\n    }));\n  };\n}","map":{"version":3,"mappings":"AAEA;AAGA,SAASA,uBAAT,QAAkC,iCAAlC;AACA,SAASC,MAAT,QAAuB,UAAvB;AACA,SAASC,YAAT,QAAyB,gBAAzB;AACA,SAASC,cAAT,QAA8B,kBAA9B;AAkDA,SAAMC,IAAN,QAAgB,QAAhB;OACE,SAAYC,SAAZ,CAAeC,KAAf,EAAeC,YAAf,EAAe;MAAED,QAAM,GAAI;AAA4B;AACvD;;AACA,qBAAQ,YAA0B,OAA1B,IAAiC,CAAzC;SAIM,kBAAe;AACjB,WAAEE,OAAYC,IAAZ,CAAaR,iBAAMS,CAAN,EAAMC,CAAN,EAAU;AAAA;AAAyB,KAAnC,CAAb,EAAgDP,IALpB,CAMjC,CANiC,CAK5B,EACJQ,kBACHT,4BADG;;MADI,CAAF","names":["ArgumentOutOfRangeError","filter","throwIfEmpty","defaultIfEmpty","take","elementAt","index","defaultValue","source","pipe","v","i","hasDefaultValue"],"sources":["D:\\Documents\\EMA\\Mines A3\\NoSQL\\ReseauAchats\\reseau_achats\\node_modules\\rxjs\\src\\internal\\operators\\elementAt.ts"],"sourcesContent":["import { Operator } from '../Operator';\r\nimport { Subscriber } from '../Subscriber';\r\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\r\nimport { Observable } from '../Observable';\r\nimport { MonoTypeOperatorFunction, TeardownLogic } from '../types';\r\nimport { filter } from './filter';\r\nimport { throwIfEmpty } from './throwIfEmpty';\r\nimport { defaultIfEmpty } from './defaultIfEmpty';\r\nimport { take } from './take';\r\n\r\n/**\r\n * Emits the single value at the specified `index` in a sequence of emissions\r\n * from the source Observable.\r\n *\r\n * <span class=\"informal\">Emits only the i-th value, then completes.</span>\r\n *\r\n * ![](elementAt.png)\r\n *\r\n * `elementAt` returns an Observable that emits the item at the specified\r\n * `index` in the source Observable, or a default value if that `index` is out\r\n * of range and the `default` argument is provided. If the `default` argument is\r\n * not given and the `index` is out of range, the output Observable will emit an\r\n * `ArgumentOutOfRangeError` error.\r\n *\r\n * ## Example\r\n * Emit only the third click event\r\n * ```ts\r\n * import { fromEvent } from 'rxjs';\r\n * import { elementAt } from 'rxjs/operators';\r\n *\r\n * const clicks = fromEvent(document, 'click');\r\n * const result = clicks.pipe(elementAt(2));\r\n * result.subscribe(x => console.log(x));\r\n *\r\n * // Results in:\r\n * // click 1 = nothing\r\n * // click 2 = nothing\r\n * // click 3 = MouseEvent object logged to console\r\n * ```\r\n *\r\n * @see {@link first}\r\n * @see {@link last}\r\n * @see {@link skip}\r\n * @see {@link single}\r\n * @see {@link take}\r\n *\r\n * @throws {ArgumentOutOfRangeError} When using `elementAt(i)`, it delivers an\r\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0` or the\r\n * Observable has completed before emitting the i-th `next` notification.\r\n *\r\n * @param {number} index Is the number `i` for the i-th source emission that has\r\n * happened since the subscription, starting from the number `0`.\r\n * @param {T} [defaultValue] The default value returned for missing indices.\r\n * @return {Observable} An Observable that emits a single item, if it is found.\r\n * Otherwise, will emit the default value if given. If not, then emits an error.\r\n * @method elementAt\r\n * @owner Observable\r\n */\r\nexport function elementAt<T>(index: number, defaultValue?: T): MonoTypeOperatorFunction<T> {\r\n  if (index < 0) { throw new ArgumentOutOfRangeError(); }\r\n  const hasDefaultValue = arguments.length >= 2;\r\n  return (source: Observable<T>) => source.pipe(\r\n    filter((v, i) => i === index),\r\n    take(1),\r\n    hasDefaultValue\r\n      ? defaultIfEmpty(defaultValue)\r\n      : throwIfEmpty(() => new ArgumentOutOfRangeError()),\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}