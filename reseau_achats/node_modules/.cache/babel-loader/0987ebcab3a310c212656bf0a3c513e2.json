{"ast":null,"code":"/** PURE_IMPORTS_START tslib,_util_isArray,_fromArray,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { isArray } from '../util/isArray';\nimport { fromArray } from './fromArray';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nexport function race() {\n  var observables = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    observables[_i] = arguments[_i];\n  }\n\n  if (observables.length === 1) {\n    if (isArray(observables[0])) {\n      observables = observables[0];\n    } else {\n      return observables[0];\n    }\n  }\n\n  return fromArray(observables, undefined).lift(new RaceOperator());\n}\n\nvar RaceOperator = /*@__PURE__*/function () {\n  function RaceOperator() {}\n\n  RaceOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new RaceSubscriber(subscriber));\n  };\n\n  return RaceOperator;\n}();\n\nexport { RaceOperator };\n\nvar RaceSubscriber = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(RaceSubscriber, _super);\n\n  function RaceSubscriber(destination) {\n    var _this = _super.call(this, destination) || this;\n\n    _this.hasFirst = false;\n    _this.observables = [];\n    _this.subscriptions = [];\n    return _this;\n  }\n\n  RaceSubscriber.prototype._next = function (observable) {\n    this.observables.push(observable);\n  };\n\n  RaceSubscriber.prototype._complete = function () {\n    var observables = this.observables;\n    var len = observables.length;\n\n    if (len === 0) {\n      this.destination.complete();\n    } else {\n      for (var i = 0; i < len && !this.hasFirst; i++) {\n        var observable = observables[i];\n        var subscription = subscribeToResult(this, observable, undefined, i);\n\n        if (this.subscriptions) {\n          this.subscriptions.push(subscription);\n        }\n\n        this.add(subscription);\n      }\n\n      this.observables = null;\n    }\n  };\n\n  RaceSubscriber.prototype.notifyNext = function (_outerValue, innerValue, outerIndex) {\n    if (!this.hasFirst) {\n      this.hasFirst = true;\n\n      for (var i = 0; i < this.subscriptions.length; i++) {\n        if (i !== outerIndex) {\n          var subscription = this.subscriptions[i];\n          subscription.unsubscribe();\n          this.remove(subscription);\n        }\n      }\n\n      this.subscriptions = null;\n    }\n\n    this.destination.next(innerValue);\n  };\n\n  return RaceSubscriber;\n}(OuterSubscriber);\n\nexport { RaceSubscriber };","map":{"version":3,"mappings":";AACA,OAAO,KAAEA,OAAT,MAAwB,OAAxB;AACA,SAASC,OAAT,QAAoB,iBAApB;AAKA,SAASC,SAAT,QAA0B,aAA1B;AAEA,SAASC,eAAT,QAA4B,oBAA5B;AAoDA,SAAMC,iBAAN,QAAoB,2BAApB;OAAwB;iBAAsC,GAAtC;;OAAA,mCAAsCC;;AAG5D;;MACEC,WAAW,CAACC,MAAZ,KAAuB,GAAG;QACxBN,mBAAc,GAAd,GAAyB;AAC1BK;WACC;AACD;AACF;AAED;;AACD;AAED;;IAAAE;AAIA,WAACA,YAAD,GAAC,CAHC;;cACS,WAAOC,OAAU,UAAIC,UAAJ,EAAmBC,MAAnB,EAAgC;AACzD;AACH;;AAJA,SAICH,YAJD;CAAA;;AAWA;;IAAuCI,wCAAqBC,MAArB,EAAqB;AAK1Db,oCAAYa,MAAZ;;WAAAD,eACEE,aAAM;AALA,sBAAoB,KAApB,CAA0B,IAA1B,EAA0BA,WAA1B,KAA0B,IAA1B;;AACAC,qBAAW,KAAX;AACAA,wBAAa,EAAb;;AAIP;AAES;;gBACH,WAAgBC,QAAC,UAAYC,UAAZ,EAAY;AACnC;AAES;;gBACF,WAAcC,YAAK,YAAY;AACrC,QAAMZ,WAAM,QAAYA,WAAxB;AAEA,QAAIa,GAAG,cAAQ,OAAf;;QACEA,QAAK;AACN;WACC;WACE,IAAMC,WAAUD,GAAV,IAAa,MAAYE,UAAGD;AAClC,YAAMH,aAAYX,WAAG,GAArB;AAEA,YAAIgB,YAAK,oBAAe,gCAAxB;;YACE,KAAKC,eAAc;AACpB;AACD;;AACD;AACD;;AACD;AACF;AAED;;gBAEY,WAAUC;QAClB,MAAKH,UAAW;AAEhB,WAAKA,QAAL,GAAgB,IAAhB;;WACE,IAAKD,OAAKA,SAAUG,aAAV,CAAYhB;YACpBa,MAAIK,YAAY;AAEhB,0BAAa,QAAWF,aAAX,CAAcH,CAAd,CAAb;AACAE,sBAAY,YAAZ;AACD;AACF;AAED;;AACD;AAED;;AACD;AACH;;AApDuC;CAAA","names":["tslib_1","isArray","fromArray","OuterSubscriber","subscribeToResult","_i","observables","length","RaceOperator","call","subscriber","source","RaceSubscriber","_super","destination","_this","_next","observable","_complete","len","i","hasFirst","subscription","subscriptions","notifyNext","outerIndex"],"sources":["D:\\Documents\\EMA\\Mines A3\\NoSQL\\ReseauAchats\\reseau_achats\\node_modules\\rxjs\\src\\internal\\observable\\race.ts"],"sourcesContent":["import { Observable } from '../Observable';\r\nimport { isArray } from '../util/isArray';\r\nimport { fromArray } from './fromArray';\r\nimport { Operator } from '../Operator';\r\nimport { Subscriber } from '../Subscriber';\r\nimport { Subscription } from '../Subscription';\r\nimport { TeardownLogic, ObservableInput } from '../types';\r\nimport { OuterSubscriber } from '../OuterSubscriber';\r\nimport { InnerSubscriber } from '../InnerSubscriber';\r\nimport { subscribeToResult } from '../util/subscribeToResult';\r\n\r\n// tslint:disable:max-line-length\r\nexport function race<A>(arg: [ObservableInput<A>]): Observable<A>;\r\nexport function race<A, B>(arg: [ObservableInput<A>, ObservableInput<B>]): Observable<A | B>;\r\nexport function race<A, B, C>(arg: [ObservableInput<A>, ObservableInput<B>, ObservableInput<C>]): Observable<A | B | C>;\r\nexport function race<A, B, C, D>(arg: [ObservableInput<A>, ObservableInput<B>, ObservableInput<C>, ObservableInput<D>]): Observable<A | B | C | D>;\r\nexport function race<A, B, C, D, E>(arg: [ObservableInput<A>, ObservableInput<B>, ObservableInput<C>, ObservableInput<D>, ObservableInput<E>]): Observable<A | B | C | D | E>;\r\nexport function race<T>(arg: ObservableInput<T>[]): Observable<T>;\r\nexport function race(arg: ObservableInput<any>[]): Observable<{}>;\r\n\r\nexport function race<A>(a: ObservableInput<A>): Observable<A>;\r\nexport function race<A, B>(a: ObservableInput<A>, b: ObservableInput<B>): Observable<A | B>;\r\nexport function race<A, B, C>(a: ObservableInput<A>, b: ObservableInput<B>, c: ObservableInput<C>): Observable<A | B | C>;\r\nexport function race<A, B, C, D>(a: ObservableInput<A>, b: ObservableInput<B>, c: ObservableInput<C>, d: ObservableInput<D>): Observable<A | B | C | D>;\r\nexport function race<A, B, C, D, E>(a: ObservableInput<A>, b: ObservableInput<B>, c: ObservableInput<C>, d: ObservableInput<D>, e: ObservableInput<E>): Observable<A | B | C | D | E>;\r\n// tslint:enable:max-line-length\r\n\r\nexport function race<T>(observables: ObservableInput<T>[]): Observable<T>;\r\nexport function race(observables: ObservableInput<any>[]): Observable<{}>;\r\nexport function race<T>(...observables: ObservableInput<T>[]): Observable<T>;\r\nexport function race(...observables: ObservableInput<any>[]): Observable<{}>;\r\n\r\n/**\r\n * Returns an Observable that mirrors the first source Observable to emit an item.\r\n *\r\n * ## Example\r\n * ### Subscribes to the observable that was the first to start emitting.\r\n *\r\n * ```ts\r\n * import { race, interval } from 'rxjs';\r\n * import { mapTo } from 'rxjs/operators';\r\n *\r\n * const obs1 = interval(1000).pipe(mapTo('fast one'));\r\n * const obs2 = interval(3000).pipe(mapTo('medium one'));\r\n * const obs3 = interval(5000).pipe(mapTo('slow one'));\r\n *\r\n * race(obs3, obs1, obs2)\r\n * .subscribe(\r\n *   winner => console.log(winner)\r\n * );\r\n *\r\n * // result:\r\n * // a series of 'fast one'\r\n * ```\r\n *\r\n * @param {...Observables} ...observables sources used to race for which Observable emits first.\r\n * @return {Observable} an Observable that mirrors the output of the first Observable to emit an item.\r\n * @static true\r\n * @name race\r\n * @owner Observable\r\n */\r\nexport function race<T>(...observables: ObservableInput<any>[]): Observable<T> {\r\n  // if the only argument is an array, it was most likely called with\r\n  // `race([obs1, obs2, ...])`\r\n  if (observables.length === 1) {\r\n    if (isArray(observables[0])) {\r\n      observables = observables[0] as Observable<any>[];\r\n    } else {\r\n      return observables[0] as Observable<T>;\r\n    }\r\n  }\r\n\r\n  return fromArray(observables, undefined).lift(new RaceOperator<T>());\r\n}\r\n\r\nexport class RaceOperator<T> implements Operator<T, T> {\r\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\r\n    return source.subscribe(new RaceSubscriber(subscriber));\r\n  }\r\n}\r\n\r\n/**\r\n * We need this JSDoc comment for affecting ESDoc.\r\n * @ignore\r\n * @extends {Ignored}\r\n */\r\nexport class RaceSubscriber<T> extends OuterSubscriber<T, T> {\r\n  private hasFirst: boolean = false;\r\n  private observables: Observable<any>[] = [];\r\n  private subscriptions: Subscription[] = [];\r\n\r\n  constructor(destination: Subscriber<T>) {\r\n    super(destination);\r\n  }\r\n\r\n  protected _next(observable: any): void {\r\n    this.observables.push(observable);\r\n  }\r\n\r\n  protected _complete() {\r\n    const observables = this.observables;\r\n    const len = observables.length;\r\n\r\n    if (len === 0) {\r\n      this.destination.complete!();\r\n    } else {\r\n      for (let i = 0; i < len && !this.hasFirst; i++) {\r\n        const observable = observables[i];\r\n        const subscription = subscribeToResult(this, observable, undefined, i)!;\r\n\r\n        if (this.subscriptions) {\r\n          this.subscriptions.push(subscription);\r\n        }\r\n        this.add(subscription);\r\n      }\r\n      this.observables = null!;\r\n    }\r\n  }\r\n\r\n  notifyNext(_outerValue: T, innerValue: T,\r\n             outerIndex: number): void {\r\n    if (!this.hasFirst) {\r\n      this.hasFirst = true;\r\n\r\n      for (let i = 0; i < this.subscriptions.length; i++) {\r\n        if (i !== outerIndex) {\r\n          let subscription = this.subscriptions[i];\r\n\r\n          subscription.unsubscribe();\r\n          this.remove(subscription);\r\n        }\r\n      }\r\n\r\n      this.subscriptions = null!;\r\n    }\r\n\r\n    this.destination.next!(innerValue);\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}