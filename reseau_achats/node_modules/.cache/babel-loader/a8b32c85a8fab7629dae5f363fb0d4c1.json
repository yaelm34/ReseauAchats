{"ast":null,"code":"\"use strict\";\n/**\r\n * Copyright (c) \"Neo4j\"\r\n * Neo4j Sweden AB [http://neo4j.com]\r\n *\r\n * This file is part of Neo4j.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ENCRYPTION_OFF = exports.ENCRYPTION_ON = exports.validateQueryAndParameters = exports.assertValidDate = exports.assertNumberOrInteger = exports.assertNumber = exports.assertString = exports.assertObject = exports.isString = exports.isObject = exports.isEmptyObjectOrNull = void 0;\n\nvar integer_1 = require(\"../integer\");\n\nvar json_1 = require(\"../json\");\n\nvar ENCRYPTION_ON = 'ENCRYPTION_ON';\nexports.ENCRYPTION_ON = ENCRYPTION_ON;\nvar ENCRYPTION_OFF = 'ENCRYPTION_OFF';\nexports.ENCRYPTION_OFF = ENCRYPTION_OFF;\n/**\r\n * Verifies if the object is null or empty\r\n * @param obj The subject object\r\n * @returns {boolean} True if it's empty object or null\r\n */\n\nfunction isEmptyObjectOrNull(obj) {\n  if (obj === null) {\n    return true;\n  }\n\n  if (!isObject(obj)) {\n    return false;\n  }\n\n  for (var prop in obj) {\n    if (Object.prototype.hasOwnProperty.bind(obj, prop)) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nexports.isEmptyObjectOrNull = isEmptyObjectOrNull;\n/**\r\n * Verify if it's an object\r\n * @param obj The subject\r\n * @returns {boolean} True if it's an object\r\n */\n\nfunction isObject(obj) {\n  return typeof obj === 'object' && !Array.isArray(obj) && obj !== null;\n}\n\nexports.isObject = isObject;\n/**\r\n * Check and normalize given query and parameters.\r\n * @param {string|{text: string, parameters: Object}} query the query to check.\r\n * @param {Object} parameters\r\n * @return {{validatedQuery: string|{text: string, parameters: Object}, params: Object}} the normalized query with parameters.\r\n * @throws TypeError when either given query or parameters are invalid.\r\n */\n\nfunction validateQueryAndParameters(query, parameters, opt) {\n  var validatedQuery = '';\n  var params = parameters || {};\n  var skipAsserts = (opt === null || opt === void 0 ? void 0 : opt.skipAsserts) || false;\n\n  if (typeof query === 'string') {\n    validatedQuery = query;\n  } else if (query instanceof String) {\n    validatedQuery = query.toString();\n  } else if (typeof query === 'object' && query.text) {\n    validatedQuery = query.text;\n    params = query.parameters || {};\n  }\n\n  if (!skipAsserts) {\n    assertCypherQuery(validatedQuery);\n    assertQueryParameters(params);\n  }\n\n  return {\n    validatedQuery: validatedQuery,\n    params: params\n  };\n}\n\nexports.validateQueryAndParameters = validateQueryAndParameters;\n/**\r\n * Assert it's a object\r\n * @param {any} obj The subject\r\n * @param {string} objName The object name\r\n * @returns {object} The subject object\r\n * @throws {TypeError} when the supplied param is not an object\r\n */\n\nfunction assertObject(obj, objName) {\n  if (!isObject(obj)) {\n    throw new TypeError(objName + ' expected to be an object but was: ' + (0, json_1.stringify)(obj));\n  }\n\n  return obj;\n}\n\nexports.assertObject = assertObject;\n/**\r\n * Assert it's a string\r\n * @param {any} obj The subject\r\n * @param {string} objName The object name\r\n * @returns {string} The subject string\r\n * @throws {TypeError} when the supplied param is not a string\r\n */\n\nfunction assertString(obj, objName) {\n  if (!isString(obj)) {\n    throw new TypeError(objName + ' expected to be string but was: ' + (0, json_1.stringify)(obj));\n  }\n\n  return obj;\n}\n\nexports.assertString = assertString;\n/**\r\n * Assert it's a number\r\n * @param {any} obj The subject\r\n * @param {string} objName The object name\r\n * @returns {number} The number\r\n * @throws {TypeError} when the supplied param is not a number\r\n */\n\nfunction assertNumber(obj, objName) {\n  if (typeof obj !== 'number') {\n    throw new TypeError(objName + ' expected to be a number but was: ' + (0, json_1.stringify)(obj));\n  }\n\n  return obj;\n}\n\nexports.assertNumber = assertNumber;\n/**\r\n * Assert it's a number or integer\r\n * @param {any} obj The subject\r\n * @param {string} objName The object name\r\n * @returns {number|Integer} The subject object\r\n * @throws {TypeError} when the supplied param is not a number or integer\r\n */\n\nfunction assertNumberOrInteger(obj, objName) {\n  if (typeof obj !== 'number' && typeof obj !== 'bigint' && !(0, integer_1.isInt)(obj)) {\n    throw new TypeError(objName + ' expected to be either a number or an Integer object but was: ' + (0, json_1.stringify)(obj));\n  }\n\n  return obj;\n}\n\nexports.assertNumberOrInteger = assertNumberOrInteger;\n/**\r\n * Assert it's a valid datae\r\n * @param {any} obj The subject\r\n * @param {string} objName The object name\r\n * @returns {Date} The valida date\r\n * @throws {TypeError} when the supplied param is not a valid date\r\n */\n\nfunction assertValidDate(obj, objName) {\n  if (Object.prototype.toString.call(obj) !== '[object Date]') {\n    throw new TypeError(objName + ' expected to be a standard JavaScript Date but was: ' + (0, json_1.stringify)(obj));\n  }\n\n  if (Number.isNaN(obj.getTime())) {\n    throw new TypeError(objName + ' expected to be valid JavaScript Date but its time was NaN: ' + (0, json_1.stringify)(obj));\n  }\n\n  return obj;\n}\n\nexports.assertValidDate = assertValidDate;\n/**\r\n * Validates a cypher query string\r\n * @param {any} obj The query\r\n * @returns {void}\r\n * @throws {TypeError} if the query is not valid\r\n */\n\nfunction assertCypherQuery(obj) {\n  assertString(obj, 'Cypher query');\n\n  if (obj.trim().length === 0) {\n    throw new TypeError('Cypher query is expected to be a non-empty string.');\n  }\n}\n/**\r\n * Validates if the query parameters is an object\r\n * @param {any} obj The parameters\r\n * @returns {void}\r\n * @throws {TypeError} if the parameters is not valid\r\n */\n\n\nfunction assertQueryParameters(obj) {\n  if (!isObject(obj)) {\n    // objects created with `Object.create(null)` do not have a constructor property\n    var constructor = obj.constructor ? ' ' + obj.constructor.name : '';\n    throw new TypeError(\"Query parameters are expected to either be undefined/null or an object, given:\" + constructor + \" \" + obj);\n  }\n}\n/**\r\n * Verify if the supplied object is a string\r\n *\r\n * @param str The string\r\n * @returns {boolean} True if the supplied object is an string\r\n */\n\n\nfunction isString(str) {\n  return Object.prototype.toString.call(str) === '[object String]';\n}\n\nexports.isString = isString;","map":{"version":3,"sources":["D:/Documents/EMA/Mines A3/NoSQL/ReseauAchats/reseau_achats/node_modules/neo4j-driver-core/lib/internal/util.js"],"names":["Object","defineProperty","exports","value","ENCRYPTION_OFF","ENCRYPTION_ON","validateQueryAndParameters","assertValidDate","assertNumberOrInteger","assertNumber","assertString","assertObject","isString","isObject","isEmptyObjectOrNull","integer_1","require","json_1","obj","prop","prototype","hasOwnProperty","bind","Array","isArray","query","parameters","opt","validatedQuery","params","skipAsserts","String","toString","text","assertCypherQuery","assertQueryParameters","objName","TypeError","stringify","isInt","call","Number","isNaN","getTime","trim","length","constructor","name","str"],"mappings":"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","sourcesContent":["\"use strict\";\r\n/**\r\n * Copyright (c) \"Neo4j\"\r\n * Neo4j Sweden AB [http://neo4j.com]\r\n *\r\n * This file is part of Neo4j.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.ENCRYPTION_OFF = exports.ENCRYPTION_ON = exports.validateQueryAndParameters = exports.assertValidDate = exports.assertNumberOrInteger = exports.assertNumber = exports.assertString = exports.assertObject = exports.isString = exports.isObject = exports.isEmptyObjectOrNull = void 0;\r\nvar integer_1 = require(\"../integer\");\r\nvar json_1 = require(\"../json\");\r\nvar ENCRYPTION_ON = 'ENCRYPTION_ON';\r\nexports.ENCRYPTION_ON = ENCRYPTION_ON;\r\nvar ENCRYPTION_OFF = 'ENCRYPTION_OFF';\r\nexports.ENCRYPTION_OFF = ENCRYPTION_OFF;\r\n/**\r\n * Verifies if the object is null or empty\r\n * @param obj The subject object\r\n * @returns {boolean} True if it's empty object or null\r\n */\r\nfunction isEmptyObjectOrNull(obj) {\r\n    if (obj === null) {\r\n        return true;\r\n    }\r\n    if (!isObject(obj)) {\r\n        return false;\r\n    }\r\n    for (var prop in obj) {\r\n        if (Object.prototype.hasOwnProperty.bind(obj, prop)) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\nexports.isEmptyObjectOrNull = isEmptyObjectOrNull;\r\n/**\r\n * Verify if it's an object\r\n * @param obj The subject\r\n * @returns {boolean} True if it's an object\r\n */\r\nfunction isObject(obj) {\r\n    return typeof obj === 'object' && !Array.isArray(obj) && obj !== null;\r\n}\r\nexports.isObject = isObject;\r\n/**\r\n * Check and normalize given query and parameters.\r\n * @param {string|{text: string, parameters: Object}} query the query to check.\r\n * @param {Object} parameters\r\n * @return {{validatedQuery: string|{text: string, parameters: Object}, params: Object}} the normalized query with parameters.\r\n * @throws TypeError when either given query or parameters are invalid.\r\n */\r\nfunction validateQueryAndParameters(query, parameters, opt) {\r\n    var validatedQuery = '';\r\n    var params = parameters || {};\r\n    var skipAsserts = (opt === null || opt === void 0 ? void 0 : opt.skipAsserts) || false;\r\n    if (typeof query === 'string') {\r\n        validatedQuery = query;\r\n    }\r\n    else if (query instanceof String) {\r\n        validatedQuery = query.toString();\r\n    }\r\n    else if (typeof query === 'object' && query.text) {\r\n        validatedQuery = query.text;\r\n        params = query.parameters || {};\r\n    }\r\n    if (!skipAsserts) {\r\n        assertCypherQuery(validatedQuery);\r\n        assertQueryParameters(params);\r\n    }\r\n    return { validatedQuery: validatedQuery, params: params };\r\n}\r\nexports.validateQueryAndParameters = validateQueryAndParameters;\r\n/**\r\n * Assert it's a object\r\n * @param {any} obj The subject\r\n * @param {string} objName The object name\r\n * @returns {object} The subject object\r\n * @throws {TypeError} when the supplied param is not an object\r\n */\r\nfunction assertObject(obj, objName) {\r\n    if (!isObject(obj)) {\r\n        throw new TypeError(objName + ' expected to be an object but was: ' + (0, json_1.stringify)(obj));\r\n    }\r\n    return obj;\r\n}\r\nexports.assertObject = assertObject;\r\n/**\r\n * Assert it's a string\r\n * @param {any} obj The subject\r\n * @param {string} objName The object name\r\n * @returns {string} The subject string\r\n * @throws {TypeError} when the supplied param is not a string\r\n */\r\nfunction assertString(obj, objName) {\r\n    if (!isString(obj)) {\r\n        throw new TypeError(objName + ' expected to be string but was: ' + (0, json_1.stringify)(obj));\r\n    }\r\n    return obj;\r\n}\r\nexports.assertString = assertString;\r\n/**\r\n * Assert it's a number\r\n * @param {any} obj The subject\r\n * @param {string} objName The object name\r\n * @returns {number} The number\r\n * @throws {TypeError} when the supplied param is not a number\r\n */\r\nfunction assertNumber(obj, objName) {\r\n    if (typeof obj !== 'number') {\r\n        throw new TypeError(objName + ' expected to be a number but was: ' + (0, json_1.stringify)(obj));\r\n    }\r\n    return obj;\r\n}\r\nexports.assertNumber = assertNumber;\r\n/**\r\n * Assert it's a number or integer\r\n * @param {any} obj The subject\r\n * @param {string} objName The object name\r\n * @returns {number|Integer} The subject object\r\n * @throws {TypeError} when the supplied param is not a number or integer\r\n */\r\nfunction assertNumberOrInteger(obj, objName) {\r\n    if (typeof obj !== 'number' && typeof obj !== 'bigint' && !(0, integer_1.isInt)(obj)) {\r\n        throw new TypeError(objName +\r\n            ' expected to be either a number or an Integer object but was: ' +\r\n            (0, json_1.stringify)(obj));\r\n    }\r\n    return obj;\r\n}\r\nexports.assertNumberOrInteger = assertNumberOrInteger;\r\n/**\r\n * Assert it's a valid datae\r\n * @param {any} obj The subject\r\n * @param {string} objName The object name\r\n * @returns {Date} The valida date\r\n * @throws {TypeError} when the supplied param is not a valid date\r\n */\r\nfunction assertValidDate(obj, objName) {\r\n    if (Object.prototype.toString.call(obj) !== '[object Date]') {\r\n        throw new TypeError(objName +\r\n            ' expected to be a standard JavaScript Date but was: ' +\r\n            (0, json_1.stringify)(obj));\r\n    }\r\n    if (Number.isNaN(obj.getTime())) {\r\n        throw new TypeError(objName +\r\n            ' expected to be valid JavaScript Date but its time was NaN: ' +\r\n            (0, json_1.stringify)(obj));\r\n    }\r\n    return obj;\r\n}\r\nexports.assertValidDate = assertValidDate;\r\n/**\r\n * Validates a cypher query string\r\n * @param {any} obj The query\r\n * @returns {void}\r\n * @throws {TypeError} if the query is not valid\r\n */\r\nfunction assertCypherQuery(obj) {\r\n    assertString(obj, 'Cypher query');\r\n    if (obj.trim().length === 0) {\r\n        throw new TypeError('Cypher query is expected to be a non-empty string.');\r\n    }\r\n}\r\n/**\r\n * Validates if the query parameters is an object\r\n * @param {any} obj The parameters\r\n * @returns {void}\r\n * @throws {TypeError} if the parameters is not valid\r\n */\r\nfunction assertQueryParameters(obj) {\r\n    if (!isObject(obj)) {\r\n        // objects created with `Object.create(null)` do not have a constructor property\r\n        var constructor = obj.constructor ? ' ' + obj.constructor.name : '';\r\n        throw new TypeError(\"Query parameters are expected to either be undefined/null or an object, given:\" + constructor + \" \" + obj);\r\n    }\r\n}\r\n/**\r\n * Verify if the supplied object is a string\r\n *\r\n * @param str The string\r\n * @returns {boolean} True if the supplied object is an string\r\n */\r\nfunction isString(str) {\r\n    return Object.prototype.toString.call(str) === '[object String]';\r\n}\r\nexports.isString = isString;\r\n"]},"metadata":{},"sourceType":"script"}