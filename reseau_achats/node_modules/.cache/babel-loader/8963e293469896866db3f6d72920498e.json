{"ast":null,"code":"/** PURE_IMPORTS_START tslib,_util_isScheduler,_util_isArray,_OuterSubscriber,_util_subscribeToResult,_fromArray PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { isScheduler } from '../util/isScheduler';\nimport { isArray } from '../util/isArray';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { fromArray } from './fromArray';\nvar NONE = {};\nexport function combineLatest() {\n  var observables = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    observables[_i] = arguments[_i];\n  }\n\n  var resultSelector = undefined;\n  var scheduler = undefined;\n\n  if (isScheduler(observables[observables.length - 1])) {\n    scheduler = observables.pop();\n  }\n\n  if (typeof observables[observables.length - 1] === 'function') {\n    resultSelector = observables.pop();\n  }\n\n  if (observables.length === 1 && isArray(observables[0])) {\n    observables = observables[0];\n  }\n\n  return fromArray(observables, scheduler).lift(new CombineLatestOperator(resultSelector));\n}\n\nvar CombineLatestOperator = /*@__PURE__*/function () {\n  function CombineLatestOperator(resultSelector) {\n    this.resultSelector = resultSelector;\n  }\n\n  CombineLatestOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new CombineLatestSubscriber(subscriber, this.resultSelector));\n  };\n\n  return CombineLatestOperator;\n}();\n\nexport { CombineLatestOperator };\n\nvar CombineLatestSubscriber = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(CombineLatestSubscriber, _super);\n\n  function CombineLatestSubscriber(destination, resultSelector) {\n    var _this = _super.call(this, destination) || this;\n\n    _this.resultSelector = resultSelector;\n    _this.active = 0;\n    _this.values = [];\n    _this.observables = [];\n    return _this;\n  }\n\n  CombineLatestSubscriber.prototype._next = function (observable) {\n    this.values.push(NONE);\n    this.observables.push(observable);\n  };\n\n  CombineLatestSubscriber.prototype._complete = function () {\n    var observables = this.observables;\n    var len = observables.length;\n\n    if (len === 0) {\n      this.destination.complete();\n    } else {\n      this.active = len;\n      this.toRespond = len;\n\n      for (var i = 0; i < len; i++) {\n        var observable = observables[i];\n        this.add(subscribeToResult(this, observable, undefined, i));\n      }\n    }\n  };\n\n  CombineLatestSubscriber.prototype.notifyComplete = function (unused) {\n    if ((this.active -= 1) === 0) {\n      this.destination.complete();\n    }\n  };\n\n  CombineLatestSubscriber.prototype.notifyNext = function (_outerValue, innerValue, outerIndex) {\n    var values = this.values;\n    var oldVal = values[outerIndex];\n    var toRespond = !this.toRespond ? 0 : oldVal === NONE ? --this.toRespond : this.toRespond;\n    values[outerIndex] = innerValue;\n\n    if (toRespond === 0) {\n      if (this.resultSelector) {\n        this._tryResultSelector(values);\n      } else {\n        this.destination.next(values.slice());\n      }\n    }\n  };\n\n  CombineLatestSubscriber.prototype._tryResultSelector = function (values) {\n    var result;\n\n    try {\n      result = this.resultSelector.apply(this, values);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n\n    this.destination.next(result);\n  };\n\n  return CombineLatestSubscriber;\n}(OuterSubscriber);\n\nexport { CombineLatestSubscriber };","map":{"version":3,"mappings":";AAEA,OAAO,KAAEA,OAAT,MAAuB,OAAvB;AACA,SAASC,WAAT,QAAyB,qBAAzB;AAEA,SAASC,OAAT,QAAwB,iBAAxB;AAGA,SAASC,eAAT,QAA4B,oBAA5B;AACA,SAASC,iBAAT,QAA0B,2BAA1B;AAEA,SAAUC,SAAV,QAAgB,aAAhB;AAsNA,QAAM,KAAN;OACE,yBAAgF;iBAAA,GAAhF;;OAAA,mCAAgFC;;AAEhF;;AACA,MAAIC,cAAqC,YAAzC;AAEA,MAAIC,YAAYC,SAAhB;;MACER,WAAS,CAAGS,WAAW,CAACA,WAAuB,OAAvB,GAAuB,CAAxB,CAAd,GAAsC;AAChDF;AAED;;MACE,kBAAiB,YAAY,OAAZ,GAAkD,CAAlD,CAAjB,KAAmE;AACpED;AAID;;MACEG,WAAW,OAAX,KAAc,CAAd,IAAmCR,OAAC;AACrCQ;AAED;;AACD;AAED;;IACEC,qCAAoB,YAA6C;WAA7CA,sCAA6C;AAChE;AAED;;uBACgB,WAAcC,6BAAwBC,MAAxB,EAAoC;AACjE;AACH;;AAPA,SAOCF,qBAPD;CACsB;;AAatB;;IAAmDG,iDAAqBC,MAArB,EAAqB;AAMtEf,6CAAYe,MAAZ;;WAAAD,wBACEE,aAAkBT,gBACnB;AAF+C,kDAA6C,IAA7C;;AALxCU,2BAAmBV,cAAnB;AACAU,mBAAgB,CAAhB;AACAA;;AAKP;AAES;;yBACS,WAAMC;AACvB,SAAKC,MAAL,CAAKC,IAAL,CAAiBC,IAAjB;AACD;AAES;;yBACY,WAAKC,YAAY;AACrC,QAAMZ,WAAM,QAAYA,WAAxB;AACA,QAAIa,GAAG,cAAQ,OAAf;;QACEA,QAAK;AACN;WACC;AACA,WAAKC,MAAL,GAAcD,GAAd;AACA,WAAKE,SAAL,GAAiBF,GAAjB;;WACE,IAAMG,WAAUH,KAAGG;AACnB,YAAIC,UAAK,cAAkB,GAA3B;AACD;AACF;AACF;AAED;;yBACkB,CAAIC,UAAUC;QAC5B,MAAKL,MAAL,IAAgB,CAAhB,MAAiB,GAAS;AAC3B;AACF;AAED;;yBAEsB,WAAOM;AAC3B,QAAMX,MAAM,GAAG,WAAf;AACA,QAAMY,SAASZ,MAAI,YAAnB;QACEM,SAAG,qBACD,CADC,GAECM,MAAC,KAAUV,IAAX,GAAe,OAAUI,SAAzB,GAA0B;AAEhCN,UAAI,YAAJ,GAAqBa,UAArB;;QACEP,SAAS;UACP,KAAKlB;AACN;aACC;AACD;AACF;AACF;AAEO;;yBACU;AAChB,QAAI0B,MAAJ;;QACE;AACDA;AAAC,aACAC,KAAK;AACL,uBAAOC,KAAP,CAAOD,GAAP;AACD;AACD;;AACD;AACH;;AAhEmD;CAAA","names":["tslib_1","isScheduler","isArray","OuterSubscriber","subscribeToResult","fromArray","_i","resultSelector","scheduler","undefined","observables","CombineLatestOperator","call","source","CombineLatestSubscriber","_super","destination","_this","_next","values","push","NONE","_complete","len","active","toRespond","i","observable","prototype","notifyComplete","notifyNext","oldVal","innerValue","result","err","error"],"sources":["D:\\Documents\\EMA\\Mines A3\\NoSQL\\ReseauAchats\\reseau_achats\\node_modules\\rxjs\\src\\internal\\observable\\combineLatest.ts"],"sourcesContent":["import { Observable } from '../Observable';\r\nimport { ObservableInput, SchedulerLike, ObservedValueOf } from '../types';\r\nimport { isScheduler  } from '../util/isScheduler';\r\nimport { isArray  } from '../util/isArray';\r\nimport { Subscriber } from '../Subscriber';\r\nimport { OuterSubscriber } from '../OuterSubscriber';\r\nimport { Operator } from '../Operator';\r\nimport { InnerSubscriber } from '../InnerSubscriber';\r\nimport { subscribeToResult } from '../util/subscribeToResult';\r\nimport { fromArray } from './fromArray';\r\n\r\nconst NONE = {};\r\n\r\n/* tslint:disable:max-line-length */\r\n\r\n// If called with a single array, it \"auto-spreads\" the array, with result selector\r\n/** @deprecated resultSelector no longer supported, pipe to map instead */\r\nexport function combineLatest<O1 extends ObservableInput<any>, R>(sources: [O1], resultSelector: (v1: ObservedValueOf<O1>) => R, scheduler?: SchedulerLike): Observable<R>;\r\n/** @deprecated resultSelector no longer supported, pipe to map instead */\r\nexport function combineLatest<O1 extends ObservableInput<any>, O2 extends ObservableInput<any>, R>(sources: [O1, O2], resultSelector: (v1: ObservedValueOf<O1>, v2: ObservedValueOf<O2>) => R, scheduler?: SchedulerLike): Observable<R>;\r\n/** @deprecated resultSelector no longer supported, pipe to map instead */\r\nexport function combineLatest<O1 extends ObservableInput<any>, O2 extends ObservableInput<any>, O3 extends ObservableInput<any>, R>(sources: [O1, O2, O3], resultSelector: (v1: ObservedValueOf<O1>, v2: ObservedValueOf<O2>, v3: ObservedValueOf<O3>) => R, scheduler?: SchedulerLike): Observable<R>;\r\n/** @deprecated resultSelector no longer supported, pipe to map instead */\r\nexport function combineLatest<O1 extends ObservableInput<any>, O2 extends ObservableInput<any>, O3 extends ObservableInput<any>, O4 extends ObservableInput<any>, R>(sources: [O1, O2, O3, O4], resultSelector: (v1: ObservedValueOf<O1>, v2: ObservedValueOf<O2>, v3: ObservedValueOf<O3>, v4: ObservedValueOf<O4>) => R, scheduler?: SchedulerLike): Observable<R>;\r\n/** @deprecated resultSelector no longer supported, pipe to map instead */\r\nexport function combineLatest<O1 extends ObservableInput<any>, O2 extends ObservableInput<any>, O3 extends ObservableInput<any>, O4 extends ObservableInput<any>, O5 extends ObservableInput<any>, R>(sources: [O1, O2, O3, O4, O5], resultSelector: (v1: ObservedValueOf<O1>, v2: ObservedValueOf<O2>, v3: ObservedValueOf<O3>, v4: ObservedValueOf<O4>, v5: ObservedValueOf<O5>) => R, scheduler?: SchedulerLike): Observable<R>;\r\n/** @deprecated resultSelector no longer supported, pipe to map instead */\r\nexport function combineLatest<O1 extends ObservableInput<any>, O2 extends ObservableInput<any>, O3 extends ObservableInput<any>, O4 extends ObservableInput<any>, O5 extends ObservableInput<any>, O6 extends ObservableInput<any>, R>(sources: [O1, O2, O3, O4, O5, O6], resultSelector: (v1: ObservedValueOf<O1>, v2: ObservedValueOf<O2>, v3: ObservedValueOf<O3>, v4: ObservedValueOf<O4>, v5: ObservedValueOf<O5>, v6: ObservedValueOf<O6>) => R, scheduler?: SchedulerLike): Observable<R>;\r\n/** @deprecated resultSelector no longer supported, pipe to map instead */\r\nexport function combineLatest<O extends ObservableInput<any>, R>(sources: O[], resultSelector: (...args: ObservedValueOf<O>[]) => R, scheduler?: SchedulerLike): Observable<R>;\r\n\r\n// standard call, but with a result selector\r\n/** @deprecated resultSelector no longer supported, pipe to map instead */\r\nexport function combineLatest<O1 extends ObservableInput<any>, R>(v1: O1, resultSelector: (v1: ObservedValueOf<O1>) => R, scheduler?: SchedulerLike): Observable<R>;\r\n/** @deprecated resultSelector no longer supported, pipe to map instead */\r\nexport function combineLatest<O1 extends ObservableInput<any>, O2 extends ObservableInput<any>, R>(v1: O1, v2: O2, resultSelector: (v1: ObservedValueOf<O1>, v2: ObservedValueOf<O2>) => R, scheduler?: SchedulerLike): Observable<R>;\r\n/** @deprecated resultSelector no longer supported, pipe to map instead */\r\nexport function combineLatest<O1 extends ObservableInput<any>, O2 extends ObservableInput<any>, O3 extends ObservableInput<any>, R>(v1: O1, v2: O2, v3: O3, resultSelector: (v1: ObservedValueOf<O1>, v2: ObservedValueOf<O2>, v3: ObservedValueOf<O3>) => R, scheduler?: SchedulerLike): Observable<R>;\r\n/** @deprecated resultSelector no longer supported, pipe to map instead */\r\nexport function combineLatest<O1 extends ObservableInput<any>, O2 extends ObservableInput<any>, O3 extends ObservableInput<any>, O4 extends ObservableInput<any>, R>(v1: O1, v2: O2, v3: O3, v4: O4, resultSelector: (v1: ObservedValueOf<O1>, v2: ObservedValueOf<O2>, v3: ObservedValueOf<O3>, v4: ObservedValueOf<O4>) => R, scheduler?: SchedulerLike): Observable<R>;\r\n/** @deprecated resultSelector no longer supported, pipe to map instead */\r\nexport function combineLatest<O1 extends ObservableInput<any>, O2 extends ObservableInput<any>, O3 extends ObservableInput<any>, O4 extends ObservableInput<any>, O5 extends ObservableInput<any>, R>(v1: O1, v2: O2, v3: O3, v4: O4, v5: O5, resultSelector: (v1: ObservedValueOf<O1>, v2: ObservedValueOf<O2>, v3: ObservedValueOf<O3>, v4: ObservedValueOf<O4>, v5: ObservedValueOf<O5>) => R, scheduler?: SchedulerLike): Observable<R>;\r\n/** @deprecated resultSelector no longer supported, pipe to map instead */\r\nexport function combineLatest<O1 extends ObservableInput<any>, O2 extends ObservableInput<any>, O3 extends ObservableInput<any>, O4 extends ObservableInput<any>, O5 extends ObservableInput<any>, O6 extends ObservableInput<any>, R>(v1: O1, v2: O2, v3: O3, v4: O4, v5: O5, v6: O6, resultSelector: (v1: ObservedValueOf<O1>, v2: ObservedValueOf<O2>, v3: ObservedValueOf<O3>, v4: ObservedValueOf<O4>, v5: ObservedValueOf<O5>, v6: ObservedValueOf<O6>) => R, scheduler?: SchedulerLike): Observable<R>;\r\n\r\n// With a scheduler (deprecated)\r\n/** @deprecated Passing a scheduler here is deprecated, use {@link subscribeOn} and/or {@link observeOn} instead */\r\nexport function combineLatest<O1 extends ObservableInput<any>>(sources: [O1], scheduler: SchedulerLike): Observable<[ObservedValueOf<O1>]>;\r\n/** @deprecated Passing a scheduler here is deprecated, use {@link subscribeOn} and/or {@link observeOn} instead */\r\nexport function combineLatest<O1 extends ObservableInput<any>, O2 extends ObservableInput<any>>(sources: [O1, O2], scheduler: SchedulerLike): Observable<[ObservedValueOf<O1>, ObservedValueOf<O2>]>;\r\n/** @deprecated Passing a scheduler here is deprecated, use {@link subscribeOn} and/or {@link observeOn} instead */\r\nexport function combineLatest<O1 extends ObservableInput<any>, O2 extends ObservableInput<any>, O3 extends ObservableInput<any>>(sources: [O1, O2, O3], scheduler: SchedulerLike): Observable<[ObservedValueOf<O1>, ObservedValueOf<O2>, ObservedValueOf<O3>]>;\r\n/** @deprecated Passing a scheduler here is deprecated, use {@link subscribeOn} and/or {@link observeOn} instead */\r\nexport function combineLatest<O1 extends ObservableInput<any>, O2 extends ObservableInput<any>, O3 extends ObservableInput<any>, O4 extends ObservableInput<any>>(sources: [O1, O2, O3, O4], scheduler: SchedulerLike): Observable<[ObservedValueOf<O1>, ObservedValueOf<O2>, ObservedValueOf<O3>, ObservedValueOf<O4>]>;\r\n/** @deprecated Passing a scheduler here is deprecated, use {@link subscribeOn} and/or {@link observeOn} instead */\r\nexport function combineLatest<O1 extends ObservableInput<any>, O2 extends ObservableInput<any>, O3 extends ObservableInput<any>, O4 extends ObservableInput<any>, O5 extends ObservableInput<any>>(sources: [O1, O2, O3, O4, O5], scheduler: SchedulerLike): Observable<[ObservedValueOf<O1>, ObservedValueOf<O2>, ObservedValueOf<O3>, ObservedValueOf<O4>, ObservedValueOf<O5>]>;\r\n/** @deprecated Passing a scheduler here is deprecated, use {@link subscribeOn} and/or {@link observeOn} instead */\r\nexport function combineLatest<O1 extends ObservableInput<any>, O2 extends ObservableInput<any>, O3 extends ObservableInput<any>, O4 extends ObservableInput<any>, O5 extends ObservableInput<any>, O6 extends ObservableInput<any>>(sources: [O1, O2, O3, O4, O5, O6], scheduler: SchedulerLike): Observable<[ObservedValueOf<O1>, ObservedValueOf<O2>, ObservedValueOf<O3>, ObservedValueOf<O4>, ObservedValueOf<O5>, ObservedValueOf<O6>]>;\r\n/** @deprecated Passing a scheduler here is deprecated, use {@link subscribeOn} and/or {@link observeOn} instead */\r\nexport function combineLatest<O extends ObservableInput<any>>(sources: O[], scheduler: SchedulerLike): Observable<ObservedValueOf<O>[]>;\r\n\r\n// Best case\r\nexport function combineLatest<O1 extends ObservableInput<any>>(sources: [O1]): Observable<[ObservedValueOf<O1>]>;\r\nexport function combineLatest<O1 extends ObservableInput<any>, O2 extends ObservableInput<any>>(sources: [O1, O2]): Observable<[ObservedValueOf<O1>, ObservedValueOf<O2>]>;\r\nexport function combineLatest<O1 extends ObservableInput<any>, O2 extends ObservableInput<any>, O3 extends ObservableInput<any>>(sources: [O1, O2, O3]): Observable<[ObservedValueOf<O1>, ObservedValueOf<O2>, ObservedValueOf<O3>]>;\r\nexport function combineLatest<O1 extends ObservableInput<any>, O2 extends ObservableInput<any>, O3 extends ObservableInput<any>, O4 extends ObservableInput<any>>(sources: [O1, O2, O3, O4]): Observable<[ObservedValueOf<O1>, ObservedValueOf<O2>, ObservedValueOf<O3>, ObservedValueOf<O4>]>;\r\nexport function combineLatest<O1 extends ObservableInput<any>, O2 extends ObservableInput<any>, O3 extends ObservableInput<any>, O4 extends ObservableInput<any>, O5 extends ObservableInput<any>>(sources: [O1, O2, O3, O4, O5]): Observable<[ObservedValueOf<O1>, ObservedValueOf<O2>, ObservedValueOf<O3>, ObservedValueOf<O4>, ObservedValueOf<O5>]>;\r\nexport function combineLatest<O1 extends ObservableInput<any>, O2 extends ObservableInput<any>, O3 extends ObservableInput<any>, O4 extends ObservableInput<any>, O5 extends ObservableInput<any>, O6 extends ObservableInput<any>>(sources: [O1, O2, O3, O4, O5, O6]): Observable<[ObservedValueOf<O1>, ObservedValueOf<O2>, ObservedValueOf<O3>, ObservedValueOf<O4>, ObservedValueOf<O5>, ObservedValueOf<O6>]>;\r\nexport function combineLatest<O extends ObservableInput<any>>(sources: O[]): Observable<ObservedValueOf<O>[]>;\r\n\r\n// Standard calls\r\n/** @deprecated Pass arguments in a single array instead `combineLatest([a, b, c])` */\r\nexport function combineLatest<O1 extends ObservableInput<any>>(v1: O1, scheduler?: SchedulerLike): Observable<[ObservedValueOf<O1>]>;\r\n/** @deprecated Pass arguments in a single array instead `combineLatest([a, b, c])` */\r\nexport function combineLatest<O1 extends ObservableInput<any>, O2 extends ObservableInput<any>>(v1: O1, v2: O2, scheduler?: SchedulerLike): Observable<[ObservedValueOf<O1>, ObservedValueOf<O2>]>;\r\n/** @deprecated Pass arguments in a single array instead `combineLatest([a, b, c])` */\r\nexport function combineLatest<O1 extends ObservableInput<any>, O2 extends ObservableInput<any>, O3 extends ObservableInput<any>>(v1: O1, v2: O2, v3: O3, scheduler?: SchedulerLike): Observable<[ObservedValueOf<O1>, ObservedValueOf<O2>, ObservedValueOf<O3>]>;\r\n/** @deprecated Pass arguments in a single array instead `combineLatest([a, b, c])` */\r\nexport function combineLatest<O1 extends ObservableInput<any>, O2 extends ObservableInput<any>, O3 extends ObservableInput<any>, O4 extends ObservableInput<any>>(v1: O1, v2: O2, v3: O3, v4: O4, scheduler?: SchedulerLike): Observable<[ObservedValueOf<O1>, ObservedValueOf<O2>, ObservedValueOf<O3>, ObservedValueOf<O4>]>;\r\n/** @deprecated Pass arguments in a single array instead `combineLatest([a, b, c])` */\r\nexport function combineLatest<O1 extends ObservableInput<any>, O2 extends ObservableInput<any>, O3 extends ObservableInput<any>, O4 extends ObservableInput<any>, O5 extends ObservableInput<any>>(v1: O1, v2: O2, v3: O3, v4: O4, v5: O5, scheduler?: SchedulerLike): Observable<[ObservedValueOf<O1>, ObservedValueOf<O2>, ObservedValueOf<O3>, ObservedValueOf<O4>, ObservedValueOf<O5>]>;\r\n/** @deprecated Pass arguments in a single array instead `combineLatest([a, b, c])` */\r\nexport function combineLatest<O1 extends ObservableInput<any>, O2 extends ObservableInput<any>, O3 extends ObservableInput<any>, O4 extends ObservableInput<any>, O5 extends ObservableInput<any>, O6 extends ObservableInput<any>>(v1: O1, v2: O2, v3: O3, v4: O4, v5: O5, v6: O6, scheduler?: SchedulerLike): Observable<[ObservedValueOf<O1>, ObservedValueOf<O2>, ObservedValueOf<O3>, ObservedValueOf<O4>, ObservedValueOf<O5>, ObservedValueOf<O6>]>;\r\n\r\n/** @deprecated Pass arguments in a single array instead `combineLatest([a, b, c])` */\r\nexport function combineLatest<O extends ObservableInput<any>>(...observables: O[]): Observable<any[]>;\r\n\r\n/** @deprecated Pass arguments in a single array instead `combineLatest([a, b, c])` */\r\nexport function combineLatest<O extends ObservableInput<any>, R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R>;\r\n\r\n/** @deprecated resultSelector no longer supported, pipe to map instead */\r\nexport function combineLatest<O extends ObservableInput<any>, R>(array: O[], resultSelector: (...values: ObservedValueOf<O>[]) => R, scheduler?: SchedulerLike): Observable<R>;\r\n\r\n/** @deprecated Passing a scheduler here is deprecated, use {@link subscribeOn} and/or {@link observeOn} instead */\r\nexport function combineLatest<O extends ObservableInput<any>>(...observables: Array<O | SchedulerLike>): Observable<any[]>;\r\n\r\n/** @deprecated Passing a scheduler here is deprecated, use {@link subscribeOn} and/or {@link observeOn} instead */\r\nexport function combineLatest<O extends ObservableInput<any>, R>(...observables: Array<O | ((...values: ObservedValueOf<O>[]) => R) | SchedulerLike>): Observable<R>;\r\n\r\n/** @deprecated Passing a scheduler here is deprecated, use {@link subscribeOn} and/or {@link observeOn} instead */\r\nexport function combineLatest<R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R) | SchedulerLike>): Observable<R>;\r\n/* tslint:enable:max-line-length */\r\n\r\n/**\r\n * Combines multiple Observables to create an Observable whose values are\r\n * calculated from the latest values of each of its input Observables.\r\n *\r\n * <span class=\"informal\">Whenever any input Observable emits a value, it\r\n * computes a formula using the latest values from all the inputs, then emits\r\n * the output of that formula.</span>\r\n *\r\n * ![](combineLatest.png)\r\n *\r\n * `combineLatest` combines the values from all the Observables passed as\r\n * arguments. This is done by subscribing to each Observable in order and,\r\n * whenever any Observable emits, collecting an array of the most recent\r\n * values from each Observable. So if you pass `n` Observables to operator,\r\n * returned Observable will always emit an array of `n` values, in order\r\n * corresponding to order of passed Observables (value from the first Observable\r\n * on the first place and so on).\r\n *\r\n * Static version of `combineLatest` accepts either an array of Observables\r\n * or each Observable can be put directly as an argument. Note that array of\r\n * Observables is good choice, if you don't know beforehand how many Observables\r\n * you will combine. Passing empty array will result in Observable that\r\n * completes immediately.\r\n *\r\n * To ensure output array has always the same length, `combineLatest` will\r\n * actually wait for all input Observables to emit at least once,\r\n * before it starts emitting results. This means if some Observable emits\r\n * values before other Observables started emitting, all these values but the last\r\n * will be lost. On the other hand, if some Observable does not emit a value but\r\n * completes, resulting Observable will complete at the same moment without\r\n * emitting anything, since it will be now impossible to include value from\r\n * completed Observable in resulting array. Also, if some input Observable does\r\n * not emit any value and never completes, `combineLatest` will also never emit\r\n * and never complete, since, again, it will wait for all streams to emit some\r\n * value.\r\n *\r\n * If at least one Observable was passed to `combineLatest` and all passed Observables\r\n * emitted something, resulting Observable will complete when all combined\r\n * streams complete. So even if some Observable completes, result of\r\n * `combineLatest` will still emit values when other Observables do. In case\r\n * of completed Observable, its value from now on will always be the last\r\n * emitted value. On the other hand, if any Observable errors, `combineLatest`\r\n * will error immediately as well, and all other Observables will be unsubscribed.\r\n *\r\n * `combineLatest` accepts as optional parameter `project` function, which takes\r\n * as arguments all values that would normally be emitted by resulting Observable.\r\n * `project` can return any kind of value, which will be then emitted by Observable\r\n * instead of default array. Note that `project` does not take as argument that array\r\n * of values, but values themselves. That means default `project` can be imagined\r\n * as function that takes all its arguments and puts them into an array.\r\n *\r\n * ## Examples\r\n * ### Combine two timer Observables\r\n * ```ts\r\n * import { combineLatest, timer } from 'rxjs';\r\n *\r\n * const firstTimer = timer(0, 1000); // emit 0, 1, 2... after every second, starting from now\r\n * const secondTimer = timer(500, 1000); // emit 0, 1, 2... after every second, starting 0,5s from now\r\n * const combinedTimers = combineLatest(firstTimer, secondTimer);\r\n * combinedTimers.subscribe(value => console.log(value));\r\n * // Logs\r\n * // [0, 0] after 0.5s\r\n * // [1, 0] after 1s\r\n * // [1, 1] after 1.5s\r\n * // [2, 1] after 2s\r\n * ```\r\n *\r\n * ### Combine an array of Observables\r\n * ```ts\r\n * import { combineLatest, of } from 'rxjs';\r\n * import { delay, starWith } from 'rxjs/operators';\r\n *\r\n * const observables = [1, 5, 10].map(\r\n *   n => of(n).pipe(\r\n *     delay(n * 1000),   // emit 0 and then emit n after n seconds\r\n *     startWith(0),\r\n *   )\r\n * );\r\n * const combined = combineLatest(observables);\r\n * combined.subscribe(value => console.log(value));\r\n * // Logs\r\n * // [0, 0, 0] immediately\r\n * // [1, 0, 0] after 1s\r\n * // [1, 5, 0] after 5s\r\n * // [1, 5, 10] after 10s\r\n * ```\r\n *\r\n *\r\n * ### Use project function to dynamically calculate the Body-Mass Index\r\n * ```ts\r\n * import { combineLatest, of } from 'rxjs';\r\n * import { map } from 'rxjs/operators';\r\n *\r\n * const weight = of(70, 72, 76, 79, 75);\r\n * const height = of(1.76, 1.77, 1.78);\r\n * const bmi = combineLatest(weight, height).pipe(\r\n *   map(([w, h]) => w / (h * h)),\r\n * );\r\n * bmi.subscribe(x => console.log('BMI is ' + x));\r\n *\r\n * // With output to console:\r\n * // BMI is 24.212293388429753\r\n * // BMI is 23.93948099205209\r\n * // BMI is 23.671253629592222\r\n * ```\r\n *\r\n * @see {@link combineAll}\r\n * @see {@link merge}\r\n * @see {@link withLatestFrom}\r\n *\r\n * @param {ObservableInput} observable1 An input Observable to combine with other Observables.\r\n * @param {ObservableInput} observable2 An input Observable to combine with other Observables.\r\n * More than one input Observables may be given as arguments\r\n * or an array of Observables may be given as the first argument.\r\n * @param {function} [project] An optional function to project the values from\r\n * the combined latest values into a new value on the output Observable.\r\n * @param {SchedulerLike} [scheduler=null] The {@link SchedulerLike} to use for subscribing to\r\n * each input Observable.\r\n * @return {Observable} An Observable of projected values from the most recent\r\n * values from each input Observable, or an array of the most recent values from\r\n * each input Observable.\r\n */\r\nexport function combineLatest<O extends ObservableInput<any>, R>(\r\n  ...observables: (O | ((...values: ObservedValueOf<O>[]) => R) | SchedulerLike)[]\r\n): Observable<R> {\r\n  let resultSelector: ((...values: Array<any>) => R) | undefined =  undefined;\r\n  let scheduler: SchedulerLike|undefined = undefined;\r\n\r\n  if (isScheduler(observables[observables.length - 1])) {\r\n    scheduler = observables.pop() as SchedulerLike;\r\n  }\r\n\r\n  if (typeof observables[observables.length - 1] === 'function') {\r\n    resultSelector = observables.pop() as (...values: Array<any>) => R;\r\n  }\r\n\r\n  // if the first and only other argument besides the resultSelector is an array\r\n  // assume it's been called with `combineLatest([obs1, obs2, obs3], resultSelector)`\r\n  if (observables.length === 1 && isArray(observables[0])) {\r\n    observables = observables[0] as any;\r\n  }\r\n\r\n  return fromArray(observables, scheduler).lift(new CombineLatestOperator(resultSelector));\r\n}\r\n\r\nexport class CombineLatestOperator<T, R> implements Operator<T, R> {\r\n  constructor(private resultSelector?: (...values: Array<any>) => R) {\r\n  }\r\n\r\n  call(subscriber: Subscriber<R>, source: any): any {\r\n    return source.subscribe(new CombineLatestSubscriber(subscriber, this.resultSelector));\r\n  }\r\n}\r\n\r\n/**\r\n * We need this JSDoc comment for affecting ESDoc.\r\n * @ignore\r\n * @extends {Ignored}\r\n */\r\nexport class CombineLatestSubscriber<T, R> extends OuterSubscriber<T, R> {\r\n  private active: number = 0;\r\n  private values: any[] = [];\r\n  private observables: any[] = [];\r\n  private toRespond?: number;\r\n\r\n  constructor(destination: Subscriber<R>, private resultSelector?: (...values: Array<any>) => R) {\r\n    super(destination);\r\n  }\r\n\r\n  protected _next(observable: any) {\r\n    this.values.push(NONE);\r\n    this.observables.push(observable);\r\n  }\r\n\r\n  protected _complete() {\r\n    const observables = this.observables;\r\n    const len = observables.length;\r\n    if (len === 0) {\r\n      this.destination.complete!();\r\n    } else {\r\n      this.active = len;\r\n      this.toRespond = len;\r\n      for (let i = 0; i < len; i++) {\r\n        const observable = observables[i];\r\n        this.add(subscribeToResult(this, observable, undefined, i));\r\n      }\r\n    }\r\n  }\r\n\r\n  notifyComplete(unused: Subscriber<R>): void {\r\n    if ((this.active -= 1) === 0) {\r\n      this.destination.complete!();\r\n    }\r\n  }\r\n\r\n  notifyNext(_outerValue: T, innerValue: R,\r\n             outerIndex: number): void {\r\n    const values = this.values;\r\n    const oldVal = values[outerIndex];\r\n    const toRespond = !this.toRespond\r\n      ? 0\r\n      : oldVal === NONE ? --this.toRespond : this.toRespond;\r\n    values[outerIndex] = innerValue;\r\n\r\n    if (toRespond === 0) {\r\n      if (this.resultSelector) {\r\n        this._tryResultSelector(values);\r\n      } else {\r\n        this.destination.next!(values.slice());\r\n      }\r\n    }\r\n  }\r\n\r\n  private _tryResultSelector(values: any[]) {\r\n    let result: any;\r\n    try {\r\n      result = this.resultSelector!.apply(this, values);\r\n    } catch (err) {\r\n      this.destination.error!(err);\r\n      return;\r\n    }\r\n    this.destination.next!(result);\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}