{"ast":null,"code":"\"use strict\";\n/**\r\n * Copyright (c) \"Neo4j\"\r\n * Neo4j Sweden AB [http://neo4j.com]\r\n *\r\n * This file is part of Neo4j.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Stats = exports.QueryStatistics = exports.ProfiledPlan = exports.Plan = exports.Notification = exports.ServerInfo = exports.queryType = void 0;\n\nvar integer_1 = __importStar(require(\"./integer\"));\n/**\r\n * A ResultSummary instance contains structured metadata for a {@link Result}.\r\n * @access public\r\n */\n\n\nvar ResultSummary =\n/** @class */\nfunction () {\n  /**\r\n   * @constructor\r\n   * @param {string} query - The query this summary is for\r\n   * @param {Object} parameters - Parameters for the query\r\n   * @param {Object} metadata - Query metadata\r\n   * @param {number|undefined} protocolVersion - Bolt Protocol Version\r\n   */\n  function ResultSummary(query, parameters, metadata, protocolVersion) {\n    /**\r\n     * The query and parameters this summary is for.\r\n     * @type {{text: string, parameters: Object}}\r\n     * @public\r\n     */\n    this.query = {\n      text: query,\n      parameters: parameters\n    };\n    /**\r\n     * The type of query executed. Can be \"r\" for read-only query, \"rw\" for read-write query,\r\n     * \"w\" for write-only query and \"s\" for schema-write query.\r\n     * String constants are available in {@link queryType} object.\r\n     * @type {string}\r\n     * @public\r\n     */\n\n    this.queryType = metadata.type;\n    /**\r\n     * Counters for operations the query triggered.\r\n     * @type {QueryStatistics}\r\n     * @public\r\n     */\n\n    this.counters = new QueryStatistics(metadata.stats || {}); // for backwards compatibility, remove in future version\n\n    /**\r\n     * Use {@link ResultSummary.counters} instead.\r\n     * @type {QueryStatistics}\r\n     * @deprecated\r\n     */\n\n    this.updateStatistics = this.counters;\n    /**\r\n     * This describes how the database will execute the query.\r\n     * Query plan for the executed query if available, otherwise undefined.\r\n     * Will only be populated for queries that start with \"EXPLAIN\".\r\n     * @type {Plan|false}\r\n     * @public\r\n     */\n\n    this.plan = metadata.plan || metadata.profile ? new Plan(metadata.plan || metadata.profile) : false;\n    /**\r\n     * This describes how the database did execute your query. This will contain detailed information about what\r\n     * each step of the plan did. Profiled query plan for the executed query if available, otherwise undefined.\r\n     * Will only be populated for queries that start with \"PROFILE\".\r\n     * @type {ProfiledPlan}\r\n     * @public\r\n     */\n\n    this.profile = metadata.profile ? new ProfiledPlan(metadata.profile) : false;\n    /**\r\n     * An array of notifications that might arise when executing the query. Notifications can be warnings about\r\n     * problematic queries or other valuable information that can be presented in a client. Unlike failures\r\n     * or errors, notifications do not affect the execution of a query.\r\n     * @type {Array<Notification>}\r\n     * @public\r\n     */\n\n    this.notifications = this._buildNotifications(metadata.notifications);\n    /**\r\n     * The basic information of the server where the result is obtained from.\r\n     * @type {ServerInfo}\r\n     * @public\r\n     */\n\n    this.server = new ServerInfo(metadata.server, protocolVersion);\n    /**\r\n     * The time it took the server to consume the result.\r\n     * @type {number}\r\n     * @public\r\n     */\n\n    this.resultConsumedAfter = metadata.result_consumed_after;\n    /**\r\n     * The time it took the server to make the result available for consumption in milliseconds.\r\n     * @type {number}\r\n     * @public\r\n     */\n\n    this.resultAvailableAfter = metadata.result_available_after;\n    /**\r\n     * The database name where this summary is obtained from.\r\n     * @type {{name: string}}\r\n     * @public\r\n     */\n\n    this.database = {\n      name: metadata.db || null\n    };\n  }\n\n  ResultSummary.prototype._buildNotifications = function (notifications) {\n    if (!notifications) {\n      return [];\n    }\n\n    return notifications.map(function (n) {\n      return new Notification(n);\n    });\n  };\n  /**\r\n   * Check if the result summary has a plan\r\n   * @return {boolean}\r\n   */\n\n\n  ResultSummary.prototype.hasPlan = function () {\n    return this.plan instanceof Plan;\n  };\n  /**\r\n   * Check if the result summary has a profile\r\n   * @return {boolean}\r\n   */\n\n\n  ResultSummary.prototype.hasProfile = function () {\n    return this.profile instanceof ProfiledPlan;\n  };\n\n  return ResultSummary;\n}();\n/**\r\n * Class for execution plan received by prepending Cypher with EXPLAIN.\r\n * @access public\r\n */\n\n\nvar Plan =\n/** @class */\nfunction () {\n  /**\r\n   * Create a Plan instance\r\n   * @constructor\r\n   * @param {Object} plan - Object with plan data\r\n   */\n  function Plan(plan) {\n    this.operatorType = plan.operatorType;\n    this.identifiers = plan.identifiers;\n    this.arguments = plan.args;\n    this.children = plan.children ? plan.children.map(function (child) {\n      return new Plan(child);\n    }) : [];\n  }\n\n  return Plan;\n}();\n\nexports.Plan = Plan;\n/**\r\n * Class for execution plan received by prepending Cypher with PROFILE.\r\n * @access public\r\n */\n\nvar ProfiledPlan =\n/** @class */\nfunction () {\n  /**\r\n   * Create a ProfiledPlan instance\r\n   * @constructor\r\n   * @param {Object} profile - Object with profile data\r\n   */\n  function ProfiledPlan(profile) {\n    this.operatorType = profile.operatorType;\n    this.identifiers = profile.identifiers;\n    this.arguments = profile.args;\n    this.dbHits = valueOrDefault('dbHits', profile);\n    this.rows = valueOrDefault('rows', profile);\n    this.pageCacheMisses = valueOrDefault('pageCacheMisses', profile);\n    this.pageCacheHits = valueOrDefault('pageCacheHits', profile);\n    this.pageCacheHitRatio = valueOrDefault('pageCacheHitRatio', profile);\n    this.time = valueOrDefault('time', profile);\n    this.children = profile.children ? profile.children.map(function (child) {\n      return new ProfiledPlan(child);\n    }) : [];\n  }\n\n  ProfiledPlan.prototype.hasPageCacheStats = function () {\n    return this.pageCacheMisses > 0 || this.pageCacheHits > 0 || this.pageCacheHitRatio > 0;\n  };\n\n  return ProfiledPlan;\n}();\n\nexports.ProfiledPlan = ProfiledPlan;\n/**\r\n * Stats Query statistics dictionary for a {@link QueryStatistics}\r\n * @public\r\n */\n\nvar Stats =\n/** @class */\nfunction () {\n  /**\r\n   * @constructor\r\n   * @private\r\n   */\n  function Stats() {\n    /**\r\n     * nodes created\r\n     * @type {number}\r\n     * @public\r\n     */\n    this.nodesCreated = 0;\n    /**\r\n     * nodes deleted\r\n     * @type {number}\r\n     * @public\r\n     */\n\n    this.nodesDeleted = 0;\n    /**\r\n     * relationships created\r\n     * @type {number}\r\n     * @public\r\n     */\n\n    this.relationshipsCreated = 0;\n    /**\r\n     * relationships deleted\r\n     * @type {number}\r\n     * @public\r\n     */\n\n    this.relationshipsDeleted = 0;\n    /**\r\n     * properties set\r\n     * @type {number}\r\n     * @public\r\n     */\n\n    this.propertiesSet = 0;\n    /**\r\n     * labels added\r\n     * @type {number}\r\n     * @public\r\n     */\n\n    this.labelsAdded = 0;\n    /**\r\n     * labels removed\r\n     * @type {number}\r\n     * @public\r\n     */\n\n    this.labelsRemoved = 0;\n    /**\r\n     * indexes added\r\n     * @type {number}\r\n     * @public\r\n     */\n\n    this.indexesAdded = 0;\n    /**\r\n     * indexes removed\r\n     * @type {number}\r\n     * @public\r\n     */\n\n    this.indexesRemoved = 0;\n    /**\r\n     * constraints added\r\n     * @type {number}\r\n     * @public\r\n     */\n\n    this.constraintsAdded = 0;\n    /**\r\n     * constraints removed\r\n     * @type {number}\r\n     * @public\r\n     */\n\n    this.constraintsRemoved = 0;\n  }\n\n  return Stats;\n}();\n\nexports.Stats = Stats;\n/**\r\n * Get statistical information for a {@link Result}.\r\n * @access public\r\n */\n\nvar QueryStatistics =\n/** @class */\nfunction () {\n  /**\r\n   * Structurize the statistics\r\n   * @constructor\r\n   * @param {Object} statistics - Result statistics\r\n   */\n  function QueryStatistics(statistics) {\n    var _this = this;\n\n    this._stats = {\n      nodesCreated: 0,\n      nodesDeleted: 0,\n      relationshipsCreated: 0,\n      relationshipsDeleted: 0,\n      propertiesSet: 0,\n      labelsAdded: 0,\n      labelsRemoved: 0,\n      indexesAdded: 0,\n      indexesRemoved: 0,\n      constraintsAdded: 0,\n      constraintsRemoved: 0\n    };\n    this._systemUpdates = 0;\n    Object.keys(statistics).forEach(function (index) {\n      // To camelCase\n      var camelCaseIndex = index.replace(/(-\\w)/g, function (m) {\n        return m[1].toUpperCase();\n      });\n\n      if (camelCaseIndex in _this._stats) {\n        _this._stats[camelCaseIndex] = intValue(statistics[index]);\n      } else if (camelCaseIndex === 'systemUpdates') {\n        _this._systemUpdates = intValue(statistics[index]);\n      }\n    });\n    this._stats = Object.freeze(this._stats);\n  }\n  /**\r\n   * Did the database get updated?\r\n   * @return {boolean}\r\n   */\n\n\n  QueryStatistics.prototype.containsUpdates = function () {\n    var _this = this;\n\n    return Object.keys(this._stats).reduce(function (last, current) {\n      return last + _this._stats[current];\n    }, 0) > 0;\n  };\n  /**\r\n   * Returns the query statistics updates in a dictionary.\r\n   * @returns {Stats}\r\n   */\n\n\n  QueryStatistics.prototype.updates = function () {\n    return this._stats;\n  };\n  /**\r\n   * Return true if the system database get updated, otherwise false\r\n   * @returns {boolean} - If the system database get updated or not.\r\n   */\n\n\n  QueryStatistics.prototype.containsSystemUpdates = function () {\n    return this._systemUpdates > 0;\n  };\n  /**\r\n   * @returns {number} - Number of system updates\r\n   */\n\n\n  QueryStatistics.prototype.systemUpdates = function () {\n    return this._systemUpdates;\n  };\n\n  return QueryStatistics;\n}();\n\nexports.QueryStatistics = QueryStatistics;\n/**\r\n * Class for Cypher notifications\r\n * @access public\r\n */\n\nvar Notification =\n/** @class */\nfunction () {\n  /**\r\n   * Create a Notification instance\r\n   * @constructor\r\n   * @param {Object} notification - Object with notification data\r\n   */\n  function Notification(notification) {\n    this.code = notification.code;\n    this.title = notification.title;\n    this.description = notification.description;\n    this.severity = notification.severity;\n    this.position = Notification._constructPosition(notification.position);\n  }\n\n  Notification._constructPosition = function (pos) {\n    if (!pos) {\n      return {};\n    }\n\n    return {\n      offset: intValue(pos.offset),\n      line: intValue(pos.line),\n      column: intValue(pos.column)\n    };\n  };\n\n  return Notification;\n}();\n\nexports.Notification = Notification;\n/**\r\n * Class for exposing server info from a result.\r\n * @access public\r\n */\n\nvar ServerInfo =\n/** @class */\nfunction () {\n  /**\r\n   * Create a ServerInfo instance\r\n   * @constructor\r\n   * @param {Object} serverMeta - Object with serverMeta data\r\n   * @param {Object} connectionInfo - Bolt connection info\r\n   * @param {number} protocolVersion - Bolt Protocol Version\r\n   */\n  function ServerInfo(serverMeta, protocolVersion) {\n    if (serverMeta) {\n      /**\r\n       * The server adress\r\n       * @type {string}\r\n       * @public\r\n       */\n      this.address = serverMeta.address;\n      /**\r\n       * The server version string.\r\n       *\r\n       * See {@link ServerInfo#protocolVersion} and {@link ServerInfo#agent}\r\n       * @type {string}\r\n       * @deprecated in 4.3, please use ServerInfo#agent, ServerInfo#protocolVersion, or call the <i>dbms.components</i> procedure instead.\r\n       * <b>Method might be removed in the next major release.</b>\r\n       \r\n       * @public\r\n       */\n\n      this.version = serverMeta.version;\n      /**\r\n       * The server user agent string\r\n       * @type {string}\r\n       * @public\r\n       */\n\n      this.agent = serverMeta.version;\n    }\n    /**\r\n     * The protocol version used by the connection\r\n     * @type {number}\r\n     * @public\r\n     */\n\n\n    this.protocolVersion = protocolVersion;\n  }\n\n  return ServerInfo;\n}();\n\nexports.ServerInfo = ServerInfo;\n\nfunction intValue(value) {\n  if (value instanceof integer_1.default) {\n    return value.toInt();\n  } else if (typeof value == 'bigint') {\n    return (0, integer_1.int)(value).toInt();\n  } else {\n    return value;\n  }\n}\n\nfunction valueOrDefault(key, values, defaultValue) {\n  if (defaultValue === void 0) {\n    defaultValue = 0;\n  }\n\n  if (key in values) {\n    var value = values[key];\n    return intValue(value);\n  } else {\n    return defaultValue;\n  }\n}\n/**\r\n * The constants for query types\r\n * @type {{SCHEMA_WRITE: string, WRITE_ONLY: string, READ_ONLY: string, READ_WRITE: string}}\r\n */\n\n\nvar queryType = {\n  READ_ONLY: 'r',\n  READ_WRITE: 'rw',\n  WRITE_ONLY: 'w',\n  SCHEMA_WRITE: 's'\n};\nexports.queryType = queryType;\nexports.default = ResultSummary;","map":{"version":3,"sources":["D:/Documents/EMA/Mines A3/NoSQL/ReseauAchats/reseau_achats/node_modules/neo4j-driver-core/lib/result-summary.js"],"names":["__createBinding","Object","create","o","m","k","k2","undefined","defineProperty","enumerable","get","__setModuleDefault","v","value","__importStar","mod","__esModule","result","prototype","hasOwnProperty","call","exports","Stats","QueryStatistics","ProfiledPlan","Plan","Notification","ServerInfo","queryType","integer_1","require","ResultSummary","query","parameters","metadata","protocolVersion","text","type","counters","stats","updateStatistics","plan","profile","notifications","_buildNotifications","server","resultConsumedAfter","result_consumed_after","resultAvailableAfter","result_available_after","database","name","db","map","n","hasPlan","hasProfile","operatorType","identifiers","arguments","args","children","child","dbHits","valueOrDefault","rows","pageCacheMisses","pageCacheHits","pageCacheHitRatio","time","hasPageCacheStats","nodesCreated","nodesDeleted","relationshipsCreated","relationshipsDeleted","propertiesSet","labelsAdded","labelsRemoved","indexesAdded","indexesRemoved","constraintsAdded","constraintsRemoved","statistics","_this","_stats","_systemUpdates","keys","forEach","index","camelCaseIndex","replace","toUpperCase","intValue","freeze","containsUpdates","reduce","last","current","updates","containsSystemUpdates","systemUpdates","notification","code","title","description","severity","position","_constructPosition","pos","offset","line","column","serverMeta","address","version","agent","default","toInt","int","key","values","defaultValue","READ_ONLY","READ_WRITE","WRITE_ONLY","SCHEMA_WRITE"],"mappings":"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","sourcesContent":["\"use strict\";\r\n/**\r\n * Copyright (c) \"Neo4j\"\r\n * Neo4j Sweden AB [http://neo4j.com]\r\n *\r\n * This file is part of Neo4j.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}));\r\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n});\r\nvar __importStar = (this && this.__importStar) || function (mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Stats = exports.QueryStatistics = exports.ProfiledPlan = exports.Plan = exports.Notification = exports.ServerInfo = exports.queryType = void 0;\r\nvar integer_1 = __importStar(require(\"./integer\"));\r\n/**\r\n * A ResultSummary instance contains structured metadata for a {@link Result}.\r\n * @access public\r\n */\r\nvar ResultSummary = /** @class */ (function () {\r\n    /**\r\n     * @constructor\r\n     * @param {string} query - The query this summary is for\r\n     * @param {Object} parameters - Parameters for the query\r\n     * @param {Object} metadata - Query metadata\r\n     * @param {number|undefined} protocolVersion - Bolt Protocol Version\r\n     */\r\n    function ResultSummary(query, parameters, metadata, protocolVersion) {\r\n        /**\r\n         * The query and parameters this summary is for.\r\n         * @type {{text: string, parameters: Object}}\r\n         * @public\r\n         */\r\n        this.query = { text: query, parameters: parameters };\r\n        /**\r\n         * The type of query executed. Can be \"r\" for read-only query, \"rw\" for read-write query,\r\n         * \"w\" for write-only query and \"s\" for schema-write query.\r\n         * String constants are available in {@link queryType} object.\r\n         * @type {string}\r\n         * @public\r\n         */\r\n        this.queryType = metadata.type;\r\n        /**\r\n         * Counters for operations the query triggered.\r\n         * @type {QueryStatistics}\r\n         * @public\r\n         */\r\n        this.counters = new QueryStatistics(metadata.stats || {});\r\n        // for backwards compatibility, remove in future version\r\n        /**\r\n         * Use {@link ResultSummary.counters} instead.\r\n         * @type {QueryStatistics}\r\n         * @deprecated\r\n         */\r\n        this.updateStatistics = this.counters;\r\n        /**\r\n         * This describes how the database will execute the query.\r\n         * Query plan for the executed query if available, otherwise undefined.\r\n         * Will only be populated for queries that start with \"EXPLAIN\".\r\n         * @type {Plan|false}\r\n         * @public\r\n         */\r\n        this.plan =\r\n            metadata.plan || metadata.profile\r\n                ? new Plan(metadata.plan || metadata.profile)\r\n                : false;\r\n        /**\r\n         * This describes how the database did execute your query. This will contain detailed information about what\r\n         * each step of the plan did. Profiled query plan for the executed query if available, otherwise undefined.\r\n         * Will only be populated for queries that start with \"PROFILE\".\r\n         * @type {ProfiledPlan}\r\n         * @public\r\n         */\r\n        this.profile = metadata.profile ? new ProfiledPlan(metadata.profile) : false;\r\n        /**\r\n         * An array of notifications that might arise when executing the query. Notifications can be warnings about\r\n         * problematic queries or other valuable information that can be presented in a client. Unlike failures\r\n         * or errors, notifications do not affect the execution of a query.\r\n         * @type {Array<Notification>}\r\n         * @public\r\n         */\r\n        this.notifications = this._buildNotifications(metadata.notifications);\r\n        /**\r\n         * The basic information of the server where the result is obtained from.\r\n         * @type {ServerInfo}\r\n         * @public\r\n         */\r\n        this.server = new ServerInfo(metadata.server, protocolVersion);\r\n        /**\r\n         * The time it took the server to consume the result.\r\n         * @type {number}\r\n         * @public\r\n         */\r\n        this.resultConsumedAfter = metadata.result_consumed_after;\r\n        /**\r\n         * The time it took the server to make the result available for consumption in milliseconds.\r\n         * @type {number}\r\n         * @public\r\n         */\r\n        this.resultAvailableAfter = metadata.result_available_after;\r\n        /**\r\n         * The database name where this summary is obtained from.\r\n         * @type {{name: string}}\r\n         * @public\r\n         */\r\n        this.database = { name: metadata.db || null };\r\n    }\r\n    ResultSummary.prototype._buildNotifications = function (notifications) {\r\n        if (!notifications) {\r\n            return [];\r\n        }\r\n        return notifications.map(function (n) {\r\n            return new Notification(n);\r\n        });\r\n    };\r\n    /**\r\n     * Check if the result summary has a plan\r\n     * @return {boolean}\r\n     */\r\n    ResultSummary.prototype.hasPlan = function () {\r\n        return this.plan instanceof Plan;\r\n    };\r\n    /**\r\n     * Check if the result summary has a profile\r\n     * @return {boolean}\r\n     */\r\n    ResultSummary.prototype.hasProfile = function () {\r\n        return this.profile instanceof ProfiledPlan;\r\n    };\r\n    return ResultSummary;\r\n}());\r\n/**\r\n * Class for execution plan received by prepending Cypher with EXPLAIN.\r\n * @access public\r\n */\r\nvar Plan = /** @class */ (function () {\r\n    /**\r\n     * Create a Plan instance\r\n     * @constructor\r\n     * @param {Object} plan - Object with plan data\r\n     */\r\n    function Plan(plan) {\r\n        this.operatorType = plan.operatorType;\r\n        this.identifiers = plan.identifiers;\r\n        this.arguments = plan.args;\r\n        this.children = plan.children\r\n            ? plan.children.map(function (child) { return new Plan(child); })\r\n            : [];\r\n    }\r\n    return Plan;\r\n}());\r\nexports.Plan = Plan;\r\n/**\r\n * Class for execution plan received by prepending Cypher with PROFILE.\r\n * @access public\r\n */\r\nvar ProfiledPlan = /** @class */ (function () {\r\n    /**\r\n     * Create a ProfiledPlan instance\r\n     * @constructor\r\n     * @param {Object} profile - Object with profile data\r\n     */\r\n    function ProfiledPlan(profile) {\r\n        this.operatorType = profile.operatorType;\r\n        this.identifiers = profile.identifiers;\r\n        this.arguments = profile.args;\r\n        this.dbHits = valueOrDefault('dbHits', profile);\r\n        this.rows = valueOrDefault('rows', profile);\r\n        this.pageCacheMisses = valueOrDefault('pageCacheMisses', profile);\r\n        this.pageCacheHits = valueOrDefault('pageCacheHits', profile);\r\n        this.pageCacheHitRatio = valueOrDefault('pageCacheHitRatio', profile);\r\n        this.time = valueOrDefault('time', profile);\r\n        this.children = profile.children\r\n            ? profile.children.map(function (child) { return new ProfiledPlan(child); })\r\n            : [];\r\n    }\r\n    ProfiledPlan.prototype.hasPageCacheStats = function () {\r\n        return (this.pageCacheMisses > 0 ||\r\n            this.pageCacheHits > 0 ||\r\n            this.pageCacheHitRatio > 0);\r\n    };\r\n    return ProfiledPlan;\r\n}());\r\nexports.ProfiledPlan = ProfiledPlan;\r\n/**\r\n * Stats Query statistics dictionary for a {@link QueryStatistics}\r\n * @public\r\n */\r\nvar Stats = /** @class */ (function () {\r\n    /**\r\n     * @constructor\r\n     * @private\r\n     */\r\n    function Stats() {\r\n        /**\r\n         * nodes created\r\n         * @type {number}\r\n         * @public\r\n         */\r\n        this.nodesCreated = 0;\r\n        /**\r\n         * nodes deleted\r\n         * @type {number}\r\n         * @public\r\n         */\r\n        this.nodesDeleted = 0;\r\n        /**\r\n         * relationships created\r\n         * @type {number}\r\n         * @public\r\n         */\r\n        this.relationshipsCreated = 0;\r\n        /**\r\n         * relationships deleted\r\n         * @type {number}\r\n         * @public\r\n         */\r\n        this.relationshipsDeleted = 0;\r\n        /**\r\n         * properties set\r\n         * @type {number}\r\n         * @public\r\n         */\r\n        this.propertiesSet = 0;\r\n        /**\r\n         * labels added\r\n         * @type {number}\r\n         * @public\r\n         */\r\n        this.labelsAdded = 0;\r\n        /**\r\n         * labels removed\r\n         * @type {number}\r\n         * @public\r\n         */\r\n        this.labelsRemoved = 0;\r\n        /**\r\n         * indexes added\r\n         * @type {number}\r\n         * @public\r\n         */\r\n        this.indexesAdded = 0;\r\n        /**\r\n         * indexes removed\r\n         * @type {number}\r\n         * @public\r\n         */\r\n        this.indexesRemoved = 0;\r\n        /**\r\n         * constraints added\r\n         * @type {number}\r\n         * @public\r\n         */\r\n        this.constraintsAdded = 0;\r\n        /**\r\n         * constraints removed\r\n         * @type {number}\r\n         * @public\r\n         */\r\n        this.constraintsRemoved = 0;\r\n    }\r\n    return Stats;\r\n}());\r\nexports.Stats = Stats;\r\n/**\r\n * Get statistical information for a {@link Result}.\r\n * @access public\r\n */\r\nvar QueryStatistics = /** @class */ (function () {\r\n    /**\r\n     * Structurize the statistics\r\n     * @constructor\r\n     * @param {Object} statistics - Result statistics\r\n     */\r\n    function QueryStatistics(statistics) {\r\n        var _this = this;\r\n        this._stats = {\r\n            nodesCreated: 0,\r\n            nodesDeleted: 0,\r\n            relationshipsCreated: 0,\r\n            relationshipsDeleted: 0,\r\n            propertiesSet: 0,\r\n            labelsAdded: 0,\r\n            labelsRemoved: 0,\r\n            indexesAdded: 0,\r\n            indexesRemoved: 0,\r\n            constraintsAdded: 0,\r\n            constraintsRemoved: 0\r\n        };\r\n        this._systemUpdates = 0;\r\n        Object.keys(statistics).forEach(function (index) {\r\n            // To camelCase\r\n            var camelCaseIndex = index.replace(/(-\\w)/g, function (m) { return m[1].toUpperCase(); });\r\n            if (camelCaseIndex in _this._stats) {\r\n                _this._stats[camelCaseIndex] = intValue(statistics[index]);\r\n            }\r\n            else if (camelCaseIndex === 'systemUpdates') {\r\n                _this._systemUpdates = intValue(statistics[index]);\r\n            }\r\n        });\r\n        this._stats = Object.freeze(this._stats);\r\n    }\r\n    /**\r\n     * Did the database get updated?\r\n     * @return {boolean}\r\n     */\r\n    QueryStatistics.prototype.containsUpdates = function () {\r\n        var _this = this;\r\n        return (Object.keys(this._stats).reduce(function (last, current) {\r\n            return last + _this._stats[current];\r\n        }, 0) > 0);\r\n    };\r\n    /**\r\n     * Returns the query statistics updates in a dictionary.\r\n     * @returns {Stats}\r\n     */\r\n    QueryStatistics.prototype.updates = function () {\r\n        return this._stats;\r\n    };\r\n    /**\r\n     * Return true if the system database get updated, otherwise false\r\n     * @returns {boolean} - If the system database get updated or not.\r\n     */\r\n    QueryStatistics.prototype.containsSystemUpdates = function () {\r\n        return this._systemUpdates > 0;\r\n    };\r\n    /**\r\n     * @returns {number} - Number of system updates\r\n     */\r\n    QueryStatistics.prototype.systemUpdates = function () {\r\n        return this._systemUpdates;\r\n    };\r\n    return QueryStatistics;\r\n}());\r\nexports.QueryStatistics = QueryStatistics;\r\n/**\r\n * Class for Cypher notifications\r\n * @access public\r\n */\r\nvar Notification = /** @class */ (function () {\r\n    /**\r\n     * Create a Notification instance\r\n     * @constructor\r\n     * @param {Object} notification - Object with notification data\r\n     */\r\n    function Notification(notification) {\r\n        this.code = notification.code;\r\n        this.title = notification.title;\r\n        this.description = notification.description;\r\n        this.severity = notification.severity;\r\n        this.position = Notification._constructPosition(notification.position);\r\n    }\r\n    Notification._constructPosition = function (pos) {\r\n        if (!pos) {\r\n            return {};\r\n        }\r\n        return {\r\n            offset: intValue(pos.offset),\r\n            line: intValue(pos.line),\r\n            column: intValue(pos.column)\r\n        };\r\n    };\r\n    return Notification;\r\n}());\r\nexports.Notification = Notification;\r\n/**\r\n * Class for exposing server info from a result.\r\n * @access public\r\n */\r\nvar ServerInfo = /** @class */ (function () {\r\n    /**\r\n     * Create a ServerInfo instance\r\n     * @constructor\r\n     * @param {Object} serverMeta - Object with serverMeta data\r\n     * @param {Object} connectionInfo - Bolt connection info\r\n     * @param {number} protocolVersion - Bolt Protocol Version\r\n     */\r\n    function ServerInfo(serverMeta, protocolVersion) {\r\n        if (serverMeta) {\r\n            /**\r\n             * The server adress\r\n             * @type {string}\r\n             * @public\r\n             */\r\n            this.address = serverMeta.address;\r\n            /**\r\n             * The server version string.\r\n             *\r\n             * See {@link ServerInfo#protocolVersion} and {@link ServerInfo#agent}\r\n             * @type {string}\r\n             * @deprecated in 4.3, please use ServerInfo#agent, ServerInfo#protocolVersion, or call the <i>dbms.components</i> procedure instead.\r\n             * <b>Method might be removed in the next major release.</b>\r\n             \r\n             * @public\r\n             */\r\n            this.version = serverMeta.version;\r\n            /**\r\n             * The server user agent string\r\n             * @type {string}\r\n             * @public\r\n             */\r\n            this.agent = serverMeta.version;\r\n        }\r\n        /**\r\n         * The protocol version used by the connection\r\n         * @type {number}\r\n         * @public\r\n         */\r\n        this.protocolVersion = protocolVersion;\r\n    }\r\n    return ServerInfo;\r\n}());\r\nexports.ServerInfo = ServerInfo;\r\nfunction intValue(value) {\r\n    if (value instanceof integer_1.default) {\r\n        return value.toInt();\r\n    }\r\n    else if (typeof value == 'bigint') {\r\n        return (0, integer_1.int)(value).toInt();\r\n    }\r\n    else {\r\n        return value;\r\n    }\r\n}\r\nfunction valueOrDefault(key, values, defaultValue) {\r\n    if (defaultValue === void 0) { defaultValue = 0; }\r\n    if (key in values) {\r\n        var value = values[key];\r\n        return intValue(value);\r\n    }\r\n    else {\r\n        return defaultValue;\r\n    }\r\n}\r\n/**\r\n * The constants for query types\r\n * @type {{SCHEMA_WRITE: string, WRITE_ONLY: string, READ_ONLY: string, READ_WRITE: string}}\r\n */\r\nvar queryType = {\r\n    READ_ONLY: 'r',\r\n    READ_WRITE: 'rw',\r\n    WRITE_ONLY: 'w',\r\n    SCHEMA_WRITE: 's'\r\n};\r\nexports.queryType = queryType;\r\nexports.default = ResultSummary;\r\n"]},"metadata":{},"sourceType":"script"}