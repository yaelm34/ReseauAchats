{"ast":null,"code":"/** PURE_IMPORTS_START tslib,_scheduler_async,_Subscriber,_util_isScheduler PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { async } from '../scheduler/async';\nimport { Subscriber } from '../Subscriber';\nimport { isScheduler } from '../util/isScheduler';\nexport function bufferTime(bufferTimeSpan) {\n  var length = arguments.length;\n  var scheduler = async;\n\n  if (isScheduler(arguments[arguments.length - 1])) {\n    scheduler = arguments[arguments.length - 1];\n    length--;\n  }\n\n  var bufferCreationInterval = null;\n\n  if (length >= 2) {\n    bufferCreationInterval = arguments[1];\n  }\n\n  var maxBufferSize = Number.POSITIVE_INFINITY;\n\n  if (length >= 3) {\n    maxBufferSize = arguments[2];\n  }\n\n  return function bufferTimeOperatorFunction(source) {\n    return source.lift(new BufferTimeOperator(bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler));\n  };\n}\n\nvar BufferTimeOperator = /*@__PURE__*/function () {\n  function BufferTimeOperator(bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler) {\n    this.bufferTimeSpan = bufferTimeSpan;\n    this.bufferCreationInterval = bufferCreationInterval;\n    this.maxBufferSize = maxBufferSize;\n    this.scheduler = scheduler;\n  }\n\n  BufferTimeOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new BufferTimeSubscriber(subscriber, this.bufferTimeSpan, this.bufferCreationInterval, this.maxBufferSize, this.scheduler));\n  };\n\n  return BufferTimeOperator;\n}();\n\nvar Context = /*@__PURE__*/function () {\n  function Context() {\n    this.buffer = [];\n  }\n\n  return Context;\n}();\n\nvar BufferTimeSubscriber = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(BufferTimeSubscriber, _super);\n\n  function BufferTimeSubscriber(destination, bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler) {\n    var _this = _super.call(this, destination) || this;\n\n    _this.bufferTimeSpan = bufferTimeSpan;\n    _this.bufferCreationInterval = bufferCreationInterval;\n    _this.maxBufferSize = maxBufferSize;\n    _this.scheduler = scheduler;\n    _this.contexts = [];\n\n    var context = _this.openContext();\n\n    _this.timespanOnly = bufferCreationInterval == null || bufferCreationInterval < 0;\n\n    if (_this.timespanOnly) {\n      var timeSpanOnlyState = {\n        subscriber: _this,\n        context: context,\n        bufferTimeSpan: bufferTimeSpan\n      };\n\n      _this.add(context.closeAction = scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));\n    } else {\n      var closeState = {\n        subscriber: _this,\n        context: context\n      };\n      var creationState = {\n        bufferTimeSpan: bufferTimeSpan,\n        bufferCreationInterval: bufferCreationInterval,\n        subscriber: _this,\n        scheduler: scheduler\n      };\n\n      _this.add(context.closeAction = scheduler.schedule(dispatchBufferClose, bufferTimeSpan, closeState));\n\n      _this.add(scheduler.schedule(dispatchBufferCreation, bufferCreationInterval, creationState));\n    }\n\n    return _this;\n  }\n\n  BufferTimeSubscriber.prototype._next = function (value) {\n    var contexts = this.contexts;\n    var len = contexts.length;\n    var filledBufferContext;\n\n    for (var i = 0; i < len; i++) {\n      var context_1 = contexts[i];\n      var buffer = context_1.buffer;\n      buffer.push(value);\n\n      if (buffer.length == this.maxBufferSize) {\n        filledBufferContext = context_1;\n      }\n    }\n\n    if (filledBufferContext) {\n      this.onBufferFull(filledBufferContext);\n    }\n  };\n\n  BufferTimeSubscriber.prototype._error = function (err) {\n    this.contexts.length = 0;\n\n    _super.prototype._error.call(this, err);\n  };\n\n  BufferTimeSubscriber.prototype._complete = function () {\n    var _a = this,\n        contexts = _a.contexts,\n        destination = _a.destination;\n\n    while (contexts.length > 0) {\n      var context_2 = contexts.shift();\n      destination.next(context_2.buffer);\n    }\n\n    _super.prototype._complete.call(this);\n  };\n\n  BufferTimeSubscriber.prototype._unsubscribe = function () {\n    this.contexts = null;\n  };\n\n  BufferTimeSubscriber.prototype.onBufferFull = function (context) {\n    this.closeContext(context);\n    var closeAction = context.closeAction;\n    closeAction.unsubscribe();\n    this.remove(closeAction);\n\n    if (!this.closed && this.timespanOnly) {\n      context = this.openContext();\n      var bufferTimeSpan = this.bufferTimeSpan;\n      var timeSpanOnlyState = {\n        subscriber: this,\n        context: context,\n        bufferTimeSpan: bufferTimeSpan\n      };\n      this.add(context.closeAction = this.scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));\n    }\n  };\n\n  BufferTimeSubscriber.prototype.openContext = function () {\n    var context = new Context();\n    this.contexts.push(context);\n    return context;\n  };\n\n  BufferTimeSubscriber.prototype.closeContext = function (context) {\n    this.destination.next(context.buffer);\n    var contexts = this.contexts;\n    var spliceIndex = contexts ? contexts.indexOf(context) : -1;\n\n    if (spliceIndex >= 0) {\n      contexts.splice(contexts.indexOf(context), 1);\n    }\n  };\n\n  return BufferTimeSubscriber;\n}(Subscriber);\n\nfunction dispatchBufferTimeSpanOnly(state) {\n  var subscriber = state.subscriber;\n  var prevContext = state.context;\n\n  if (prevContext) {\n    subscriber.closeContext(prevContext);\n  }\n\n  if (!subscriber.closed) {\n    state.context = subscriber.openContext();\n    state.context.closeAction = this.schedule(state, state.bufferTimeSpan);\n  }\n}\n\nfunction dispatchBufferCreation(state) {\n  var bufferCreationInterval = state.bufferCreationInterval,\n      bufferTimeSpan = state.bufferTimeSpan,\n      subscriber = state.subscriber,\n      scheduler = state.scheduler;\n  var context = subscriber.openContext();\n  var action = this;\n\n  if (!subscriber.closed) {\n    subscriber.add(context.closeAction = scheduler.schedule(dispatchBufferClose, bufferTimeSpan, {\n      subscriber: subscriber,\n      context: context\n    }));\n    action.schedule(state, bufferCreationInterval);\n  }\n}\n\nfunction dispatchBufferClose(arg) {\n  var subscriber = arg.subscriber,\n      context = arg.context;\n  subscriber.closeContext(context);\n}","map":{"version":3,"mappings":"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","names":["tslib_1","async","Subscriber","isScheduler","bufferTime","bufferTimeSpan","length","arguments","scheduler","bufferCreationInterval","maxBufferSize","bufferTimeOperatorFunction","source","BufferTimeOperator","call","Context","BufferTimeSubscriber","_super","destination","_this","subscriber","context","closeState","add","dispatchBufferClose","_next","contexts","len","i","context_1","buffer","value","filledBufferContext","_error","_a","_unsubscribe","prototype","onBufferFull","closeContext","closeAction","unsubscribe","remove","timeSpanOnlyState","openContext","push","next","spliceIndex","dispatchBufferTimeSpanOnly","state","prevContext","dispatchBufferCreation","action","schedule"],"sources":["D:\\Documents\\EMA\\Mines A3\\NoSQL\\ReseauAchats\\reseau_achats\\node_modules\\rxjs\\src\\internal\\operators\\bufferTime.ts"],"sourcesContent":["import { Operator } from '../Operator';\r\nimport { async } from '../scheduler/async';\r\nimport { Observable } from '../Observable';\r\nimport { Subscriber } from '../Subscriber';\r\nimport { Subscription } from '../Subscription';\r\nimport { isScheduler } from '../util/isScheduler';\r\nimport { OperatorFunction, SchedulerAction, SchedulerLike } from '../types';\r\n\r\n/* tslint:disable:max-line-length */\r\nexport function bufferTime<T>(bufferTimeSpan: number, scheduler?: SchedulerLike): OperatorFunction<T, T[]>;\r\nexport function bufferTime<T>(bufferTimeSpan: number, bufferCreationInterval: number | null | undefined, scheduler?: SchedulerLike): OperatorFunction<T, T[]>;\r\nexport function bufferTime<T>(bufferTimeSpan: number, bufferCreationInterval: number | null | undefined, maxBufferSize: number, scheduler?: SchedulerLike): OperatorFunction<T, T[]>;\r\n/* tslint:enable:max-line-length */\r\n\r\n/**\r\n * Buffers the source Observable values for a specific time period.\r\n *\r\n * <span class=\"informal\">Collects values from the past as an array, and emits\r\n * those arrays periodically in time.</span>\r\n *\r\n * ![](bufferTime.png)\r\n *\r\n * Buffers values from the source for a specific time duration `bufferTimeSpan`.\r\n * Unless the optional argument `bufferCreationInterval` is given, it emits and\r\n * resets the buffer every `bufferTimeSpan` milliseconds. If\r\n * `bufferCreationInterval` is given, this operator opens the buffer every\r\n * `bufferCreationInterval` milliseconds and closes (emits and resets) the\r\n * buffer every `bufferTimeSpan` milliseconds. When the optional argument\r\n * `maxBufferSize` is specified, the buffer will be closed either after\r\n * `bufferTimeSpan` milliseconds or when it contains `maxBufferSize` elements.\r\n *\r\n * ## Examples\r\n *\r\n * Every second, emit an array of the recent click events\r\n *\r\n * ```ts\r\n * import { fromEvent } from 'rxjs';\r\n * import { bufferTime } from 'rxjs/operators';\r\n *\r\n * const clicks = fromEvent(document, 'click');\r\n * const buffered = clicks.pipe(bufferTime(1000));\r\n * buffered.subscribe(x => console.log(x));\r\n * ```\r\n *\r\n * Every 5 seconds, emit the click events from the next 2 seconds\r\n *\r\n * ```ts\r\n * import { fromEvent } from 'rxjs';\r\n * import { bufferTime } from 'rxjs/operators';\r\n *\r\n * const clicks = fromEvent(document, 'click');\r\n * const buffered = clicks.pipe(bufferTime(2000, 5000));\r\n * buffered.subscribe(x => console.log(x));\r\n * ```\r\n *\r\n * @see {@link buffer}\r\n * @see {@link bufferCount}\r\n * @see {@link bufferToggle}\r\n * @see {@link bufferWhen}\r\n * @see {@link windowTime}\r\n *\r\n * @param {number} bufferTimeSpan The amount of time to fill each buffer array.\r\n * @param {number} [bufferCreationInterval] The interval at which to start new\r\n * buffers.\r\n * @param {number} [maxBufferSize] The maximum buffer size.\r\n * @param {SchedulerLike} [scheduler=async] The scheduler on which to schedule the\r\n * intervals that determine buffer boundaries.\r\n * @return {Observable<T[]>} An observable of arrays of buffered values.\r\n * @method bufferTime\r\n * @owner Observable\r\n */\r\nexport function bufferTime<T>(bufferTimeSpan: number): OperatorFunction<T, T[]> {\r\n  let length: number = arguments.length;\r\n\r\n  let scheduler: SchedulerLike = async;\r\n  if (isScheduler(arguments[arguments.length - 1])) {\r\n    scheduler = arguments[arguments.length - 1];\r\n    length--;\r\n  }\r\n\r\n  let bufferCreationInterval: number = null;\r\n  if (length >= 2) {\r\n    bufferCreationInterval = arguments[1];\r\n  }\r\n\r\n  let maxBufferSize: number = Number.POSITIVE_INFINITY;\r\n  if (length >= 3) {\r\n    maxBufferSize = arguments[2];\r\n  }\r\n\r\n  return function bufferTimeOperatorFunction(source: Observable<T>) {\r\n    return source.lift(new BufferTimeOperator<T>(bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler));\r\n  };\r\n}\r\n\r\nclass BufferTimeOperator<T> implements Operator<T, T[]> {\r\n  constructor(private bufferTimeSpan: number,\r\n              private bufferCreationInterval: number,\r\n              private maxBufferSize: number,\r\n              private scheduler: SchedulerLike) {\r\n  }\r\n\r\n  call(subscriber: Subscriber<T[]>, source: any): any {\r\n    return source.subscribe(new BufferTimeSubscriber(\r\n      subscriber, this.bufferTimeSpan, this.bufferCreationInterval, this.maxBufferSize, this.scheduler\r\n    ));\r\n  }\r\n}\r\n\r\nclass Context<T> {\r\n  buffer: T[] = [];\r\n  closeAction: Subscription;\r\n}\r\n\r\ninterface DispatchCreateArg<T> {\r\n  bufferTimeSpan: number;\r\n  bufferCreationInterval: number;\r\n  subscriber: BufferTimeSubscriber<T>;\r\n  scheduler: SchedulerLike;\r\n}\r\n\r\ninterface DispatchCloseArg<T> {\r\n  subscriber: BufferTimeSubscriber<T>;\r\n  context: Context<T>;\r\n}\r\n\r\n/**\r\n * We need this JSDoc comment for affecting ESDoc.\r\n * @ignore\r\n * @extends {Ignored}\r\n */\r\nclass BufferTimeSubscriber<T> extends Subscriber<T> {\r\n  private contexts: Array<Context<T>> = [];\r\n  private timespanOnly: boolean;\r\n\r\n  constructor(destination: Subscriber<T[]>,\r\n              private bufferTimeSpan: number,\r\n              private bufferCreationInterval: number,\r\n              private maxBufferSize: number,\r\n              private scheduler: SchedulerLike) {\r\n    super(destination);\r\n    const context = this.openContext();\r\n    this.timespanOnly = bufferCreationInterval == null || bufferCreationInterval < 0;\r\n    if (this.timespanOnly) {\r\n      const timeSpanOnlyState = { subscriber: this, context, bufferTimeSpan };\r\n      this.add(context.closeAction = scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));\r\n    } else {\r\n      const closeState = { subscriber: this, context };\r\n      const creationState: DispatchCreateArg<T> = { bufferTimeSpan, bufferCreationInterval, subscriber: this, scheduler };\r\n      this.add(context.closeAction = scheduler.schedule<DispatchCloseArg<T>>(dispatchBufferClose, bufferTimeSpan, closeState));\r\n      this.add(scheduler.schedule<DispatchCreateArg<T>>(dispatchBufferCreation, bufferCreationInterval, creationState));\r\n    }\r\n  }\r\n\r\n  protected _next(value: T) {\r\n    const contexts = this.contexts;\r\n    const len = contexts.length;\r\n    let filledBufferContext: Context<T>;\r\n    for (let i = 0; i < len; i++) {\r\n      const context = contexts[i];\r\n      const buffer = context.buffer;\r\n      buffer.push(value);\r\n      if (buffer.length == this.maxBufferSize) {\r\n        filledBufferContext = context;\r\n      }\r\n    }\r\n\r\n    if (filledBufferContext) {\r\n      this.onBufferFull(filledBufferContext);\r\n    }\r\n  }\r\n\r\n  protected _error(err: any) {\r\n    this.contexts.length = 0;\r\n    super._error(err);\r\n  }\r\n\r\n  protected _complete() {\r\n    const { contexts, destination } = this;\r\n    while (contexts.length > 0) {\r\n      const context = contexts.shift();\r\n      destination.next(context.buffer);\r\n    }\r\n    super._complete();\r\n  }\r\n\r\n  /** @deprecated This is an internal implementation detail, do not use. */\r\n  _unsubscribe() {\r\n    this.contexts = null;\r\n  }\r\n\r\n  protected onBufferFull(context: Context<T>) {\r\n    this.closeContext(context);\r\n    const closeAction = context.closeAction;\r\n    closeAction.unsubscribe();\r\n    this.remove(closeAction);\r\n\r\n    if (!this.closed && this.timespanOnly) {\r\n      context = this.openContext();\r\n      const bufferTimeSpan = this.bufferTimeSpan;\r\n      const timeSpanOnlyState = { subscriber: this, context, bufferTimeSpan };\r\n      this.add(context.closeAction = this.scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));\r\n    }\r\n  }\r\n\r\n  openContext(): Context<T> {\r\n    const context: Context<T> = new Context<T>();\r\n    this.contexts.push(context);\r\n    return context;\r\n  }\r\n\r\n  closeContext(context: Context<T>) {\r\n    this.destination.next(context.buffer);\r\n    const contexts = this.contexts;\r\n\r\n    const spliceIndex = contexts ? contexts.indexOf(context) : -1;\r\n    if (spliceIndex >= 0) {\r\n      contexts.splice(contexts.indexOf(context), 1);\r\n    }\r\n  }\r\n}\r\n\r\nfunction dispatchBufferTimeSpanOnly(this: SchedulerAction<any>, state: any) {\r\n  const subscriber: BufferTimeSubscriber<any> = state.subscriber;\r\n\r\n  const prevContext = state.context;\r\n  if (prevContext) {\r\n    subscriber.closeContext(prevContext);\r\n  }\r\n\r\n  if (!subscriber.closed) {\r\n    state.context = subscriber.openContext();\r\n    state.context.closeAction = this.schedule(state, state.bufferTimeSpan);\r\n  }\r\n}\r\n\r\nfunction dispatchBufferCreation<T>(this: SchedulerAction<DispatchCreateArg<T>>, state: DispatchCreateArg<T>) {\r\n  const { bufferCreationInterval, bufferTimeSpan, subscriber, scheduler } = state;\r\n  const context = subscriber.openContext();\r\n  const action = <SchedulerAction<DispatchCreateArg<T>>>this;\r\n  if (!subscriber.closed) {\r\n    subscriber.add(context.closeAction = scheduler.schedule<DispatchCloseArg<T>>(dispatchBufferClose, bufferTimeSpan, { subscriber, context }));\r\n    action.schedule(state, bufferCreationInterval);\r\n  }\r\n}\r\n\r\nfunction dispatchBufferClose<T>(arg: DispatchCloseArg<T>) {\r\n  const { subscriber, context } = arg;\r\n  subscriber.closeContext(context);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}