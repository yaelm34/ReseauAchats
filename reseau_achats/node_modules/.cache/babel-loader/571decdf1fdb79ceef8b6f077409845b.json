{"ast":null,"code":"\"use strict\";\n/**\n * Copyright (c) \"Neo4j\"\n * Neo4j Sweden AB [http://neo4j.com]\n *\n * This file is part of Neo4j.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * @property {function(username: string, password: string, realm: ?string)} basic the function to create a\n * basic authentication token.\n * @property {function(base64EncodedTicket: string)} kerberos the function to create a Kerberos authentication token.\n * Accepts a single string argument - base64 encoded Kerberos ticket.\n * @property {function(base64EncodedTicket: string)} bearer the function to create a Bearer authentication token.\n * Accepts a single string argument - base64 encoded Bearer ticket.\n * @property {function(principal: string, credentials: string, realm: string, scheme: string, parameters: ?object)} custom\n * the function to create a custom authentication token.\n */\n\nvar auth = {\n  basic: function (username, password, realm) {\n    if (realm) {\n      return {\n        scheme: 'basic',\n        principal: username,\n        credentials: password,\n        realm: realm\n      };\n    } else {\n      return {\n        scheme: 'basic',\n        principal: username,\n        credentials: password\n      };\n    }\n  },\n  kerberos: function (base64EncodedTicket) {\n    return {\n      scheme: 'kerberos',\n      principal: '',\n      credentials: base64EncodedTicket\n    };\n  },\n  bearer: function (base64EncodedToken) {\n    return {\n      scheme: 'bearer',\n      credentials: base64EncodedToken\n    };\n  },\n  custom: function (principal, credentials, realm, scheme, parameters) {\n    if (parameters) {\n      return {\n        scheme: scheme,\n        principal: principal,\n        credentials: credentials,\n        realm: realm,\n        parameters: parameters\n      };\n    } else {\n      return {\n        scheme: scheme,\n        principal: principal,\n        credentials: credentials,\n        realm: realm\n      };\n    }\n  }\n};\nexports.default = auth;","map":{"version":3,"sources":["D:/Documents/EMA/Mines A3/NoSQL/ReseauAchats/reseau_achats/node_modules/neo4j-driver-core/lib/auth.js"],"names":["Object","defineProperty","exports","value","auth","basic","username","password","realm","scheme","principal","credentials","kerberos","base64EncodedTicket","bearer","base64EncodedToken","custom","parameters","default"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,IAAI,GAAG;AACPC,EAAAA,KAAK,EAAE,UAAUC,QAAV,EAAoBC,QAApB,EAA8BC,KAA9B,EAAqC;AACxC,QAAIA,KAAJ,EAAW;AACP,aAAO;AACHC,QAAAA,MAAM,EAAE,OADL;AAEHC,QAAAA,SAAS,EAAEJ,QAFR;AAGHK,QAAAA,WAAW,EAAEJ,QAHV;AAIHC,QAAAA,KAAK,EAAEA;AAJJ,OAAP;AAMH,KAPD,MAQK;AACD,aAAO;AAAEC,QAAAA,MAAM,EAAE,OAAV;AAAmBC,QAAAA,SAAS,EAAEJ,QAA9B;AAAwCK,QAAAA,WAAW,EAAEJ;AAArD,OAAP;AACH;AACJ,GAbM;AAcPK,EAAAA,QAAQ,EAAE,UAAUC,mBAAV,EAA+B;AACrC,WAAO;AACHJ,MAAAA,MAAM,EAAE,UADL;AAEHC,MAAAA,SAAS,EAAE,EAFR;AAGHC,MAAAA,WAAW,EAAEE;AAHV,KAAP;AAKH,GApBM;AAqBPC,EAAAA,MAAM,EAAE,UAAUC,kBAAV,EAA8B;AAClC,WAAO;AACHN,MAAAA,MAAM,EAAE,QADL;AAEHE,MAAAA,WAAW,EAAEI;AAFV,KAAP;AAIH,GA1BM;AA2BPC,EAAAA,MAAM,EAAE,UAAUN,SAAV,EAAqBC,WAArB,EAAkCH,KAAlC,EAAyCC,MAAzC,EAAiDQ,UAAjD,EAA6D;AACjE,QAAIA,UAAJ,EAAgB;AACZ,aAAO;AACHR,QAAAA,MAAM,EAAEA,MADL;AAEHC,QAAAA,SAAS,EAAEA,SAFR;AAGHC,QAAAA,WAAW,EAAEA,WAHV;AAIHH,QAAAA,KAAK,EAAEA,KAJJ;AAKHS,QAAAA,UAAU,EAAEA;AALT,OAAP;AAOH,KARD,MASK;AACD,aAAO;AACHR,QAAAA,MAAM,EAAEA,MADL;AAEHC,QAAAA,SAAS,EAAEA,SAFR;AAGHC,QAAAA,WAAW,EAAEA,WAHV;AAIHH,QAAAA,KAAK,EAAEA;AAJJ,OAAP;AAMH;AACJ;AA7CM,CAAX;AA+CAN,OAAO,CAACgB,OAAR,GAAkBd,IAAlB","sourcesContent":["\"use strict\";\n/**\n * Copyright (c) \"Neo4j\"\n * Neo4j Sweden AB [http://neo4j.com]\n *\n * This file is part of Neo4j.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * @property {function(username: string, password: string, realm: ?string)} basic the function to create a\n * basic authentication token.\n * @property {function(base64EncodedTicket: string)} kerberos the function to create a Kerberos authentication token.\n * Accepts a single string argument - base64 encoded Kerberos ticket.\n * @property {function(base64EncodedTicket: string)} bearer the function to create a Bearer authentication token.\n * Accepts a single string argument - base64 encoded Bearer ticket.\n * @property {function(principal: string, credentials: string, realm: string, scheme: string, parameters: ?object)} custom\n * the function to create a custom authentication token.\n */\nvar auth = {\n    basic: function (username, password, realm) {\n        if (realm) {\n            return {\n                scheme: 'basic',\n                principal: username,\n                credentials: password,\n                realm: realm\n            };\n        }\n        else {\n            return { scheme: 'basic', principal: username, credentials: password };\n        }\n    },\n    kerberos: function (base64EncodedTicket) {\n        return {\n            scheme: 'kerberos',\n            principal: '',\n            credentials: base64EncodedTicket\n        };\n    },\n    bearer: function (base64EncodedToken) {\n        return {\n            scheme: 'bearer',\n            credentials: base64EncodedToken\n        };\n    },\n    custom: function (principal, credentials, realm, scheme, parameters) {\n        if (parameters) {\n            return {\n                scheme: scheme,\n                principal: principal,\n                credentials: credentials,\n                realm: realm,\n                parameters: parameters\n            };\n        }\n        else {\n            return {\n                scheme: scheme,\n                principal: principal,\n                credentials: credentials,\n                realm: realm\n            };\n        }\n    }\n};\nexports.default = auth;\n"]},"metadata":{},"sourceType":"script"}