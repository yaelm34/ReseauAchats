{"ast":null,"code":"\"use strict\";\n/**\r\n * Copyright (c) \"Neo4j\"\r\n * Neo4j Sweden AB [http://neo4j.com]\r\n *\r\n * This file is part of Neo4j.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar Connection =\n/** @class */\nfunction () {\n  /**\r\n   * @param {ConnectionErrorHandler} errorHandler the error handler\r\n   */\n  function Connection(errorHandler) {\n    this._errorHandler = errorHandler;\n  }\n\n  Object.defineProperty(Connection.prototype, \"id\", {\n    get: function () {\n      throw new Error('not implemented');\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Connection.prototype, \"databaseId\", {\n    get: function () {\n      throw new Error('not implemented');\n    },\n    set: function (value) {\n      throw new Error('not implemented');\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * @returns {boolean} whether this connection is in a working condition\r\n   */\n\n  Connection.prototype.isOpen = function () {\n    throw new Error('not implemented');\n  };\n  /**\r\n   * @returns {BoltProtocol} the underlying bolt protocol assigned to this connection\r\n   */\n\n\n  Connection.prototype.protocol = function () {\n    throw new Error('not implemented');\n  };\n\n  Object.defineProperty(Connection.prototype, \"address\", {\n    /**\r\n     * @returns {ServerAddress} the server address this connection is opened against\r\n     */\n    get: function () {\n      throw new Error('not implemented');\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Connection.prototype, \"version\", {\n    /**\r\n     * @returns {ServerVersion} the version of the server this connection is connected to\r\n     */\n    get: function () {\n      throw new Error('not implemented');\n    },\n    set: function (value) {\n      throw new Error('not implemented');\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Connection.prototype, \"server\", {\n    get: function () {\n      throw new Error('not implemented');\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Connect to the target address, negotiate Bolt protocol and send initialization message.\r\n   * @param {string} userAgent the user agent for this driver.\r\n   * @param {Object} authToken the object containing auth information.\r\n   * @return {Promise<Connection>} promise resolved with the current connection if connection is successful. Rejected promise otherwise.\r\n   */\n\n  Connection.prototype.connect = function (userAgent, authToken) {\n    throw new Error('not implemented');\n  };\n  /**\r\n   * Write a message to the network channel.\r\n   * @param {RequestMessage} message the message to write.\r\n   * @param {ResultStreamObserver} observer the response observer.\r\n   * @param {boolean} flush `true` if flush should happen after the message is written to the buffer.\r\n   */\n\n\n  Connection.prototype.write = function (message, observer, flush) {\n    throw new Error('not implemented');\n  };\n  /**\r\n   * Send a RESET-message to the database. Message is immediately flushed to the network.\r\n   * @return {Promise<void>} promise resolved when SUCCESS-message response arrives, or failed when other response messages arrives.\r\n   */\n\n\n  Connection.prototype.resetAndFlush = function () {\n    throw new Error('not implemented');\n  };\n  /**\r\n   * Call close on the channel.\r\n   * @returns {Promise<void>} - A promise that will be resolved when the connection is closed.\r\n   *\r\n   */\n\n\n  Connection.prototype.close = function () {\n    throw new Error('not implemented');\n  };\n  /**\r\n   *\r\n   * @param error\r\n   * @param address\r\n   * @returns {Neo4jError|*}\r\n   */\n\n\n  Connection.prototype.handleAndTransformError = function (error, address) {\n    if (this._errorHandler) {\n      return this._errorHandler.handleAndTransformError(error, address);\n    }\n\n    return error;\n  };\n\n  return Connection;\n}();\n\nexports.default = Connection;","map":{"version":3,"sources":["D:/Documents/EMA/Mines A3/NoSQL/ReseauAchats/reseau_achats/node_modules/neo4j-driver-bolt-connection/lib/connection/connection.js"],"names":["Object","defineProperty","exports","value","Connection","errorHandler","_errorHandler","prototype","get","Error","enumerable","configurable","set","isOpen","protocol","connect","userAgent","authToken","write","message","observer","flush","resetAndFlush","close","handleAndTransformError","error","address","default"],"mappings":"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","sourcesContent":["\"use strict\";\r\n/**\r\n * Copyright (c) \"Neo4j\"\r\n * Neo4j Sweden AB [http://neo4j.com]\r\n *\r\n * This file is part of Neo4j.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar Connection = /** @class */ (function () {\r\n    /**\r\n     * @param {ConnectionErrorHandler} errorHandler the error handler\r\n     */\r\n    function Connection(errorHandler) {\r\n        this._errorHandler = errorHandler;\r\n    }\r\n    Object.defineProperty(Connection.prototype, \"id\", {\r\n        get: function () {\r\n            throw new Error('not implemented');\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Connection.prototype, \"databaseId\", {\r\n        get: function () {\r\n            throw new Error('not implemented');\r\n        },\r\n        set: function (value) {\r\n            throw new Error('not implemented');\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * @returns {boolean} whether this connection is in a working condition\r\n     */\r\n    Connection.prototype.isOpen = function () {\r\n        throw new Error('not implemented');\r\n    };\r\n    /**\r\n     * @returns {BoltProtocol} the underlying bolt protocol assigned to this connection\r\n     */\r\n    Connection.prototype.protocol = function () {\r\n        throw new Error('not implemented');\r\n    };\r\n    Object.defineProperty(Connection.prototype, \"address\", {\r\n        /**\r\n         * @returns {ServerAddress} the server address this connection is opened against\r\n         */\r\n        get: function () {\r\n            throw new Error('not implemented');\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Connection.prototype, \"version\", {\r\n        /**\r\n         * @returns {ServerVersion} the version of the server this connection is connected to\r\n         */\r\n        get: function () {\r\n            throw new Error('not implemented');\r\n        },\r\n        set: function (value) {\r\n            throw new Error('not implemented');\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Connection.prototype, \"server\", {\r\n        get: function () {\r\n            throw new Error('not implemented');\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Connect to the target address, negotiate Bolt protocol and send initialization message.\r\n     * @param {string} userAgent the user agent for this driver.\r\n     * @param {Object} authToken the object containing auth information.\r\n     * @return {Promise<Connection>} promise resolved with the current connection if connection is successful. Rejected promise otherwise.\r\n     */\r\n    Connection.prototype.connect = function (userAgent, authToken) {\r\n        throw new Error('not implemented');\r\n    };\r\n    /**\r\n     * Write a message to the network channel.\r\n     * @param {RequestMessage} message the message to write.\r\n     * @param {ResultStreamObserver} observer the response observer.\r\n     * @param {boolean} flush `true` if flush should happen after the message is written to the buffer.\r\n     */\r\n    Connection.prototype.write = function (message, observer, flush) {\r\n        throw new Error('not implemented');\r\n    };\r\n    /**\r\n     * Send a RESET-message to the database. Message is immediately flushed to the network.\r\n     * @return {Promise<void>} promise resolved when SUCCESS-message response arrives, or failed when other response messages arrives.\r\n     */\r\n    Connection.prototype.resetAndFlush = function () {\r\n        throw new Error('not implemented');\r\n    };\r\n    /**\r\n     * Call close on the channel.\r\n     * @returns {Promise<void>} - A promise that will be resolved when the connection is closed.\r\n     *\r\n     */\r\n    Connection.prototype.close = function () {\r\n        throw new Error('not implemented');\r\n    };\r\n    /**\r\n     *\r\n     * @param error\r\n     * @param address\r\n     * @returns {Neo4jError|*}\r\n     */\r\n    Connection.prototype.handleAndTransformError = function (error, address) {\r\n        if (this._errorHandler) {\r\n            return this._errorHandler.handleAndTransformError(error, address);\r\n        }\r\n        return error;\r\n    };\r\n    return Connection;\r\n}());\r\nexports.default = Connection;\r\n"]},"metadata":{},"sourceType":"script"}