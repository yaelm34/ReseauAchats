{"ast":null,"code":"/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nexport function defaultIfEmpty(defaultValue) {\n  if (defaultValue === void 0) {\n    defaultValue = null;\n  }\n\n  return function (source) {\n    return source.lift(new DefaultIfEmptyOperator(defaultValue));\n  };\n}\n\nvar DefaultIfEmptyOperator = /*@__PURE__*/function () {\n  function DefaultIfEmptyOperator(defaultValue) {\n    this.defaultValue = defaultValue;\n  }\n\n  DefaultIfEmptyOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new DefaultIfEmptySubscriber(subscriber, this.defaultValue));\n  };\n\n  return DefaultIfEmptyOperator;\n}();\n\nvar DefaultIfEmptySubscriber = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(DefaultIfEmptySubscriber, _super);\n\n  function DefaultIfEmptySubscriber(destination, defaultValue) {\n    var _this = _super.call(this, destination) || this;\n\n    _this.defaultValue = defaultValue;\n    _this.isEmpty = true;\n    return _this;\n  }\n\n  DefaultIfEmptySubscriber.prototype._next = function (value) {\n    this.isEmpty = false;\n    this.destination.next(value);\n  };\n\n  DefaultIfEmptySubscriber.prototype._complete = function () {\n    if (this.isEmpty) {\n      this.destination.next(this.defaultValue);\n    }\n\n    this.destination.complete();\n  };\n\n  return DefaultIfEmptySubscriber;\n}(Subscriber);","map":{"version":3,"mappings":";AAEA,OAAO,KAAEA,OAAT,MAAqB,OAArB;AA4CA,SAAMC,UAAN,QAAgB,eAAhB;OAAqC;AACnC,kBAAO,KAAC,KAAqB,CAA7B,EAAkC;AACnCC;AAED;;AAEE;AAAA,WAAoBC,YAAe,wCAAf,CAApB;AAAmC,GAAnC;;;IACAC,sBAAC;AAED;AACE,wBAAcF,YAAd;AACD;;AACHE,mCAACC,IAAD,GAAC;AAAA;AAOD,GAPA;;AAO6C;CAZ1C;;4BAgBC,gBAAM,UAAYC,MAAZ,EACP;SAFmD,qCAAeA;;WAF3DC,yBAAwBC;;;AAI/BC;AAESA;AACR,WAAKA,KAAL;;;AAEFF,0BAAC,UAAD,CAACG,KAAD,GAAC;AAES;AACR,SAAIF,WAAJ,CAAgBG,IAAhB,CAAkBC,KAAlB;GAHF;;0BAKG;AACD,QAAI,KAACC,OAAL,EAAiB;AAClB;AACH;;AAlB6C,SAAUL,WAAV,CAkB5CM,QAlB4C;;;;CAInC","names":["tslib_1","Subscriber","defaultValue","source","DefaultIfEmptyOperator","call","_super","DefaultIfEmptySubscriber","destination","_this","_next","next","value","isEmpty","complete"],"sources":["D:\\Documents\\EMA\\Mines A3\\NoSQL\\ReseauAchats\\reseau_achats\\node_modules\\rxjs\\src\\internal\\operators\\defaultIfEmpty.ts"],"sourcesContent":["import { Operator } from '../Operator';\r\nimport { Observable } from '../Observable';\r\nimport { Subscriber } from '../Subscriber';\r\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../types';\r\n\r\n/* tslint:disable:max-line-length */\r\nexport function defaultIfEmpty<T>(defaultValue?: T): MonoTypeOperatorFunction<T>;\r\nexport function defaultIfEmpty<T, R>(defaultValue?: R): OperatorFunction<T, T | R>;\r\n/* tslint:enable:max-line-length */\r\n\r\n/**\r\n * Emits a given value if the source Observable completes without emitting any\r\n * `next` value, otherwise mirrors the source Observable.\r\n *\r\n * <span class=\"informal\">If the source Observable turns out to be empty, then\r\n * this operator will emit a default value.</span>\r\n *\r\n * ![](defaultIfEmpty.png)\r\n *\r\n * `defaultIfEmpty` emits the values emitted by the source Observable or a\r\n * specified default value if the source Observable is empty (completes without\r\n * having emitted any `next` value).\r\n *\r\n * ## Example\r\n * If no clicks happen in 5 seconds, then emit \"no clicks\"\r\n * ```ts\r\n * import { fromEvent } from 'rxjs';\r\n * import { defaultIfEmpty, takeUntil } from 'rxjs/operators';\r\n *\r\n * const clicks = fromEvent(document, 'click');\r\n * const clicksBeforeFive = clicks.pipe(takeUntil(interval(5000)));\r\n * const result = clicksBeforeFive.pipe(defaultIfEmpty('no clicks'));\r\n * result.subscribe(x => console.log(x));\r\n * ```\r\n *\r\n * @see {@link empty}\r\n * @see {@link last}\r\n *\r\n * @param {any} [defaultValue=null] The default value used if the source\r\n * Observable is empty.\r\n * @return {Observable} An Observable that emits either the specified\r\n * `defaultValue` if the source Observable emits no items, or the values emitted\r\n * by the source Observable.\r\n * @method defaultIfEmpty\r\n * @owner Observable\r\n */\r\nexport function defaultIfEmpty<T, R>(defaultValue: R = null): OperatorFunction<T, T | R> {\r\n  return (source: Observable<T>) => source.lift(new DefaultIfEmptyOperator(defaultValue)) as Observable<T | R>;\r\n}\r\n\r\nclass DefaultIfEmptyOperator<T, R> implements Operator<T, T | R> {\r\n\r\n  constructor(private defaultValue: R) {\r\n  }\r\n\r\n  call(subscriber: Subscriber<T | R>, source: any): any {\r\n    return source.subscribe(new DefaultIfEmptySubscriber(subscriber, this.defaultValue));\r\n  }\r\n}\r\n\r\n/**\r\n * We need this JSDoc comment for affecting ESDoc.\r\n * @ignore\r\n * @extends {Ignored}\r\n */\r\nclass DefaultIfEmptySubscriber<T, R> extends Subscriber<T> {\r\n  private isEmpty: boolean = true;\r\n\r\n  constructor(destination: Subscriber<T | R>, private defaultValue: R) {\r\n    super(destination);\r\n  }\r\n\r\n  protected _next(value: T): void {\r\n    this.isEmpty = false;\r\n    this.destination.next(value);\r\n  }\r\n\r\n  protected _complete(): void {\r\n    if (this.isEmpty) {\r\n      this.destination.next(this.defaultValue);\r\n    }\r\n    this.destination.complete();\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}