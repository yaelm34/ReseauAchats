{"ast":null,"code":"/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nexport function takeWhile(predicate, inclusive) {\n  if (inclusive === void 0) {\n    inclusive = false;\n  }\n\n  return function (source) {\n    return source.lift(new TakeWhileOperator(predicate, inclusive));\n  };\n}\n\nvar TakeWhileOperator = /*@__PURE__*/function () {\n  function TakeWhileOperator(predicate, inclusive) {\n    this.predicate = predicate;\n    this.inclusive = inclusive;\n  }\n\n  TakeWhileOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new TakeWhileSubscriber(subscriber, this.predicate, this.inclusive));\n  };\n\n  return TakeWhileOperator;\n}();\n\nvar TakeWhileSubscriber = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(TakeWhileSubscriber, _super);\n\n  function TakeWhileSubscriber(destination, predicate, inclusive) {\n    var _this = _super.call(this, destination) || this;\n\n    _this.predicate = predicate;\n    _this.inclusive = inclusive;\n    _this.index = 0;\n    return _this;\n  }\n\n  TakeWhileSubscriber.prototype._next = function (value) {\n    var destination = this.destination;\n    var result;\n\n    try {\n      result = this.predicate(value, this.index++);\n    } catch (err) {\n      destination.error(err);\n      return;\n    }\n\n    this.nextOrComplete(value, result);\n  };\n\n  TakeWhileSubscriber.prototype.nextOrComplete = function (value, predicateResult) {\n    var destination = this.destination;\n\n    if (Boolean(predicateResult)) {\n      destination.next(value);\n    } else {\n      if (this.inclusive) {\n        destination.next(value);\n      }\n\n      destination.complete();\n    }\n  };\n\n  return TakeWhileSubscriber;\n}(Subscriber);","map":{"version":3,"mappings":";AAEA,OAAO,KAAEA,OAAT,MAAqB,OAArB;AAmDA,SAAMC,UAAN,QACI,eADJ;OAEI;AACF,eAAO,KAAC,KAAqB,CAA7B,EAA6B;AAClBC;AAAwD;;AACpE;AAED;AACE,GAHD;;;qBAKa,GAAS,aAAS;AAAG,WAACC,iBAAD,CAACC,SAAD,EAACF,SAAD,EAAC;AAElC;AACE,qBAAcA,SAAd;AAED;;AACHC,8BAACE,IAAD,GAAC;AAAA;AAOD,GAPA;;AAOqC;CAbL;;uBAoB5B,gBAAM,UAAYC,MAAZ,EACP;SAHW,gCAA+CA;;WAC/CC,iCAAkBH;AALtB,gBAAKE,MAAa,KAAb,CAAa,IAAb,EAAaE,WAAb,KAAa,IAAlB;;;AAOPC;AAESA;AACR,WAAMA,KAAN;;;qBAEI;QACFD,WAAS,GAAK;QACfE;;AAAC;AACAA,oBAAYN,SAAZ,CAAuBO,KAAvB,EAAuB,YAAvB;KADA,QAGDC;AACGJ,iBAAC,MAAD,CAAgBI,GAAhB;AACL;AAEO;;AACN,SAAMC,cAAN,CAAoBF,KAApB,EAAyBD,MAAzB;;;qBAEa,CAACI,UAAUD,iBAAE;QACzBL;;eAAM;AACLA,iBAAS,KAAT,CAASG,KAAT;WAEC;AACD,0BAAoB;AACrBH;AACF;;AACHA;AAjCqC;;;;CAO3B","names":["tslib_1","Subscriber","inclusive","TakeWhileOperator","predicate","call","_super","TakeWhileSubscriber","destination","_this","result","value","err","nextOrComplete","prototype"],"sources":["D:\\Documents\\EMA\\Mines A3\\NoSQL\\ReseauAchats\\reseau_achats\\node_modules\\rxjs\\src\\internal\\operators\\takeWhile.ts"],"sourcesContent":["import { Operator } from '../Operator';\r\nimport { Observable } from '../Observable';\r\nimport { Subscriber } from '../Subscriber';\r\nimport { OperatorFunction, MonoTypeOperatorFunction, TeardownLogic } from '../types';\r\n\r\nexport function takeWhile<T, S extends T>(predicate: (value: T, index: number) => value is S): OperatorFunction<T, S>;\r\nexport function takeWhile<T, S extends T>(predicate: (value: T, index: number) => value is S, inclusive: false): OperatorFunction<T, S>;\r\nexport function takeWhile<T>(predicate: (value: T, index: number) => boolean, inclusive?: boolean): MonoTypeOperatorFunction<T>;\r\n\r\n/**\r\n * Emits values emitted by the source Observable so long as each value satisfies\r\n * the given `predicate`, and then completes as soon as this `predicate` is not\r\n * satisfied.\r\n *\r\n * <span class=\"informal\">Takes values from the source only while they pass the\r\n * condition given. When the first value does not satisfy, it completes.</span>\r\n *\r\n * ![](takeWhile.png)\r\n *\r\n * `takeWhile` subscribes and begins mirroring the source Observable. Each value\r\n * emitted on the source is given to the `predicate` function which returns a\r\n * boolean, representing a condition to be satisfied by the source values. The\r\n * output Observable emits the source values until such time as the `predicate`\r\n * returns false, at which point `takeWhile` stops mirroring the source\r\n * Observable and completes the output Observable.\r\n *\r\n * ## Example\r\n * Emit click events only while the clientX property is greater than 200\r\n * ```ts\r\n * import { fromEvent } from 'rxjs';\r\n * import { takeWhile } from 'rxjs/operators';\r\n *\r\n * const clicks = fromEvent(document, 'click');\r\n * const result = clicks.pipe(takeWhile(ev => ev.clientX > 200));\r\n * result.subscribe(x => console.log(x));\r\n * ```\r\n *\r\n * @see {@link take}\r\n * @see {@link takeLast}\r\n * @see {@link takeUntil}\r\n * @see {@link skip}\r\n *\r\n * @param {function(value: T, index: number): boolean} predicate A function that\r\n * evaluates a value emitted by the source Observable and returns a boolean.\r\n * Also takes the (zero-based) index as the second argument.\r\n * @param {boolean} inclusive When set to `true` the value that caused\r\n * `predicate` to return `false` will also be emitted.\r\n * @return {Observable<T>} An Observable that emits the values from the source\r\n * Observable so long as each value satisfies the condition defined by the\r\n * `predicate`, then completes.\r\n * @method takeWhile\r\n * @owner Observable\r\n */\r\nexport function takeWhile<T>(\r\n    predicate: (value: T, index: number) => boolean,\r\n    inclusive = false): MonoTypeOperatorFunction<T> {\r\n  return (source: Observable<T>) =>\r\n             source.lift(new TakeWhileOperator(predicate, inclusive));\r\n}\r\n\r\nclass TakeWhileOperator<T> implements Operator<T, T> {\r\n  constructor(\r\n      private predicate: (value: T, index: number) => boolean,\r\n      private inclusive: boolean) {}\r\n\r\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\r\n    return source.subscribe(\r\n        new TakeWhileSubscriber(subscriber, this.predicate, this.inclusive));\r\n  }\r\n}\r\n\r\n/**\r\n * We need this JSDoc comment for affecting ESDoc.\r\n * @ignore\r\n * @extends {Ignored}\r\n */\r\nclass TakeWhileSubscriber<T> extends Subscriber<T> {\r\n  private index: number = 0;\r\n\r\n  constructor(\r\n      destination: Subscriber<T>,\r\n      private predicate: (value: T, index: number) => boolean,\r\n      private inclusive: boolean) {\r\n    super(destination);\r\n  }\r\n\r\n  protected _next(value: T): void {\r\n    const destination = this.destination;\r\n    let result: boolean;\r\n    try {\r\n      result = this.predicate(value, this.index++);\r\n    } catch (err) {\r\n      destination.error(err);\r\n      return;\r\n    }\r\n    this.nextOrComplete(value, result);\r\n  }\r\n\r\n  private nextOrComplete(value: T, predicateResult: boolean): void {\r\n    const destination = this.destination;\r\n    if (Boolean(predicateResult)) {\r\n      destination.next(value);\r\n    } else {\r\n      if (this.inclusive) {\r\n        destination.next(value);\r\n      }\r\n      destination.complete();\r\n    }\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}