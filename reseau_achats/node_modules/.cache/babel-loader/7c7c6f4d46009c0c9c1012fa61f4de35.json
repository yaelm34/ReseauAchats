{"ast":null,"code":"/** PURE_IMPORTS_START _scheduleObservable,_schedulePromise,_scheduleArray,_scheduleIterable,_util_isInteropObservable,_util_isPromise,_util_isArrayLike,_util_isIterable PURE_IMPORTS_END */\nimport { scheduleObservable } from './scheduleObservable';\nimport { schedulePromise } from './schedulePromise';\nimport { scheduleArray } from './scheduleArray';\nimport { scheduleIterable } from './scheduleIterable';\nimport { isInteropObservable } from '../util/isInteropObservable';\nimport { isPromise } from '../util/isPromise';\nimport { isArrayLike } from '../util/isArrayLike';\nimport { isIterable } from '../util/isIterable';\nexport function scheduled(input, scheduler) {\n  if (input != null) {\n    if (isInteropObservable(input)) {\n      return scheduleObservable(input, scheduler);\n    } else if (isPromise(input)) {\n      return schedulePromise(input, scheduler);\n    } else if (isArrayLike(input)) {\n      return scheduleArray(input, scheduler);\n    } else if (isIterable(input) || typeof input === 'string') {\n      return scheduleIterable(input, scheduler);\n    }\n  }\n\n  throw new TypeError((input !== null && typeof input || input) + ' is not observable');\n}","map":{"version":3,"mappings":"AAAA;AACA,SAASA,kBAAT,QAAgC,sBAAhC;AACA,SAASC,eAAT,QAA8B,mBAA9B;AACA,SAASC,aAAT,QAA2B,iBAA3B;AAEA,SAASC,gBAAT,QAA8B,oBAA9B;AACA,SAASC,mBAAT,QAA0B,6BAA1B;AACA,SAASC,SAAT,QAAsB,mBAAtB;AACA,SAASC,WAAT,QAA2B,qBAA3B;AAaA,SAAMC,UAAN,QAA6B,oBAA7B;OACE,SAASC,SAAT,CAAmBC,KAAnB,EAAmBC,SAAnB,EAAmB;MACjBD,KAAI;QACFL,mBAAO,SAAmB;AAC3B;WACC,aAAO,OAAP,EAAuB;AACxB;KADC,MAEA,eAAO,OAAP,EAAqB;AACtB;KADC,MAEA,cAAO,OAAP,IAAwB,OAAOK,KAAP,KAAkB,QAA1C,EAA0C;AAC3C;AACF;AAED;;AACD","names":["scheduleObservable","schedulePromise","scheduleArray","scheduleIterable","isInteropObservable","isPromise","isArrayLike","isIterable","scheduled","input","scheduler"],"sources":["D:\\Documents\\EMA\\Mines A3\\NoSQL\\ReseauAchats\\reseau_achats\\node_modules\\rxjs\\src\\internal\\scheduled\\scheduled.ts"],"sourcesContent":["import { scheduleObservable } from './scheduleObservable';\r\nimport { schedulePromise } from './schedulePromise';\r\nimport { scheduleArray } from './scheduleArray';\r\nimport { scheduleIterable } from './scheduleIterable';\r\nimport { ObservableInput, SchedulerLike, Observable } from 'rxjs';\r\nimport { isInteropObservable } from '../util/isInteropObservable';\r\nimport { isPromise } from '../util/isPromise';\r\nimport { isArrayLike } from '../util/isArrayLike';\r\nimport { isIterable } from '../util/isIterable';\r\n\r\n/**\r\n * Converts from a common {@link ObservableInput} type to an observable where subscription and emissions\r\n * are scheduled on the provided scheduler.\r\n *\r\n * @see from\r\n * @see of\r\n *\r\n * @param input The observable, array, promise, iterable, etc you would like to schedule\r\n * @param scheduler The scheduler to use to schedule the subscription and emissions from\r\n * the returned observable.\r\n */\r\nexport function scheduled<T>(input: ObservableInput<T>, scheduler: SchedulerLike): Observable<T> {\r\n  if (input != null) {\r\n    if (isInteropObservable(input)) {\r\n      return scheduleObservable(input, scheduler);\r\n    } else if (isPromise(input)) {\r\n      return schedulePromise(input, scheduler);\r\n    } else if (isArrayLike(input)) {\r\n      return scheduleArray(input, scheduler);\r\n    }  else if (isIterable(input) || typeof input === 'string') {\r\n      return scheduleIterable(input, scheduler);\r\n    }\r\n  }\r\n\r\n  throw new TypeError((input !== null && typeof input || input) + ' is not observable');\r\n}\r\n"]},"metadata":{},"sourceType":"module"}