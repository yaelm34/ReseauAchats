{"ast":null,"code":"/** PURE_IMPORTS_START tslib,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nexport function withLatestFrom() {\n  var args = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    args[_i] = arguments[_i];\n  }\n\n  return function (source) {\n    var project;\n\n    if (typeof args[args.length - 1] === 'function') {\n      project = args.pop();\n    }\n\n    var observables = args;\n    return source.lift(new WithLatestFromOperator(observables, project));\n  };\n}\n\nvar WithLatestFromOperator = /*@__PURE__*/function () {\n  function WithLatestFromOperator(observables, project) {\n    this.observables = observables;\n    this.project = project;\n  }\n\n  WithLatestFromOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new WithLatestFromSubscriber(subscriber, this.observables, this.project));\n  };\n\n  return WithLatestFromOperator;\n}();\n\nvar WithLatestFromSubscriber = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(WithLatestFromSubscriber, _super);\n\n  function WithLatestFromSubscriber(destination, observables, project) {\n    var _this = _super.call(this, destination) || this;\n\n    _this.observables = observables;\n    _this.project = project;\n    _this.toRespond = [];\n    var len = observables.length;\n    _this.values = new Array(len);\n\n    for (var i = 0; i < len; i++) {\n      _this.toRespond.push(i);\n    }\n\n    for (var i = 0; i < len; i++) {\n      var observable = observables[i];\n\n      _this.add(subscribeToResult(_this, observable, undefined, i));\n    }\n\n    return _this;\n  }\n\n  WithLatestFromSubscriber.prototype.notifyNext = function (_outerValue, innerValue, outerIndex) {\n    this.values[outerIndex] = innerValue;\n    var toRespond = this.toRespond;\n\n    if (toRespond.length > 0) {\n      var found = toRespond.indexOf(outerIndex);\n\n      if (found !== -1) {\n        toRespond.splice(found, 1);\n      }\n    }\n  };\n\n  WithLatestFromSubscriber.prototype.notifyComplete = function () {};\n\n  WithLatestFromSubscriber.prototype._next = function (value) {\n    if (this.toRespond.length === 0) {\n      var args = [value].concat(this.values);\n\n      if (this.project) {\n        this._tryProject(args);\n      } else {\n        this.destination.next(args);\n      }\n    }\n  };\n\n  WithLatestFromSubscriber.prototype._tryProject = function (args) {\n    var result;\n\n    try {\n      result = this.project.apply(this, args);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n\n    this.destination.next(result);\n  };\n\n  return WithLatestFromSubscriber;\n}(OuterSubscriber);","map":{"version":3,"mappings":";AAGA,OAAO,KAAEA,OAAT,MAAwB,OAAxB;AAEA,SAASC,eAAT,QAA4B,oBAA5B;AAiEA,SAAMC,iBAAN,QAA8B,2BAA9B;OAAqC,0BAAqE;UAArE;;OAAA,0BAAqE;;AACxG;;SACE,UAAiBC,MAAjB,EAAiB;AACjB,QAAIC,OAAJ;;QACE,OAAOC,IAAG,KAAK,OAAL,GAAW,CAAX,CAAV,KAAqB;AACtBD;AACD;;AACA,mBAAc,GAAIC,IAAlB;AACA;AACH;AAED;;IACEC,sCAAoB,YAC6C;WAD7CA,oCAA8BF;AAC9B;AACnB;AAED;;wBACgB,WAAcG,6BAAyBJ,MAAzB,EAAqC;AAClE;AACH;;AARA,SAQCG,sBARD;AAeA,CAdsB;;IAcuBE,kDAAqBC,MAArB,EAAqB;AAIhET,8CAAYS,MAAZ;;WAAAD,yBAGQE,aAAYC,aAYnBP;AAdmB,sBAAW,KAAX,uBAA8B,IAA9B;;AACAQ;AAJZA,oBAASR,OAAT;AAMNQ,SAAM,UAAN,GAAY,EAAZ;AACA,WAAK,cAAa,OAAlB;AAEAA,SAAK,OAAL,GAAc,IAAGC,KAAH,CAAWC,GAAX,CAAd;;SACE,IAAIC,CAAC,UAAUD,KAAKC,CAAC,IAAE;AACxBH;AAED;;SACE,IAAIG,WAAUD,KAAGC;AACjB,oBAAS,cAAwB,GAAjC;;AACDH;;;AACF;AAED;;0BAEc,WAAcI,aAAW;AACrC,SAAMC,MAAN,CAAMC,UAAN,IAAuBC,UAAvB;AACA,QAAIC,SAAS,GAAC,KAAMA,SAApB;;QACEA,SAAW,OAAX,GAAc,GAAU;AACxB,UAAIC,KAAK,YAAS,QAAT,CAASH,UAAT,CAAT;;UACEG,UAAU;AACXD;AACF;AACF;AAED;;AAEAZ,0BAAC,UAAD,CAACc,cAAD,GAAC,aAES,CAFV;;0BAGqB,WAAYC,QAAE;QAC/B,KAAMH,SAAN,CAAcI,MAAd,KAAwB;AACxB,UAAInB,IAAI,GAAC,QAASoB,MAAT,CAAS,WAAT,CAAT;;UACE,KAAKrB;AACN;aACC;AACD;AACF;AACF;AAEO;;0BACU;AAChB,QAAIsB,MAAJ;;QACE;AACDA;AAAC,aACAC,KAAK;AACL,uBAAOC,KAAP,CAAOD,GAAP;AACD;AACD;;AACD;AACH;;AA1D6C;CAAA","names":["tslib_1","OuterSubscriber","subscribeToResult","source","project","args","WithLatestFromOperator","call","WithLatestFromSubscriber","_super","destination","observables","_this","Array","len","i","notifyNext","values","outerIndex","innerValue","toRespond","found","notifyComplete","_next","length","concat","result","err","error"],"sources":["D:\\Documents\\EMA\\Mines A3\\NoSQL\\ReseauAchats\\reseau_achats\\node_modules\\rxjs\\src\\internal\\operators\\withLatestFrom.ts"],"sourcesContent":["import { Operator } from '../Operator';\r\nimport { Subscriber } from '../Subscriber';\r\nimport { Observable } from '../Observable';\r\nimport { OuterSubscriber } from '../OuterSubscriber';\r\nimport { InnerSubscriber } from '../InnerSubscriber';\r\nimport { subscribeToResult } from '../util/subscribeToResult';\r\nimport { ObservableInput, OperatorFunction, ObservedValueOf } from '../types';\r\n\r\n/* tslint:disable:max-line-length */\r\nexport function withLatestFrom<T, R>(project: (v1: T) => R): OperatorFunction<T, R>;\r\nexport function withLatestFrom<T, O2 extends ObservableInput<any>, R>(source2: O2, project: (v1: T, v2: ObservedValueOf<O2>) => R): OperatorFunction<T, R>;\r\nexport function withLatestFrom<T, O2 extends ObservableInput<any>, O3 extends ObservableInput<any>, R>(v2: O2, v3: O3, project: (v1: T, v2: ObservedValueOf<O2>, v3: ObservedValueOf<O3>) => R): OperatorFunction<T, R>;\r\nexport function withLatestFrom<T, O2 extends ObservableInput<any>, O3 extends ObservableInput<any>, O4 extends ObservableInput<any>, R>(v2: O2, v3: O3, v4: O4, project: (v1: T, v2: ObservedValueOf<O2>, v3: ObservedValueOf<O3>, v4: ObservedValueOf<O4>) => R): OperatorFunction<T, R>;\r\nexport function withLatestFrom<T, O2 extends ObservableInput<any>, O3 extends ObservableInput<any>, O4 extends ObservableInput<any>, O5 extends ObservableInput<any>, R>(v2: O2, v3: O3, v4: O4, v5: O5, project: (v1: T, v2: ObservedValueOf<O2>, v3: ObservedValueOf<O3>, v4: ObservedValueOf<O4>, v5: ObservedValueOf<O5>) => R): OperatorFunction<T, R>;\r\nexport function withLatestFrom<T, O2 extends ObservableInput<any>, O3 extends ObservableInput<any>, O4 extends ObservableInput<any>, O5 extends ObservableInput<any>, O6 extends ObservableInput<any>, R>(v2: O2, v3: O3, v4: O4, v5: O5, v6: O6, project: (v1: T, v2: ObservedValueOf<O2>, v3: ObservedValueOf<O3>, v4: ObservedValueOf<O4>, v5: ObservedValueOf<O5>, v6: ObservedValueOf<O6>) => R): OperatorFunction<T, R>;\r\nexport function withLatestFrom<T, O2 extends ObservableInput<any>>(source2: O2): OperatorFunction<T, [T, ObservedValueOf<O2>]>;\r\nexport function withLatestFrom<T, O2 extends ObservableInput<any>, O3 extends ObservableInput<any>>(v2: O2, v3: O3): OperatorFunction<T, [T, ObservedValueOf<O2>, ObservedValueOf<O3>]>;\r\nexport function withLatestFrom<T, O2 extends ObservableInput<any>, O3 extends ObservableInput<any>, O4 extends ObservableInput<any>>(v2: O2, v3: O3, v4: O4): OperatorFunction<T, [T, ObservedValueOf<O2>, ObservedValueOf<O3>, ObservedValueOf<O4>]>;\r\nexport function withLatestFrom<T, O2 extends ObservableInput<any>, O3 extends ObservableInput<any>, O4 extends ObservableInput<any>, O5 extends ObservableInput<any>>(v2: O2, v3: O3, v4: O4, v5: O5): OperatorFunction<T, [T, ObservedValueOf<O2>, ObservedValueOf<O3>, ObservedValueOf<O4>, ObservedValueOf<O5>]>;\r\nexport function withLatestFrom<T, O2 extends ObservableInput<any>, O3 extends ObservableInput<any>, O4 extends ObservableInput<any>, O5 extends ObservableInput<any>, O6 extends ObservableInput<any>>(v2: O2, v3: O3, v4: O4, v5: O5, v6: O6): OperatorFunction<T, [T, ObservedValueOf<O2>, ObservedValueOf<O3>, ObservedValueOf<O4>, ObservedValueOf<O5>, ObservedValueOf<O6>]>;\r\nexport function withLatestFrom<T, R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): OperatorFunction<T, R>;\r\nexport function withLatestFrom<T, R>(array: ObservableInput<any>[]): OperatorFunction<T, R>;\r\nexport function withLatestFrom<T, R>(array: ObservableInput<any>[], project: (...values: Array<any>) => R): OperatorFunction<T, R>;\r\n\r\n/* tslint:enable:max-line-length */\r\n\r\n/**\r\n * Combines the source Observable with other Observables to create an Observable\r\n * whose values are calculated from the latest values of each, only when the\r\n * source emits.\r\n *\r\n * <span class=\"informal\">Whenever the source Observable emits a value, it\r\n * computes a formula using that value plus the latest values from other input\r\n * Observables, then emits the output of that formula.</span>\r\n *\r\n * ![](withLatestFrom.png)\r\n *\r\n * `withLatestFrom` combines each value from the source Observable (the\r\n * instance) with the latest values from the other input Observables only when\r\n * the source emits a value, optionally using a `project` function to determine\r\n * the value to be emitted on the output Observable. All input Observables must\r\n * emit at least one value before the output Observable will emit a value.\r\n *\r\n * ## Example\r\n * On every click event, emit an array with the latest timer event plus the click event\r\n * ```ts\r\n * import { fromEvent, interval } from 'rxjs';\r\n * import { withLatestFrom } from 'rxjs/operators';\r\n *\r\n * const clicks = fromEvent(document, 'click');\r\n * const timer = interval(1000);\r\n * const result = clicks.pipe(withLatestFrom(timer));\r\n * result.subscribe(x => console.log(x));\r\n * ```\r\n *\r\n * @see {@link combineLatest}\r\n *\r\n * @param {ObservableInput} other An input Observable to combine with the source\r\n * Observable. More than one input Observables may be given as argument.\r\n * @param {Function} [project] Projection function for combining values\r\n * together. Receives all values in order of the Observables passed, where the\r\n * first parameter is a value from the source Observable. (e.g.\r\n * `a.pipe(withLatestFrom(b, c), map(([a1, b1, c1]) => a1 + b1 + c1))`). If this is not\r\n * passed, arrays will be emitted on the output Observable.\r\n * @return {Observable} An Observable of projected values from the most recent\r\n * values from each input Observable, or an array of the most recent values from\r\n * each input Observable.\r\n * @method withLatestFrom\r\n * @owner Observable\r\n */\r\nexport function withLatestFrom<T, R>(...args: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): OperatorFunction<T, R> {\r\n  return (source: Observable<T>) => {\r\n    let project: any;\r\n    if (typeof args[args.length - 1] === 'function') {\r\n      project = args.pop();\r\n    }\r\n    const observables = <Observable<any>[]>args;\r\n    return source.lift(new WithLatestFromOperator(observables, project));\r\n  };\r\n}\r\n\r\nclass WithLatestFromOperator<T, R> implements Operator<T, R> {\r\n  constructor(private observables: Observable<any>[],\r\n              private project?: (...values: any[]) => Observable<R>) {\r\n  }\r\n\r\n  call(subscriber: Subscriber<R>, source: any): any {\r\n    return source.subscribe(new WithLatestFromSubscriber(subscriber, this.observables, this.project));\r\n  }\r\n}\r\n\r\n/**\r\n * We need this JSDoc comment for affecting ESDoc.\r\n * @ignore\r\n * @extends {Ignored}\r\n */\r\nclass WithLatestFromSubscriber<T, R> extends OuterSubscriber<T, R> {\r\n  private values: any[];\r\n  private toRespond: number[] = [];\r\n\r\n  constructor(destination: Subscriber<R>,\r\n              private observables: Observable<any>[],\r\n              private project?: (...values: any[]) => Observable<R>) {\r\n    super(destination);\r\n    const len = observables.length;\r\n    this.values = new Array(len);\r\n\r\n    for (let i = 0; i < len; i++) {\r\n      this.toRespond.push(i);\r\n    }\r\n\r\n    for (let i = 0; i < len; i++) {\r\n      let observable = observables[i];\r\n      this.add(subscribeToResult<T, R>(this, observable, undefined, i));\r\n    }\r\n  }\r\n\r\n  notifyNext(_outerValue: T, innerValue: R,\r\n             outerIndex: number): void {\r\n    this.values[outerIndex] = innerValue;\r\n    const toRespond = this.toRespond;\r\n    if (toRespond.length > 0) {\r\n      const found = toRespond.indexOf(outerIndex);\r\n      if (found !== -1) {\r\n        toRespond.splice(found, 1);\r\n      }\r\n    }\r\n  }\r\n\r\n  notifyComplete() {\r\n    // noop\r\n  }\r\n\r\n  protected _next(value: T) {\r\n    if (this.toRespond.length === 0) {\r\n      const args = [value, ...this.values];\r\n      if (this.project) {\r\n        this._tryProject(args);\r\n      } else {\r\n        this.destination.next!(args);\r\n      }\r\n    }\r\n  }\r\n\r\n  private _tryProject(args: any[]) {\r\n    let result: any;\r\n    try {\r\n      result = this.project!.apply(this, args);\r\n    } catch (err) {\r\n      this.destination.error!(err);\r\n      return;\r\n    }\r\n    this.destination.next!(result);\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}