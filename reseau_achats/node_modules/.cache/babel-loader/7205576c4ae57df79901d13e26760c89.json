{"ast":null,"code":"\"use strict\";\n/**\r\n * Copyright (c) \"Neo4j\"\r\n * Neo4j Sweden AB [http://neo4j.com]\r\n *\r\n * This file is part of Neo4j.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ConnectivityVerifier = void 0;\n\nvar connection_holder_1 = require(\"./connection-holder\");\n\nvar constants_1 = require(\"./constants\");\n\nvar error_1 = require(\"../error\");\n/**\r\n * Verifies connectivity using the given connection provider.\r\n */\n\n\nvar ConnectivityVerifier =\n/** @class */\nfunction () {\n  /**\r\n   * @constructor\r\n   * @param {ConnectionProvider} connectionProvider the provider to obtain connections from.\r\n   */\n  function ConnectivityVerifier(connectionProvider) {\n    this._connectionProvider = connectionProvider;\n  }\n  /**\r\n   * Try to obtain a working connection from the connection provider.\r\n   * @returns {Promise<object>} promise resolved with server info or rejected with error.\r\n   */\n\n\n  ConnectivityVerifier.prototype.verify = function (_a) {\n    var _b = _a === void 0 ? {} : _a,\n        _c = _b.database,\n        database = _c === void 0 ? '' : _c;\n\n    return acquireAndReleaseDummyConnection(this._connectionProvider, database);\n  };\n\n  return ConnectivityVerifier;\n}();\n\nexports.ConnectivityVerifier = ConnectivityVerifier;\n/**\r\n * @private\r\n * @param {ConnectionProvider} connectionProvider the provider to obtain connections from.\r\n * @param {string|undefined} database The database name\r\n * @return {Promise<object>} promise resolved with server info or rejected with error.\r\n */\n\nfunction acquireAndReleaseDummyConnection(connectionProvider, database) {\n  var connectionHolder = new connection_holder_1.ConnectionHolder({\n    mode: constants_1.ACCESS_MODE_READ,\n    database: database,\n    connectionProvider: connectionProvider\n  });\n  connectionHolder.initializeConnection();\n  return connectionHolder.getConnection().then(function (connection) {\n    // able to establish a connection\n    if (!connection) {\n      throw (0, error_1.newError)('Unexpected error acquiring transaction');\n    }\n\n    return connectionHolder.close().then(function () {\n      return connection.server;\n    });\n  }).catch(function (error) {\n    // failed to establish a connection\n    return connectionHolder.close().catch(function (ignoredError) {// ignore connection release error\n    }).then(function () {\n      return Promise.reject(error);\n    });\n  });\n}","map":{"version":3,"sources":["D:/Documents/EMA/Mines A3/NoSQL/ReseauAchats/reseau_achats/node_modules/neo4j-driver-core/lib/internal/connectivity-verifier.js"],"names":["Object","defineProperty","exports","value","ConnectivityVerifier","connection_holder_1","require","constants_1","error_1","connectionProvider","_connectionProvider","prototype","verify","_a","_b","_c","database","acquireAndReleaseDummyConnection","connectionHolder","ConnectionHolder","mode","ACCESS_MODE_READ","initializeConnection","getConnection","then","connection","newError","close","server","catch","error","ignoredError","Promise","reject"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,oBAAR,GAA+B,KAAK,CAApC;;AACA,IAAIC,mBAAmB,GAAGC,OAAO,CAAC,qBAAD,CAAjC;;AACA,IAAIC,WAAW,GAAGD,OAAO,CAAC,aAAD,CAAzB;;AACA,IAAIE,OAAO,GAAGF,OAAO,CAAC,UAAD,CAArB;AACA;AACA;AACA;;;AACA,IAAIF,oBAAoB;AAAG;AAAe,YAAY;AAClD;AACJ;AACA;AACA;AACI,WAASA,oBAAT,CAA8BK,kBAA9B,EAAkD;AAC9C,SAAKC,mBAAL,GAA2BD,kBAA3B;AACH;AACD;AACJ;AACA;AACA;;;AACIL,EAAAA,oBAAoB,CAACO,SAArB,CAA+BC,MAA/B,GAAwC,UAAUC,EAAV,EAAc;AAClD,QAAIC,EAAE,GAAGD,EAAE,KAAK,KAAK,CAAZ,GAAgB,EAAhB,GAAqBA,EAA9B;AAAA,QAAkCE,EAAE,GAAGD,EAAE,CAACE,QAA1C;AAAA,QAAoDA,QAAQ,GAAGD,EAAE,KAAK,KAAK,CAAZ,GAAgB,EAAhB,GAAqBA,EAApF;;AACA,WAAOE,gCAAgC,CAAC,KAAKP,mBAAN,EAA2BM,QAA3B,CAAvC;AACH,GAHD;;AAIA,SAAOZ,oBAAP;AACH,CAjByC,EAA1C;;AAkBAF,OAAO,CAACE,oBAAR,GAA+BA,oBAA/B;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASa,gCAAT,CAA0CR,kBAA1C,EAA8DO,QAA9D,EAAwE;AACpE,MAAIE,gBAAgB,GAAG,IAAIb,mBAAmB,CAACc,gBAAxB,CAAyC;AAC5DC,IAAAA,IAAI,EAAEb,WAAW,CAACc,gBAD0C;AAE5DL,IAAAA,QAAQ,EAAEA,QAFkD;AAG5DP,IAAAA,kBAAkB,EAAEA;AAHwC,GAAzC,CAAvB;AAKAS,EAAAA,gBAAgB,CAACI,oBAAjB;AACA,SAAOJ,gBAAgB,CAClBK,aADE,GAEFC,IAFE,CAEG,UAAUC,UAAV,EAAsB;AAC5B;AACA,QAAI,CAACA,UAAL,EAAiB;AACb,YAAM,CAAC,GAAGjB,OAAO,CAACkB,QAAZ,EAAsB,wCAAtB,CAAN;AACH;;AACD,WAAOR,gBAAgB,CAACS,KAAjB,GAAyBH,IAAzB,CAA8B,YAAY;AAAE,aAAOC,UAAU,CAACG,MAAlB;AAA2B,KAAvE,CAAP;AACH,GARM,EASFC,KATE,CASI,UAAUC,KAAV,EAAiB;AACxB;AACA,WAAOZ,gBAAgB,CAClBS,KADE,GAEFE,KAFE,CAEI,UAAUE,YAAV,EAAwB,CAC/B;AACH,KAJM,EAKFP,IALE,CAKG,YAAY;AAClB,aAAOQ,OAAO,CAACC,MAAR,CAAeH,KAAf,CAAP;AACH,KAPM,CAAP;AAQH,GAnBM,CAAP;AAoBH","sourcesContent":["\"use strict\";\r\n/**\r\n * Copyright (c) \"Neo4j\"\r\n * Neo4j Sweden AB [http://neo4j.com]\r\n *\r\n * This file is part of Neo4j.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.ConnectivityVerifier = void 0;\r\nvar connection_holder_1 = require(\"./connection-holder\");\r\nvar constants_1 = require(\"./constants\");\r\nvar error_1 = require(\"../error\");\r\n/**\r\n * Verifies connectivity using the given connection provider.\r\n */\r\nvar ConnectivityVerifier = /** @class */ (function () {\r\n    /**\r\n     * @constructor\r\n     * @param {ConnectionProvider} connectionProvider the provider to obtain connections from.\r\n     */\r\n    function ConnectivityVerifier(connectionProvider) {\r\n        this._connectionProvider = connectionProvider;\r\n    }\r\n    /**\r\n     * Try to obtain a working connection from the connection provider.\r\n     * @returns {Promise<object>} promise resolved with server info or rejected with error.\r\n     */\r\n    ConnectivityVerifier.prototype.verify = function (_a) {\r\n        var _b = _a === void 0 ? {} : _a, _c = _b.database, database = _c === void 0 ? '' : _c;\r\n        return acquireAndReleaseDummyConnection(this._connectionProvider, database);\r\n    };\r\n    return ConnectivityVerifier;\r\n}());\r\nexports.ConnectivityVerifier = ConnectivityVerifier;\r\n/**\r\n * @private\r\n * @param {ConnectionProvider} connectionProvider the provider to obtain connections from.\r\n * @param {string|undefined} database The database name\r\n * @return {Promise<object>} promise resolved with server info or rejected with error.\r\n */\r\nfunction acquireAndReleaseDummyConnection(connectionProvider, database) {\r\n    var connectionHolder = new connection_holder_1.ConnectionHolder({\r\n        mode: constants_1.ACCESS_MODE_READ,\r\n        database: database,\r\n        connectionProvider: connectionProvider\r\n    });\r\n    connectionHolder.initializeConnection();\r\n    return connectionHolder\r\n        .getConnection()\r\n        .then(function (connection) {\r\n        // able to establish a connection\r\n        if (!connection) {\r\n            throw (0, error_1.newError)('Unexpected error acquiring transaction');\r\n        }\r\n        return connectionHolder.close().then(function () { return connection.server; });\r\n    })\r\n        .catch(function (error) {\r\n        // failed to establish a connection\r\n        return connectionHolder\r\n            .close()\r\n            .catch(function (ignoredError) {\r\n            // ignore connection release error\r\n        })\r\n            .then(function () {\r\n            return Promise.reject(error);\r\n        });\r\n    });\r\n}\r\n"]},"metadata":{},"sourceType":"script"}