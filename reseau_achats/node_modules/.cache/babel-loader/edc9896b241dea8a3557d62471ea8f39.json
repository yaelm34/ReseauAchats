{"ast":null,"code":"/** PURE_IMPORTS_START tslib,_Subject,_innerSubscribe PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subject } from '../Subject';\nimport { SimpleOuterSubscriber, innerSubscribe, SimpleInnerSubscriber } from '../innerSubscribe';\nexport function repeatWhen(notifier) {\n  return function (source) {\n    return source.lift(new RepeatWhenOperator(notifier));\n  };\n}\n\nvar RepeatWhenOperator = /*@__PURE__*/function () {\n  function RepeatWhenOperator(notifier) {\n    this.notifier = notifier;\n  }\n\n  RepeatWhenOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new RepeatWhenSubscriber(subscriber, this.notifier, source));\n  };\n\n  return RepeatWhenOperator;\n}();\n\nvar RepeatWhenSubscriber = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(RepeatWhenSubscriber, _super);\n\n  function RepeatWhenSubscriber(destination, notifier, source) {\n    var _this = _super.call(this, destination) || this;\n\n    _this.notifier = notifier;\n    _this.source = source;\n    _this.sourceIsBeingSubscribedTo = true;\n    return _this;\n  }\n\n  RepeatWhenSubscriber.prototype.notifyNext = function () {\n    this.sourceIsBeingSubscribedTo = true;\n    this.source.subscribe(this);\n  };\n\n  RepeatWhenSubscriber.prototype.notifyComplete = function () {\n    if (this.sourceIsBeingSubscribedTo === false) {\n      return _super.prototype.complete.call(this);\n    }\n  };\n\n  RepeatWhenSubscriber.prototype.complete = function () {\n    this.sourceIsBeingSubscribedTo = false;\n\n    if (!this.isStopped) {\n      if (!this.retries) {\n        this.subscribeToRetries();\n      }\n\n      if (!this.retriesSubscription || this.retriesSubscription.closed) {\n        return _super.prototype.complete.call(this);\n      }\n\n      this._unsubscribeAndRecycle();\n\n      this.notifications.next(undefined);\n    }\n  };\n\n  RepeatWhenSubscriber.prototype._unsubscribe = function () {\n    var _a = this,\n        notifications = _a.notifications,\n        retriesSubscription = _a.retriesSubscription;\n\n    if (notifications) {\n      notifications.unsubscribe();\n      this.notifications = undefined;\n    }\n\n    if (retriesSubscription) {\n      retriesSubscription.unsubscribe();\n      this.retriesSubscription = undefined;\n    }\n\n    this.retries = undefined;\n  };\n\n  RepeatWhenSubscriber.prototype._unsubscribeAndRecycle = function () {\n    var _unsubscribe = this._unsubscribe;\n    this._unsubscribe = null;\n\n    _super.prototype._unsubscribeAndRecycle.call(this);\n\n    this._unsubscribe = _unsubscribe;\n    return this;\n  };\n\n  RepeatWhenSubscriber.prototype.subscribeToRetries = function () {\n    this.notifications = new Subject();\n    var retries;\n\n    try {\n      var notifier = this.notifier;\n      retries = notifier(this.notifications);\n    } catch (e) {\n      return _super.prototype.complete.call(this);\n    }\n\n    this.retries = retries;\n    this.retriesSubscription = innerSubscribe(retries, new SimpleInnerSubscriber(this));\n  };\n\n  return RepeatWhenSubscriber;\n}(SimpleOuterSubscriber);","map":{"version":3,"mappings":";AAGA,OAAO,KAAEA,OAAT,MAAwB,OAAxB;AAIA,SAASC,OAAT,QAAS,YAAT;AAgCA,SAAMC,qBAAN,EAA8BC,cAA9B,EAA2FC,qBAA3F,QAA2F,mBAA3F;OACE,SAAOC,UAAP,CAA6BC,QAA7B,EAAkC;AACnC;AAAA;AAAA;AAED;;IACEC,kCAAmF;WAA7DA,mBAAQD,UAAqD;AAClF;AAED;;oBACgB,WAAUE,OAAI,sBAAqBC,MAArB,EAAiC;AAC9D;AACH;;AAPA,SAOCF,kBAPD;AAcA,CAbqF;;IAa5CG,8CAA2BC,MAA3B,EAA2B;AAOlEX,0CAAYW,MAAZ;;WAAAD,qBAGEE,aAAMN,UAAYG,QACnB;AAHmB,kCAA6DG,WAA7D,KAA6D,IAA7D;;AACAC;AAJZA;;AAMP;AAED;;sBACO,wBAAiC;AACtC,SAAKC,yBAAL,GAA4B,IAA5B;AACD;AAED;;sBACW,4BAAmC,YAAE;QAC5C,mCAAqB;AACtB;AACF;AAED;;sBACO,sBAAiC,YAAC;AAEvC,SAAKA,yBAAL,GAAqB,KAArB;;QACE,MAAKC,WAAY;UACf,MAAKC;AACN;AACD;;UACE,6BAAa,KAAQC,mBAAR,CAAWC;AACzB;AAED;;AACA,WAAKC,sBAAL;;AACD;AACF;AAGD;;sBACU,sCAAe;AACvB,QAAIC,SAAJ;AAAA,QAAIC,aAAe,mBAAnB;AAAA,QAAmBJ,4CAAnB;;QACEI,eAAc;AACdA,mBAAK,YAAL;AACD;AACD;;QACEJ,qBAAoB;AACpBA,yBAAK,YAAL;AACD;AACD;;AACD;AAGD;;sBACU,oCAAsB;AAE9B,QAAIK,YAAC,GAAY,KAAQA,YAAzB;AACA,wBAAM,IAAN;;AACAX,UAAK,UAAL,CAAiBQ,sBAAjB,CAAiCX,IAAjC,CAAiC,IAAjC;;AAEA,wBAAYc,YAAZ;AACD;AAEO;;sBACD,WAAoBC,qBAAU;AACnC,SAAIF,aAAJ,GAAY,aAAZ;AACA,QAAIL,OAAJ;;QACU;AACR,kBAAU,QAASV,QAAnB;AACDU;AAAC,aACAQ;AACD;AACD;;AACA,SAAKR,OAAL,GAAKA,OAAL;AACD;AACH;;AA7EyC;CAAA","names":["tslib_1","Subject","SimpleOuterSubscriber","innerSubscribe","SimpleInnerSubscriber","repeatWhen","notifier","RepeatWhenOperator","call","source","RepeatWhenSubscriber","_super","destination","_this","sourceIsBeingSubscribedTo","isStopped","retries","retriesSubscription","closed","_unsubscribeAndRecycle","_a","notifications","_unsubscribe","subscribeToRetries","e"],"sources":["D:\\Documents\\EMA\\Mines A3\\NoSQL\\ReseauAchats\\reseau_achats\\node_modules\\rxjs\\src\\internal\\operators\\repeatWhen.ts"],"sourcesContent":["import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { Subscription } from '../Subscription';\n\nimport { MonoTypeOperatorFunction, TeardownLogic } from '../types';\nimport { SimpleOuterSubscriber, innerSubscribe, SimpleInnerSubscriber } from '../innerSubscribe';\n\n/**\n * Returns an Observable that mirrors the source Observable with the exception of a `complete`. If the source\n * Observable calls `complete`, this method will emit to the Observable returned from `notifier`. If that Observable\n * calls `complete` or `error`, then this method will call `complete` or `error` on the child subscription. Otherwise\n * this method will resubscribe to the source Observable.\n *\n * ![](repeatWhen.png)\n *\n * ## Example\n * Repeat a message stream on click\n * ```ts\n * import { of, fromEvent } from 'rxjs';\n * import { repeatWhen } from 'rxjs/operators';\n *\n * const source = of('Repeat message');\n * const documentClick$ = fromEvent(document, 'click');\n *\n * source.pipe(repeatWhen(() => documentClick$)\n * ).subscribe(data => console.log(data))\n * ```\n * @see {@link repeat}\n * @see {@link retry}\n * @see {@link retryWhen}\n *\n * @param {function(notifications: Observable): Observable} notifier - Receives an Observable of notifications with\n * which a user can `complete` or `error`, aborting the repetition.\n * @return {Observable} The source Observable modified with repeat logic.\n * @method repeatWhen\n * @owner Observable\n */\nexport function repeatWhen<T>(notifier: (notifications: Observable<any>) => Observable<any>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new RepeatWhenOperator(notifier));\n}\n\nclass RepeatWhenOperator<T> implements Operator<T, T> {\n  constructor(protected notifier: (notifications: Observable<any>) => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new RepeatWhenSubscriber(subscriber, this.notifier, source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass RepeatWhenSubscriber<T, R> extends SimpleOuterSubscriber<T, R> {\n\n  private notifications?: Subject<any>;\n  private retries?: Observable<any>;\n  private retriesSubscription?: Subscription;\n  private sourceIsBeingSubscribedTo: boolean = true;\n\n  constructor(destination: Subscriber<R>,\n              private notifier: (notifications: Observable<any>) => Observable<any>,\n              private source: Observable<T>) {\n    super(destination);\n  }\n\n  notifyNext(): void {\n    this.sourceIsBeingSubscribedTo = true;\n    this.source.subscribe(this);\n  }\n\n  notifyComplete(): void {\n    if (this.sourceIsBeingSubscribedTo === false) {\n      return super.complete();\n    }\n  }\n\n  complete() {\n    this.sourceIsBeingSubscribedTo = false;\n\n    if (!this.isStopped) {\n      if (!this.retries) {\n        this.subscribeToRetries();\n      }\n      if (!this.retriesSubscription || this.retriesSubscription.closed) {\n        return super.complete();\n      }\n\n      this._unsubscribeAndRecycle();\n      this.notifications!.next(undefined);\n    }\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _unsubscribe() {\n    const { notifications, retriesSubscription } = this;\n    if (notifications) {\n      notifications.unsubscribe();\n      this.notifications = undefined;\n    }\n    if (retriesSubscription) {\n      retriesSubscription.unsubscribe();\n      this.retriesSubscription = undefined;\n    }\n    this.retries = undefined;\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _unsubscribeAndRecycle(): Subscriber<T> {\n    const { _unsubscribe } = this;\n\n    this._unsubscribe = null!;\n    super._unsubscribeAndRecycle();\n    this._unsubscribe = _unsubscribe;\n\n    return this;\n  }\n\n  private subscribeToRetries() {\n    this.notifications = new Subject();\n    let retries;\n    try {\n      const { notifier } = this;\n      retries = notifier(this.notifications);\n    } catch (e) {\n      return super.complete();\n    }\n    this.retries = retries;\n    this.retriesSubscription = innerSubscribe(retries, new SimpleInnerSubscriber(this));\n  }\n}\n"]},"metadata":{},"sourceType":"module"}