{"ast":null,"code":"/** PURE_IMPORTS_START tslib,_innerSubscribe PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { SimpleOuterSubscriber, innerSubscribe, SimpleInnerSubscriber } from '../innerSubscribe';\nexport function debounce(durationSelector) {\n  return function (source) {\n    return source.lift(new DebounceOperator(durationSelector));\n  };\n}\n\nvar DebounceOperator = /*@__PURE__*/function () {\n  function DebounceOperator(durationSelector) {\n    this.durationSelector = durationSelector;\n  }\n\n  DebounceOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new DebounceSubscriber(subscriber, this.durationSelector));\n  };\n\n  return DebounceOperator;\n}();\n\nvar DebounceSubscriber = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(DebounceSubscriber, _super);\n\n  function DebounceSubscriber(destination, durationSelector) {\n    var _this = _super.call(this, destination) || this;\n\n    _this.durationSelector = durationSelector;\n    _this.hasValue = false;\n    return _this;\n  }\n\n  DebounceSubscriber.prototype._next = function (value) {\n    try {\n      var result = this.durationSelector.call(this, value);\n\n      if (result) {\n        this._tryNext(value, result);\n      }\n    } catch (err) {\n      this.destination.error(err);\n    }\n  };\n\n  DebounceSubscriber.prototype._complete = function () {\n    this.emitValue();\n    this.destination.complete();\n  };\n\n  DebounceSubscriber.prototype._tryNext = function (value, duration) {\n    var subscription = this.durationSubscription;\n    this.value = value;\n    this.hasValue = true;\n\n    if (subscription) {\n      subscription.unsubscribe();\n      this.remove(subscription);\n    }\n\n    subscription = innerSubscribe(duration, new SimpleInnerSubscriber(this));\n\n    if (subscription && !subscription.closed) {\n      this.add(this.durationSubscription = subscription);\n    }\n  };\n\n  DebounceSubscriber.prototype.notifyNext = function () {\n    this.emitValue();\n  };\n\n  DebounceSubscriber.prototype.notifyComplete = function () {\n    this.emitValue();\n  };\n\n  DebounceSubscriber.prototype.emitValue = function () {\n    if (this.hasValue) {\n      var value = this.value;\n      var subscription = this.durationSubscription;\n\n      if (subscription) {\n        this.durationSubscription = undefined;\n        subscription.unsubscribe();\n        this.remove(subscription);\n      }\n\n      this.value = undefined;\n      this.hasValue = false;\n\n      _super.prototype._next.call(this, value);\n    }\n  };\n\n  return DebounceSubscriber;\n}(SimpleOuterSubscriber);","map":{"version":3,"mappings":";AAKA,OAAO,KAAEA,OAAT,MAAS,OAAT;AAkDA,SAAMC,qBAAN,EAA4BC,cAA5B,EAAsFC,qBAAtF,QAAsF,mBAAtF;OACE,SAAOC,QAAP,CAAQC,gBAAR,EAAkC;AACnC;AAAA;AAAA;AAED;;IACEC,gCAAoB,YAA0D;WAA1DA,iBAAgBD;AACnC;AAED;;kBACS,CAAME,UAAUC,OAAK,sBAAmBC,MAAnB,EAA+B;AAC5D;AACH;;AAPA,SAOCH,gBAPD;AAcA,CAbsB;;IAaiBI,4CAA2BC,MAA3B,EAA2B;AAKhEX,wCAAYW,MAAZ;;WAAAD,mBAEEE,aAAMP,kBACP;AAFmB,4BAAgB,IAAhB,kBAA0D,IAA1D;;AAJZQ,6BAAiBR,gBAAjB;;AAMP;AAES;;oBACJ;QACF;AAEA,UAAIS,MAAM,GAAE,uCAAZ;;UACEA,QAAK;AACN;AACF;AAAC,aACAC,KAAK;AACN;AACF;AAES;;oBACM,WAAGC;AACjB,SAAKC,SAAL;AACD;AAEO;;oBACF,WAAoBC,qBAAqBC,KAArB,EAAqBC,QAArB,EAAqB;AAC7C,QAAIC,YAAS,GAAM,yBAAnB;AACA,SAAKF,KAAL,GAAaA,KAAb;AACA,SAAIG,QAAJ,GAAgB,IAAhB;;QACED,cAAa;AACbA,kBAAY,YAAZ;AACD;AAED;;AACAA,gBAAI,iBAAiB,WAAmB,IAAElB,qBAAF,CAAE,IAAF,CAAnB,CAArB;;QACEkB,YAAS,IAAK,sBAAuB;AACtC;AACF;AAED;;oBACgB,WAAGE;AAClB;AAED;;oBACgB,WAAGC;AAClB;AAED;;oBACW,WAAUP;QACjB,KAAMK,UAAQ;AACd,UAAMH,aAAYA,KAAlB;AACA,UAAIE,YAAY,GAAE,yBAAlB;;UACEA,cAAK;AACL,oCAA2BI,SAA3B;AACAJ,oBAAY,YAAZ;AACD;AAMD;;AACA,WAAKF,KAAL,GAAaM,SAAb;AACA;;AACDd;AACF;AACH;;AArEuC;CAAA","names":["tslib_1","SimpleOuterSubscriber","innerSubscribe","SimpleInnerSubscriber","debounce","durationSelector","DebounceOperator","prototype","call","source","DebounceSubscriber","_super","destination","_this","result","err","_complete","emitValue","_tryNext","value","duration","subscription","hasValue","notifyNext","notifyComplete","undefined"],"sources":["D:\\Documents\\EMA\\Mines A3\\NoSQL\\ReseauAchats\\reseau_achats\\node_modules\\rxjs\\src\\internal\\operators\\debounce.ts"],"sourcesContent":["import { Operator } from '../Operator';\r\nimport { Observable } from '../Observable';\r\nimport { Subscriber } from '../Subscriber';\r\nimport { Subscription } from '../Subscription';\r\nimport { MonoTypeOperatorFunction, SubscribableOrPromise, TeardownLogic } from '../types';\r\nimport { SimpleOuterSubscriber, innerSubscribe, SimpleInnerSubscriber } from '../innerSubscribe';\r\n\r\n/**\r\n * Emits a value from the source Observable only after a particular time span\r\n * determined by another Observable has passed without another source emission.\r\n *\r\n * <span class=\"informal\">It's like {@link debounceTime}, but the time span of\r\n * emission silence is determined by a second Observable.</span>\r\n *\r\n * ![](debounce.png)\r\n *\r\n * `debounce` delays values emitted by the source Observable, but drops previous\r\n * pending delayed emissions if a new value arrives on the source Observable.\r\n * This operator keeps track of the most recent value from the source\r\n * Observable, and spawns a duration Observable by calling the\r\n * `durationSelector` function. The value is emitted only when the duration\r\n * Observable emits a value or completes, and if no other value was emitted on\r\n * the source Observable since the duration Observable was spawned. If a new\r\n * value appears before the duration Observable emits, the previous value will\r\n * be dropped and will not be emitted on the output Observable.\r\n *\r\n * Like {@link debounceTime}, this is a rate-limiting operator, and also a\r\n * delay-like operator since output emissions do not necessarily occur at the\r\n * same time as they did on the source Observable.\r\n *\r\n * ## Example\r\n * Emit the most recent click after a burst of clicks\r\n * ```ts\r\n * import { fromEvent, interval } from 'rxjs';\r\n * import { debounce } from 'rxjs/operators';\r\n *\r\n * const clicks = fromEvent(document, 'click');\r\n * const result = clicks.pipe(debounce(() => interval(1000)));\r\n * result.subscribe(x => console.log(x));\r\n * ```\r\n *\r\n * @see {@link audit}\r\n * @see {@link debounceTime}\r\n * @see {@link delayWhen}\r\n * @see {@link throttle}\r\n *\r\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\r\n * that receives a value from the source Observable, for computing the timeout\r\n * duration for each source value, returned as an Observable or a Promise.\r\n * @return {Observable} An Observable that delays the emissions of the source\r\n * Observable by the specified duration Observable returned by\r\n * `durationSelector`, and may drop some values if they occur too frequently.\r\n * @method debounce\r\n * @owner Observable\r\n */\r\nexport function debounce<T>(durationSelector: (value: T) => SubscribableOrPromise<any>): MonoTypeOperatorFunction<T> {\r\n  return (source: Observable<T>) => source.lift(new DebounceOperator(durationSelector));\r\n}\r\n\r\nclass DebounceOperator<T> implements Operator<T, T> {\r\n  constructor(private durationSelector: (value: T) => SubscribableOrPromise<any>) {\r\n  }\r\n\r\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\r\n    return source.subscribe(new DebounceSubscriber(subscriber, this.durationSelector));\r\n  }\r\n}\r\n\r\n/**\r\n * We need this JSDoc comment for affecting ESDoc.\r\n * @ignore\r\n * @extends {Ignored}\r\n */\r\nclass DebounceSubscriber<T, R> extends SimpleOuterSubscriber<T, R> {\r\n  private value?: T;\r\n  private hasValue = false;\r\n  private durationSubscription?: Subscription;\r\n\r\n  constructor(destination: Subscriber<R>,\r\n              private durationSelector: (value: T) => SubscribableOrPromise<any>) {\r\n    super(destination);\r\n  }\r\n\r\n  protected _next(value: T): void {\r\n    try {\r\n      const result = this.durationSelector.call(this, value);\r\n\r\n      if (result) {\r\n        this._tryNext(value, result);\r\n      }\r\n    } catch (err) {\r\n      this.destination.error!(err);\r\n    }\r\n  }\r\n\r\n  protected _complete(): void {\r\n    this.emitValue();\r\n    this.destination.complete!();\r\n  }\r\n\r\n  private _tryNext(value: T, duration: SubscribableOrPromise<any>): void {\r\n    let subscription = this.durationSubscription;\r\n    this.value = value;\r\n    this.hasValue = true;\r\n    if (subscription) {\r\n      subscription.unsubscribe();\r\n      this.remove(subscription);\r\n    }\r\n\r\n    subscription = innerSubscribe(duration, new SimpleInnerSubscriber(this));\r\n    if (subscription && !subscription.closed) {\r\n      this.add(this.durationSubscription = subscription);\r\n    }\r\n  }\r\n\r\n  notifyNext(): void {\r\n    this.emitValue();\r\n  }\r\n\r\n  notifyComplete(): void {\r\n    this.emitValue();\r\n  }\r\n\r\n  emitValue(): void {\r\n    if (this.hasValue) {\r\n      const value = this.value;\r\n      const subscription = this.durationSubscription;\r\n      if (subscription) {\r\n        this.durationSubscription = undefined;\r\n        subscription.unsubscribe();\r\n        this.remove(subscription);\r\n      }\r\n      // This must be done *before* passing the value\r\n      // along to the destination because it's possible for\r\n      // the value to synchronously re-enter this operator\r\n      // recursively if the duration selector Observable\r\n      // emits synchronously\r\n      this.value = undefined;\r\n      this.hasValue = false;\r\n      super._next(value!);\r\n    }\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}