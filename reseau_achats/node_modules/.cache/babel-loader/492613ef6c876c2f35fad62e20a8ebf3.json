{"ast":null,"code":"/** PURE_IMPORTS_START _util_isArray,_observable_race PURE_IMPORTS_END */\nimport { isArray } from '../util/isArray';\nimport { race as raceStatic } from '../observable/race';\nexport function race() {\n  var observables = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    observables[_i] = arguments[_i];\n  }\n\n  return function raceOperatorFunction(source) {\n    if (observables.length === 1 && isArray(observables[0])) {\n      observables = observables[0];\n    }\n\n    return source.lift.call(raceStatic.apply(void 0, [source].concat(observables)));\n  };\n}","map":{"version":3,"mappings":"AACA;AAEA,SAASA,OAAT,QAAiB,iBAAjB;AAsBA,SAAMC,QAAUC,UAAhB,QAAoB,oBAApB;OAAwB;iBAAmD,GAAnD;;OAAA,mCAAmDC;;AACzE;;SAGE,SAAIC,oBAAJ,CAAgCC,MAAhC,EAAwC;QACtCC,WAAW,OAAX,KAAc,CAAd,IAA+CN,OAAC;AACjDM;AAED;;AACA;AACH","names":["isArray","race","raceStatic","_i","raceOperatorFunction","source","observables"],"sources":["D:\\Documents\\EMA\\Mines A3\\NoSQL\\ReseauAchats\\reseau_achats\\node_modules\\rxjs\\src\\internal\\operators\\race.ts"],"sourcesContent":["import { Observable } from '../Observable';\r\nimport { isArray } from '../util/isArray';\r\nimport { MonoTypeOperatorFunction, OperatorFunction } from '../types';\r\nimport { race as raceStatic } from '../observable/race';\r\n\r\n/* tslint:disable:max-line-length */\r\n/** @deprecated Deprecated in favor of static race. */\r\nexport function race<T>(observables: Array<Observable<T>>): MonoTypeOperatorFunction<T>;\r\n/** @deprecated Deprecated in favor of static race. */\r\nexport function race<T, R>(observables: Array<Observable<T>>): OperatorFunction<T, R>;\r\n/** @deprecated Deprecated in favor of static race. */\r\nexport function race<T>(...observables: Array<Observable<T> | Array<Observable<T>>>): MonoTypeOperatorFunction<T>;\r\n/** @deprecated Deprecated in favor of static race. */\r\nexport function race<T, R>(...observables: Array<Observable<any> | Array<Observable<any>>>): OperatorFunction<T, R>;\r\n/* tslint:enable:max-line-length */\r\n\r\n/**\r\n * Returns an Observable that mirrors the first source Observable to emit a next,\r\n * error or complete notification from the combination of this Observable and supplied Observables.\r\n * @param {...Observables} ...observables Sources used to race for which Observable emits first.\r\n * @return {Observable} An Observable that mirrors the output of the first Observable to emit an item.\r\n * @method race\r\n * @owner Observable\r\n * @deprecated Deprecated in favor of static {@link race}.\r\n */\r\nexport function race<T>(...observables: (Observable<T> | Observable<T>[])[]): MonoTypeOperatorFunction<T> {\r\n  return function raceOperatorFunction(source: Observable<T>) {\r\n    // if the only argument is an array, it was most likely called with\r\n    // `pair([obs1, obs2, ...])`\r\n    if (observables.length === 1 && isArray(observables[0])) {\r\n      observables = observables[0] as Observable<T>[];\r\n    }\r\n\r\n    return source.lift.call(raceStatic(source, ...(observables as Observable<T>[])));\r\n  };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}