{"ast":null,"code":"\"use strict\";\n/**\r\n * Copyright (c) \"Neo4j\"\r\n * Neo4j Sweden AB [http://neo4j.com]\r\n *\r\n * This file is part of Neo4j.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\r\n * Inteface define a common way to acquire a connection\r\n *\r\n * @private\r\n */\n\nvar ConnectionProvider =\n/** @class */\nfunction () {\n  function ConnectionProvider() {}\n  /**\r\n   * This method acquires a connection against the specified database.\r\n   *\r\n   * Access mode and Bookmarks only applies to routing driver. Access mode only\r\n   * differentiates the target server for the connection, where WRITE selects a\r\n   * WRITER server, whereas READ selects a READ server. Bookmarks, when specified,\r\n   * is only passed to the routing discovery procedure, for the system database to\r\n   * synchronize on creation of databases and is never used in direct drivers.\r\n   *\r\n   * @param {object} param - object parameter\r\n   * @property {string} param.accessMode - the access mode for the to-be-acquired connection\r\n   * @property {string} param.database - the target database for the to-be-acquired connection\r\n   * @property {Bookmark} param.bookmarks - the bookmarks to send to routing discovery\r\n   * @property {string} param.impersonatedUser - the impersonated user\r\n   * @property {function (databaseName:string?)} param.onDatabaseNameResolved - Callback called when the database name get resolved\r\n   */\n\n\n  ConnectionProvider.prototype.acquireConnection = function (param) {\n    throw Error('Not implemented');\n  };\n  /**\r\n   * This method checks whether the backend database supports multi database functionality\r\n   * by checking protocol handshake result.\r\n   *\r\n   * @returns {Promise<boolean>}\r\n   */\n\n\n  ConnectionProvider.prototype.supportsMultiDb = function () {\n    throw Error('Not implemented');\n  };\n  /**\r\n   * This method checks whether the backend database supports transaction config functionality\r\n   * by checking protocol handshake result.\r\n   *\r\n   * @returns {Promise<boolean>}\r\n   */\n\n\n  ConnectionProvider.prototype.supportsTransactionConfig = function () {\n    throw Error('Not implemented');\n  };\n  /**\r\n   * This method checks whether the backend database supports transaction config functionality\r\n   * by checking protocol handshake result.\r\n   *\r\n   * @returns {Promise<boolean>}\r\n   */\n\n\n  ConnectionProvider.prototype.supportsUserImpersonation = function () {\n    throw Error('Not implemented');\n  };\n  /**\r\n   * Closes this connection provider along with its internals (connections, pools, etc.)\r\n   *\r\n   * @returns {Promise<void>}\r\n   */\n\n\n  ConnectionProvider.prototype.close = function () {\n    throw Error('Not implemented');\n  };\n\n  return ConnectionProvider;\n}();\n\nexports.default = ConnectionProvider;","map":{"version":3,"sources":["D:/Documents/EMA/Mines A3/NoSQL/ReseauAchats/reseau_achats/node_modules/neo4j-driver-core/lib/connection-provider.js"],"names":["Object","defineProperty","exports","value","ConnectionProvider","prototype","acquireConnection","param","Error","supportsMultiDb","supportsTransactionConfig","supportsUserImpersonation","close","default"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,kBAAkB;AAAG;AAAe,YAAY;AAChD,WAASA,kBAAT,GAA8B,CAC7B;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIA,EAAAA,kBAAkB,CAACC,SAAnB,CAA6BC,iBAA7B,GAAiD,UAAUC,KAAV,EAAiB;AAC9D,UAAMC,KAAK,CAAC,iBAAD,CAAX;AACH,GAFD;AAGA;AACJ;AACA;AACA;AACA;AACA;;;AACIJ,EAAAA,kBAAkB,CAACC,SAAnB,CAA6BI,eAA7B,GAA+C,YAAY;AACvD,UAAMD,KAAK,CAAC,iBAAD,CAAX;AACH,GAFD;AAGA;AACJ;AACA;AACA;AACA;AACA;;;AACIJ,EAAAA,kBAAkB,CAACC,SAAnB,CAA6BK,yBAA7B,GAAyD,YAAY;AACjE,UAAMF,KAAK,CAAC,iBAAD,CAAX;AACH,GAFD;AAGA;AACJ;AACA;AACA;AACA;AACA;;;AACIJ,EAAAA,kBAAkB,CAACC,SAAnB,CAA6BM,yBAA7B,GAAyD,YAAY;AACjE,UAAMH,KAAK,CAAC,iBAAD,CAAX;AACH,GAFD;AAGA;AACJ;AACA;AACA;AACA;;;AACIJ,EAAAA,kBAAkB,CAACC,SAAnB,CAA6BO,KAA7B,GAAqC,YAAY;AAC7C,UAAMJ,KAAK,CAAC,iBAAD,CAAX;AACH,GAFD;;AAGA,SAAOJ,kBAAP;AACH,CA1DuC,EAAxC;;AA2DAF,OAAO,CAACW,OAAR,GAAkBT,kBAAlB","sourcesContent":["\"use strict\";\r\n/**\r\n * Copyright (c) \"Neo4j\"\r\n * Neo4j Sweden AB [http://neo4j.com]\r\n *\r\n * This file is part of Neo4j.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n * Inteface define a common way to acquire a connection\r\n *\r\n * @private\r\n */\r\nvar ConnectionProvider = /** @class */ (function () {\r\n    function ConnectionProvider() {\r\n    }\r\n    /**\r\n     * This method acquires a connection against the specified database.\r\n     *\r\n     * Access mode and Bookmarks only applies to routing driver. Access mode only\r\n     * differentiates the target server for the connection, where WRITE selects a\r\n     * WRITER server, whereas READ selects a READ server. Bookmarks, when specified,\r\n     * is only passed to the routing discovery procedure, for the system database to\r\n     * synchronize on creation of databases and is never used in direct drivers.\r\n     *\r\n     * @param {object} param - object parameter\r\n     * @property {string} param.accessMode - the access mode for the to-be-acquired connection\r\n     * @property {string} param.database - the target database for the to-be-acquired connection\r\n     * @property {Bookmark} param.bookmarks - the bookmarks to send to routing discovery\r\n     * @property {string} param.impersonatedUser - the impersonated user\r\n     * @property {function (databaseName:string?)} param.onDatabaseNameResolved - Callback called when the database name get resolved\r\n     */\r\n    ConnectionProvider.prototype.acquireConnection = function (param) {\r\n        throw Error('Not implemented');\r\n    };\r\n    /**\r\n     * This method checks whether the backend database supports multi database functionality\r\n     * by checking protocol handshake result.\r\n     *\r\n     * @returns {Promise<boolean>}\r\n     */\r\n    ConnectionProvider.prototype.supportsMultiDb = function () {\r\n        throw Error('Not implemented');\r\n    };\r\n    /**\r\n     * This method checks whether the backend database supports transaction config functionality\r\n     * by checking protocol handshake result.\r\n     *\r\n     * @returns {Promise<boolean>}\r\n     */\r\n    ConnectionProvider.prototype.supportsTransactionConfig = function () {\r\n        throw Error('Not implemented');\r\n    };\r\n    /**\r\n     * This method checks whether the backend database supports transaction config functionality\r\n     * by checking protocol handshake result.\r\n     *\r\n     * @returns {Promise<boolean>}\r\n     */\r\n    ConnectionProvider.prototype.supportsUserImpersonation = function () {\r\n        throw Error('Not implemented');\r\n    };\r\n    /**\r\n     * Closes this connection provider along with its internals (connections, pools, etc.)\r\n     *\r\n     * @returns {Promise<void>}\r\n     */\r\n    ConnectionProvider.prototype.close = function () {\r\n        throw Error('Not implemented');\r\n    };\r\n    return ConnectionProvider;\r\n}());\r\nexports.default = ConnectionProvider;\r\n"]},"metadata":{},"sourceType":"script"}